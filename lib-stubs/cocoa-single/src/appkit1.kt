// generated from "/System/Library/Frameworks/AppKit.framework/Headers/AppKit.h"

[file: suppress("UNCHECKED_CAST")]

package objc

import kni.objc.*


object interopConfig {
    public var nativeLibraryPath: String = "/System/Library/Frameworks/AppKit.framework/Versions/C/Resources/BridgeSupport/AppKit.dylib"
}

trait NSObjectProtocol {
    trait metaclass
}

trait OS_dispatch_object {
    trait metaclass
}

trait OS_dispatch_queue {
    trait metaclass
}

trait OS_dispatch_queue_attr {
    trait metaclass
}

trait OS_dispatch_source {
    trait metaclass
}

trait OS_dispatch_group {
    trait metaclass
}

trait OS_dispatch_semaphore {
    trait metaclass
}

trait OS_dispatch_data {
    trait metaclass
}

trait OS_dispatch_io {
    trait metaclass
}

trait NSCopying {
    trait metaclass
}

trait NSMutableCopying {
    trait metaclass
}

trait NSCoding {
    trait metaclass
}

trait NSSecureCoding {
    trait metaclass
}

trait NSDiscardableContent {
    trait metaclass
}

trait NSFastEnumeration {
    trait metaclass
}

trait NSDecimalNumberBehaviors {
    trait metaclass
}

trait NSFileManagerDelegate {
    trait metaclass
}

trait NSKeyedArchiverDelegate {
    trait metaclass
}

trait NSKeyedUnarchiverDelegate {
    trait metaclass
}

trait NSLocking {
    trait metaclass
}

trait NSPortDelegate {
    trait metaclass
}

trait NSMachPortDelegate {
    trait metaclass
}

trait NSStreamDelegate {
    trait metaclass
}

trait NSURLHandleClient {
    trait metaclass
}

trait NSURLAuthenticationChallengeSender {
    trait metaclass
}

trait NSURLConnectionDelegate {
    trait metaclass
}

trait NSURLConnectionDataDelegate {
    trait metaclass
}

trait NSURLConnectionDownloadDelegate {
    trait metaclass
}

trait NSURLProtocolClient {
    trait metaclass
}

trait NSXMLParserDelegate {
    trait metaclass
}

trait NSCacheDelegate {
    trait metaclass
}

trait NSExtensionRequestHandling {
    trait metaclass
}

trait NSFilePresenter {
    trait metaclass
}

trait NSMetadataQueryDelegate {
    trait metaclass
}

trait NSNetServiceDelegate {
    trait metaclass
}

trait NSNetServiceBrowserDelegate {
    trait metaclass
}

trait NSURLSessionDelegate {
    trait metaclass
}

trait NSURLSessionTaskDelegate {
    trait metaclass
}

trait NSURLSessionDataDelegate {
    trait metaclass
}

trait NSURLSessionDownloadDelegate {
    trait metaclass
}

trait NSUserActivityDelegate {
    trait metaclass
}

trait NSConnectionDelegate {
    trait metaclass
}

trait NSURLDownloadDelegate {
    trait metaclass
}

trait OS_xpc_object {
    trait metaclass
}

trait NSSpellServerDelegate {
    trait metaclass
}

trait NSUserNotificationCenterDelegate {
    trait metaclass
}

trait NSXPCProxyCreating {
    trait metaclass
}

trait NSXPCListenerDelegate {
    trait metaclass
}

trait NSAccessibilityElementProtocol {
    trait metaclass
}

trait NSAccessibilityGroup {
    trait metaclass
}

trait NSAccessibilityButton {
    trait metaclass
}

trait NSAccessibilitySwitch {
    trait metaclass
}

trait NSAccessibilityRadioButton {
    trait metaclass
}

trait NSAccessibilityCheckBox {
    trait metaclass
}

trait NSAccessibilityStaticText {
    trait metaclass
}

trait NSAccessibilityNavigableStaticText {
    trait metaclass
}

trait NSAccessibilityProgressIndicator {
    trait metaclass
}

trait NSAccessibilityStepper {
    trait metaclass
}

trait NSAccessibilitySlider {
    trait metaclass
}

trait NSAccessibilityImage {
    trait metaclass
}

trait NSAccessibilityContainsTransientUI {
    trait metaclass
}

trait NSAccessibilityTable {
    trait metaclass
}

trait NSAccessibilityOutline {
    trait metaclass
}

trait NSAccessibilityList {
    trait metaclass
}

trait NSAccessibilityRow {
    trait metaclass
}

trait NSAccessibilityLayoutArea {
    trait metaclass
}

trait NSAccessibilityLayoutItem {
    trait metaclass
}

trait NSAccessibility {
    trait metaclass
}

trait NSValidatedUserInterfaceItem {
    trait metaclass
}

trait NSUserInterfaceValidations {
    trait metaclass
}

trait NSApplicationDelegate {
    trait metaclass
}

trait NSServicesMenuRequestor {
    trait metaclass
}

trait NSAnimationDelegate {
    trait metaclass
}

trait NSAnimatablePropertyContainer {
    trait metaclass
}

trait NSUserInterfaceItemIdentification {
    trait metaclass
}

trait NSDraggingInfo {
    trait metaclass
}

trait NSDraggingDestination {
    trait metaclass
}

trait NSDraggingSource {
    trait metaclass
}

trait NSAppearanceCustomization {
    trait metaclass
}

trait NSChangeSpelling {
    trait metaclass
}

trait NSIgnoreMisspelledWords {
    trait metaclass
}

trait NSTextDelegate {
    trait metaclass
}

trait NSAlertDelegate {
    trait metaclass
}

trait NSControlTextEditingDelegate {
    trait metaclass
}

trait NSDockTilePlugIn {
    trait metaclass
}

trait NSWindowDelegate {
    trait metaclass
}

trait NSMatrixDelegate {
    trait metaclass
}

trait NSMenuDelegate {
    trait metaclass
}

trait NSPasteboardWriting {
    trait metaclass
}

trait NSPasteboardReading {
    trait metaclass
}

trait NSPopoverDelegate {
    trait metaclass
}

trait NSSeguePerforming {
    trait metaclass
}

trait NSViewControllerPresentationAnimator {
    trait metaclass
}

trait NSBrowserDelegate {
    trait metaclass
}

trait NSColorPickingDefault {
    trait metaclass
}

trait NSColorPickingCustom {
    trait metaclass
}

trait NSGestureRecognizerDelegate {
    trait metaclass
}

trait NSImageDelegate {
    trait metaclass
}

trait NSSpeechRecognizerDelegate {
    trait metaclass
}

trait NSSpeechSynthesizerDelegate {
    trait metaclass
}

trait NSSplitViewDelegate {
    trait metaclass
}

trait NSOpenSavePanelDelegate {
    trait metaclass
}

trait NSPasteboardItemDataProvider {
    trait metaclass
}

trait NSPrintPanelAccessorizing {
    trait metaclass
}

trait NSTextFinderClient {
    trait metaclass
}

trait NSTextFinderBarContainer {
    trait metaclass
}

trait NSSharingServiceDelegate {
    trait metaclass
}

trait NSSharingServicePickerDelegate {
    trait metaclass
}

trait NSStackViewDelegate {
    trait metaclass
}

trait NSTextFieldDelegate {
    trait metaclass
}

trait NSGlyphStorage {
    trait metaclass
}

trait NSTextStorageDelegate {
    trait metaclass
}

trait NSTextLayoutOrientationProvider {
    trait metaclass
}

trait NSLayoutManagerDelegate {
    trait metaclass
}

trait NSTokenFieldCellDelegate {
    trait metaclass
}

trait NSTokenFieldDelegate {
    trait metaclass
}

trait NSComboBoxDataSource {
    trait metaclass
}

trait NSComboBoxDelegate {
    trait metaclass
}

trait NSComboBoxCellDataSource {
    trait metaclass
}

trait NSTextInput {
    trait metaclass
}

trait NSTextAttachmentCellProtocol {
    trait metaclass
}

trait NSTextInputClient {
    trait metaclass
}

trait NSTextViewDelegate {
    trait metaclass
}

trait NSTableViewDelegate {
    trait metaclass
}

trait NSTableViewDataSource {
    trait metaclass
}

trait NSOutlineViewDataSource {
    trait metaclass
}

trait NSOutlineViewDelegate {
    trait metaclass
}

trait NSInputServiceProvider {
    trait metaclass
}

trait NSInputServerMouseTracker {
    trait metaclass
}

trait NSTabViewDelegate {
    trait metaclass
}

trait NSToolbarDelegate {
    trait metaclass
}

trait NSSoundDelegate {
    trait metaclass
}

trait NSDrawerDelegate {
    trait metaclass
}

trait CAMediaTiming {
    trait metaclass
}

trait CAAction {
    trait metaclass
}

trait NSDatePickerCellDelegate {
    trait metaclass
}

trait NSRuleEditorDelegate {
    trait metaclass
}

trait NSPathCellDelegate {
    trait metaclass
}

trait NSPathControlDelegate {
    trait metaclass
}

trait NSPageControllerDelegate {
    trait metaclass
}

trait NSCollectionViewDelegate {
    trait metaclass
}

trait NSUserInterfaceItemSearching {
    trait metaclass
}

trait NSWindowRestoration {
    trait metaclass
}

trait NSMenuItemProtocol {
    trait metaclass
}

public open class NSObject(pointer: Long) : ObjCObject(pointer), NSObjectProtocol, NSObject_NSCoderMethods, NSObject_NSDeprecatedMethods, NSObject_NSDiscardableContentProxy, NSObject_NSErrorRecoveryAttempting, NSObject_NSCopyLinkMoveHandler, NSObject_NSKeyValueCoding, NSObject_NSDeprecatedKeyValueCoding, NSObject_NSKeyValueObserving, NSObject_NSKeyValueObserverRegistration, NSObject_NSKeyValueObserverNotification, NSObject_NSKeyValueObservingCustomization, NSObject_NSDeprecatedKeyValueObservingCustomization, NSObject_NSKeyedArchiverObjectSubstitution, NSObject_NSKeyedUnarchiverObjectSubstitution, NSObject_NSDelayedPerforming, NSObject_NSThreadPerformAdditions, NSObject_NSURLClient, NSObject_NSArchiverCallback, NSObject_NSDistributedObjects, NSObject_NSClassDescriptionPrimitives, NSObject_NSScripting, NSObject_NSScriptClassDescription, NSObject_NSScriptKeyValueCoding, NSObject_NSScriptObjectSpecifiers, NSObject_NSComparisonMethods, NSObject_NSScriptingComparisonMethods, NSObject_NSAccessibility, NSObject_NSAccessibilityAdditions, NSObject_NSDraggingSourceDeprecated, NSObject_NSLayerDelegateContentsScaleUpdating, NSObject_NSToolTipOwner, NSObject_NSControlSubclassNotifications, NSObject_NSFontManagerDelegate, NSObject_NSFontManagerResponderMethod, NSObject_NSFontPanelValidationAdditions, NSObject_NSMenuValidation, NSObject_NSPasteboardOwner, NSObject_NSColorPanelResponderMethod, NSObject_NSNibAwaking, NSObject_NSSavePanelDelegateDeprecated, NSObject_NSTableViewDataSourceDeprecated, NSObject_CALayoutManager, NSObject_CALayerDelegate, NSObject_NSApplicationScriptingDelegation, NSObject_NSToolbarItemValidation, NSObject_NSKeyValueBindingCreation, NSObject_NSPlaceholders, NSObject_NSEditorRegistration, NSObject_NSEditor, NSObject_NSDictionaryControllerKeyValuePair {
    public open fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun dealloc(): Unit {
        Native.objc_msgSend("void", this, "dealloc")
    }

    public open fun copy(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "copy") as ObjCObject

    public open fun mutableCopy(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "mutableCopy") as ObjCObject

    public open fun methodForSelector(aSelector: ObjCSelector): (Any, ObjCSelector) -> Any =
        Native.objc_msgSend("class kotlin.Function2", this, "methodForSelector:", aSelector) as (Any, ObjCSelector) -> Any

    public open fun doesNotRecognizeSelector(aSelector: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "doesNotRecognizeSelector:", aSelector)
    }

    public open fun forwardingTargetForSelector(aSelector: ObjCSelector): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "forwardingTargetForSelector:", aSelector) as ObjCObject

    public open fun forwardInvocation(anInvocation: NSInvocation): Unit {
        Native.objc_msgSend("void", this, "forwardInvocation:", anInvocation)
    }

    public open fun methodSignatureForSelector(aSelector: ObjCSelector): NSMethodSignature =
        Native.objc_msgSend("class objc.NSMethodSignature", this, "methodSignatureForSelector:", aSelector) as NSMethodSignature

    public open fun allowsWeakReference(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsWeakReference") as Boolean

    public open fun retainWeakReference(): Boolean =
        Native.objc_msgSend("boolean", this, "retainWeakReference") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : IObjCObject, NSObjectProtocol.metaclass, NSObject_NSCoderMethods.metaclass, NSObject_NSDeprecatedMethods.metaclass, NSObject_NSDiscardableContentProxy.metaclass, NSObject_NSErrorRecoveryAttempting.metaclass, NSObject_NSCopyLinkMoveHandler.metaclass, NSObject_NSKeyValueCoding.metaclass, NSObject_NSDeprecatedKeyValueCoding.metaclass, NSObject_NSKeyValueObserving.metaclass, NSObject_NSKeyValueObserverRegistration.metaclass, NSObject_NSKeyValueObserverNotification.metaclass, NSObject_NSKeyValueObservingCustomization.metaclass, NSObject_NSDeprecatedKeyValueObservingCustomization.metaclass, NSObject_NSKeyedArchiverObjectSubstitution.metaclass, NSObject_NSKeyedUnarchiverObjectSubstitution.metaclass, NSObject_NSDelayedPerforming.metaclass, NSObject_NSThreadPerformAdditions.metaclass, NSObject_NSURLClient.metaclass, NSObject_NSArchiverCallback.metaclass, NSObject_NSDistributedObjects.metaclass, NSObject_NSClassDescriptionPrimitives.metaclass, NSObject_NSScripting.metaclass, NSObject_NSScriptClassDescription.metaclass, NSObject_NSScriptKeyValueCoding.metaclass, NSObject_NSScriptObjectSpecifiers.metaclass, NSObject_NSComparisonMethods.metaclass, NSObject_NSScriptingComparisonMethods.metaclass, NSObject_NSAccessibility.metaclass, NSObject_NSAccessibilityAdditions.metaclass, NSObject_NSDraggingSourceDeprecated.metaclass, NSObject_NSLayerDelegateContentsScaleUpdating.metaclass, NSObject_NSToolTipOwner.metaclass, NSObject_NSControlSubclassNotifications.metaclass, NSObject_NSFontManagerDelegate.metaclass, NSObject_NSFontManagerResponderMethod.metaclass, NSObject_NSFontPanelValidationAdditions.metaclass, NSObject_NSMenuValidation.metaclass, NSObject_NSPasteboardOwner.metaclass, NSObject_NSColorPanelResponderMethod.metaclass, NSObject_NSNibAwaking.metaclass, NSObject_NSSavePanelDelegateDeprecated.metaclass, NSObject_NSTableViewDataSourceDeprecated.metaclass, NSObject_CALayoutManager.metaclass, NSObject_CALayerDelegate.metaclass, NSObject_NSApplicationScriptingDelegation.metaclass, NSObject_NSToolbarItemValidation.metaclass, NSObject_NSKeyValueBindingCreation.metaclass, NSObject_NSPlaceholders.metaclass, NSObject_NSEditorRegistration.metaclass, NSObject_NSEditor.metaclass, NSObject_NSDictionaryControllerKeyValuePair.metaclass {
        public open fun load(): Unit {
            Native.objc_msgSend("void", this, "load")
        }

        public open fun initialize(): Unit {
            Native.objc_msgSend("void", this, "initialize")
        }

        public open fun new(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "new") as ObjCObject

        public open fun allocWithZone(zone: Pointer<Any>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "allocWithZone:", zone) as ObjCObject

        public open fun alloc(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "alloc") as ObjCObject

        public open fun copyWithZone(zone: Pointer<Any>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "copyWithZone:", zone) as ObjCObject

        public open fun mutableCopyWithZone(zone: Pointer<Any>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "mutableCopyWithZone:", zone) as ObjCObject

        public open fun instancesRespondToSelector(aSelector: ObjCSelector): Boolean =
            Native.objc_msgSend("boolean", this, "instancesRespondToSelector:", aSelector) as Boolean

        public open fun conformsToProtocol(protocol: Any?): Boolean =
            Native.objc_msgSend("boolean", this, "conformsToProtocol:", protocol) as Boolean

        public open fun instanceMethodForSelector(aSelector: ObjCSelector): (Any, ObjCSelector) -> Any =
            Native.objc_msgSend("class kotlin.Function2", this, "instanceMethodForSelector:", aSelector) as (Any, ObjCSelector) -> Any

        public open fun instanceMethodSignatureForSelector(aSelector: ObjCSelector): NSMethodSignature =
            Native.objc_msgSend("class objc.NSMethodSignature", this, "instanceMethodSignatureForSelector:", aSelector) as NSMethodSignature

        public open fun isSubclassOfClass(aClass: ObjCClass): Boolean =
            Native.objc_msgSend("boolean", this, "isSubclassOfClass:", aClass) as Boolean

        public open fun resolveClassMethod(sel: ObjCSelector): Boolean =
            Native.objc_msgSend("boolean", this, "resolveClassMethod:", sel) as Boolean

        public open fun resolveInstanceMethod(sel: ObjCSelector): Boolean =
            Native.objc_msgSend("boolean", this, "resolveInstanceMethod:", sel) as Boolean

        public open fun hash(): Int =
            Native.objc_msgSend("int", this, "hash") as Int

        public open fun superclass(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "superclass") as ObjCClass

        public open fun `class`(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "class") as ObjCClass

        public open fun description(): NSString =
            Native.objc_msgSend("class objc.NSString", this, "description") as NSString

        public open fun debugDescription(): NSString =
            Native.objc_msgSend("class objc.NSString", this, "debugDescription") as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSObject")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSEnumerator(pointer: Long) : NSObject(pointer), NSFastEnumeration, NSEnumerator_NSExtendedEnumerator {
    public open fun nextObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "nextObject") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSFastEnumeration.metaclass, NSEnumerator_NSExtendedEnumerator.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSEnumerator")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSValue(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding, NSValue_NSValueCreation, NSValue_NSValueExtensionMethods, NSValue_NSValueRangeExtensions, NSValue_NSValueGeometryExtensions, NSValue_CATransform3DAdditions {
    public open fun getValue(value: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "getValue:", value)
    }

    public open fun objCType(): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "objCType") as Pointer<Char>

    public open fun initWithBytes_objCType(value: Pointer<Unit>, type: Pointer<Char>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBytes:objCType:", value, type) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass, NSValue_NSValueCreation.metaclass, NSValue_NSValueExtensionMethods.metaclass, NSValue_NSValueRangeExtensions.metaclass, NSValue_NSValueGeometryExtensions.metaclass, NSValue_CATransform3DAdditions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSValue")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNumber(pointer: Long) : NSValue(pointer), NSNumber_NSNumberCreation, NSNumber_NSDecimalNumberExtensions {
    override fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    public open fun initWithChar(value: Char): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithChar:", value) as NSNumber

    public open fun initWithUnsignedChar(value: Byte): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithUnsignedChar:", value) as NSNumber

    public open fun initWithShort(value: Short): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithShort:", value) as NSNumber

    public open fun initWithUnsignedShort(value: Short): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithUnsignedShort:", value) as NSNumber

    public open fun initWithInt(value: Int): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithInt:", value) as NSNumber

    public open fun initWithUnsignedInt(value: Int): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithUnsignedInt:", value) as NSNumber

    public open fun initWithLong(value: Int): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithLong:", value) as NSNumber

    public open fun initWithUnsignedLong(value: Int): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithUnsignedLong:", value) as NSNumber

    public open fun initWithLongLong(value: Long): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithLongLong:", value) as NSNumber

    public open fun initWithUnsignedLongLong(value: Long): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithUnsignedLongLong:", value) as NSNumber

    public open fun initWithFloat(value: Float): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithFloat:", value) as NSNumber

    public open fun initWithDouble(value: Double): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithDouble:", value) as NSNumber

    public open fun initWithBool(value: Boolean): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithBool:", value) as NSNumber

    public open fun initWithInteger(value: Int): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithInteger:", value) as NSNumber

    public open fun initWithUnsignedInteger(value: Int): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "initWithUnsignedInteger:", value) as NSNumber

    public open fun charValue(): Char =
        Native.objc_msgSend("char", this, "charValue") as Char

    public open fun unsignedCharValue(): Byte =
        Native.objc_msgSend("class objc.Byte", this, "unsignedCharValue") as Byte

    public open fun shortValue(): Short =
        Native.objc_msgSend("short", this, "shortValue") as Short

    public open fun unsignedShortValue(): Short =
        Native.objc_msgSend("short", this, "unsignedShortValue") as Short

    public open fun intValue(): Int =
        Native.objc_msgSend("int", this, "intValue") as Int

    public open fun unsignedIntValue(): Int =
        Native.objc_msgSend("int", this, "unsignedIntValue") as Int

    public open fun longValue(): Int =
        Native.objc_msgSend("int", this, "longValue") as Int

    public open fun unsignedLongValue(): Int =
        Native.objc_msgSend("int", this, "unsignedLongValue") as Int

    public open fun longLongValue(): Long =
        Native.objc_msgSend("long", this, "longLongValue") as Long

    public open fun unsignedLongLongValue(): Long =
        Native.objc_msgSend("long", this, "unsignedLongLongValue") as Long

    public open fun floatValue(): Float =
        Native.objc_msgSend("float", this, "floatValue") as Float

    public open fun doubleValue(): Double =
        Native.objc_msgSend("double", this, "doubleValue") as Double

    public open fun boolValue(): Boolean =
        Native.objc_msgSend("boolean", this, "boolValue") as Boolean

    public open fun integerValue(): Int =
        Native.objc_msgSend("int", this, "integerValue") as Int

    public open fun unsignedIntegerValue(): Int =
        Native.objc_msgSend("int", this, "unsignedIntegerValue") as Int

    public open fun stringValue(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringValue") as NSString

    public open fun compare(otherNumber: NSNumber): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:", otherNumber)

    public open fun isEqualToNumber(number: NSNumber): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToNumber:", number) as Boolean

    public open fun descriptionWithLocale(locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:", locale) as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSValue.metaclass, NSNumber_NSNumberCreation.metaclass, NSNumber_NSDecimalNumberExtensions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSNumber")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSArray(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration, NSArray_NSExtendedArray, NSArray_NSArrayCreation, NSArray_NSDeprecated, NSArray_NSArrayPathExtensions, NSArray_NSKeyValueCoding, NSArray_NSKeyValueObserverRegistration, NSArray_NSSortDescriptorSorting, NSArray_NSPredicateSupport {
    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun objectAtIndex(index: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectAtIndex:", index) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithObjects_count(objects: Any, cnt: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjects:count:", objects, cnt) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    override fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    override fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass, NSFastEnumeration.metaclass, NSArray_NSExtendedArray.metaclass, NSArray_NSArrayCreation.metaclass, NSArray_NSDeprecated.metaclass, NSArray_NSArrayPathExtensions.metaclass, NSArray_NSKeyValueCoding.metaclass, NSArray_NSKeyValueObserverRegistration.metaclass, NSArray_NSSortDescriptorSorting.metaclass, NSArray_NSPredicateSupport.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSArray")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableArray(pointer: Long) : NSArray(pointer), NSMutableArray_NSExtendedMutableArray, NSMutableArray_NSMutableArrayCreation, NSMutableArray_NSSortDescriptorSorting, NSMutableArray_NSPredicateSupport {
    public open fun addObject(anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", anObject)
    }

    public open fun insertObject_atIndex(anObject: ObjCObject, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertObject:atIndex:", anObject, index)
    }

    public open fun removeLastObject(): Unit {
        Native.objc_msgSend("void", this, "removeLastObject")
    }

    public open fun removeObjectAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeObjectAtIndex:", index)
    }

    public open fun replaceObjectAtIndex_withObject(index: Int, anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "replaceObjectAtIndex:withObject:", index, anObject)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCapacity(numItems: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCapacity:", numItems) as ObjCObject

    override fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    override fun initWithContentsOfFile(path: NSString): NSMutableArray =
        Native.objc_msgSend("class objc.NSMutableArray", this, "initWithContentsOfFile:", path) as NSMutableArray

    override fun initWithContentsOfURL(url: NSURL): NSMutableArray =
        Native.objc_msgSend("class objc.NSMutableArray", this, "initWithContentsOfURL:", url) as NSMutableArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    override fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    override fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSArray.metaclass, NSMutableArray_NSExtendedMutableArray.metaclass, NSMutableArray_NSMutableArrayCreation.metaclass, NSMutableArray_NSSortDescriptorSorting.metaclass, NSMutableArray_NSPredicateSupport.metaclass {
        override fun arrayWithContentsOfFile(path: NSString): NSMutableArray =
            Native.objc_msgSend("class objc.NSMutableArray", this, "arrayWithContentsOfFile:", path) as NSMutableArray

        override fun arrayWithContentsOfURL(url: NSURL): NSMutableArray =
            Native.objc_msgSend("class objc.NSMutableArray", this, "arrayWithContentsOfURL:", url) as NSMutableArray

    }

    companion object : NSObject(Native.objc_getClass("NSMutableArray")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAutoreleasePool(pointer: Long) : NSObject(pointer) {
    public open fun addObject(anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", anObject)
    }

    public open fun drain(): Unit {
        Native.objc_msgSend("void", this, "drain")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun addObject(anObject: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "addObject:", anObject)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSAutoreleasePool")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSBundle(pointer: Long) : NSObject(pointer), NSBundle_NSBundleHelpExtension, NSBundle_NSBundleImageExtension, NSBundle_NSNibLoading, NSBundle_NSNibLoadingDeprecated, NSBundle_NSBundleSoundExtensions {
    public open fun initWithPath(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPath:", path) as ObjCObject

    public open fun initWithURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:", url) as ObjCObject

    public open fun load(): Boolean =
        Native.objc_msgSend("boolean", this, "load") as Boolean

    public open fun isLoaded(): Boolean =
        Native.objc_msgSend("boolean", this, "isLoaded") as Boolean

    public open fun unload(): Boolean =
        Native.objc_msgSend("boolean", this, "unload") as Boolean

    public open fun preflightAndReturnError(error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "preflightAndReturnError:", error) as Boolean

    public open fun loadAndReturnError(error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "loadAndReturnError:", error) as Boolean

    public open fun bundleURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "bundleURL") as NSURL

    public open fun resourceURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "resourceURL") as NSURL

    public open fun executableURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "executableURL") as NSURL

    public open fun URLForAuxiliaryExecutable(executableName: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForAuxiliaryExecutable:", executableName) as NSURL

    public open fun privateFrameworksURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "privateFrameworksURL") as NSURL

    public open fun sharedFrameworksURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "sharedFrameworksURL") as NSURL

    public open fun sharedSupportURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "sharedSupportURL") as NSURL

    public open fun builtInPlugInsURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "builtInPlugInsURL") as NSURL

    public open fun appStoreReceiptURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "appStoreReceiptURL") as NSURL

    public open fun bundlePath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "bundlePath") as NSString

    public open fun resourcePath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "resourcePath") as NSString

    public open fun executablePath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "executablePath") as NSString

    public open fun pathForAuxiliaryExecutable(executableName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathForAuxiliaryExecutable:", executableName) as NSString

    public open fun privateFrameworksPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "privateFrameworksPath") as NSString

    public open fun sharedFrameworksPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "sharedFrameworksPath") as NSString

    public open fun sharedSupportPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "sharedSupportPath") as NSString

    public open fun builtInPlugInsPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "builtInPlugInsPath") as NSString

    public open fun URLForResource_withExtension(name: NSString, ext: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForResource:withExtension:", name, ext) as NSURL

    public open fun URLForResource_withExtension_subdirectory(name: NSString, ext: NSString, subpath: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForResource:withExtension:subdirectory:", name, ext, subpath) as NSURL

    public open fun URLForResource_withExtension_subdirectory_localization(name: NSString, ext: NSString, subpath: NSString, localizationName: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForResource:withExtension:subdirectory:localization:", name, ext, subpath, localizationName) as NSURL

    public open fun URLsForResourcesWithExtension_subdirectory(ext: NSString, subpath: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "URLsForResourcesWithExtension:subdirectory:", ext, subpath) as NSArray

    public open fun URLsForResourcesWithExtension_subdirectory_localization(ext: NSString, subpath: NSString, localizationName: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "URLsForResourcesWithExtension:subdirectory:localization:", ext, subpath, localizationName) as NSArray

    public open fun pathForResource_ofType(name: NSString, ext: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathForResource:ofType:", name, ext) as NSString

    public open fun pathForResource_ofType_inDirectory(name: NSString, ext: NSString, subpath: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathForResource:ofType:inDirectory:", name, ext, subpath) as NSString

    public open fun pathForResource_ofType_inDirectory_forLocalization(name: NSString, ext: NSString, subpath: NSString, localizationName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathForResource:ofType:inDirectory:forLocalization:", name, ext, subpath, localizationName) as NSString

    public open fun pathsForResourcesOfType_inDirectory(ext: NSString, subpath: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pathsForResourcesOfType:inDirectory:", ext, subpath) as NSArray

    public open fun pathsForResourcesOfType_inDirectory_forLocalization(ext: NSString, subpath: NSString, localizationName: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pathsForResourcesOfType:inDirectory:forLocalization:", ext, subpath, localizationName) as NSArray

    public open fun localizedStringForKey_value_table(key: NSString, value: NSString, tableName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedStringForKey:value:table:", key, value, tableName) as NSString

    public open fun bundleIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "bundleIdentifier") as NSString

    public open fun infoDictionary(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "infoDictionary") as NSDictionary

    public open fun localizedInfoDictionary(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "localizedInfoDictionary") as NSDictionary

    public open fun objectForInfoDictionaryKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForInfoDictionaryKey:", key) as ObjCObject

    public open fun classNamed(className: NSString): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "classNamed:", className) as ObjCClass

    public open fun principalClass(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "principalClass") as ObjCClass

    public open fun preferredLocalizations(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "preferredLocalizations") as NSArray

    public open fun localizations(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "localizations") as NSArray

    public open fun developmentLocalization(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "developmentLocalization") as NSString

    public open fun executableArchitectures(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "executableArchitectures") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSBundle_NSBundleHelpExtension.metaclass, NSBundle_NSBundleImageExtension.metaclass, NSBundle_NSNibLoading.metaclass, NSBundle_NSNibLoadingDeprecated.metaclass, NSBundle_NSBundleSoundExtensions.metaclass {
        public open fun mainBundle(): NSBundle =
            Native.objc_msgSend("class objc.NSBundle", this, "mainBundle") as NSBundle

        public open fun bundleWithPath(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "bundleWithPath:", path) as ObjCObject

        public open fun bundleWithURL(url: NSURL): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "bundleWithURL:", url) as ObjCObject

        public open fun bundleForClass(aClass: ObjCClass): NSBundle =
            Native.objc_msgSend("class objc.NSBundle", this, "bundleForClass:", aClass) as NSBundle

        public open fun bundleWithIdentifier(identifier: NSString): NSBundle =
            Native.objc_msgSend("class objc.NSBundle", this, "bundleWithIdentifier:", identifier) as NSBundle

        public open fun allBundles(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "allBundles") as NSArray

        public open fun allFrameworks(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "allFrameworks") as NSArray

        public open fun URLForResource_withExtension_subdirectory_inBundleWithURL(name: NSString, ext: NSString, subpath: NSString, bundleURL: NSURL): NSURL =
            Native.objc_msgSend("class objc.NSURL", this, "URLForResource:withExtension:subdirectory:inBundleWithURL:", name, ext, subpath, bundleURL) as NSURL

        public open fun URLsForResourcesWithExtension_subdirectory_inBundleWithURL(ext: NSString, subpath: NSString, bundleURL: NSURL): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:", ext, subpath, bundleURL) as NSArray

        public open fun pathForResource_ofType_inDirectory(name: NSString, ext: NSString, bundlePath: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "pathForResource:ofType:inDirectory:", name, ext, bundlePath) as NSString

        public open fun pathsForResourcesOfType_inDirectory(ext: NSString, bundlePath: NSString): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "pathsForResourcesOfType:inDirectory:", ext, bundlePath) as NSArray

        public open fun preferredLocalizationsFromArray(localizationsArray: NSArray): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "preferredLocalizationsFromArray:", localizationsArray) as NSArray

        public open fun preferredLocalizationsFromArray_forPreferences(localizationsArray: NSArray, preferencesArray: NSArray): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "preferredLocalizationsFromArray:forPreferences:", localizationsArray, preferencesArray) as NSArray

    }

    companion object : NSObject(Native.objc_getClass("NSBundle")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDate(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding, NSDate_NSExtendedDate, NSDate_NSDateCreation, NSDate_NSCalendarDateExtras {
    public open fun timeIntervalSinceReferenceDate(): Double =
        Native.objc_msgSend("double", this, "timeIntervalSinceReferenceDate") as Double

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithTimeIntervalSinceReferenceDate(ti: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTimeIntervalSinceReferenceDate:", ti) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass, NSDate_NSExtendedDate.metaclass, NSDate_NSDateCreation.metaclass, NSDate_NSCalendarDateExtras.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDate")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCalendar(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun initWithCalendarIdentifier(ident: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCalendarIdentifier:", ident) as ObjCObject

    public open fun calendarIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "calendarIdentifier") as NSString

    public open fun locale(): NSLocale =
        Native.objc_msgSend("class objc.NSLocale", this, "locale") as NSLocale

    public open fun setLocale(locale: NSLocale): Unit {
        Native.objc_msgSend("void", this, "setLocale:", locale)
    }

    public open fun timeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "timeZone") as NSTimeZone

    public open fun setTimeZone(timeZone: NSTimeZone): Unit {
        Native.objc_msgSend("void", this, "setTimeZone:", timeZone)
    }

    public open fun firstWeekday(): Int =
        Native.objc_msgSend("int", this, "firstWeekday") as Int

    public open fun setFirstWeekday(firstWeekday: Int): Unit {
        Native.objc_msgSend("void", this, "setFirstWeekday:", firstWeekday)
    }

    public open fun minimumDaysInFirstWeek(): Int =
        Native.objc_msgSend("int", this, "minimumDaysInFirstWeek") as Int

    public open fun setMinimumDaysInFirstWeek(minimumDaysInFirstWeek: Int): Unit {
        Native.objc_msgSend("void", this, "setMinimumDaysInFirstWeek:", minimumDaysInFirstWeek)
    }

    public open fun eraSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "eraSymbols") as NSArray

    public open fun longEraSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "longEraSymbols") as NSArray

    public open fun monthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "monthSymbols") as NSArray

    public open fun shortMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortMonthSymbols") as NSArray

    public open fun veryShortMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "veryShortMonthSymbols") as NSArray

    public open fun standaloneMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "standaloneMonthSymbols") as NSArray

    public open fun shortStandaloneMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortStandaloneMonthSymbols") as NSArray

    public open fun veryShortStandaloneMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "veryShortStandaloneMonthSymbols") as NSArray

    public open fun weekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "weekdaySymbols") as NSArray

    public open fun shortWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortWeekdaySymbols") as NSArray

    public open fun veryShortWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "veryShortWeekdaySymbols") as NSArray

    public open fun standaloneWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "standaloneWeekdaySymbols") as NSArray

    public open fun shortStandaloneWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortStandaloneWeekdaySymbols") as NSArray

    public open fun veryShortStandaloneWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "veryShortStandaloneWeekdaySymbols") as NSArray

    public open fun quarterSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "quarterSymbols") as NSArray

    public open fun shortQuarterSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortQuarterSymbols") as NSArray

    public open fun standaloneQuarterSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "standaloneQuarterSymbols") as NSArray

    public open fun shortStandaloneQuarterSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortStandaloneQuarterSymbols") as NSArray

    public open fun AMSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "AMSymbol") as NSString

    public open fun PMSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "PMSymbol") as NSString

    public open fun minimumRangeOfUnit(unit: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "minimumRangeOfUnit:", unit)

    public open fun maximumRangeOfUnit(unit: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "maximumRangeOfUnit:", unit)

    public open fun rangeOfUnit_inUnit_forDate(smaller: Any, larger: Any, date: NSDate): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfUnit:inUnit:forDate:", smaller, larger, date)

    public open fun ordinalityOfUnit_inUnit_forDate(smaller: Any, larger: Any, date: NSDate): Int =
        Native.objc_msgSend("int", this, "ordinalityOfUnit:inUnit:forDate:", smaller, larger, date) as Int

    public open fun rangeOfUnit_startDate_interval_forDate(unit: Any, datep: Pointer<NSDate>, tip: Pointer<Double>, date: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "rangeOfUnit:startDate:interval:forDate:", unit, datep, tip, date) as Boolean

    public open fun dateFromComponents(comps: NSDateComponents): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateFromComponents:", comps) as NSDate

    public open fun components_fromDate(unitFlags: Any, date: NSDate): NSDateComponents =
        Native.objc_msgSend("class objc.NSDateComponents", this, "components:fromDate:", unitFlags, date) as NSDateComponents

    public open fun dateByAddingComponents_toDate_options(comps: NSDateComponents, date: NSDate, opts: Any): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateByAddingComponents:toDate:options:", comps, date, opts) as NSDate

    public open fun components_fromDate_toDate_options(unitFlags: Any, startingDate: NSDate, resultDate: NSDate, opts: Any): NSDateComponents =
        Native.objc_msgSend("class objc.NSDateComponents", this, "components:fromDate:toDate:options:", unitFlags, startingDate, resultDate, opts) as NSDateComponents

    public open fun getEra_year_month_day_fromDate(eraValuePointer: Pointer<Int>, yearValuePointer: Pointer<Int>, monthValuePointer: Pointer<Int>, dayValuePointer: Pointer<Int>, date: NSDate): Unit {
        Native.objc_msgSend("void", this, "getEra:year:month:day:fromDate:", eraValuePointer, yearValuePointer, monthValuePointer, dayValuePointer, date)
    }

    public open fun getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate(eraValuePointer: Pointer<Int>, yearValuePointer: Pointer<Int>, weekValuePointer: Pointer<Int>, weekdayValuePointer: Pointer<Int>, date: NSDate): Unit {
        Native.objc_msgSend("void", this, "getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:", eraValuePointer, yearValuePointer, weekValuePointer, weekdayValuePointer, date)
    }

    public open fun getHour_minute_second_nanosecond_fromDate(hourValuePointer: Pointer<Int>, minuteValuePointer: Pointer<Int>, secondValuePointer: Pointer<Int>, nanosecondValuePointer: Pointer<Int>, date: NSDate): Unit {
        Native.objc_msgSend("void", this, "getHour:minute:second:nanosecond:fromDate:", hourValuePointer, minuteValuePointer, secondValuePointer, nanosecondValuePointer, date)
    }

    public open fun component_fromDate(unit: Any, date: NSDate): Int =
        Native.objc_msgSend("int", this, "component:fromDate:", unit, date) as Int

    public open fun dateWithEra_year_month_day_hour_minute_second_nanosecond(eraValue: Int, yearValue: Int, monthValue: Int, dayValue: Int, hourValue: Int, minuteValue: Int, secondValue: Int, nanosecondValue: Int): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateWithEra:year:month:day:hour:minute:second:nanosecond:", eraValue, yearValue, monthValue, dayValue, hourValue, minuteValue, secondValue, nanosecondValue) as NSDate

    public open fun dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond(eraValue: Int, yearValue: Int, weekValue: Int, weekdayValue: Int, hourValue: Int, minuteValue: Int, secondValue: Int, nanosecondValue: Int): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:", eraValue, yearValue, weekValue, weekdayValue, hourValue, minuteValue, secondValue, nanosecondValue) as NSDate

    public open fun startOfDayForDate(date: NSDate): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "startOfDayForDate:", date) as NSDate

    public open fun componentsInTimeZone_fromDate(timezone: NSTimeZone, date: NSDate): NSDateComponents =
        Native.objc_msgSend("class objc.NSDateComponents", this, "componentsInTimeZone:fromDate:", timezone, date) as NSDateComponents

    public open fun compareDate_toDate_toUnitGranularity(date1: NSDate, date2: NSDate, unit: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "compareDate:toDate:toUnitGranularity:", date1, date2, unit)

    public open fun isDate_equalToDate_toUnitGranularity(date1: NSDate, date2: NSDate, unit: Any): Boolean =
        Native.objc_msgSend("boolean", this, "isDate:equalToDate:toUnitGranularity:", date1, date2, unit) as Boolean

    public open fun isDate_inSameDayAsDate(date1: NSDate, date2: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "isDate:inSameDayAsDate:", date1, date2) as Boolean

    public open fun isDateInToday(date: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "isDateInToday:", date) as Boolean

    public open fun isDateInYesterday(date: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "isDateInYesterday:", date) as Boolean

    public open fun isDateInTomorrow(date: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "isDateInTomorrow:", date) as Boolean

    public open fun isDateInWeekend(date: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "isDateInWeekend:", date) as Boolean

    public open fun rangeOfWeekendStartDate_interval_containingDate(datep: Pointer<NSDate>, tip: Pointer<Double>, date: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "rangeOfWeekendStartDate:interval:containingDate:", datep, tip, date) as Boolean

    public open fun nextWeekendStartDate_interval_options_afterDate(datep: Pointer<NSDate>, tip: Pointer<Double>, options: Any, date: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "nextWeekendStartDate:interval:options:afterDate:", datep, tip, options, date) as Boolean

    public open fun components_fromDateComponents_toDateComponents_options(unitFlags: Any, startingDateComp: NSDateComponents, resultDateComp: NSDateComponents, options: Any): NSDateComponents =
        Native.objc_msgSend("class objc.NSDateComponents", this, "components:fromDateComponents:toDateComponents:options:", unitFlags, startingDateComp, resultDateComp, options) as NSDateComponents

    public open fun dateByAddingUnit_value_toDate_options(unit: Any, value: Int, date: NSDate, options: Any): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateByAddingUnit:value:toDate:options:", unit, value, date, options) as NSDate

    public open fun enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock(start: NSDate, comps: NSDateComponents, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:", start, comps, opts, block)
    }

    public open fun nextDateAfterDate_matchingComponents_options(date: NSDate, comps: NSDateComponents, options: Any): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "nextDateAfterDate:matchingComponents:options:", date, comps, options) as NSDate

    public open fun nextDateAfterDate_matchingUnit_value_options(date: NSDate, unit: Any, value: Int, options: Any): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "nextDateAfterDate:matchingUnit:value:options:", date, unit, value, options) as NSDate

    public open fun nextDateAfterDate_matchingHour_minute_second_options(date: NSDate, hourValue: Int, minuteValue: Int, secondValue: Int, options: Any): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "nextDateAfterDate:matchingHour:minute:second:options:", date, hourValue, minuteValue, secondValue, options) as NSDate

    public open fun dateBySettingUnit_value_ofDate_options(unit: Any, v: Int, date: NSDate, opts: Any): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateBySettingUnit:value:ofDate:options:", unit, v, date, opts) as NSDate

    public open fun dateBySettingHour_minute_second_ofDate_options(h: Int, m: Int, s: Int, date: NSDate, opts: Any): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateBySettingHour:minute:second:ofDate:options:", h, m, s, date, opts) as NSDate

    public open fun date_matchesComponents(date: NSDate, components: NSDateComponents): Boolean =
        Native.objc_msgSend("boolean", this, "date:matchesComponents:", date, components) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun currentCalendar(): NSCalendar =
            Native.objc_msgSend("class objc.NSCalendar", this, "currentCalendar") as NSCalendar

        public open fun autoupdatingCurrentCalendar(): NSCalendar =
            Native.objc_msgSend("class objc.NSCalendar", this, "autoupdatingCurrentCalendar") as NSCalendar

        public open fun calendarWithIdentifier(calendarIdentifierConstant: NSString): NSCalendar =
            Native.objc_msgSend("class objc.NSCalendar", this, "calendarWithIdentifier:", calendarIdentifierConstant) as NSCalendar

    }

    companion object : NSObject(Native.objc_getClass("NSCalendar")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDateComponents(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun calendar(): NSCalendar =
        Native.objc_msgSend("class objc.NSCalendar", this, "calendar") as NSCalendar

    public open fun setCalendar(calendar: NSCalendar): Unit {
        Native.objc_msgSend("void", this, "setCalendar:", calendar)
    }

    public open fun timeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "timeZone") as NSTimeZone

    public open fun setTimeZone(timeZone: NSTimeZone): Unit {
        Native.objc_msgSend("void", this, "setTimeZone:", timeZone)
    }

    public open fun era(): Int =
        Native.objc_msgSend("int", this, "era") as Int

    public open fun setEra(era: Int): Unit {
        Native.objc_msgSend("void", this, "setEra:", era)
    }

    public open fun year(): Int =
        Native.objc_msgSend("int", this, "year") as Int

    public open fun setYear(year: Int): Unit {
        Native.objc_msgSend("void", this, "setYear:", year)
    }

    public open fun month(): Int =
        Native.objc_msgSend("int", this, "month") as Int

    public open fun setMonth(month: Int): Unit {
        Native.objc_msgSend("void", this, "setMonth:", month)
    }

    public open fun day(): Int =
        Native.objc_msgSend("int", this, "day") as Int

    public open fun setDay(day: Int): Unit {
        Native.objc_msgSend("void", this, "setDay:", day)
    }

    public open fun hour(): Int =
        Native.objc_msgSend("int", this, "hour") as Int

    public open fun setHour(hour: Int): Unit {
        Native.objc_msgSend("void", this, "setHour:", hour)
    }

    public open fun minute(): Int =
        Native.objc_msgSend("int", this, "minute") as Int

    public open fun setMinute(minute: Int): Unit {
        Native.objc_msgSend("void", this, "setMinute:", minute)
    }

    public open fun second(): Int =
        Native.objc_msgSend("int", this, "second") as Int

    public open fun setSecond(second: Int): Unit {
        Native.objc_msgSend("void", this, "setSecond:", second)
    }

    public open fun nanosecond(): Int =
        Native.objc_msgSend("int", this, "nanosecond") as Int

    public open fun setNanosecond(nanosecond: Int): Unit {
        Native.objc_msgSend("void", this, "setNanosecond:", nanosecond)
    }

    public open fun weekday(): Int =
        Native.objc_msgSend("int", this, "weekday") as Int

    public open fun setWeekday(weekday: Int): Unit {
        Native.objc_msgSend("void", this, "setWeekday:", weekday)
    }

    public open fun weekdayOrdinal(): Int =
        Native.objc_msgSend("int", this, "weekdayOrdinal") as Int

    public open fun setWeekdayOrdinal(weekdayOrdinal: Int): Unit {
        Native.objc_msgSend("void", this, "setWeekdayOrdinal:", weekdayOrdinal)
    }

    public open fun quarter(): Int =
        Native.objc_msgSend("int", this, "quarter") as Int

    public open fun setQuarter(quarter: Int): Unit {
        Native.objc_msgSend("void", this, "setQuarter:", quarter)
    }

    public open fun weekOfMonth(): Int =
        Native.objc_msgSend("int", this, "weekOfMonth") as Int

    public open fun setWeekOfMonth(weekOfMonth: Int): Unit {
        Native.objc_msgSend("void", this, "setWeekOfMonth:", weekOfMonth)
    }

    public open fun weekOfYear(): Int =
        Native.objc_msgSend("int", this, "weekOfYear") as Int

    public open fun setWeekOfYear(weekOfYear: Int): Unit {
        Native.objc_msgSend("void", this, "setWeekOfYear:", weekOfYear)
    }

    public open fun yearForWeekOfYear(): Int =
        Native.objc_msgSend("int", this, "yearForWeekOfYear") as Int

    public open fun setYearForWeekOfYear(yearForWeekOfYear: Int): Unit {
        Native.objc_msgSend("void", this, "setYearForWeekOfYear:", yearForWeekOfYear)
    }

    public open fun isLeapMonth(): Boolean =
        Native.objc_msgSend("boolean", this, "isLeapMonth") as Boolean

    public open fun setLeapMonth(leapMonth: Boolean): Unit {
        Native.objc_msgSend("void", this, "setLeapMonth:", leapMonth)
    }

    public open fun date(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "date") as NSDate

    public open fun week(): Int =
        Native.objc_msgSend("int", this, "week") as Int

    public open fun setWeek(v: Int): Unit {
        Native.objc_msgSend("void", this, "setWeek:", v)
    }

    public open fun setValue_forComponent(value: Int, unit: Any): Unit {
        Native.objc_msgSend("void", this, "setValue:forComponent:", value, unit)
    }

    public open fun valueForComponent(unit: Any): Int =
        Native.objc_msgSend("int", this, "valueForComponent:", unit) as Int

    public open fun isValidDate(): Boolean =
        Native.objc_msgSend("boolean", this, "isValidDate") as Boolean

    public open fun isValidDateInCalendar(calendar: NSCalendar): Boolean =
        Native.objc_msgSend("boolean", this, "isValidDateInCalendar:", calendar) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDateComponents")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSString(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding, NSString_NSStringExtensionMethods, NSString_NSStringEncodingDetection, NSString_NSExtendedStringPropertyListParsing, NSString_NSStringDeprecated, NSString_NSStringPathExtensions, NSString_NSURLUtilities, NSString_NSLinguisticAnalysis, NSString_NSPasteboardSupport, NSString_NSStringDrawing, NSString_NSExtendedStringDrawing {
    public open fun length(): Int =
        Native.objc_msgSend("int", this, "length") as Int

    public open fun characterAtIndex(index: Int): Short =
        Native.objc_msgSend("short", this, "characterAtIndex:", index) as Short

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass, NSString_NSStringExtensionMethods.metaclass, NSString_NSStringEncodingDetection.metaclass, NSString_NSExtendedStringPropertyListParsing.metaclass, NSString_NSStringDeprecated.metaclass, NSString_NSStringPathExtensions.metaclass, NSString_NSURLUtilities.metaclass, NSString_NSLinguisticAnalysis.metaclass, NSString_NSPasteboardSupport.metaclass, NSString_NSStringDrawing.metaclass, NSString_NSExtendedStringDrawing.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSString")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableString(pointer: Long) : NSString(pointer), NSMutableString_NSMutableStringExtensionMethods {
    public open fun replaceCharactersInRange_withString(range: Any, aString: NSString): Unit {
        Native.objc_msgSend("void", this, "replaceCharactersInRange:withString:", range, aString)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSString.metaclass, NSMutableString_NSMutableStringExtensionMethods.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMutableString")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSimpleCString(pointer: Long) : NSString(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSString.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSimpleCString")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSConstantString(pointer: Long) : NSSimpleCString(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSSimpleCString.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSConstantString")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCharacterSet(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSCoding, NSCharacterSet_NSURLUtilities {
    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    public open fun characterIsMember(aCharacter: Short): Boolean =
        Native.objc_msgSend("boolean", this, "characterIsMember:", aCharacter) as Boolean

    public open fun bitmapRepresentation(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "bitmapRepresentation") as NSData

    public open fun invertedSet(): NSCharacterSet =
        Native.objc_msgSend("class objc.NSCharacterSet", this, "invertedSet") as NSCharacterSet

    public open fun longCharacterIsMember(theLongChar: Int): Boolean =
        Native.objc_msgSend("boolean", this, "longCharacterIsMember:", theLongChar) as Boolean

    public open fun isSupersetOfSet(theOtherSet: NSCharacterSet): Boolean =
        Native.objc_msgSend("boolean", this, "isSupersetOfSet:", theOtherSet) as Boolean

    public open fun hasMemberInPlane(thePlane: Byte): Boolean =
        Native.objc_msgSend("boolean", this, "hasMemberInPlane:", thePlane) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSCoding.metaclass, NSCharacterSet_NSURLUtilities.metaclass {
        public open fun controlCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "controlCharacterSet") as NSCharacterSet

        public open fun whitespaceCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "whitespaceCharacterSet") as NSCharacterSet

        public open fun whitespaceAndNewlineCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "whitespaceAndNewlineCharacterSet") as NSCharacterSet

        public open fun decimalDigitCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "decimalDigitCharacterSet") as NSCharacterSet

        public open fun letterCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "letterCharacterSet") as NSCharacterSet

        public open fun lowercaseLetterCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "lowercaseLetterCharacterSet") as NSCharacterSet

        public open fun uppercaseLetterCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "uppercaseLetterCharacterSet") as NSCharacterSet

        public open fun nonBaseCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "nonBaseCharacterSet") as NSCharacterSet

        public open fun alphanumericCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "alphanumericCharacterSet") as NSCharacterSet

        public open fun decomposableCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "decomposableCharacterSet") as NSCharacterSet

        public open fun illegalCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "illegalCharacterSet") as NSCharacterSet

        public open fun punctuationCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "punctuationCharacterSet") as NSCharacterSet

        public open fun capitalizedLetterCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "capitalizedLetterCharacterSet") as NSCharacterSet

        public open fun symbolCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "symbolCharacterSet") as NSCharacterSet

        public open fun newlineCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "newlineCharacterSet") as NSCharacterSet

        public open fun characterSetWithRange(aRange: Any): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "characterSetWithRange:", aRange) as NSCharacterSet

        public open fun characterSetWithCharactersInString(aString: NSString): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "characterSetWithCharactersInString:", aString) as NSCharacterSet

        public open fun characterSetWithBitmapRepresentation(data: NSData): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "characterSetWithBitmapRepresentation:", data) as NSCharacterSet

        public open fun characterSetWithContentsOfFile(fName: NSString): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "characterSetWithContentsOfFile:", fName) as NSCharacterSet

    }

    companion object : NSObject(Native.objc_getClass("NSCharacterSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableCharacterSet(pointer: Long) : NSCharacterSet(pointer), NSCopying, NSMutableCopying {
    public open fun addCharactersInRange(aRange: Any): Unit {
        Native.objc_msgSend("void", this, "addCharactersInRange:", aRange)
    }

    public open fun removeCharactersInRange(aRange: Any): Unit {
        Native.objc_msgSend("void", this, "removeCharactersInRange:", aRange)
    }

    public open fun addCharactersInString(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "addCharactersInString:", aString)
    }

    public open fun removeCharactersInString(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "removeCharactersInString:", aString)
    }

    public open fun formUnionWithCharacterSet(otherSet: NSCharacterSet): Unit {
        Native.objc_msgSend("void", this, "formUnionWithCharacterSet:", otherSet)
    }

    public open fun formIntersectionWithCharacterSet(otherSet: NSCharacterSet): Unit {
        Native.objc_msgSend("void", this, "formIntersectionWithCharacterSet:", otherSet)
    }

    public open fun invert(): Unit {
        Native.objc_msgSend("void", this, "invert")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCharacterSet.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass {
        override fun controlCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "controlCharacterSet") as NSMutableCharacterSet

        override fun whitespaceCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "whitespaceCharacterSet") as NSMutableCharacterSet

        override fun whitespaceAndNewlineCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "whitespaceAndNewlineCharacterSet") as NSMutableCharacterSet

        override fun decimalDigitCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "decimalDigitCharacterSet") as NSMutableCharacterSet

        override fun letterCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "letterCharacterSet") as NSMutableCharacterSet

        override fun lowercaseLetterCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "lowercaseLetterCharacterSet") as NSMutableCharacterSet

        override fun uppercaseLetterCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "uppercaseLetterCharacterSet") as NSMutableCharacterSet

        override fun nonBaseCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "nonBaseCharacterSet") as NSMutableCharacterSet

        override fun alphanumericCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "alphanumericCharacterSet") as NSMutableCharacterSet

        override fun decomposableCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "decomposableCharacterSet") as NSMutableCharacterSet

        override fun illegalCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "illegalCharacterSet") as NSMutableCharacterSet

        override fun punctuationCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "punctuationCharacterSet") as NSMutableCharacterSet

        override fun capitalizedLetterCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "capitalizedLetterCharacterSet") as NSMutableCharacterSet

        override fun symbolCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "symbolCharacterSet") as NSMutableCharacterSet

        override fun newlineCharacterSet(): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "newlineCharacterSet") as NSMutableCharacterSet

        override fun characterSetWithRange(aRange: Any): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "characterSetWithRange:", aRange) as NSMutableCharacterSet

        override fun characterSetWithCharactersInString(aString: NSString): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "characterSetWithCharactersInString:", aString) as NSMutableCharacterSet

        override fun characterSetWithBitmapRepresentation(data: NSData): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "characterSetWithBitmapRepresentation:", data) as NSMutableCharacterSet

        override fun characterSetWithContentsOfFile(fName: NSString): NSMutableCharacterSet =
            Native.objc_msgSend("class objc.NSMutableCharacterSet", this, "characterSetWithContentsOfFile:", fName) as NSMutableCharacterSet

    }

    companion object : NSObject(Native.objc_getClass("NSMutableCharacterSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCoder(pointer: Long) : NSObject(pointer), NSCoder_NSExtendedCoder, NSCoder_NSTypedstreamCompatibility, NSCoder_NSGeometryCoding, NSCoder_NSGeometryKeyedCoding, NSCoder_NSAppKitColorExtensions {
    public open fun encodeValueOfObjCType_at(type: Pointer<Char>, addr: Pointer<Unit>): Unit {
        Native.objc_msgSend("void", this, "encodeValueOfObjCType:at:", type, addr)
    }

    public open fun encodeDataObject(data: NSData): Unit {
        Native.objc_msgSend("void", this, "encodeDataObject:", data)
    }

    public open fun decodeValueOfObjCType_at(type: Pointer<Char>, data: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "decodeValueOfObjCType:at:", type, data)
    }

    public open fun decodeDataObject(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "decodeDataObject") as NSData

    public open fun versionForClassName(className: NSString): Int =
        Native.objc_msgSend("int", this, "versionForClassName:", className) as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoder_NSExtendedCoder.metaclass, NSCoder_NSTypedstreamCompatibility.metaclass, NSCoder_NSGeometryCoding.metaclass, NSCoder_NSGeometryKeyedCoding.metaclass, NSCoder_NSAppKitColorExtensions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCoder")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSData(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding, NSData_NSExtendedData, NSData_NSDataCreation, NSData_NSDataBase64Encoding, NSData_NSDeprecated {
    public open fun length(): Int =
        Native.objc_msgSend("int", this, "length") as Int

    public open fun bytes(): Pointer<Unit> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "bytes") as Pointer<Unit>

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass, NSData_NSExtendedData.metaclass, NSData_NSDataCreation.metaclass, NSData_NSDataBase64Encoding.metaclass, NSData_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSData")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableData(pointer: Long) : NSData(pointer), NSMutableData_NSExtendedMutableData, NSMutableData_NSMutableDataCreation {
    public open fun mutableBytes(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "mutableBytes") as Pointer<*>

    override fun length(): Int =
        Native.objc_msgSend("int", this, "length") as Int

    public open fun setLength(length: Int): Unit {
        Native.objc_msgSend("void", this, "setLength:", length)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSData.metaclass, NSMutableData_NSExtendedMutableData.metaclass, NSMutableData_NSMutableDataCreation.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMutableData")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPurgeableData(pointer: Long) : NSMutableData(pointer), NSDiscardableContent {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun length(): Int =
        Native.objc_msgSend("int", this, "length") as Int

    trait metaclass : NSMutableData.metaclass, NSDiscardableContent.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPurgeableData")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFormatter(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun stringForObjectValue(obj: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringForObjectValue:", obj) as NSString

    public open fun attributedStringForObjectValue_withDefaultAttributes(obj: ObjCObject, attrs: NSDictionary): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedStringForObjectValue:withDefaultAttributes:", obj, attrs) as NSAttributedString

    public open fun editingStringForObjectValue(obj: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "editingStringForObjectValue:", obj) as NSString

    public open fun getObjectValue_forString_errorDescription(obj: Pointer<ObjCObject>, string: NSString, error: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "getObjectValue:forString:errorDescription:", obj, string, error) as Boolean

    public open fun isPartialStringValid_newEditingString_errorDescription(partialString: NSString, newString: Pointer<NSString>, error: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "isPartialStringValid:newEditingString:errorDescription:", partialString, newString, error) as Boolean

    public open fun isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription(partialStringPtr: Pointer<NSString>, proposedSelRangePtr: Pointer<Any>, origString: NSString, origSelRange: Any, error: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:", partialStringPtr, proposedSelRangePtr, origString, origSelRange, error) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDateFormatter(pointer: Long) : NSFormatter(pointer), NSDateFormatter_NSDateFormatterCompatibility {
    public open fun formattingContext(): Any =
        Native.objc_msgSend("class objc.Any", this, "formattingContext")

    public open fun setFormattingContext(formattingContext: Any): Unit {
        Native.objc_msgSend("void", this, "setFormattingContext:", formattingContext)
    }

    public open fun getObjectValue_forString_range_error(obj: Pointer<ObjCObject>, string: NSString, rangep: Pointer<Any>, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "getObjectValue:forString:range:error:", obj, string, rangep, error) as Boolean

    public open fun stringFromDate(date: NSDate): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromDate:", date) as NSString

    public open fun dateFromString(string: NSString): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateFromString:", string) as NSDate

    public open fun setLocalizedDateFormatFromTemplate(dateFormatTemplate: NSString): Unit {
        Native.objc_msgSend("void", this, "setLocalizedDateFormatFromTemplate:", dateFormatTemplate)
    }

    public open fun dateFormat(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "dateFormat") as NSString

    public open fun setDateFormat(dateFormat: NSString): Unit {
        Native.objc_msgSend("void", this, "setDateFormat:", dateFormat)
    }

    public open fun dateStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "dateStyle")

    public open fun setDateStyle(dateStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setDateStyle:", dateStyle)
    }

    public open fun timeStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "timeStyle")

    public open fun setTimeStyle(timeStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setTimeStyle:", timeStyle)
    }

    public open fun locale(): NSLocale =
        Native.objc_msgSend("class objc.NSLocale", this, "locale") as NSLocale

    public open fun setLocale(locale: NSLocale): Unit {
        Native.objc_msgSend("void", this, "setLocale:", locale)
    }

    public open fun generatesCalendarDates(): Boolean =
        Native.objc_msgSend("boolean", this, "generatesCalendarDates") as Boolean

    public open fun setGeneratesCalendarDates(generatesCalendarDates: Boolean): Unit {
        Native.objc_msgSend("void", this, "setGeneratesCalendarDates:", generatesCalendarDates)
    }

    public open fun formatterBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "formatterBehavior")

    public open fun setFormatterBehavior(formatterBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setFormatterBehavior:", formatterBehavior)
    }

    public open fun timeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "timeZone") as NSTimeZone

    public open fun setTimeZone(timeZone: NSTimeZone): Unit {
        Native.objc_msgSend("void", this, "setTimeZone:", timeZone)
    }

    public open fun calendar(): NSCalendar =
        Native.objc_msgSend("class objc.NSCalendar", this, "calendar") as NSCalendar

    public open fun setCalendar(calendar: NSCalendar): Unit {
        Native.objc_msgSend("void", this, "setCalendar:", calendar)
    }

    public open fun isLenient(): Boolean =
        Native.objc_msgSend("boolean", this, "isLenient") as Boolean

    public open fun setLenient(lenient: Boolean): Unit {
        Native.objc_msgSend("void", this, "setLenient:", lenient)
    }

    public open fun twoDigitStartDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "twoDigitStartDate") as NSDate

    public open fun setTwoDigitStartDate(twoDigitStartDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setTwoDigitStartDate:", twoDigitStartDate)
    }

    public open fun defaultDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "defaultDate") as NSDate

    public open fun setDefaultDate(defaultDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setDefaultDate:", defaultDate)
    }

    public open fun eraSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "eraSymbols") as NSArray

    public open fun setEraSymbols(eraSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setEraSymbols:", eraSymbols)
    }

    public open fun monthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "monthSymbols") as NSArray

    public open fun setMonthSymbols(monthSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setMonthSymbols:", monthSymbols)
    }

    public open fun shortMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortMonthSymbols") as NSArray

    public open fun setShortMonthSymbols(shortMonthSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setShortMonthSymbols:", shortMonthSymbols)
    }

    public open fun weekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "weekdaySymbols") as NSArray

    public open fun setWeekdaySymbols(weekdaySymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setWeekdaySymbols:", weekdaySymbols)
    }

    public open fun shortWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortWeekdaySymbols") as NSArray

    public open fun setShortWeekdaySymbols(shortWeekdaySymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setShortWeekdaySymbols:", shortWeekdaySymbols)
    }

    public open fun AMSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "AMSymbol") as NSString

    public open fun setAMSymbol(AMSymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setAMSymbol:", AMSymbol)
    }

    public open fun PMSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "PMSymbol") as NSString

    public open fun setPMSymbol(PMSymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setPMSymbol:", PMSymbol)
    }

    public open fun longEraSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "longEraSymbols") as NSArray

    public open fun setLongEraSymbols(longEraSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setLongEraSymbols:", longEraSymbols)
    }

    public open fun veryShortMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "veryShortMonthSymbols") as NSArray

    public open fun setVeryShortMonthSymbols(veryShortMonthSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setVeryShortMonthSymbols:", veryShortMonthSymbols)
    }

    public open fun standaloneMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "standaloneMonthSymbols") as NSArray

    public open fun setStandaloneMonthSymbols(standaloneMonthSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setStandaloneMonthSymbols:", standaloneMonthSymbols)
    }

    public open fun shortStandaloneMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortStandaloneMonthSymbols") as NSArray

    public open fun setShortStandaloneMonthSymbols(shortStandaloneMonthSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setShortStandaloneMonthSymbols:", shortStandaloneMonthSymbols)
    }

    public open fun veryShortStandaloneMonthSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "veryShortStandaloneMonthSymbols") as NSArray

    public open fun setVeryShortStandaloneMonthSymbols(veryShortStandaloneMonthSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setVeryShortStandaloneMonthSymbols:", veryShortStandaloneMonthSymbols)
    }

    public open fun veryShortWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "veryShortWeekdaySymbols") as NSArray

    public open fun setVeryShortWeekdaySymbols(veryShortWeekdaySymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setVeryShortWeekdaySymbols:", veryShortWeekdaySymbols)
    }

    public open fun standaloneWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "standaloneWeekdaySymbols") as NSArray

    public open fun setStandaloneWeekdaySymbols(standaloneWeekdaySymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setStandaloneWeekdaySymbols:", standaloneWeekdaySymbols)
    }

    public open fun shortStandaloneWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortStandaloneWeekdaySymbols") as NSArray

    public open fun setShortStandaloneWeekdaySymbols(shortStandaloneWeekdaySymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setShortStandaloneWeekdaySymbols:", shortStandaloneWeekdaySymbols)
    }

    public open fun veryShortStandaloneWeekdaySymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "veryShortStandaloneWeekdaySymbols") as NSArray

    public open fun setVeryShortStandaloneWeekdaySymbols(veryShortStandaloneWeekdaySymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setVeryShortStandaloneWeekdaySymbols:", veryShortStandaloneWeekdaySymbols)
    }

    public open fun quarterSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "quarterSymbols") as NSArray

    public open fun setQuarterSymbols(quarterSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setQuarterSymbols:", quarterSymbols)
    }

    public open fun shortQuarterSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortQuarterSymbols") as NSArray

    public open fun setShortQuarterSymbols(shortQuarterSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setShortQuarterSymbols:", shortQuarterSymbols)
    }

    public open fun standaloneQuarterSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "standaloneQuarterSymbols") as NSArray

    public open fun setStandaloneQuarterSymbols(standaloneQuarterSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setStandaloneQuarterSymbols:", standaloneQuarterSymbols)
    }

    public open fun shortStandaloneQuarterSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "shortStandaloneQuarterSymbols") as NSArray

    public open fun setShortStandaloneQuarterSymbols(shortStandaloneQuarterSymbols: NSArray): Unit {
        Native.objc_msgSend("void", this, "setShortStandaloneQuarterSymbols:", shortStandaloneQuarterSymbols)
    }

    public open fun gregorianStartDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "gregorianStartDate") as NSDate

    public open fun setGregorianStartDate(gregorianStartDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setGregorianStartDate:", gregorianStartDate)
    }

    public open fun doesRelativeDateFormatting(): Boolean =
        Native.objc_msgSend("boolean", this, "doesRelativeDateFormatting") as Boolean

    public open fun setDoesRelativeDateFormatting(doesRelativeDateFormatting: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDoesRelativeDateFormatting:", doesRelativeDateFormatting)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFormatter.metaclass, NSDateFormatter_NSDateFormatterCompatibility.metaclass {
        public open fun localizedStringFromDate_dateStyle_timeStyle(date: NSDate, dstyle: Any, tstyle: Any): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localizedStringFromDate:dateStyle:timeStyle:", date, dstyle, tstyle) as NSString

        public open fun dateFormatFromTemplate_options_locale(tmplate: NSString, opts: Int, locale: NSLocale): NSString =
            Native.objc_msgSend("class objc.NSString", this, "dateFormatFromTemplate:options:locale:", tmplate, opts, locale) as NSString

        public open fun defaultFormatterBehavior(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultFormatterBehavior")

        public open fun setDefaultFormatterBehavior(behavior: Any): Unit {
            Native.objc_msgSend("void", this, "setDefaultFormatterBehavior:", behavior)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSDateFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDateIntervalFormatter(pointer: Long) : NSFormatter(pointer) {
    public open fun locale(): NSLocale =
        Native.objc_msgSend("class objc.NSLocale", this, "locale") as NSLocale

    public open fun setLocale(locale: NSLocale): Unit {
        Native.objc_msgSend("void", this, "setLocale:", locale)
    }

    public open fun calendar(): NSCalendar =
        Native.objc_msgSend("class objc.NSCalendar", this, "calendar") as NSCalendar

    public open fun setCalendar(calendar: NSCalendar): Unit {
        Native.objc_msgSend("void", this, "setCalendar:", calendar)
    }

    public open fun timeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "timeZone") as NSTimeZone

    public open fun setTimeZone(timeZone: NSTimeZone): Unit {
        Native.objc_msgSend("void", this, "setTimeZone:", timeZone)
    }

    public open fun dateTemplate(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "dateTemplate") as NSString

    public open fun setDateTemplate(dateTemplate: NSString): Unit {
        Native.objc_msgSend("void", this, "setDateTemplate:", dateTemplate)
    }

    public open fun dateStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "dateStyle")

    public open fun setDateStyle(dateStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setDateStyle:", dateStyle)
    }

    public open fun timeStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "timeStyle")

    public open fun setTimeStyle(timeStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setTimeStyle:", timeStyle)
    }

    public open fun stringFromDate_toDate(fromDate: NSDate, toDate: NSDate): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromDate:toDate:", fromDate, toDate) as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFormatter.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDateIntervalFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMassFormatter(pointer: Long) : NSFormatter(pointer) {
    public open fun numberFormatter(): NSNumberFormatter =
        Native.objc_msgSend("class objc.NSNumberFormatter", this, "numberFormatter") as NSNumberFormatter

    public open fun setNumberFormatter(numberFormatter: NSNumberFormatter): Unit {
        Native.objc_msgSend("void", this, "setNumberFormatter:", numberFormatter)
    }

    public open fun unitStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "unitStyle")

    public open fun setUnitStyle(unitStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setUnitStyle:", unitStyle)
    }

    public open fun isForPersonMassUse(): Boolean =
        Native.objc_msgSend("boolean", this, "isForPersonMassUse") as Boolean

    public open fun setForPersonMassUse(forPersonMassUse: Boolean): Unit {
        Native.objc_msgSend("void", this, "setForPersonMassUse:", forPersonMassUse)
    }

    public open fun stringFromValue_unit(value: Double, unit: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromValue:unit:", value, unit) as NSString

    public open fun stringFromKilograms(numberInKilograms: Double): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromKilograms:", numberInKilograms) as NSString

    public open fun unitStringFromValue_unit(value: Double, unit: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "unitStringFromValue:unit:", value, unit) as NSString

    public open fun unitStringFromKilograms_usedUnit(numberInKilograms: Double, unitp: Pointer<Any>): NSString =
        Native.objc_msgSend("class objc.NSString", this, "unitStringFromKilograms:usedUnit:", numberInKilograms, unitp) as NSString

    override fun getObjectValue_forString_errorDescription(obj: Pointer<ObjCObject>, string: NSString, error: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "getObjectValue:forString:errorDescription:", obj, string, error) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFormatter.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMassFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLengthFormatter(pointer: Long) : NSFormatter(pointer) {
    public open fun numberFormatter(): NSNumberFormatter =
        Native.objc_msgSend("class objc.NSNumberFormatter", this, "numberFormatter") as NSNumberFormatter

    public open fun setNumberFormatter(numberFormatter: NSNumberFormatter): Unit {
        Native.objc_msgSend("void", this, "setNumberFormatter:", numberFormatter)
    }

    public open fun unitStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "unitStyle")

    public open fun setUnitStyle(unitStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setUnitStyle:", unitStyle)
    }

    public open fun isForPersonHeightUse(): Boolean =
        Native.objc_msgSend("boolean", this, "isForPersonHeightUse") as Boolean

    public open fun setForPersonHeightUse(forPersonHeightUse: Boolean): Unit {
        Native.objc_msgSend("void", this, "setForPersonHeightUse:", forPersonHeightUse)
    }

    public open fun stringFromValue_unit(value: Double, unit: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromValue:unit:", value, unit) as NSString

    public open fun stringFromMeters(numberInMeters: Double): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromMeters:", numberInMeters) as NSString

    public open fun unitStringFromValue_unit(value: Double, unit: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "unitStringFromValue:unit:", value, unit) as NSString

    public open fun unitStringFromMeters_usedUnit(numberInMeters: Double, unitp: Pointer<Any>): NSString =
        Native.objc_msgSend("class objc.NSString", this, "unitStringFromMeters:usedUnit:", numberInMeters, unitp) as NSString

    override fun getObjectValue_forString_errorDescription(obj: Pointer<ObjCObject>, string: NSString, error: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "getObjectValue:forString:errorDescription:", obj, string, error) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFormatter.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSLengthFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSEnergyFormatter(pointer: Long) : NSFormatter(pointer) {
    public open fun numberFormatter(): NSNumberFormatter =
        Native.objc_msgSend("class objc.NSNumberFormatter", this, "numberFormatter") as NSNumberFormatter

    public open fun setNumberFormatter(numberFormatter: NSNumberFormatter): Unit {
        Native.objc_msgSend("void", this, "setNumberFormatter:", numberFormatter)
    }

    public open fun unitStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "unitStyle")

    public open fun setUnitStyle(unitStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setUnitStyle:", unitStyle)
    }

    public open fun isForFoodEnergyUse(): Boolean =
        Native.objc_msgSend("boolean", this, "isForFoodEnergyUse") as Boolean

    public open fun setForFoodEnergyUse(forFoodEnergyUse: Boolean): Unit {
        Native.objc_msgSend("void", this, "setForFoodEnergyUse:", forFoodEnergyUse)
    }

    public open fun stringFromValue_unit(value: Double, unit: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromValue:unit:", value, unit) as NSString

    public open fun stringFromJoules(numberInJoules: Double): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromJoules:", numberInJoules) as NSString

    public open fun unitStringFromValue_unit(value: Double, unit: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "unitStringFromValue:unit:", value, unit) as NSString

    public open fun unitStringFromJoules_usedUnit(numberInJoules: Double, unitp: Pointer<Any>): NSString =
        Native.objc_msgSend("class objc.NSString", this, "unitStringFromJoules:usedUnit:", numberInJoules, unitp) as NSString

    override fun getObjectValue_forString_errorDescription(obj: Pointer<ObjCObject>, string: NSString, error: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "getObjectValue:forString:errorDescription:", obj, string, error) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFormatter.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSEnergyFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScanner(pointer: Long) : NSObject(pointer), NSCopying, NSScanner_NSExtendedScanner, NSScanner_NSDecimalNumberScanning {
    public open fun string(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "string") as NSString

    public open fun scanLocation(): Int =
        Native.objc_msgSend("int", this, "scanLocation") as Int

    public open fun setScanLocation(scanLocation: Int): Unit {
        Native.objc_msgSend("void", this, "setScanLocation:", scanLocation)
    }

    public open fun charactersToBeSkipped(): NSCharacterSet =
        Native.objc_msgSend("class objc.NSCharacterSet", this, "charactersToBeSkipped") as NSCharacterSet

    public open fun setCharactersToBeSkipped(charactersToBeSkipped: NSCharacterSet): Unit {
        Native.objc_msgSend("void", this, "setCharactersToBeSkipped:", charactersToBeSkipped)
    }

    public open fun caseSensitive(): Boolean =
        Native.objc_msgSend("boolean", this, "caseSensitive") as Boolean

    public open fun setCaseSensitive(caseSensitive: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCaseSensitive:", caseSensitive)
    }

    public open fun locale(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "locale") as ObjCObject

    public open fun setLocale(locale: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setLocale:", locale)
    }

    public open fun initWithString(string: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", string) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSScanner_NSExtendedScanner.metaclass, NSScanner_NSDecimalNumberScanning.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSScanner")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDictionary(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration, NSDictionary_NSExtendedDictionary, NSDictionary_NSDictionaryCreation, NSDictionary_NSSharedKeySetDictionary, NSDictionary_NSFileAttributes, NSDictionary_NSKeyValueCoding {
    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun objectForKey(aKey: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForKey:", aKey) as ObjCObject

    public open fun keyEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "keyEnumerator") as NSEnumerator

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithObjects_forKeys_count(objects: Any, keys: Any, cnt: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjects:forKeys:count:", objects, keys, cnt) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass, NSFastEnumeration.metaclass, NSDictionary_NSExtendedDictionary.metaclass, NSDictionary_NSDictionaryCreation.metaclass, NSDictionary_NSSharedKeySetDictionary.metaclass, NSDictionary_NSFileAttributes.metaclass, NSDictionary_NSKeyValueCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDictionary")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableDictionary(pointer: Long) : NSDictionary(pointer), NSMutableDictionary_NSExtendedMutableDictionary, NSMutableDictionary_NSMutableDictionaryCreation, NSMutableDictionary_NSSharedKeySetDictionary, NSMutableDictionary_NSKeyValueCoding {
    public open fun removeObjectForKey(aKey: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObjectForKey:", aKey)
    }

    public open fun setObject_forKey(anObject: ObjCObject, aKey: Any): Unit {
        Native.objc_msgSend("void", this, "setObject:forKey:", anObject, aKey)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCapacity(numItems: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCapacity:", numItems) as ObjCObject

    override fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun initWithContentsOfFile(path: NSString): NSMutableDictionary =
        Native.objc_msgSend("class objc.NSMutableDictionary", this, "initWithContentsOfFile:", path) as NSMutableDictionary

    override fun initWithContentsOfURL(url: NSURL): NSMutableDictionary =
        Native.objc_msgSend("class objc.NSMutableDictionary", this, "initWithContentsOfURL:", url) as NSMutableDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSDictionary.metaclass, NSMutableDictionary_NSExtendedMutableDictionary.metaclass, NSMutableDictionary_NSMutableDictionaryCreation.metaclass, NSMutableDictionary_NSSharedKeySetDictionary.metaclass, NSMutableDictionary_NSKeyValueCoding.metaclass {
        override fun dictionaryWithContentsOfFile(path: NSString): NSMutableDictionary =
            Native.objc_msgSend("class objc.NSMutableDictionary", this, "dictionaryWithContentsOfFile:", path) as NSMutableDictionary

        override fun dictionaryWithContentsOfURL(url: NSURL): NSMutableDictionary =
            Native.objc_msgSend("class objc.NSMutableDictionary", this, "dictionaryWithContentsOfURL:", url) as NSMutableDictionary

    }

    companion object : NSObject(Native.objc_getClass("NSMutableDictionary")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDecimalNumber(pointer: Long) : NSNumber(pointer) {
    public open fun initWithMantissa_exponent_isNegative(mantissa: Long, exponent: Short, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithMantissa:exponent:isNegative:", mantissa, exponent, flag) as ObjCObject

    public open fun initWithDecimal(dcm: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDecimal:", dcm) as ObjCObject

    public open fun initWithString(numberValue: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", numberValue) as ObjCObject

    public open fun initWithString_locale(numberValue: NSString, locale: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:locale:", numberValue, locale) as ObjCObject

    override fun descriptionWithLocale(locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:", locale) as NSString

    override fun decimalValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "decimalValue")

    public open fun decimalNumberByAdding(decimalNumber: NSDecimalNumber): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByAdding:", decimalNumber) as NSDecimalNumber

    public open fun decimalNumberByAdding_withBehavior(decimalNumber: NSDecimalNumber, behavior: Any): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByAdding:withBehavior:", decimalNumber, behavior) as NSDecimalNumber

    public open fun decimalNumberBySubtracting(decimalNumber: NSDecimalNumber): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberBySubtracting:", decimalNumber) as NSDecimalNumber

    public open fun decimalNumberBySubtracting_withBehavior(decimalNumber: NSDecimalNumber, behavior: Any): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberBySubtracting:withBehavior:", decimalNumber, behavior) as NSDecimalNumber

    public open fun decimalNumberByMultiplyingBy(decimalNumber: NSDecimalNumber): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByMultiplyingBy:", decimalNumber) as NSDecimalNumber

    public open fun decimalNumberByMultiplyingBy_withBehavior(decimalNumber: NSDecimalNumber, behavior: Any): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByMultiplyingBy:withBehavior:", decimalNumber, behavior) as NSDecimalNumber

    public open fun decimalNumberByDividingBy(decimalNumber: NSDecimalNumber): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByDividingBy:", decimalNumber) as NSDecimalNumber

    public open fun decimalNumberByDividingBy_withBehavior(decimalNumber: NSDecimalNumber, behavior: Any): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByDividingBy:withBehavior:", decimalNumber, behavior) as NSDecimalNumber

    public open fun decimalNumberByRaisingToPower(power: Int): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByRaisingToPower:", power) as NSDecimalNumber

    public open fun decimalNumberByRaisingToPower_withBehavior(power: Int, behavior: Any): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByRaisingToPower:withBehavior:", power, behavior) as NSDecimalNumber

    public open fun decimalNumberByMultiplyingByPowerOf10(power: Short): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByMultiplyingByPowerOf10:", power) as NSDecimalNumber

    public open fun decimalNumberByMultiplyingByPowerOf10_withBehavior(power: Short, behavior: Any): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByMultiplyingByPowerOf10:withBehavior:", power, behavior) as NSDecimalNumber

    public open fun decimalNumberByRoundingAccordingToBehavior(behavior: Any): NSDecimalNumber =
        Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberByRoundingAccordingToBehavior:", behavior) as NSDecimalNumber

    override fun compare(decimalNumber: NSNumber): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:", decimalNumber)

    override fun objCType(): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "objCType") as Pointer<Char>

    override fun doubleValue(): Double =
        Native.objc_msgSend("double", this, "doubleValue") as Double

    override fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSNumber.metaclass {
        public open fun decimalNumberWithMantissa_exponent_isNegative(mantissa: Long, exponent: Short, flag: Boolean): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberWithMantissa:exponent:isNegative:", mantissa, exponent, flag) as NSDecimalNumber

        public open fun decimalNumberWithDecimal(dcm: Any): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberWithDecimal:", dcm) as NSDecimalNumber

        public open fun decimalNumberWithString(numberValue: NSString): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberWithString:", numberValue) as NSDecimalNumber

        public open fun decimalNumberWithString_locale(numberValue: NSString, locale: ObjCObject): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "decimalNumberWithString:locale:", numberValue, locale) as NSDecimalNumber

        public open fun zero(): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "zero") as NSDecimalNumber

        public open fun one(): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "one") as NSDecimalNumber

        public open fun minimumDecimalNumber(): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "minimumDecimalNumber") as NSDecimalNumber

        public open fun maximumDecimalNumber(): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "maximumDecimalNumber") as NSDecimalNumber

        public open fun notANumber(): NSDecimalNumber =
            Native.objc_msgSend("class objc.NSDecimalNumber", this, "notANumber") as NSDecimalNumber

        public open fun setDefaultBehavior(behavior: Any): Unit {
            Native.objc_msgSend("void", this, "setDefaultBehavior:", behavior)
        }

        public open fun defaultBehavior(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultBehavior")

    }

    companion object : NSObject(Native.objc_getClass("NSDecimalNumber")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDecimalNumberHandler(pointer: Long) : NSObject(pointer), NSDecimalNumberBehaviors, NSCoding {
    public open fun initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero(roundingMode: Any, scale: Short, exact: Boolean, overflow: Boolean, underflow: Boolean, divideByZero: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", roundingMode, scale, exact, overflow, underflow, divideByZero) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSDecimalNumberBehaviors.metaclass, NSCoding.metaclass {
        public open fun defaultDecimalNumberHandler(): NSDecimalNumberHandler =
            Native.objc_msgSend("class objc.NSDecimalNumberHandler", this, "defaultDecimalNumberHandler") as NSDecimalNumberHandler

        public open fun decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero(roundingMode: Any, scale: Short, exact: Boolean, overflow: Boolean, underflow: Boolean, divideByZero: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", roundingMode, scale, exact, overflow, underflow, divideByZero) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSDecimalNumberHandler")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSError(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun initWithDomain_code_userInfo(domain: NSString, code: Int, dict: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDomain:code:userInfo:", domain, code, dict) as ObjCObject

    public open fun domain(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "domain") as NSString

    public open fun code(): Int =
        Native.objc_msgSend("int", this, "code") as Int

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun localizedDescription(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedDescription") as NSString

    public open fun localizedFailureReason(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedFailureReason") as NSString

    public open fun localizedRecoverySuggestion(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedRecoverySuggestion") as NSString

    public open fun localizedRecoveryOptions(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "localizedRecoveryOptions") as NSArray

    public open fun recoveryAttempter(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "recoveryAttempter") as ObjCObject

    public open fun helpAnchor(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "helpAnchor") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun errorWithDomain_code_userInfo(domain: NSString, code: Int, dict: NSDictionary): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "errorWithDomain:code:userInfo:", domain, code, dict) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSError")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSException(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSException_NSExceptionRaisingConveniences {
    public open fun initWithName_reason_userInfo(aName: NSString, aReason: NSString, aUserInfo: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:reason:userInfo:", aName, aReason, aUserInfo) as ObjCObject

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun reason(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "reason") as NSString

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun callStackReturnAddresses(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "callStackReturnAddresses") as NSArray

    public open fun callStackSymbols(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "callStackSymbols") as NSArray

    public open fun raise(): Unit {
        Native.objc_msgSend("void", this, "raise")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSException_NSExceptionRaisingConveniences.metaclass {
        public open fun exceptionWithName_reason_userInfo(name: NSString, reason: NSString, userInfo: NSDictionary): NSException =
            Native.objc_msgSend("class objc.NSException", this, "exceptionWithName:reason:userInfo:", name, reason, userInfo) as NSException

    }

    companion object : NSObject(Native.objc_getClass("NSException")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAssertionHandler(pointer: Long) : NSObject(pointer) {
    public open fun handleFailureInMethod_object_file_lineNumber_description(selector: ObjCSelector, `object`: ObjCObject, fileName: NSString, line: Int, format: NSString): Unit {
        Native.objc_msgSend("void", this, "handleFailureInMethod:object:file:lineNumber:description:", selector, `object`, fileName, line, format)
    }

    public open fun handleFailureInFunction_file_lineNumber_description(functionName: NSString, fileName: NSString, line: Int, format: NSString): Unit {
        Native.objc_msgSend("void", this, "handleFailureInFunction:file:lineNumber:description:", functionName, fileName, line, format)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun currentHandler(): NSAssertionHandler =
            Native.objc_msgSend("class objc.NSAssertionHandler", this, "currentHandler") as NSAssertionHandler

    }

    companion object : NSObject(Native.objc_getClass("NSAssertionHandler")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFileHandle(pointer: Long) : NSObject(pointer), NSSecureCoding, NSFileHandle_NSFileHandleCreation, NSFileHandle_NSFileHandleAsynchronousAccess, NSFileHandle_NSFileHandlePlatformSpecific {
    public open fun availableData(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "availableData") as NSData

    public open fun readDataToEndOfFile(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "readDataToEndOfFile") as NSData

    public open fun readDataOfLength(length: Int): NSData =
        Native.objc_msgSend("class objc.NSData", this, "readDataOfLength:", length) as NSData

    public open fun writeData(data: NSData): Unit {
        Native.objc_msgSend("void", this, "writeData:", data)
    }

    public open fun offsetInFile(): Long =
        Native.objc_msgSend("long", this, "offsetInFile") as Long

    public open fun seekToEndOfFile(): Long =
        Native.objc_msgSend("long", this, "seekToEndOfFile") as Long

    public open fun seekToFileOffset(offset: Long): Unit {
        Native.objc_msgSend("void", this, "seekToFileOffset:", offset)
    }

    public open fun truncateFileAtOffset(offset: Long): Unit {
        Native.objc_msgSend("void", this, "truncateFileAtOffset:", offset)
    }

    public open fun synchronizeFile(): Unit {
        Native.objc_msgSend("void", this, "synchronizeFile")
    }

    public open fun closeFile(): Unit {
        Native.objc_msgSend("void", this, "closeFile")
    }

    public open fun initWithFileDescriptor_closeOnDealloc(fd: Int, closeopt: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFileDescriptor:closeOnDealloc:", fd, closeopt) as ObjCObject

    public open fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSFileHandle_NSFileHandleCreation.metaclass, NSFileHandle_NSFileHandleAsynchronousAccess.metaclass, NSFileHandle_NSFileHandlePlatformSpecific.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSFileHandle")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPipe(pointer: Long) : NSObject(pointer) {
    public open fun fileHandleForReading(): NSFileHandle =
        Native.objc_msgSend("class objc.NSFileHandle", this, "fileHandleForReading") as NSFileHandle

    public open fun fileHandleForWriting(): NSFileHandle =
        Native.objc_msgSend("class objc.NSFileHandle", this, "fileHandleForWriting") as NSFileHandle

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun pipe(): NSPipe =
            Native.objc_msgSend("class objc.NSPipe", this, "pipe") as NSPipe

    }

    companion object : NSObject(Native.objc_getClass("NSPipe")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFileManager(pointer: Long) : NSObject(pointer) {
    public open fun mountedVolumeURLsIncludingResourceValuesForKeys_options(propertyKeys: NSArray, options: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "mountedVolumeURLsIncludingResourceValuesForKeys:options:", propertyKeys, options) as NSArray

    public open fun contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error(url: NSURL, keys: NSArray, mask: Any, error: Pointer<NSError>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", url, keys, mask, error) as NSArray

    public open fun URLsForDirectory_inDomains(directory: Any, domainMask: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "URLsForDirectory:inDomains:", directory, domainMask) as NSArray

    public open fun URLForDirectory_inDomain_appropriateForURL_create_error(directory: Any, domain: Any, url: NSURL, shouldCreate: Boolean, error: Pointer<NSError>): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForDirectory:inDomain:appropriateForURL:create:error:", directory, domain, url, shouldCreate, error) as NSURL

    public open fun getRelationship_ofDirectoryAtURL_toItemAtURL_error(outRelationship: Pointer<Any>, directoryURL: NSURL, otherURL: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "getRelationship:ofDirectoryAtURL:toItemAtURL:error:", outRelationship, directoryURL, otherURL, error) as Boolean

    public open fun getRelationship_ofDirectory_inDomain_toItemAtURL_error(outRelationship: Pointer<Any>, directory: Any, domainMask: Any, url: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "getRelationship:ofDirectory:inDomain:toItemAtURL:error:", outRelationship, directory, domainMask, url, error) as Boolean

    public open fun createDirectoryAtURL_withIntermediateDirectories_attributes_error(url: NSURL, createIntermediates: Boolean, attributes: NSDictionary, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", url, createIntermediates, attributes, error) as Boolean

    public open fun createSymbolicLinkAtURL_withDestinationURL_error(url: NSURL, destURL: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "createSymbolicLinkAtURL:withDestinationURL:error:", url, destURL, error) as Boolean

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun setAttributes_ofItemAtPath_error(attributes: NSDictionary, path: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "setAttributes:ofItemAtPath:error:", attributes, path, error) as Boolean

    public open fun createDirectoryAtPath_withIntermediateDirectories_attributes_error(path: NSString, createIntermediates: Boolean, attributes: NSDictionary, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", path, createIntermediates, attributes, error) as Boolean

    public open fun contentsOfDirectoryAtPath_error(path: NSString, error: Pointer<NSError>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "contentsOfDirectoryAtPath:error:", path, error) as NSArray

    public open fun subpathsOfDirectoryAtPath_error(path: NSString, error: Pointer<NSError>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "subpathsOfDirectoryAtPath:error:", path, error) as NSArray

    public open fun attributesOfItemAtPath_error(path: NSString, error: Pointer<NSError>): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "attributesOfItemAtPath:error:", path, error) as NSDictionary

    public open fun attributesOfFileSystemForPath_error(path: NSString, error: Pointer<NSError>): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "attributesOfFileSystemForPath:error:", path, error) as NSDictionary

    public open fun createSymbolicLinkAtPath_withDestinationPath_error(path: NSString, destPath: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "createSymbolicLinkAtPath:withDestinationPath:error:", path, destPath, error) as Boolean

    public open fun destinationOfSymbolicLinkAtPath_error(path: NSString, error: Pointer<NSError>): NSString =
        Native.objc_msgSend("class objc.NSString", this, "destinationOfSymbolicLinkAtPath:error:", path, error) as NSString

    public open fun copyItemAtPath_toPath_error(srcPath: NSString, dstPath: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "copyItemAtPath:toPath:error:", srcPath, dstPath, error) as Boolean

    public open fun moveItemAtPath_toPath_error(srcPath: NSString, dstPath: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "moveItemAtPath:toPath:error:", srcPath, dstPath, error) as Boolean

    public open fun linkItemAtPath_toPath_error(srcPath: NSString, dstPath: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "linkItemAtPath:toPath:error:", srcPath, dstPath, error) as Boolean

    public open fun removeItemAtPath_error(path: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "removeItemAtPath:error:", path, error) as Boolean

    public open fun copyItemAtURL_toURL_error(srcURL: NSURL, dstURL: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "copyItemAtURL:toURL:error:", srcURL, dstURL, error) as Boolean

    public open fun moveItemAtURL_toURL_error(srcURL: NSURL, dstURL: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "moveItemAtURL:toURL:error:", srcURL, dstURL, error) as Boolean

    public open fun linkItemAtURL_toURL_error(srcURL: NSURL, dstURL: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "linkItemAtURL:toURL:error:", srcURL, dstURL, error) as Boolean

    public open fun removeItemAtURL_error(URL: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "removeItemAtURL:error:", URL, error) as Boolean

    public open fun trashItemAtURL_resultingItemURL_error(url: NSURL, outResultingURL: Pointer<NSURL>, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "trashItemAtURL:resultingItemURL:error:", url, outResultingURL, error) as Boolean

    public open fun fileAttributesAtPath_traverseLink(path: NSString, yorn: Boolean): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fileAttributesAtPath:traverseLink:", path, yorn) as NSDictionary

    public open fun changeFileAttributes_atPath(attributes: NSDictionary, path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "changeFileAttributes:atPath:", attributes, path) as Boolean

    public open fun directoryContentsAtPath(path: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "directoryContentsAtPath:", path) as NSArray

    public open fun fileSystemAttributesAtPath(path: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fileSystemAttributesAtPath:", path) as NSDictionary

    public open fun pathContentOfSymbolicLinkAtPath(path: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathContentOfSymbolicLinkAtPath:", path) as NSString

    public open fun createSymbolicLinkAtPath_pathContent(path: NSString, otherpath: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "createSymbolicLinkAtPath:pathContent:", path, otherpath) as Boolean

    public open fun createDirectoryAtPath_attributes(path: NSString, attributes: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "createDirectoryAtPath:attributes:", path, attributes) as Boolean

    public open fun linkPath_toPath_handler(src: NSString, dest: NSString, handler: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "linkPath:toPath:handler:", src, dest, handler) as Boolean

    public open fun copyPath_toPath_handler(src: NSString, dest: NSString, handler: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "copyPath:toPath:handler:", src, dest, handler) as Boolean

    public open fun movePath_toPath_handler(src: NSString, dest: NSString, handler: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "movePath:toPath:handler:", src, dest, handler) as Boolean

    public open fun removeFileAtPath_handler(path: NSString, handler: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "removeFileAtPath:handler:", path, handler) as Boolean

    public open fun currentDirectoryPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "currentDirectoryPath") as NSString

    public open fun changeCurrentDirectoryPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "changeCurrentDirectoryPath:", path) as Boolean

    public open fun fileExistsAtPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "fileExistsAtPath:", path) as Boolean

    public open fun fileExistsAtPath_isDirectory(path: NSString, isDirectory: Pointer<Boolean>): Boolean =
        Native.objc_msgSend("boolean", this, "fileExistsAtPath:isDirectory:", path, isDirectory) as Boolean

    public open fun isReadableFileAtPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isReadableFileAtPath:", path) as Boolean

    public open fun isWritableFileAtPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isWritableFileAtPath:", path) as Boolean

    public open fun isExecutableFileAtPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isExecutableFileAtPath:", path) as Boolean

    public open fun isDeletableFileAtPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isDeletableFileAtPath:", path) as Boolean

    public open fun contentsEqualAtPath_andPath(path1: NSString, path2: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "contentsEqualAtPath:andPath:", path1, path2) as Boolean

    public open fun displayNameAtPath(path: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "displayNameAtPath:", path) as NSString

    public open fun componentsToDisplayForPath(path: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "componentsToDisplayForPath:", path) as NSArray

    public open fun enumeratorAtPath(path: NSString): NSDirectoryEnumerator =
        Native.objc_msgSend("class objc.NSDirectoryEnumerator", this, "enumeratorAtPath:", path) as NSDirectoryEnumerator

    public open fun enumeratorAtURL_includingPropertiesForKeys_options_errorHandler(url: NSURL, keys: NSArray, mask: Any, handler: Any): NSDirectoryEnumerator =
        Native.objc_msgSend("class objc.NSDirectoryEnumerator", this, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", url, keys, mask, handler) as NSDirectoryEnumerator

    public open fun subpathsAtPath(path: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "subpathsAtPath:", path) as NSArray

    public open fun contentsAtPath(path: NSString): NSData =
        Native.objc_msgSend("class objc.NSData", this, "contentsAtPath:", path) as NSData

    public open fun createFileAtPath_contents_attributes(path: NSString, data: NSData, attr: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "createFileAtPath:contents:attributes:", path, data, attr) as Boolean

    public open fun fileSystemRepresentationWithPath(path: NSString): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "fileSystemRepresentationWithPath:", path) as Pointer<Char>

    public open fun stringWithFileSystemRepresentation_length(str: Pointer<Char>, len: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringWithFileSystemRepresentation:length:", str, len) as NSString

    public open fun replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error(originalItemURL: NSURL, newItemURL: NSURL, backupItemName: NSString, options: Any, resultingURL: Pointer<NSURL>, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", originalItemURL, newItemURL, backupItemName, options, resultingURL, error) as Boolean

    public open fun setUbiquitous_itemAtURL_destinationURL_error(flag: Boolean, url: NSURL, destinationURL: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "setUbiquitous:itemAtURL:destinationURL:error:", flag, url, destinationURL, error) as Boolean

    public open fun isUbiquitousItemAtURL(url: NSURL): Boolean =
        Native.objc_msgSend("boolean", this, "isUbiquitousItemAtURL:", url) as Boolean

    public open fun startDownloadingUbiquitousItemAtURL_error(url: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "startDownloadingUbiquitousItemAtURL:error:", url, error) as Boolean

    public open fun evictUbiquitousItemAtURL_error(url: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "evictUbiquitousItemAtURL:error:", url, error) as Boolean

    public open fun URLForUbiquityContainerIdentifier(containerIdentifier: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForUbiquityContainerIdentifier:", containerIdentifier) as NSURL

    public open fun URLForPublishingUbiquitousItemAtURL_expirationDate_error(url: NSURL, outDate: Pointer<NSDate>, error: Pointer<NSError>): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForPublishingUbiquitousItemAtURL:expirationDate:error:", url, outDate, error) as NSURL

    public open fun ubiquityIdentityToken(): Any =
        Native.objc_msgSend("class objc.Any", this, "ubiquityIdentityToken")

    public open fun containerURLForSecurityApplicationGroupIdentifier(groupIdentifier: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "containerURLForSecurityApplicationGroupIdentifier:", groupIdentifier) as NSURL

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun defaultManager(): NSFileManager =
            Native.objc_msgSend("class objc.NSFileManager", this, "defaultManager") as NSFileManager

    }

    companion object : NSObject(Native.objc_getClass("NSFileManager")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDirectoryEnumerator(pointer: Long) : NSEnumerator(pointer) {
    public open fun fileAttributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fileAttributes") as NSDictionary

    public open fun directoryAttributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "directoryAttributes") as NSDictionary

    public open fun skipDescendents(): Unit {
        Native.objc_msgSend("void", this, "skipDescendents")
    }

    public open fun level(): Int =
        Native.objc_msgSend("int", this, "level") as Int

    public open fun skipDescendants(): Unit {
        Native.objc_msgSend("void", this, "skipDescendants")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSEnumerator.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDirectoryEnumerator")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPointerFunctions(pointer: Long) : NSObject(pointer), NSCopying {
    public open fun initWithOptions(options: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithOptions:", options) as ObjCObject

    public open fun hashFunction(): (Pointer<Unit>, (Pointer<Unit>) -> Int) -> Int =
        Native.objc_msgSend("class kotlin.Function2", this, "hashFunction") as (Pointer<Unit>, (Pointer<Unit>) -> Int) -> Int

    public open fun setHashFunction(hashFunction: (Pointer<Unit>, (Pointer<Unit>) -> Int) -> Int): Unit {
        Native.objc_msgSend("void", this, "setHashFunction:", hashFunction)
    }

    public open fun isEqualFunction(): (Pointer<Unit>, Pointer<Unit>, (Pointer<Unit>) -> Int) -> Boolean =
        Native.objc_msgSend("class kotlin.Function3", this, "isEqualFunction") as (Pointer<Unit>, Pointer<Unit>, (Pointer<Unit>) -> Int) -> Boolean

    public open fun setIsEqualFunction(isEqualFunction: (Pointer<Unit>, Pointer<Unit>, (Pointer<Unit>) -> Int) -> Boolean): Unit {
        Native.objc_msgSend("void", this, "setIsEqualFunction:", isEqualFunction)
    }

    public open fun sizeFunction(): (Pointer<Unit>) -> Int =
        Native.objc_msgSend("class kotlin.Function1", this, "sizeFunction") as (Pointer<Unit>) -> Int

    public open fun setSizeFunction(sizeFunction: (Pointer<Unit>) -> Int): Unit {
        Native.objc_msgSend("void", this, "setSizeFunction:", sizeFunction)
    }

    public open fun descriptionFunction(): (Pointer<Unit>) -> NSString =
        Native.objc_msgSend("class kotlin.Function1", this, "descriptionFunction") as (Pointer<Unit>) -> NSString

    public open fun setDescriptionFunction(descriptionFunction: (Pointer<Unit>) -> NSString): Unit {
        Native.objc_msgSend("void", this, "setDescriptionFunction:", descriptionFunction)
    }

    public open fun relinquishFunction(): (Pointer<Unit>, (Pointer<Unit>) -> Int) -> Unit =
        Native.objc_msgSend("class kotlin.Function2", this, "relinquishFunction") as (Pointer<Unit>, (Pointer<Unit>) -> Int) -> Unit

    public open fun setRelinquishFunction(relinquishFunction: (Pointer<Unit>, (Pointer<Unit>) -> Int) -> Unit): Unit {
        Native.objc_msgSend("void", this, "setRelinquishFunction:", relinquishFunction)
    }

    public open fun acquireFunction(): (Pointer<Unit>, (Pointer<Unit>) -> Int, Boolean) -> Pointer<*> =
        Native.objc_msgSend("class kotlin.Function3", this, "acquireFunction") as (Pointer<Unit>, (Pointer<Unit>) -> Int, Boolean) -> Pointer<*>

    public open fun setAcquireFunction(acquireFunction: (Pointer<Unit>, (Pointer<Unit>) -> Int, Boolean) -> Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "setAcquireFunction:", acquireFunction)
    }

    public open fun usesStrongWriteBarrier(): Boolean =
        Native.objc_msgSend("boolean", this, "usesStrongWriteBarrier") as Boolean

    public open fun setUsesStrongWriteBarrier(usesStrongWriteBarrier: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesStrongWriteBarrier:", usesStrongWriteBarrier)
    }

    public open fun usesWeakReadAndWriteBarriers(): Boolean =
        Native.objc_msgSend("boolean", this, "usesWeakReadAndWriteBarriers") as Boolean

    public open fun setUsesWeakReadAndWriteBarriers(usesWeakReadAndWriteBarriers: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesWeakReadAndWriteBarriers:", usesWeakReadAndWriteBarriers)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass {
        public open fun pointerFunctionsWithOptions(options: Int): NSPointerFunctions =
            Native.objc_msgSend("class objc.NSPointerFunctions", this, "pointerFunctionsWithOptions:", options) as NSPointerFunctions

    }

    companion object : NSObject(Native.objc_getClass("NSPointerFunctions")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHashTable(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSFastEnumeration {
    public open fun initWithOptions_capacity(options: Int, initialCapacity: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithOptions:capacity:", options, initialCapacity) as ObjCObject

    public open fun initWithPointerFunctions_capacity(functions: NSPointerFunctions, initialCapacity: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPointerFunctions:capacity:", functions, initialCapacity) as ObjCObject

    public open fun pointerFunctions(): NSPointerFunctions =
        Native.objc_msgSend("class objc.NSPointerFunctions", this, "pointerFunctions") as NSPointerFunctions

    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun member(`object`: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "member:", `object`) as ObjCObject

    public open fun objectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "objectEnumerator") as NSEnumerator

    public open fun addObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", `object`)
    }

    public open fun removeObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObject:", `object`)
    }

    public open fun removeAllObjects(): Unit {
        Native.objc_msgSend("void", this, "removeAllObjects")
    }

    public open fun allObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allObjects") as NSArray

    public open fun anyObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "anyObject") as ObjCObject

    public open fun containsObject(anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "containsObject:", anObject) as Boolean

    public open fun intersectsHashTable(other: NSHashTable): Boolean =
        Native.objc_msgSend("boolean", this, "intersectsHashTable:", other) as Boolean

    public open fun isEqualToHashTable(other: NSHashTable): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToHashTable:", other) as Boolean

    public open fun isSubsetOfHashTable(other: NSHashTable): Boolean =
        Native.objc_msgSend("boolean", this, "isSubsetOfHashTable:", other) as Boolean

    public open fun intersectHashTable(other: NSHashTable): Unit {
        Native.objc_msgSend("void", this, "intersectHashTable:", other)
    }

    public open fun unionHashTable(other: NSHashTable): Unit {
        Native.objc_msgSend("void", this, "unionHashTable:", other)
    }

    public open fun minusHashTable(other: NSHashTable): Unit {
        Native.objc_msgSend("void", this, "minusHashTable:", other)
    }

    public open fun setRepresentation(): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "setRepresentation") as NSSet

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSFastEnumeration.metaclass {
        public open fun hashTableWithOptions(options: Int): NSHashTable =
            Native.objc_msgSend("class objc.NSHashTable", this, "hashTableWithOptions:", options) as NSHashTable

        public open fun hashTableWithWeakObjects(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "hashTableWithWeakObjects") as ObjCObject

        public open fun weakObjectsHashTable(): NSHashTable =
            Native.objc_msgSend("class objc.NSHashTable", this, "weakObjectsHashTable") as NSHashTable

    }

    companion object : NSObject(Native.objc_getClass("NSHashTable")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHTTPCookie(pointer: Long) : NSObject(pointer) {
    public open fun initWithProperties(properties: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithProperties:", properties) as ObjCObject

    public open fun properties(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "properties") as NSDictionary

    public open fun version(): Int =
        Native.objc_msgSend("int", this, "version") as Int

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    override fun value(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "value") as NSString

    public open fun expiresDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "expiresDate") as NSDate

    public open fun isSessionOnly(): Boolean =
        Native.objc_msgSend("boolean", this, "isSessionOnly") as Boolean

    public open fun domain(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "domain") as NSString

    public open fun path(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "path") as NSString

    public open fun isSecure(): Boolean =
        Native.objc_msgSend("boolean", this, "isSecure") as Boolean

    public open fun isHTTPOnly(): Boolean =
        Native.objc_msgSend("boolean", this, "isHTTPOnly") as Boolean

    public open fun comment(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "comment") as NSString

    public open fun commentURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "commentURL") as NSURL

    public open fun portList(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "portList") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun cookieWithProperties(properties: NSDictionary): NSHTTPCookie =
            Native.objc_msgSend("class objc.NSHTTPCookie", this, "cookieWithProperties:", properties) as NSHTTPCookie

        public open fun requestHeaderFieldsWithCookies(cookies: NSArray): NSDictionary =
            Native.objc_msgSend("class objc.NSDictionary", this, "requestHeaderFieldsWithCookies:", cookies) as NSDictionary

        public open fun cookiesWithResponseHeaderFields_forURL(headerFields: NSDictionary, URL: NSURL): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "cookiesWithResponseHeaderFields:forURL:", headerFields, URL) as NSArray

    }

    companion object : NSObject(Native.objc_getClass("NSHTTPCookie")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHTTPCookieStorage(pointer: Long) : NSObject(pointer), NSHTTPCookieStorage_NSURLSessionTaskAdditions {
    public open fun cookies(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "cookies") as NSArray

    public open fun setCookie(cookie: NSHTTPCookie): Unit {
        Native.objc_msgSend("void", this, "setCookie:", cookie)
    }

    public open fun deleteCookie(cookie: NSHTTPCookie): Unit {
        Native.objc_msgSend("void", this, "deleteCookie:", cookie)
    }

    public open fun removeCookiesSinceDate(date: NSDate): Unit {
        Native.objc_msgSend("void", this, "removeCookiesSinceDate:", date)
    }

    public open fun cookiesForURL(URL: NSURL): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "cookiesForURL:", URL) as NSArray

    public open fun setCookies_forURL_mainDocumentURL(cookies: NSArray, URL: NSURL, mainDocumentURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setCookies:forURL:mainDocumentURL:", cookies, URL, mainDocumentURL)
    }

    public open fun cookieAcceptPolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "cookieAcceptPolicy")

    public open fun setCookieAcceptPolicy(cookieAcceptPolicy: Any): Unit {
        Native.objc_msgSend("void", this, "setCookieAcceptPolicy:", cookieAcceptPolicy)
    }

    public open fun sortedCookiesUsingDescriptors(sortOrder: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedCookiesUsingDescriptors:", sortOrder) as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSHTTPCookieStorage_NSURLSessionTaskAdditions.metaclass {
        public open fun sharedHTTPCookieStorage(): NSHTTPCookieStorage =
            Native.objc_msgSend("class objc.NSHTTPCookieStorage", this, "sharedHTTPCookieStorage") as NSHTTPCookieStorage

    }

    companion object : NSObject(Native.objc_getClass("NSHTTPCookieStorage")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSIndexPath(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun initWithIndexes_length(indexes: Any, length: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIndexes:length:", indexes, length) as ObjCObject

    public open fun initWithIndex(index: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIndex:", index) as ObjCObject

    public open fun indexPathByAddingIndex(index: Int): NSIndexPath =
        Native.objc_msgSend("class objc.NSIndexPath", this, "indexPathByAddingIndex:", index) as NSIndexPath

    public open fun indexPathByRemovingLastIndex(): NSIndexPath =
        Native.objc_msgSend("class objc.NSIndexPath", this, "indexPathByRemovingLastIndex") as NSIndexPath

    public open fun indexAtPosition(position: Int): Int =
        Native.objc_msgSend("int", this, "indexAtPosition:", position) as Int

    public open fun length(): Int =
        Native.objc_msgSend("int", this, "length") as Int

    public open fun getIndexes(indexes: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "getIndexes:", indexes)
    }

    public open fun compare(otherObject: NSIndexPath): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:", otherObject)

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun indexPathWithIndex(index: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "indexPathWithIndex:", index) as ObjCObject

        public open fun indexPathWithIndexes_length(indexes: Any, length: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "indexPathWithIndexes:length:", indexes, length) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSIndexPath")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSIndexSet(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding {
    public open fun initWithIndexesInRange(range: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIndexesInRange:", range) as ObjCObject

    public open fun initWithIndexSet(indexSet: NSIndexSet): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIndexSet:", indexSet) as ObjCObject

    public open fun initWithIndex(value: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIndex:", value) as ObjCObject

    public open fun isEqualToIndexSet(indexSet: NSIndexSet): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToIndexSet:", indexSet) as Boolean

    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun firstIndex(): Int =
        Native.objc_msgSend("int", this, "firstIndex") as Int

    public open fun lastIndex(): Int =
        Native.objc_msgSend("int", this, "lastIndex") as Int

    public open fun indexGreaterThanIndex(value: Int): Int =
        Native.objc_msgSend("int", this, "indexGreaterThanIndex:", value) as Int

    public open fun indexLessThanIndex(value: Int): Int =
        Native.objc_msgSend("int", this, "indexLessThanIndex:", value) as Int

    public open fun indexGreaterThanOrEqualToIndex(value: Int): Int =
        Native.objc_msgSend("int", this, "indexGreaterThanOrEqualToIndex:", value) as Int

    public open fun indexLessThanOrEqualToIndex(value: Int): Int =
        Native.objc_msgSend("int", this, "indexLessThanOrEqualToIndex:", value) as Int

    public open fun getIndexes_maxCount_inIndexRange(indexBuffer: Pointer<Int>, bufferSize: Int, range: Pointer<Any>): Int =
        Native.objc_msgSend("int", this, "getIndexes:maxCount:inIndexRange:", indexBuffer, bufferSize, range) as Int

    public open fun countOfIndexesInRange(range: Any): Int =
        Native.objc_msgSend("int", this, "countOfIndexesInRange:", range) as Int

    public open fun containsIndex(value: Int): Boolean =
        Native.objc_msgSend("boolean", this, "containsIndex:", value) as Boolean

    public open fun containsIndexesInRange(range: Any): Boolean =
        Native.objc_msgSend("boolean", this, "containsIndexesInRange:", range) as Boolean

    public open fun containsIndexes(indexSet: NSIndexSet): Boolean =
        Native.objc_msgSend("boolean", this, "containsIndexes:", indexSet) as Boolean

    public open fun intersectsIndexesInRange(range: Any): Boolean =
        Native.objc_msgSend("boolean", this, "intersectsIndexesInRange:", range) as Boolean

    public open fun enumerateIndexesUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateIndexesUsingBlock:", block)
    }

    public open fun enumerateIndexesWithOptions_usingBlock(opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateIndexesWithOptions:usingBlock:", opts, block)
    }

    public open fun enumerateIndexesInRange_options_usingBlock(range: Any, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateIndexesInRange:options:usingBlock:", range, opts, block)
    }

    public open fun indexPassingTest(predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexPassingTest:", predicate) as Int

    public open fun indexWithOptions_passingTest(opts: Any, predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexWithOptions:passingTest:", opts, predicate) as Int

    public open fun indexInRange_options_passingTest(range: Any, opts: Any, predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexInRange:options:passingTest:", range, opts, predicate) as Int

    public open fun indexesPassingTest(predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesPassingTest:", predicate) as NSIndexSet

    public open fun indexesWithOptions_passingTest(opts: Any, predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesWithOptions:passingTest:", opts, predicate) as NSIndexSet

    public open fun indexesInRange_options_passingTest(range: Any, opts: Any, predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesInRange:options:passingTest:", range, opts, predicate) as NSIndexSet

    public open fun enumerateRangesUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateRangesUsingBlock:", block)
    }

    public open fun enumerateRangesWithOptions_usingBlock(opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateRangesWithOptions:usingBlock:", opts, block)
    }

    public open fun enumerateRangesInRange_options_usingBlock(range: Any, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateRangesInRange:options:usingBlock:", range, opts, block)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass {
        public open fun indexSet(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "indexSet") as ObjCObject

        public open fun indexSetWithIndex(value: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "indexSetWithIndex:", value) as ObjCObject

        public open fun indexSetWithIndexesInRange(range: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "indexSetWithIndexesInRange:", range) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSIndexSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableIndexSet(pointer: Long) : NSIndexSet(pointer) {
    public open fun addIndexes(indexSet: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "addIndexes:", indexSet)
    }

    public open fun removeIndexes(indexSet: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "removeIndexes:", indexSet)
    }

    public open fun removeAllIndexes(): Unit {
        Native.objc_msgSend("void", this, "removeAllIndexes")
    }

    public open fun addIndex(value: Int): Unit {
        Native.objc_msgSend("void", this, "addIndex:", value)
    }

    public open fun removeIndex(value: Int): Unit {
        Native.objc_msgSend("void", this, "removeIndex:", value)
    }

    public open fun addIndexesInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "addIndexesInRange:", range)
    }

    public open fun removeIndexesInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "removeIndexesInRange:", range)
    }

    public open fun shiftIndexesStartingAtIndex_by(index: Int, delta: Int): Unit {
        Native.objc_msgSend("void", this, "shiftIndexesStartingAtIndex:by:", index, delta)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSIndexSet.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMutableIndexSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSInvocation(pointer: Long) : NSObject(pointer) {
    public open fun methodSignature(): NSMethodSignature =
        Native.objc_msgSend("class objc.NSMethodSignature", this, "methodSignature") as NSMethodSignature

    public open fun retainArguments(): Unit {
        Native.objc_msgSend("void", this, "retainArguments")
    }

    public open fun argumentsRetained(): Boolean =
        Native.objc_msgSend("boolean", this, "argumentsRetained") as Boolean

    public open fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    public open fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    public open fun selector(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "selector") as ObjCSelector

    public open fun setSelector(selector: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setSelector:", selector)
    }

    public open fun getReturnValue(retLoc: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "getReturnValue:", retLoc)
    }

    public open fun setReturnValue(retLoc: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "setReturnValue:", retLoc)
    }

    public open fun getArgument_atIndex(argumentLocation: Pointer<*>, idx: Int): Unit {
        Native.objc_msgSend("void", this, "getArgument:atIndex:", argumentLocation, idx)
    }

    public open fun setArgument_atIndex(argumentLocation: Pointer<*>, idx: Int): Unit {
        Native.objc_msgSend("void", this, "setArgument:atIndex:", argumentLocation, idx)
    }

    public open fun invoke(): Unit {
        Native.objc_msgSend("void", this, "invoke")
    }

    public open fun invokeWithTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "invokeWithTarget:", target)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun invocationWithMethodSignature(sig: NSMethodSignature): NSInvocation =
            Native.objc_msgSend("class objc.NSInvocation", this, "invocationWithMethodSignature:", sig) as NSInvocation

    }

    companion object : NSObject(Native.objc_getClass("NSInvocation")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSJSONSerialization(pointer: Long) : NSObject(pointer) {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun isValidJSONObject(obj: ObjCObject): Boolean =
            Native.objc_msgSend("boolean", this, "isValidJSONObject:", obj) as Boolean

        public open fun dataWithJSONObject_options_error(obj: ObjCObject, opt: Any, error: Pointer<NSError>): NSData =
            Native.objc_msgSend("class objc.NSData", this, "dataWithJSONObject:options:error:", obj, opt, error) as NSData

        public open fun JSONObjectWithData_options_error(data: NSData, opt: Any, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "JSONObjectWithData:options:error:", data, opt, error) as ObjCObject

        public open fun writeJSONObject_toStream_options_error(obj: ObjCObject, stream: NSOutputStream, opt: Any, error: Pointer<NSError>): Int =
            Native.objc_msgSend("int", this, "writeJSONObject:toStream:options:error:", obj, stream, opt, error) as Int

        public open fun JSONObjectWithStream_options_error(stream: NSInputStream, opt: Any, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "JSONObjectWithStream:options:error:", stream, opt, error) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSJSONSerialization")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOrderedSet(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration, NSOrderedSet_NSExtendedOrderedSet, NSOrderedSet_NSOrderedSetCreation, NSOrderedSet_NSKeyValueCoding, NSOrderedSet_NSKeyValueObserverRegistration, NSOrderedSet_NSKeyValueSorting, NSOrderedSet_NSPredicateSupport {
    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun objectAtIndex(idx: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectAtIndex:", idx) as ObjCObject

    public open fun indexOfObject(`object`: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfObject:", `object`) as Int

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithObjects_count(objects: Any, cnt: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjects:count:", objects, cnt) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    override fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    override fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass, NSFastEnumeration.metaclass, NSOrderedSet_NSExtendedOrderedSet.metaclass, NSOrderedSet_NSOrderedSetCreation.metaclass, NSOrderedSet_NSKeyValueCoding.metaclass, NSOrderedSet_NSKeyValueObserverRegistration.metaclass, NSOrderedSet_NSKeyValueSorting.metaclass, NSOrderedSet_NSPredicateSupport.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSOrderedSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableOrderedSet(pointer: Long) : NSOrderedSet(pointer), NSMutableOrderedSet_NSExtendedMutableOrderedSet, NSMutableOrderedSet_NSMutableOrderedSetCreation, NSMutableOrderedSet_NSKeyValueSorting, NSMutableOrderedSet_NSPredicateSupport {
    public open fun insertObject_atIndex(`object`: ObjCObject, idx: Int): Unit {
        Native.objc_msgSend("void", this, "insertObject:atIndex:", `object`, idx)
    }

    public open fun removeObjectAtIndex(idx: Int): Unit {
        Native.objc_msgSend("void", this, "removeObjectAtIndex:", idx)
    }

    public open fun replaceObjectAtIndex_withObject(idx: Int, `object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "replaceObjectAtIndex:withObject:", idx, `object`)
    }

    override fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCapacity(numItems: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCapacity:", numItems) as ObjCObject

    override fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    override fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    override fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSOrderedSet.metaclass, NSMutableOrderedSet_NSExtendedMutableOrderedSet.metaclass, NSMutableOrderedSet_NSMutableOrderedSetCreation.metaclass, NSMutableOrderedSet_NSKeyValueSorting.metaclass, NSMutableOrderedSet_NSPredicateSupport.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMutableOrderedSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSet(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration, NSSet_NSExtendedSet, NSSet_NSSetCreation, NSSet_NSKeyValueCoding, NSSet_NSKeyValueObserverRegistration, NSSet_NSSortDescriptorSorting, NSSet_NSPredicateSupport {
    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun member(`object`: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "member:", `object`) as ObjCObject

    public open fun objectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "objectEnumerator") as NSEnumerator

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithObjects_count(objects: Any, cnt: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjects:count:", objects, cnt) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    override fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    override fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass, NSFastEnumeration.metaclass, NSSet_NSExtendedSet.metaclass, NSSet_NSSetCreation.metaclass, NSSet_NSKeyValueCoding.metaclass, NSSet_NSKeyValueObserverRegistration.metaclass, NSSet_NSSortDescriptorSorting.metaclass, NSSet_NSPredicateSupport.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableSet(pointer: Long) : NSSet(pointer), NSMutableSet_NSExtendedMutableSet, NSMutableSet_NSMutableSetCreation, NSMutableSet_NSPredicateSupport {
    public open fun addObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", `object`)
    }

    public open fun removeObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObject:", `object`)
    }

    override fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCapacity(numItems: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCapacity:", numItems) as ObjCObject

    override fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    override fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    override fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSSet.metaclass, NSMutableSet_NSExtendedMutableSet.metaclass, NSMutableSet_NSMutableSetCreation.metaclass, NSMutableSet_NSPredicateSupport.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMutableSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCountedSet(pointer: Long) : NSMutableSet(pointer) {
    override fun initWithCapacity(numItems: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCapacity:", numItems) as ObjCObject

    override fun initWithArray(array: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithArray:", array) as ObjCObject

    override fun initWithSet(set: NSSet): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSet:", set) as ObjCObject

    public open fun countForObject(`object`: ObjCObject): Int =
        Native.objc_msgSend("int", this, "countForObject:", `object`) as Int

    override fun objectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "objectEnumerator") as NSEnumerator

    override fun addObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", `object`)
    }

    override fun removeObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObject:", `object`)
    }

    override fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    override fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    override fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    override fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : NSMutableSet.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCountedSet")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPropertyListSerialization(pointer: Long) : NSObject(pointer) {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun propertyList_isValidForFormat(plist: ObjCObject, format: Any): Boolean =
            Native.objc_msgSend("boolean", this, "propertyList:isValidForFormat:", plist, format) as Boolean

        public open fun dataWithPropertyList_format_options_error(plist: ObjCObject, format: Any, opt: Int, error: Pointer<NSError>): NSData =
            Native.objc_msgSend("class objc.NSData", this, "dataWithPropertyList:format:options:error:", plist, format, opt, error) as NSData

        public open fun writePropertyList_toStream_format_options_error(plist: ObjCObject, stream: NSOutputStream, format: Any, opt: Int, error: Pointer<NSError>): Int =
            Native.objc_msgSend("int", this, "writePropertyList:toStream:format:options:error:", plist, stream, format, opt, error) as Int

        public open fun propertyListWithData_options_format_error(data: NSData, opt: Int, format: Pointer<Any>, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyListWithData:options:format:error:", data, opt, format, error) as ObjCObject

        public open fun propertyListWithStream_options_format_error(stream: NSInputStream, opt: Int, format: Pointer<Any>, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyListWithStream:options:format:error:", stream, opt, format, error) as ObjCObject

        public open fun dataFromPropertyList_format_errorDescription(plist: ObjCObject, format: Any, errorString: Pointer<NSString>): NSData =
            Native.objc_msgSend("class objc.NSData", this, "dataFromPropertyList:format:errorDescription:", plist, format, errorString) as NSData

        public open fun propertyListFromData_mutabilityOption_format_errorDescription(data: NSData, opt: Any, format: Pointer<Any>, errorString: Pointer<NSString>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyListFromData:mutabilityOption:format:errorDescription:", data, opt, format, errorString) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSPropertyListSerialization")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSKeyedArchiver(pointer: Long) : NSCoder(pointer) {
    public open fun initForWritingWithMutableData(data: NSMutableData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initForWritingWithMutableData:", data) as ObjCObject

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun outputFormat(): Any =
        Native.objc_msgSend("class objc.Any", this, "outputFormat")

    public open fun setOutputFormat(outputFormat: Any): Unit {
        Native.objc_msgSend("void", this, "setOutputFormat:", outputFormat)
    }

    public open fun finishEncoding(): Unit {
        Native.objc_msgSend("void", this, "finishEncoding")
    }

    public open fun setClassName_forClass(codedName: NSString, cls: ObjCClass): Unit {
        Native.objc_msgSend("void", this, "setClassName:forClass:", codedName, cls)
    }

    public open fun classNameForClass(cls: ObjCClass): NSString =
        Native.objc_msgSend("class objc.NSString", this, "classNameForClass:", cls) as NSString

    override fun encodeObject_forKey(objv: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeObject:forKey:", objv, key)
    }

    override fun encodeConditionalObject_forKey(objv: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeConditionalObject:forKey:", objv, key)
    }

    override fun encodeBool_forKey(boolv: Boolean, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeBool:forKey:", boolv, key)
    }

    override fun encodeInt_forKey(intv: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeInt:forKey:", intv, key)
    }

    override fun encodeInt32_forKey(intv: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeInt32:forKey:", intv, key)
    }

    override fun encodeInt64_forKey(intv: Long, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeInt64:forKey:", intv, key)
    }

    override fun encodeFloat_forKey(realv: Float, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeFloat:forKey:", realv, key)
    }

    override fun encodeDouble_forKey(realv: Double, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeDouble:forKey:", realv, key)
    }

    override fun encodeBytes_length_forKey(bytesp: Pointer<Byte>, lenv: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeBytes:length:forKey:", bytesp, lenv, key)
    }

    public open fun setRequiresSecureCoding(b: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRequiresSecureCoding:", b)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCoder.metaclass {
        public open fun archivedDataWithRootObject(rootObject: ObjCObject): NSData =
            Native.objc_msgSend("class objc.NSData", this, "archivedDataWithRootObject:", rootObject) as NSData

        public open fun archiveRootObject_toFile(rootObject: ObjCObject, path: NSString): Boolean =
            Native.objc_msgSend("boolean", this, "archiveRootObject:toFile:", rootObject, path) as Boolean

        public open fun setClassName_forClass(codedName: NSString, cls: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "setClassName:forClass:", codedName, cls)
        }

        public open fun classNameForClass(cls: ObjCClass): NSString =
            Native.objc_msgSend("class objc.NSString", this, "classNameForClass:", cls) as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSKeyedArchiver")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSKeyedUnarchiver(pointer: Long) : NSCoder(pointer) {
    public open fun initForReadingWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initForReadingWithData:", data) as ObjCObject

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun finishDecoding(): Unit {
        Native.objc_msgSend("void", this, "finishDecoding")
    }

    public open fun setClass_forClassName(cls: ObjCClass, codedName: NSString): Unit {
        Native.objc_msgSend("void", this, "setClass:forClassName:", cls, codedName)
    }

    public open fun classForClassName(codedName: NSString): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "classForClassName:", codedName) as ObjCClass

    override fun containsValueForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "containsValueForKey:", key) as Boolean

    override fun decodeObjectForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "decodeObjectForKey:", key) as ObjCObject

    override fun decodeBoolForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "decodeBoolForKey:", key) as Boolean

    override fun decodeIntForKey(key: NSString): Int =
        Native.objc_msgSend("int", this, "decodeIntForKey:", key) as Int

    override fun decodeInt32ForKey(key: NSString): Int =
        Native.objc_msgSend("int", this, "decodeInt32ForKey:", key) as Int

    override fun decodeInt64ForKey(key: NSString): Long =
        Native.objc_msgSend("long", this, "decodeInt64ForKey:", key) as Long

    override fun decodeFloatForKey(key: NSString): Float =
        Native.objc_msgSend("float", this, "decodeFloatForKey:", key) as Float

    override fun decodeDoubleForKey(key: NSString): Double =
        Native.objc_msgSend("double", this, "decodeDoubleForKey:", key) as Double

    override fun decodeBytesForKey_returnedLength(key: NSString, lengthp: Pointer<Int>): Pointer<Byte> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "decodeBytesForKey:returnedLength:", key, lengthp) as Pointer<Byte>

    public open fun setRequiresSecureCoding(b: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRequiresSecureCoding:", b)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCoder.metaclass {
        public open fun unarchiveObjectWithData(data: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "unarchiveObjectWithData:", data) as ObjCObject

        public open fun unarchiveObjectWithFile(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "unarchiveObjectWithFile:", path) as ObjCObject

        public open fun setClass_forClassName(cls: ObjCClass, codedName: NSString): Unit {
            Native.objc_msgSend("void", this, "setClass:forClassName:", cls, codedName)
        }

        public open fun classForClassName(codedName: NSString): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "classForClassName:", codedName) as ObjCClass

    }

    companion object : NSObject(Native.objc_getClass("NSKeyedUnarchiver")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLocale(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding, NSLocale_NSExtendedLocale, NSLocale_NSLocaleCreation, NSLocale_NSLocaleGeneralInfo {
    public open fun objectForKey(key: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForKey:", key) as ObjCObject

    public open fun displayNameForKey_value(key: ObjCObject, value: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "displayNameForKey:value:", key, value) as NSString

    public open fun initWithLocaleIdentifier(string: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLocaleIdentifier:", string) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass, NSLocale_NSExtendedLocale.metaclass, NSLocale_NSLocaleCreation.metaclass, NSLocale_NSLocaleGeneralInfo.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSLocale")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLock(pointer: Long) : NSObject(pointer), NSLocking {
    public open fun tryLock(): Boolean =
        Native.objc_msgSend("boolean", this, "tryLock") as Boolean

    public open fun lockBeforeDate(limit: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "lockBeforeDate:", limit) as Boolean

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSLocking.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSLock")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSConditionLock(pointer: Long) : NSObject(pointer), NSLocking {
    public open fun initWithCondition(condition: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCondition:", condition) as ObjCObject

    public open fun condition(): Int =
        Native.objc_msgSend("int", this, "condition") as Int

    public open fun lockWhenCondition(condition: Int): Unit {
        Native.objc_msgSend("void", this, "lockWhenCondition:", condition)
    }

    public open fun tryLock(): Boolean =
        Native.objc_msgSend("boolean", this, "tryLock") as Boolean

    public open fun tryLockWhenCondition(condition: Int): Boolean =
        Native.objc_msgSend("boolean", this, "tryLockWhenCondition:", condition) as Boolean

    public open fun unlockWithCondition(condition: Int): Unit {
        Native.objc_msgSend("void", this, "unlockWithCondition:", condition)
    }

    public open fun lockBeforeDate(limit: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "lockBeforeDate:", limit) as Boolean

    public open fun lockWhenCondition_beforeDate(condition: Int, limit: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "lockWhenCondition:beforeDate:", condition, limit) as Boolean

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSLocking.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSConditionLock")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRecursiveLock(pointer: Long) : NSObject(pointer), NSLocking {
    public open fun tryLock(): Boolean =
        Native.objc_msgSend("boolean", this, "tryLock") as Boolean

    public open fun lockBeforeDate(limit: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "lockBeforeDate:", limit) as Boolean

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSLocking.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSRecursiveLock")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCondition(pointer: Long) : NSObject(pointer), NSLocking {
    public open fun wait(): Unit {
        Native.objc_msgSend("void", this, "wait")
    }

    public open fun waitUntilDate(limit: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "waitUntilDate:", limit) as Boolean

    public open fun signal(): Unit {
        Native.objc_msgSend("void", this, "signal")
    }

    public open fun broadcast(): Unit {
        Native.objc_msgSend("void", this, "broadcast")
    }

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSLocking.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCondition")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMapTable(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSFastEnumeration {
    public open fun initWithKeyOptions_valueOptions_capacity(keyOptions: Int, valueOptions: Int, initialCapacity: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKeyOptions:valueOptions:capacity:", keyOptions, valueOptions, initialCapacity) as ObjCObject

    public open fun initWithKeyPointerFunctions_valuePointerFunctions_capacity(keyFunctions: NSPointerFunctions, valueFunctions: NSPointerFunctions, initialCapacity: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKeyPointerFunctions:valuePointerFunctions:capacity:", keyFunctions, valueFunctions, initialCapacity) as ObjCObject

    public open fun keyPointerFunctions(): NSPointerFunctions =
        Native.objc_msgSend("class objc.NSPointerFunctions", this, "keyPointerFunctions") as NSPointerFunctions

    public open fun valuePointerFunctions(): NSPointerFunctions =
        Native.objc_msgSend("class objc.NSPointerFunctions", this, "valuePointerFunctions") as NSPointerFunctions

    public open fun objectForKey(aKey: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForKey:", aKey) as ObjCObject

    public open fun removeObjectForKey(aKey: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObjectForKey:", aKey)
    }

    public open fun setObject_forKey(anObject: ObjCObject, aKey: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setObject:forKey:", anObject, aKey)
    }

    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun keyEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "keyEnumerator") as NSEnumerator

    public open fun objectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "objectEnumerator") as NSEnumerator

    public open fun removeAllObjects(): Unit {
        Native.objc_msgSend("void", this, "removeAllObjects")
    }

    public open fun dictionaryRepresentation(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryRepresentation") as NSDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSFastEnumeration.metaclass {
        public open fun mapTableWithKeyOptions_valueOptions(keyOptions: Int, valueOptions: Int): NSMapTable =
            Native.objc_msgSend("class objc.NSMapTable", this, "mapTableWithKeyOptions:valueOptions:", keyOptions, valueOptions) as NSMapTable

        public open fun mapTableWithStrongToStrongObjects(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "mapTableWithStrongToStrongObjects") as ObjCObject

        public open fun mapTableWithWeakToStrongObjects(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "mapTableWithWeakToStrongObjects") as ObjCObject

        public open fun mapTableWithStrongToWeakObjects(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "mapTableWithStrongToWeakObjects") as ObjCObject

        public open fun mapTableWithWeakToWeakObjects(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "mapTableWithWeakToWeakObjects") as ObjCObject

        public open fun strongToStrongObjectsMapTable(): NSMapTable =
            Native.objc_msgSend("class objc.NSMapTable", this, "strongToStrongObjectsMapTable") as NSMapTable

        public open fun weakToStrongObjectsMapTable(): NSMapTable =
            Native.objc_msgSend("class objc.NSMapTable", this, "weakToStrongObjectsMapTable") as NSMapTable

        public open fun strongToWeakObjectsMapTable(): NSMapTable =
            Native.objc_msgSend("class objc.NSMapTable", this, "strongToWeakObjectsMapTable") as NSMapTable

        public open fun weakToWeakObjectsMapTable(): NSMapTable =
            Native.objc_msgSend("class objc.NSMapTable", this, "weakToWeakObjectsMapTable") as NSMapTable

    }

    companion object : NSObject(Native.objc_getClass("NSMapTable")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMethodSignature(pointer: Long) : NSObject(pointer) {
    public open fun numberOfArguments(): Int =
        Native.objc_msgSend("int", this, "numberOfArguments") as Int

    public open fun getArgumentTypeAtIndex(idx: Int): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "getArgumentTypeAtIndex:", idx) as Pointer<Char>

    public open fun frameLength(): Int =
        Native.objc_msgSend("int", this, "frameLength") as Int

    public open fun isOneway(): Boolean =
        Native.objc_msgSend("boolean", this, "isOneway") as Boolean

    public open fun methodReturnType(): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "methodReturnType") as Pointer<Char>

    public open fun methodReturnLength(): Int =
        Native.objc_msgSend("int", this, "methodReturnLength") as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun signatureWithObjCTypes(types: Pointer<Char>): NSMethodSignature =
            Native.objc_msgSend("class objc.NSMethodSignature", this, "signatureWithObjCTypes:", types) as NSMethodSignature

    }

    companion object : NSObject(Native.objc_getClass("NSMethodSignature")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNotification(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSNotification_NSNotificationCreation {
    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun `object`(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "object") as ObjCObject

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun initWithName_object_userInfo(name: NSString, `object`: ObjCObject, userInfo: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:object:userInfo:", name, `object`, userInfo) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSNotification_NSNotificationCreation.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSNotification")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNotificationCenter(pointer: Long) : NSObject(pointer) {
    public open fun addObserver_selector_name_object(observer: ObjCObject, aSelector: ObjCSelector, aName: NSString, anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObserver:selector:name:object:", observer, aSelector, aName, anObject)
    }

    public open fun postNotification(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "postNotification:", notification)
    }

    public open fun postNotificationName_object(aName: NSString, anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "postNotificationName:object:", aName, anObject)
    }

    public open fun postNotificationName_object_userInfo(aName: NSString, anObject: ObjCObject, aUserInfo: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "postNotificationName:object:userInfo:", aName, anObject, aUserInfo)
    }

    public open fun removeObserver(observer: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObserver:", observer)
    }

    public open fun removeObserver_name_object(observer: ObjCObject, aName: NSString, anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObserver:name:object:", observer, aName, anObject)
    }

    public open fun addObserverForName_object_queue_usingBlock(name: NSString, obj: ObjCObject, queue: NSOperationQueue, block: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "addObserverForName:object:queue:usingBlock:", name, obj, queue, block)

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun defaultCenter(): NSNotificationCenter =
            Native.objc_msgSend("class objc.NSNotificationCenter", this, "defaultCenter") as NSNotificationCenter

    }

    companion object : NSObject(Native.objc_getClass("NSNotificationCenter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNotificationQueue(pointer: Long) : NSObject(pointer) {
    public open fun initWithNotificationCenter(notificationCenter: NSNotificationCenter): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithNotificationCenter:", notificationCenter) as ObjCObject

    public open fun enqueueNotification_postingStyle(notification: NSNotification, postingStyle: Any): Unit {
        Native.objc_msgSend("void", this, "enqueueNotification:postingStyle:", notification, postingStyle)
    }

    public open fun enqueueNotification_postingStyle_coalesceMask_forModes(notification: NSNotification, postingStyle: Any, coalesceMask: Int, modes: NSArray): Unit {
        Native.objc_msgSend("void", this, "enqueueNotification:postingStyle:coalesceMask:forModes:", notification, postingStyle, coalesceMask, modes)
    }

    public open fun dequeueNotificationsMatching_coalesceMask(notification: NSNotification, coalesceMask: Int): Unit {
        Native.objc_msgSend("void", this, "dequeueNotificationsMatching:coalesceMask:", notification, coalesceMask)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun defaultQueue(): NSNotificationQueue =
            Native.objc_msgSend("class objc.NSNotificationQueue", this, "defaultQueue") as NSNotificationQueue

    }

    companion object : NSObject(Native.objc_getClass("NSNotificationQueue")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNull(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun `null`(): NSNull =
            Native.objc_msgSend("class objc.NSNull", this, "null") as NSNull

    }

    companion object : NSObject(Native.objc_getClass("NSNull")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNumberFormatter(pointer: Long) : NSFormatter(pointer), NSNumberFormatter_NSNumberFormatterCompatibility {
    public open fun formattingContext(): Any =
        Native.objc_msgSend("class objc.Any", this, "formattingContext")

    public open fun setFormattingContext(formattingContext: Any): Unit {
        Native.objc_msgSend("void", this, "setFormattingContext:", formattingContext)
    }

    public open fun getObjectValue_forString_range_error(obj: Pointer<ObjCObject>, string: NSString, rangep: Pointer<Any>, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "getObjectValue:forString:range:error:", obj, string, rangep, error) as Boolean

    public open fun stringFromNumber(number: NSNumber): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromNumber:", number) as NSString

    public open fun numberFromString(string: NSString): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "numberFromString:", string) as NSNumber

    public open fun numberStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "numberStyle")

    public open fun setNumberStyle(numberStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setNumberStyle:", numberStyle)
    }

    public open fun locale(): NSLocale =
        Native.objc_msgSend("class objc.NSLocale", this, "locale") as NSLocale

    public open fun setLocale(locale: NSLocale): Unit {
        Native.objc_msgSend("void", this, "setLocale:", locale)
    }

    public open fun generatesDecimalNumbers(): Boolean =
        Native.objc_msgSend("boolean", this, "generatesDecimalNumbers") as Boolean

    public open fun setGeneratesDecimalNumbers(generatesDecimalNumbers: Boolean): Unit {
        Native.objc_msgSend("void", this, "setGeneratesDecimalNumbers:", generatesDecimalNumbers)
    }

    public open fun formatterBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "formatterBehavior")

    public open fun setFormatterBehavior(formatterBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setFormatterBehavior:", formatterBehavior)
    }

    public open fun negativeFormat(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "negativeFormat") as NSString

    public open fun setNegativeFormat(negativeFormat: NSString): Unit {
        Native.objc_msgSend("void", this, "setNegativeFormat:", negativeFormat)
    }

    public open fun textAttributesForNegativeValues(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "textAttributesForNegativeValues") as NSDictionary

    public open fun setTextAttributesForNegativeValues(textAttributesForNegativeValues: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setTextAttributesForNegativeValues:", textAttributesForNegativeValues)
    }

    public open fun positiveFormat(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "positiveFormat") as NSString

    public open fun setPositiveFormat(positiveFormat: NSString): Unit {
        Native.objc_msgSend("void", this, "setPositiveFormat:", positiveFormat)
    }

    public open fun textAttributesForPositiveValues(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "textAttributesForPositiveValues") as NSDictionary

    public open fun setTextAttributesForPositiveValues(textAttributesForPositiveValues: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setTextAttributesForPositiveValues:", textAttributesForPositiveValues)
    }

    public open fun allowsFloats(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsFloats") as Boolean

    public open fun setAllowsFloats(allowsFloats: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsFloats:", allowsFloats)
    }

    public open fun decimalSeparator(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "decimalSeparator") as NSString

    public open fun setDecimalSeparator(decimalSeparator: NSString): Unit {
        Native.objc_msgSend("void", this, "setDecimalSeparator:", decimalSeparator)
    }

    public open fun alwaysShowsDecimalSeparator(): Boolean =
        Native.objc_msgSend("boolean", this, "alwaysShowsDecimalSeparator") as Boolean

    public open fun setAlwaysShowsDecimalSeparator(alwaysShowsDecimalSeparator: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAlwaysShowsDecimalSeparator:", alwaysShowsDecimalSeparator)
    }

    public open fun currencyDecimalSeparator(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "currencyDecimalSeparator") as NSString

    public open fun setCurrencyDecimalSeparator(currencyDecimalSeparator: NSString): Unit {
        Native.objc_msgSend("void", this, "setCurrencyDecimalSeparator:", currencyDecimalSeparator)
    }

    public open fun usesGroupingSeparator(): Boolean =
        Native.objc_msgSend("boolean", this, "usesGroupingSeparator") as Boolean

    public open fun setUsesGroupingSeparator(usesGroupingSeparator: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesGroupingSeparator:", usesGroupingSeparator)
    }

    public open fun groupingSeparator(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "groupingSeparator") as NSString

    public open fun setGroupingSeparator(groupingSeparator: NSString): Unit {
        Native.objc_msgSend("void", this, "setGroupingSeparator:", groupingSeparator)
    }

    public open fun zeroSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "zeroSymbol") as NSString

    public open fun setZeroSymbol(zeroSymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setZeroSymbol:", zeroSymbol)
    }

    public open fun textAttributesForZero(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "textAttributesForZero") as NSDictionary

    public open fun setTextAttributesForZero(textAttributesForZero: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setTextAttributesForZero:", textAttributesForZero)
    }

    public open fun nilSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "nilSymbol") as NSString

    public open fun setNilSymbol(nilSymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setNilSymbol:", nilSymbol)
    }

    public open fun textAttributesForNil(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "textAttributesForNil") as NSDictionary

    public open fun setTextAttributesForNil(textAttributesForNil: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setTextAttributesForNil:", textAttributesForNil)
    }

    public open fun notANumberSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "notANumberSymbol") as NSString

    public open fun setNotANumberSymbol(notANumberSymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setNotANumberSymbol:", notANumberSymbol)
    }

    public open fun textAttributesForNotANumber(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "textAttributesForNotANumber") as NSDictionary

    public open fun setTextAttributesForNotANumber(textAttributesForNotANumber: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setTextAttributesForNotANumber:", textAttributesForNotANumber)
    }

    public open fun positiveInfinitySymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "positiveInfinitySymbol") as NSString

    public open fun setPositiveInfinitySymbol(positiveInfinitySymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setPositiveInfinitySymbol:", positiveInfinitySymbol)
    }

    public open fun textAttributesForPositiveInfinity(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "textAttributesForPositiveInfinity") as NSDictionary

    public open fun setTextAttributesForPositiveInfinity(textAttributesForPositiveInfinity: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setTextAttributesForPositiveInfinity:", textAttributesForPositiveInfinity)
    }

    public open fun negativeInfinitySymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "negativeInfinitySymbol") as NSString

    public open fun setNegativeInfinitySymbol(negativeInfinitySymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setNegativeInfinitySymbol:", negativeInfinitySymbol)
    }

    public open fun textAttributesForNegativeInfinity(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "textAttributesForNegativeInfinity") as NSDictionary

    public open fun setTextAttributesForNegativeInfinity(textAttributesForNegativeInfinity: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setTextAttributesForNegativeInfinity:", textAttributesForNegativeInfinity)
    }

    public open fun positivePrefix(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "positivePrefix") as NSString

    public open fun setPositivePrefix(positivePrefix: NSString): Unit {
        Native.objc_msgSend("void", this, "setPositivePrefix:", positivePrefix)
    }

    public open fun positiveSuffix(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "positiveSuffix") as NSString

    public open fun setPositiveSuffix(positiveSuffix: NSString): Unit {
        Native.objc_msgSend("void", this, "setPositiveSuffix:", positiveSuffix)
    }

    public open fun negativePrefix(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "negativePrefix") as NSString

    public open fun setNegativePrefix(negativePrefix: NSString): Unit {
        Native.objc_msgSend("void", this, "setNegativePrefix:", negativePrefix)
    }

    public open fun negativeSuffix(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "negativeSuffix") as NSString

    public open fun setNegativeSuffix(negativeSuffix: NSString): Unit {
        Native.objc_msgSend("void", this, "setNegativeSuffix:", negativeSuffix)
    }

    public open fun currencyCode(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "currencyCode") as NSString

    public open fun setCurrencyCode(currencyCode: NSString): Unit {
        Native.objc_msgSend("void", this, "setCurrencyCode:", currencyCode)
    }

    public open fun currencySymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "currencySymbol") as NSString

    public open fun setCurrencySymbol(currencySymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setCurrencySymbol:", currencySymbol)
    }

    public open fun internationalCurrencySymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "internationalCurrencySymbol") as NSString

    public open fun setInternationalCurrencySymbol(internationalCurrencySymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setInternationalCurrencySymbol:", internationalCurrencySymbol)
    }

    public open fun percentSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "percentSymbol") as NSString

    public open fun setPercentSymbol(percentSymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setPercentSymbol:", percentSymbol)
    }

    public open fun perMillSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "perMillSymbol") as NSString

    public open fun setPerMillSymbol(perMillSymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setPerMillSymbol:", perMillSymbol)
    }

    public open fun minusSign(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "minusSign") as NSString

    public open fun setMinusSign(minusSign: NSString): Unit {
        Native.objc_msgSend("void", this, "setMinusSign:", minusSign)
    }

    public open fun plusSign(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "plusSign") as NSString

    public open fun setPlusSign(plusSign: NSString): Unit {
        Native.objc_msgSend("void", this, "setPlusSign:", plusSign)
    }

    public open fun exponentSymbol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "exponentSymbol") as NSString

    public open fun setExponentSymbol(exponentSymbol: NSString): Unit {
        Native.objc_msgSend("void", this, "setExponentSymbol:", exponentSymbol)
    }

    public open fun groupingSize(): Int =
        Native.objc_msgSend("int", this, "groupingSize") as Int

    public open fun setGroupingSize(groupingSize: Int): Unit {
        Native.objc_msgSend("void", this, "setGroupingSize:", groupingSize)
    }

    public open fun secondaryGroupingSize(): Int =
        Native.objc_msgSend("int", this, "secondaryGroupingSize") as Int

    public open fun setSecondaryGroupingSize(secondaryGroupingSize: Int): Unit {
        Native.objc_msgSend("void", this, "setSecondaryGroupingSize:", secondaryGroupingSize)
    }

    public open fun multiplier(): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "multiplier") as NSNumber

    public open fun setMultiplier(multiplier: NSNumber): Unit {
        Native.objc_msgSend("void", this, "setMultiplier:", multiplier)
    }

    public open fun formatWidth(): Int =
        Native.objc_msgSend("int", this, "formatWidth") as Int

    public open fun setFormatWidth(formatWidth: Int): Unit {
        Native.objc_msgSend("void", this, "setFormatWidth:", formatWidth)
    }

    public open fun paddingCharacter(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "paddingCharacter") as NSString

    public open fun setPaddingCharacter(paddingCharacter: NSString): Unit {
        Native.objc_msgSend("void", this, "setPaddingCharacter:", paddingCharacter)
    }

    public open fun paddingPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "paddingPosition")

    public open fun setPaddingPosition(paddingPosition: Any): Unit {
        Native.objc_msgSend("void", this, "setPaddingPosition:", paddingPosition)
    }

    public open fun roundingMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "roundingMode")

    public open fun setRoundingMode(roundingMode: Any): Unit {
        Native.objc_msgSend("void", this, "setRoundingMode:", roundingMode)
    }

    public open fun roundingIncrement(): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "roundingIncrement") as NSNumber

    public open fun setRoundingIncrement(roundingIncrement: NSNumber): Unit {
        Native.objc_msgSend("void", this, "setRoundingIncrement:", roundingIncrement)
    }

    public open fun minimumIntegerDigits(): Int =
        Native.objc_msgSend("int", this, "minimumIntegerDigits") as Int

    public open fun setMinimumIntegerDigits(minimumIntegerDigits: Int): Unit {
        Native.objc_msgSend("void", this, "setMinimumIntegerDigits:", minimumIntegerDigits)
    }

    public open fun maximumIntegerDigits(): Int =
        Native.objc_msgSend("int", this, "maximumIntegerDigits") as Int

    public open fun setMaximumIntegerDigits(maximumIntegerDigits: Int): Unit {
        Native.objc_msgSend("void", this, "setMaximumIntegerDigits:", maximumIntegerDigits)
    }

    public open fun minimumFractionDigits(): Int =
        Native.objc_msgSend("int", this, "minimumFractionDigits") as Int

    public open fun setMinimumFractionDigits(minimumFractionDigits: Int): Unit {
        Native.objc_msgSend("void", this, "setMinimumFractionDigits:", minimumFractionDigits)
    }

    public open fun maximumFractionDigits(): Int =
        Native.objc_msgSend("int", this, "maximumFractionDigits") as Int

    public open fun setMaximumFractionDigits(maximumFractionDigits: Int): Unit {
        Native.objc_msgSend("void", this, "setMaximumFractionDigits:", maximumFractionDigits)
    }

    public open fun minimum(): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "minimum") as NSNumber

    public open fun setMinimum(minimum: NSNumber): Unit {
        Native.objc_msgSend("void", this, "setMinimum:", minimum)
    }

    public open fun maximum(): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "maximum") as NSNumber

    public open fun setMaximum(maximum: NSNumber): Unit {
        Native.objc_msgSend("void", this, "setMaximum:", maximum)
    }

    public open fun currencyGroupingSeparator(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "currencyGroupingSeparator") as NSString

    public open fun setCurrencyGroupingSeparator(currencyGroupingSeparator: NSString): Unit {
        Native.objc_msgSend("void", this, "setCurrencyGroupingSeparator:", currencyGroupingSeparator)
    }

    public open fun isLenient(): Boolean =
        Native.objc_msgSend("boolean", this, "isLenient") as Boolean

    public open fun setLenient(lenient: Boolean): Unit {
        Native.objc_msgSend("void", this, "setLenient:", lenient)
    }

    public open fun usesSignificantDigits(): Boolean =
        Native.objc_msgSend("boolean", this, "usesSignificantDigits") as Boolean

    public open fun setUsesSignificantDigits(usesSignificantDigits: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesSignificantDigits:", usesSignificantDigits)
    }

    public open fun minimumSignificantDigits(): Int =
        Native.objc_msgSend("int", this, "minimumSignificantDigits") as Int

    public open fun setMinimumSignificantDigits(minimumSignificantDigits: Int): Unit {
        Native.objc_msgSend("void", this, "setMinimumSignificantDigits:", minimumSignificantDigits)
    }

    public open fun maximumSignificantDigits(): Int =
        Native.objc_msgSend("int", this, "maximumSignificantDigits") as Int

    public open fun setMaximumSignificantDigits(maximumSignificantDigits: Int): Unit {
        Native.objc_msgSend("void", this, "setMaximumSignificantDigits:", maximumSignificantDigits)
    }

    public open fun isPartialStringValidationEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isPartialStringValidationEnabled") as Boolean

    public open fun setPartialStringValidationEnabled(partialStringValidationEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPartialStringValidationEnabled:", partialStringValidationEnabled)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFormatter.metaclass, NSNumberFormatter_NSNumberFormatterCompatibility.metaclass {
        public open fun localizedStringFromNumber_numberStyle(num: NSNumber, nstyle: Any): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localizedStringFromNumber:numberStyle:", num, nstyle) as NSString

        public open fun defaultFormatterBehavior(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultFormatterBehavior")

        public open fun setDefaultFormatterBehavior(behavior: Any): Unit {
            Native.objc_msgSend("void", this, "setDefaultFormatterBehavior:", behavior)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSNumberFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOperation(pointer: Long) : NSObject(pointer) {
    public open fun start(): Unit {
        Native.objc_msgSend("void", this, "start")
    }

    public open fun main(): Unit {
        Native.objc_msgSend("void", this, "main")
    }

    public open fun isCancelled(): Boolean =
        Native.objc_msgSend("boolean", this, "isCancelled") as Boolean

    public open fun cancel(): Unit {
        Native.objc_msgSend("void", this, "cancel")
    }

    public open fun isExecuting(): Boolean =
        Native.objc_msgSend("boolean", this, "isExecuting") as Boolean

    public open fun isFinished(): Boolean =
        Native.objc_msgSend("boolean", this, "isFinished") as Boolean

    public open fun isConcurrent(): Boolean =
        Native.objc_msgSend("boolean", this, "isConcurrent") as Boolean

    public open fun isAsynchronous(): Boolean =
        Native.objc_msgSend("boolean", this, "isAsynchronous") as Boolean

    public open fun isReady(): Boolean =
        Native.objc_msgSend("boolean", this, "isReady") as Boolean

    public open fun addDependency(op: NSOperation): Unit {
        Native.objc_msgSend("void", this, "addDependency:", op)
    }

    public open fun removeDependency(op: NSOperation): Unit {
        Native.objc_msgSend("void", this, "removeDependency:", op)
    }

    public open fun dependencies(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "dependencies") as NSArray

    public open fun queuePriority(): Any =
        Native.objc_msgSend("class objc.Any", this, "queuePriority")

    public open fun setQueuePriority(queuePriority: Any): Unit {
        Native.objc_msgSend("void", this, "setQueuePriority:", queuePriority)
    }

    public open fun completionBlock(): Any =
        Native.objc_msgSend("class objc.Any", this, "completionBlock")

    public open fun setCompletionBlock(completionBlock: Any): Unit {
        Native.objc_msgSend("void", this, "setCompletionBlock:", completionBlock)
    }

    public open fun waitUntilFinished(): Unit {
        Native.objc_msgSend("void", this, "waitUntilFinished")
    }

    public open fun threadPriority(): Double =
        Native.objc_msgSend("double", this, "threadPriority") as Double

    public open fun setThreadPriority(threadPriority: Double): Unit {
        Native.objc_msgSend("void", this, "setThreadPriority:", threadPriority)
    }

    public open fun qualityOfService(): Any =
        Native.objc_msgSend("class objc.Any", this, "qualityOfService")

    public open fun setQualityOfService(qualityOfService: Any): Unit {
        Native.objc_msgSend("void", this, "setQualityOfService:", qualityOfService)
    }

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSOperation")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSBlockOperation(pointer: Long) : NSOperation(pointer) {
    public open fun addExecutionBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "addExecutionBlock:", block)
    }

    public open fun executionBlocks(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "executionBlocks") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSOperation.metaclass {
        public open fun blockOperationWithBlock(block: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "blockOperationWithBlock:", block) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSBlockOperation")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSInvocationOperation(pointer: Long) : NSOperation(pointer) {
    public open fun initWithTarget_selector_object(target: ObjCObject, sel: ObjCSelector, arg: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTarget:selector:object:", target, sel, arg) as ObjCObject

    public open fun initWithInvocation(inv: NSInvocation): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithInvocation:", inv) as ObjCObject

    public open fun invocation(): NSInvocation =
        Native.objc_msgSend("class objc.NSInvocation", this, "invocation") as NSInvocation

    public open fun result(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "result") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSOperation.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSInvocationOperation")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOperationQueue(pointer: Long) : NSObject(pointer) {
    public open fun addOperation(op: NSOperation): Unit {
        Native.objc_msgSend("void", this, "addOperation:", op)
    }

    public open fun addOperations_waitUntilFinished(ops: NSArray, wait: Boolean): Unit {
        Native.objc_msgSend("void", this, "addOperations:waitUntilFinished:", ops, wait)
    }

    public open fun addOperationWithBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "addOperationWithBlock:", block)
    }

    public open fun operations(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "operations") as NSArray

    public open fun operationCount(): Int =
        Native.objc_msgSend("int", this, "operationCount") as Int

    public open fun maxConcurrentOperationCount(): Int =
        Native.objc_msgSend("int", this, "maxConcurrentOperationCount") as Int

    public open fun setMaxConcurrentOperationCount(maxConcurrentOperationCount: Int): Unit {
        Native.objc_msgSend("void", this, "setMaxConcurrentOperationCount:", maxConcurrentOperationCount)
    }

    public open fun isSuspended(): Boolean =
        Native.objc_msgSend("boolean", this, "isSuspended") as Boolean

    public open fun setSuspended(suspended: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSuspended:", suspended)
    }

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    public open fun qualityOfService(): Any =
        Native.objc_msgSend("class objc.Any", this, "qualityOfService")

    public open fun setQualityOfService(qualityOfService: Any): Unit {
        Native.objc_msgSend("void", this, "setQualityOfService:", qualityOfService)
    }

    public open fun underlyingQueue(): Any =
        Native.objc_msgSend("class objc.Any", this, "underlyingQueue")

    public open fun setUnderlyingQueue(underlyingQueue: Any): Unit {
        Native.objc_msgSend("void", this, "setUnderlyingQueue:", underlyingQueue)
    }

    public open fun cancelAllOperations(): Unit {
        Native.objc_msgSend("void", this, "cancelAllOperations")
    }

    public open fun waitUntilAllOperationsAreFinished(): Unit {
        Native.objc_msgSend("void", this, "waitUntilAllOperationsAreFinished")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun currentQueue(): NSOperationQueue =
            Native.objc_msgSend("class objc.NSOperationQueue", this, "currentQueue") as NSOperationQueue

        public open fun mainQueue(): NSOperationQueue =
            Native.objc_msgSend("class objc.NSOperationQueue", this, "mainQueue") as NSOperationQueue

    }

    companion object : NSObject(Native.objc_getClass("NSOperationQueue")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOrthography(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSOrthography_NSOrthographyExtended, NSOrthography_NSOrthographyCreation {
    public open fun dominantScript(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "dominantScript") as NSString

    public open fun languageMap(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "languageMap") as NSDictionary

    public open fun initWithDominantScript_languageMap(script: NSString, map: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDominantScript:languageMap:", script, map) as ObjCObject

    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSOrthography_NSOrthographyExtended.metaclass, NSOrthography_NSOrthographyCreation.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSOrthography")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPointerArray(pointer: Long) : NSObject(pointer), NSFastEnumeration, NSCopying, NSCoding, NSPointerArray_NSPointerArrayConveniences {
    public open fun initWithOptions(options: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithOptions:", options) as ObjCObject

    public open fun initWithPointerFunctions(functions: NSPointerFunctions): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPointerFunctions:", functions) as ObjCObject

    public open fun pointerFunctions(): NSPointerFunctions =
        Native.objc_msgSend("class objc.NSPointerFunctions", this, "pointerFunctions") as NSPointerFunctions

    public open fun pointerAtIndex(index: Int): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "pointerAtIndex:", index) as Pointer<*>

    public open fun addPointer(pointer: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addPointer:", pointer)
    }

    public open fun removePointerAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removePointerAtIndex:", index)
    }

    public open fun insertPointer_atIndex(item: Pointer<*>, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertPointer:atIndex:", item, index)
    }

    public open fun replacePointerAtIndex_withPointer(index: Int, item: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "replacePointerAtIndex:withPointer:", index, item)
    }

    public open fun compact(): Unit {
        Native.objc_msgSend("void", this, "compact")
    }

    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun setCount(count: Int): Unit {
        Native.objc_msgSend("void", this, "setCount:", count)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSFastEnumeration.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSPointerArray_NSPointerArrayConveniences.metaclass {
        public open fun pointerArrayWithOptions(options: Int): NSPointerArray =
            Native.objc_msgSend("class objc.NSPointerArray", this, "pointerArrayWithOptions:", options) as NSPointerArray

        public open fun pointerArrayWithPointerFunctions(functions: NSPointerFunctions): NSPointerArray =
            Native.objc_msgSend("class objc.NSPointerArray", this, "pointerArrayWithPointerFunctions:", functions) as NSPointerArray

    }

    companion object : NSObject(Native.objc_getClass("NSPointerArray")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPort(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun invalidate(): Unit {
        Native.objc_msgSend("void", this, "invalidate")
    }

    public open fun isValid(): Boolean =
        Native.objc_msgSend("boolean", this, "isValid") as Boolean

    public open fun setDelegate(anObject: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", anObject)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun scheduleInRunLoop_forMode(runLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "scheduleInRunLoop:forMode:", runLoop, mode)
    }

    public open fun removeFromRunLoop_forMode(runLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "removeFromRunLoop:forMode:", runLoop, mode)
    }

    public open fun reservedSpaceLength(): Int =
        Native.objc_msgSend("int", this, "reservedSpaceLength") as Int

    public open fun sendBeforeDate_components_from_reserved(limitDate: NSDate, components: NSMutableArray, receivePort: NSPort, headerSpaceReserved: Int): Boolean =
        Native.objc_msgSend("boolean", this, "sendBeforeDate:components:from:reserved:", limitDate, components, receivePort, headerSpaceReserved) as Boolean

    public open fun sendBeforeDate_msgid_components_from_reserved(limitDate: NSDate, msgID: Int, components: NSMutableArray, receivePort: NSPort, headerSpaceReserved: Int): Boolean =
        Native.objc_msgSend("boolean", this, "sendBeforeDate:msgid:components:from:reserved:", limitDate, msgID, components, receivePort, headerSpaceReserved) as Boolean

    public open fun addConnection_toRunLoop_forMode(conn: NSConnection, runLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "addConnection:toRunLoop:forMode:", conn, runLoop, mode)
    }

    public open fun removeConnection_fromRunLoop_forMode(conn: NSConnection, runLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "removeConnection:fromRunLoop:forMode:", conn, runLoop, mode)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
        public open fun port(): NSPort =
            Native.objc_msgSend("class objc.NSPort", this, "port") as NSPort

    }

    companion object : NSObject(Native.objc_getClass("NSPort")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMachPort(pointer: Long) : NSPort(pointer) {
    public open fun initWithMachPort(machPort: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithMachPort:", machPort) as ObjCObject

    override fun setDelegate(anObject: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", anObject)
    }

    override fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun initWithMachPort_options(machPort: Int, f: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithMachPort:options:", machPort, f) as ObjCObject

    public open fun machPort(): Int =
        Native.objc_msgSend("int", this, "machPort") as Int

    override fun scheduleInRunLoop_forMode(runLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "scheduleInRunLoop:forMode:", runLoop, mode)
    }

    override fun removeFromRunLoop_forMode(runLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "removeFromRunLoop:forMode:", runLoop, mode)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPort.metaclass {
        public open fun portWithMachPort(machPort: Int): NSPort =
            Native.objc_msgSend("class objc.NSPort", this, "portWithMachPort:", machPort) as NSPort

        public open fun portWithMachPort_options(machPort: Int, f: Int): NSPort =
            Native.objc_msgSend("class objc.NSPort", this, "portWithMachPort:options:", machPort, f) as NSPort

    }

    companion object : NSObject(Native.objc_getClass("NSMachPort")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMessagePort(pointer: Long) : NSPort(pointer) {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPort.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMessagePort")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSocketPort(pointer: Long) : NSPort(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithTCPPort(port: Short): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTCPPort:", port) as ObjCObject

    public open fun initWithProtocolFamily_socketType_protocol_address(family: Int, type: Int, protocol: Int, address: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithProtocolFamily:socketType:protocol:address:", family, type, protocol, address) as ObjCObject

    public open fun initWithProtocolFamily_socketType_protocol_socket(family: Int, type: Int, protocol: Int, sock: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithProtocolFamily:socketType:protocol:socket:", family, type, protocol, sock) as ObjCObject

    public open fun initRemoteWithTCPPort_host(port: Short, hostName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initRemoteWithTCPPort:host:", port, hostName) as ObjCObject

    public open fun initRemoteWithProtocolFamily_socketType_protocol_address(family: Int, type: Int, protocol: Int, address: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initRemoteWithProtocolFamily:socketType:protocol:address:", family, type, protocol, address) as ObjCObject

    public open fun protocolFamily(): Int =
        Native.objc_msgSend("int", this, "protocolFamily") as Int

    public open fun socketType(): Int =
        Native.objc_msgSend("int", this, "socketType") as Int

    public open fun protocol(): Int =
        Native.objc_msgSend("int", this, "protocol") as Int

    public open fun address(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "address") as NSData

    public open fun socket(): Int =
        Native.objc_msgSend("int", this, "socket") as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPort.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSocketPort")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSProcessInfo(pointer: Long) : NSObject(pointer) {
    public open fun environment(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "environment") as NSDictionary

    public open fun arguments(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arguments") as NSArray

    public open fun hostName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "hostName") as NSString

    public open fun processName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "processName") as NSString

    public open fun setProcessName(processName: NSString): Unit {
        Native.objc_msgSend("void", this, "setProcessName:", processName)
    }

    public open fun processIdentifier(): Int =
        Native.objc_msgSend("int", this, "processIdentifier") as Int

    public open fun globallyUniqueString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "globallyUniqueString") as NSString

    public open fun operatingSystem(): Int =
        Native.objc_msgSend("int", this, "operatingSystem") as Int

    public open fun operatingSystemName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "operatingSystemName") as NSString

    public open fun operatingSystemVersionString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "operatingSystemVersionString") as NSString

    public open fun operatingSystemVersion(): Any =
        Native.objc_msgSend("class objc.Any", this, "operatingSystemVersion")

    public open fun processorCount(): Int =
        Native.objc_msgSend("int", this, "processorCount") as Int

    public open fun activeProcessorCount(): Int =
        Native.objc_msgSend("int", this, "activeProcessorCount") as Int

    public open fun physicalMemory(): Long =
        Native.objc_msgSend("long", this, "physicalMemory") as Long

    public open fun isOperatingSystemAtLeastVersion(version: Any): Boolean =
        Native.objc_msgSend("boolean", this, "isOperatingSystemAtLeastVersion:", version) as Boolean

    public open fun systemUptime(): Double =
        Native.objc_msgSend("double", this, "systemUptime") as Double

    public open fun disableSuddenTermination(): Unit {
        Native.objc_msgSend("void", this, "disableSuddenTermination")
    }

    public open fun enableSuddenTermination(): Unit {
        Native.objc_msgSend("void", this, "enableSuddenTermination")
    }

    public open fun disableAutomaticTermination(reason: NSString): Unit {
        Native.objc_msgSend("void", this, "disableAutomaticTermination:", reason)
    }

    public open fun enableAutomaticTermination(reason: NSString): Unit {
        Native.objc_msgSend("void", this, "enableAutomaticTermination:", reason)
    }

    public open fun automaticTerminationSupportEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "automaticTerminationSupportEnabled") as Boolean

    public open fun setAutomaticTerminationSupportEnabled(automaticTerminationSupportEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticTerminationSupportEnabled:", automaticTerminationSupportEnabled)
    }

    public open fun thermalState(): Any =
        Native.objc_msgSend("class objc.Any", this, "thermalState")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun processInfo(): NSProcessInfo =
            Native.objc_msgSend("class objc.NSProcessInfo", this, "processInfo") as NSProcessInfo

    }

    companion object : NSObject(Native.objc_getClass("NSProcessInfo")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSProxy(pointer: Long) : ObjCObject(pointer), NSObjectProtocol {
    public open fun forwardInvocation(invocation: NSInvocation): Unit {
        Native.objc_msgSend("void", this, "forwardInvocation:", invocation)
    }

    public open fun methodSignatureForSelector(sel: ObjCSelector): NSMethodSignature =
        Native.objc_msgSend("class objc.NSMethodSignature", this, "methodSignatureForSelector:", sel) as NSMethodSignature

    public open fun dealloc(): Unit {
        Native.objc_msgSend("void", this, "dealloc")
    }

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun debugDescription(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "debugDescription") as NSString

    public open fun allowsWeakReference(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsWeakReference") as Boolean

    public open fun retainWeakReference(): Boolean =
        Native.objc_msgSend("boolean", this, "retainWeakReference") as Boolean

    trait metaclass : IObjCObject, NSObjectProtocol.metaclass {
        public open fun alloc(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "alloc") as ObjCObject

        public open fun allocWithZone(zone: Pointer<Any>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "allocWithZone:", zone) as ObjCObject

        public open fun `class`(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "class") as ObjCClass

        public open fun respondsToSelector(aSelector: ObjCSelector): Boolean =
            Native.objc_msgSend("boolean", this, "respondsToSelector:", aSelector) as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSProxy")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextCheckingResult(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSTextCheckingResult_NSTextCheckingResultOptional, NSTextCheckingResult_NSTextCheckingResultCreation {
    public open fun resultType(): Any =
        Native.objc_msgSend("class objc.Any", this, "resultType")

    public open fun range(): Any =
        Native.objc_msgSend("class objc.Any", this, "range")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSTextCheckingResult_NSTextCheckingResultOptional.metaclass, NSTextCheckingResult_NSTextCheckingResultCreation.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextCheckingResult")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRegularExpression(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSRegularExpression_NSMatching, NSRegularExpression_NSReplacement {
    public open fun initWithPattern_options_error(pattern: NSString, options: Any, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPattern:options:error:", pattern, options, error) as ObjCObject

    public open fun pattern(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pattern") as NSString

    public open fun options(): Any =
        Native.objc_msgSend("class objc.Any", this, "options")

    public open fun numberOfCaptureGroups(): Int =
        Native.objc_msgSend("int", this, "numberOfCaptureGroups") as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSRegularExpression_NSMatching.metaclass, NSRegularExpression_NSReplacement.metaclass {
        public open fun regularExpressionWithPattern_options_error(pattern: NSString, options: Any, error: Pointer<NSError>): NSRegularExpression =
            Native.objc_msgSend("class objc.NSRegularExpression", this, "regularExpressionWithPattern:options:error:", pattern, options, error) as NSRegularExpression

        public open fun escapedPatternForString(string: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "escapedPatternForString:", string) as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSRegularExpression")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDataDetector(pointer: Long) : NSRegularExpression(pointer) {
    public open fun initWithTypes_error(checkingTypes: Long, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTypes:error:", checkingTypes, error) as ObjCObject

    public open fun checkingTypes(): Long =
        Native.objc_msgSend("long", this, "checkingTypes") as Long

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSRegularExpression.metaclass {
        public open fun dataDetectorWithTypes_error(checkingTypes: Long, error: Pointer<NSError>): NSDataDetector =
            Native.objc_msgSend("class objc.NSDataDetector", this, "dataDetectorWithTypes:error:", checkingTypes, error) as NSDataDetector

    }

    companion object : NSObject(Native.objc_getClass("NSDataDetector")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRunLoop(pointer: Long) : NSObject(pointer), NSRunLoop_NSRunLoopConveniences, NSRunLoop_NSOrderedPerform {
    public open fun currentMode(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "currentMode") as NSString

    public open fun getCFRunLoop(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "getCFRunLoop") as Pointer<Any>

    public open fun addTimer_forMode(timer: NSTimer, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "addTimer:forMode:", timer, mode)
    }

    public open fun addPort_forMode(aPort: NSPort, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "addPort:forMode:", aPort, mode)
    }

    public open fun removePort_forMode(aPort: NSPort, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "removePort:forMode:", aPort, mode)
    }

    public open fun limitDateForMode(mode: NSString): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "limitDateForMode:", mode) as NSDate

    public open fun acceptInputForMode_beforeDate(mode: NSString, limitDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "acceptInputForMode:beforeDate:", mode, limitDate)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSRunLoop_NSRunLoopConveniences.metaclass, NSRunLoop_NSOrderedPerform.metaclass {
        public open fun currentRunLoop(): NSRunLoop =
            Native.objc_msgSend("class objc.NSRunLoop", this, "currentRunLoop") as NSRunLoop

        public open fun mainRunLoop(): NSRunLoop =
            Native.objc_msgSend("class objc.NSRunLoop", this, "mainRunLoop") as NSRunLoop

    }

    companion object : NSObject(Native.objc_getClass("NSRunLoop")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSortDescriptor(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying {
    public open fun initWithKey_ascending(key: NSString, ascending: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKey:ascending:", key, ascending) as ObjCObject

    public open fun initWithKey_ascending_selector(key: NSString, ascending: Boolean, selector: ObjCSelector): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKey:ascending:selector:", key, ascending, selector) as ObjCObject

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    public open fun ascending(): Boolean =
        Native.objc_msgSend("boolean", this, "ascending") as Boolean

    public open fun selector(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "selector") as ObjCSelector

    public open fun allowEvaluation(): Unit {
        Native.objc_msgSend("void", this, "allowEvaluation")
    }

    public open fun initWithKey_ascending_comparator(key: NSString, ascending: Boolean, cmptr: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKey:ascending:comparator:", key, ascending, cmptr) as ObjCObject

    public open fun comparator(): Any =
        Native.objc_msgSend("class objc.Any", this, "comparator")

    public open fun compareObject_toObject(object1: ObjCObject, object2: ObjCObject): Any =
        Native.objc_msgSend("class objc.Any", this, "compareObject:toObject:", object1, object2)

    public open fun reversedSortDescriptor(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "reversedSortDescriptor") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass {
        public open fun sortDescriptorWithKey_ascending(key: NSString, ascending: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sortDescriptorWithKey:ascending:", key, ascending) as ObjCObject

        public open fun sortDescriptorWithKey_ascending_selector(key: NSString, ascending: Boolean, selector: ObjCSelector): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sortDescriptorWithKey:ascending:selector:", key, ascending, selector) as ObjCObject

        public open fun sortDescriptorWithKey_ascending_comparator(key: NSString, ascending: Boolean, cmptr: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sortDescriptorWithKey:ascending:comparator:", key, ascending, cmptr) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSSortDescriptor")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStream(pointer: Long) : NSObject(pointer), NSStream_NSSocketStreamCreationExtensions, NSStream_NSStreamBoundPairCreationExtensions {
    public open fun open(): Unit {
        Native.objc_msgSend("void", this, "open")
    }

    public open fun close(): Unit {
        Native.objc_msgSend("void", this, "close")
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun propertyForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyForKey:", key) as ObjCObject

    public open fun setProperty_forKey(property: ObjCObject, key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setProperty:forKey:", property, key) as Boolean

    public open fun scheduleInRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "scheduleInRunLoop:forMode:", aRunLoop, mode)
    }

    public open fun removeFromRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "removeFromRunLoop:forMode:", aRunLoop, mode)
    }

    public open fun streamStatus(): Any =
        Native.objc_msgSend("class objc.Any", this, "streamStatus")

    public open fun streamError(): NSError =
        Native.objc_msgSend("class objc.NSError", this, "streamError") as NSError

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSStream_NSSocketStreamCreationExtensions.metaclass, NSStream_NSStreamBoundPairCreationExtensions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSStream")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSInputStream(pointer: Long) : NSStream(pointer), NSInputStream_NSInputStreamExtensions {
    public open fun read_maxLength(buffer: Pointer<Byte>, len: Int): Int =
        Native.objc_msgSend("int", this, "read:maxLength:", buffer, len) as Int

    public open fun getBuffer_length(buffer: Pointer<Pointer<Byte>>, len: Pointer<Int>): Boolean =
        Native.objc_msgSend("boolean", this, "getBuffer:length:", buffer, len) as Boolean

    public open fun hasBytesAvailable(): Boolean =
        Native.objc_msgSend("boolean", this, "hasBytesAvailable") as Boolean

    public open fun initWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", data) as ObjCObject

    public open fun initWithURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:", url) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSStream.metaclass, NSInputStream_NSInputStreamExtensions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSInputStream")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOutputStream(pointer: Long) : NSStream(pointer), NSOutputStream_NSOutputStreamExtensions {
    public open fun write_maxLength(buffer: Pointer<Byte>, len: Int): Int =
        Native.objc_msgSend("int", this, "write:maxLength:", buffer, len) as Int

    public open fun hasSpaceAvailable(): Boolean =
        Native.objc_msgSend("boolean", this, "hasSpaceAvailable") as Boolean

    public open fun initToMemory(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initToMemory") as ObjCObject

    public open fun initToBuffer_capacity(buffer: Pointer<Byte>, capacity: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initToBuffer:capacity:", buffer, capacity) as ObjCObject

    public open fun initWithURL_append(url: NSURL, shouldAppend: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:append:", url, shouldAppend) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSStream.metaclass, NSOutputStream_NSOutputStreamExtensions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSOutputStream")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSThread(pointer: Long) : NSObject(pointer) {
    public open fun threadDictionary(): NSMutableDictionary =
        Native.objc_msgSend("class objc.NSMutableDictionary", this, "threadDictionary") as NSMutableDictionary

    public open fun threadPriority(): Double =
        Native.objc_msgSend("double", this, "threadPriority") as Double

    public open fun setThreadPriority(threadPriority: Double): Unit {
        Native.objc_msgSend("void", this, "setThreadPriority:", threadPriority)
    }

    public open fun qualityOfService(): Any =
        Native.objc_msgSend("class objc.Any", this, "qualityOfService")

    public open fun setQualityOfService(qualityOfService: Any): Unit {
        Native.objc_msgSend("void", this, "setQualityOfService:", qualityOfService)
    }

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    public open fun stackSize(): Int =
        Native.objc_msgSend("int", this, "stackSize") as Int

    public open fun setStackSize(stackSize: Int): Unit {
        Native.objc_msgSend("void", this, "setStackSize:", stackSize)
    }

    public open fun isMainThread(): Boolean =
        Native.objc_msgSend("boolean", this, "isMainThread") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithTarget_selector_object(target: ObjCObject, selector: ObjCSelector, argument: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTarget:selector:object:", target, selector, argument) as ObjCObject

    public open fun isExecuting(): Boolean =
        Native.objc_msgSend("boolean", this, "isExecuting") as Boolean

    public open fun isFinished(): Boolean =
        Native.objc_msgSend("boolean", this, "isFinished") as Boolean

    public open fun isCancelled(): Boolean =
        Native.objc_msgSend("boolean", this, "isCancelled") as Boolean

    public open fun cancel(): Unit {
        Native.objc_msgSend("void", this, "cancel")
    }

    public open fun start(): Unit {
        Native.objc_msgSend("void", this, "start")
    }

    public open fun main(): Unit {
        Native.objc_msgSend("void", this, "main")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun currentThread(): NSThread =
            Native.objc_msgSend("class objc.NSThread", this, "currentThread") as NSThread

        public open fun detachNewThreadSelector_toTarget_withObject(selector: ObjCSelector, target: ObjCObject, argument: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "detachNewThreadSelector:toTarget:withObject:", selector, target, argument)
        }

        public open fun isMultiThreaded(): Boolean =
            Native.objc_msgSend("boolean", this, "isMultiThreaded") as Boolean

        public open fun sleepUntilDate(date: NSDate): Unit {
            Native.objc_msgSend("void", this, "sleepUntilDate:", date)
        }

        public open fun sleepForTimeInterval(ti: Double): Unit {
            Native.objc_msgSend("void", this, "sleepForTimeInterval:", ti)
        }

        public open fun exit(): Unit {
            Native.objc_msgSend("void", this, "exit")
        }

        public open fun threadPriority(): Double =
            Native.objc_msgSend("double", this, "threadPriority") as Double

        public open fun setThreadPriority(p: Double): Boolean =
            Native.objc_msgSend("boolean", this, "setThreadPriority:", p) as Boolean

        public open fun callStackReturnAddresses(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "callStackReturnAddresses") as NSArray

        public open fun callStackSymbols(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "callStackSymbols") as NSArray

        public open fun isMainThread(): Boolean =
            Native.objc_msgSend("boolean", this, "isMainThread") as Boolean

        public open fun mainThread(): NSThread =
            Native.objc_msgSend("class objc.NSThread", this, "mainThread") as NSThread

    }

    companion object : NSObject(Native.objc_getClass("NSThread")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTimeZone(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding, NSTimeZone_NSExtendedTimeZone, NSTimeZone_NSTimeZoneCreation {
    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun data(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "data") as NSData

    public open fun secondsFromGMTForDate(aDate: NSDate): Int =
        Native.objc_msgSend("int", this, "secondsFromGMTForDate:", aDate) as Int

    public open fun abbreviationForDate(aDate: NSDate): NSString =
        Native.objc_msgSend("class objc.NSString", this, "abbreviationForDate:", aDate) as NSString

    public open fun isDaylightSavingTimeForDate(aDate: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "isDaylightSavingTimeForDate:", aDate) as Boolean

    public open fun daylightSavingTimeOffsetForDate(aDate: NSDate): Double =
        Native.objc_msgSend("double", this, "daylightSavingTimeOffsetForDate:", aDate) as Double

    public open fun nextDaylightSavingTimeTransitionAfterDate(aDate: NSDate): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "nextDaylightSavingTimeTransitionAfterDate:", aDate) as NSDate

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass, NSTimeZone_NSExtendedTimeZone.metaclass, NSTimeZone_NSTimeZoneCreation.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTimeZone")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTimer(pointer: Long) : NSObject(pointer) {
    public open fun initWithFireDate_interval_target_selector_userInfo_repeats(date: NSDate, ti: Double, t: ObjCObject, s: ObjCSelector, ui: ObjCObject, rep: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFireDate:interval:target:selector:userInfo:repeats:", date, ti, t, s, ui, rep) as ObjCObject

    public open fun fire(): Unit {
        Native.objc_msgSend("void", this, "fire")
    }

    public open fun fireDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "fireDate") as NSDate

    public open fun setFireDate(fireDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setFireDate:", fireDate)
    }

    public open fun timeInterval(): Double =
        Native.objc_msgSend("double", this, "timeInterval") as Double

    public open fun tolerance(): Double =
        Native.objc_msgSend("double", this, "tolerance") as Double

    public open fun setTolerance(tolerance: Double): Unit {
        Native.objc_msgSend("void", this, "setTolerance:", tolerance)
    }

    public open fun invalidate(): Unit {
        Native.objc_msgSend("void", this, "invalidate")
    }

    public open fun isValid(): Boolean =
        Native.objc_msgSend("boolean", this, "isValid") as Boolean

    public open fun userInfo(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "userInfo") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun timerWithTimeInterval_invocation_repeats(ti: Double, invocation: NSInvocation, yesOrNo: Boolean): NSTimer =
            Native.objc_msgSend("class objc.NSTimer", this, "timerWithTimeInterval:invocation:repeats:", ti, invocation, yesOrNo) as NSTimer

        public open fun scheduledTimerWithTimeInterval_invocation_repeats(ti: Double, invocation: NSInvocation, yesOrNo: Boolean): NSTimer =
            Native.objc_msgSend("class objc.NSTimer", this, "scheduledTimerWithTimeInterval:invocation:repeats:", ti, invocation, yesOrNo) as NSTimer

        public open fun timerWithTimeInterval_target_selector_userInfo_repeats(ti: Double, aTarget: ObjCObject, aSelector: ObjCSelector, userInfo: ObjCObject, yesOrNo: Boolean): NSTimer =
            Native.objc_msgSend("class objc.NSTimer", this, "timerWithTimeInterval:target:selector:userInfo:repeats:", ti, aTarget, aSelector, userInfo, yesOrNo) as NSTimer

        public open fun scheduledTimerWithTimeInterval_target_selector_userInfo_repeats(ti: Double, aTarget: ObjCObject, aSelector: ObjCSelector, userInfo: ObjCObject, yesOrNo: Boolean): NSTimer =
            Native.objc_msgSend("class objc.NSTimer", this, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", ti, aTarget, aSelector, userInfo, yesOrNo) as NSTimer

    }

    companion object : NSObject(Native.objc_getClass("NSTimer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLHandle(pointer: Long) : NSObject(pointer) {
    public open fun status(): Any =
        Native.objc_msgSend("class objc.Any", this, "status")

    public open fun failureReason(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "failureReason") as NSString

    public open fun addClient(client: Any): Unit {
        Native.objc_msgSend("void", this, "addClient:", client)
    }

    public open fun removeClient(client: Any): Unit {
        Native.objc_msgSend("void", this, "removeClient:", client)
    }

    public open fun loadInBackground(): Unit {
        Native.objc_msgSend("void", this, "loadInBackground")
    }

    public open fun cancelLoadInBackground(): Unit {
        Native.objc_msgSend("void", this, "cancelLoadInBackground")
    }

    public open fun resourceData(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "resourceData") as NSData

    public open fun availableResourceData(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "availableResourceData") as NSData

    public open fun expectedResourceDataSize(): Long =
        Native.objc_msgSend("long", this, "expectedResourceDataSize") as Long

    public open fun flushCachedData(): Unit {
        Native.objc_msgSend("void", this, "flushCachedData")
    }

    public open fun backgroundLoadDidFailWithReason(reason: NSString): Unit {
        Native.objc_msgSend("void", this, "backgroundLoadDidFailWithReason:", reason)
    }

    public open fun didLoadBytes_loadComplete(newBytes: NSData, yorn: Boolean): Unit {
        Native.objc_msgSend("void", this, "didLoadBytes:loadComplete:", newBytes, yorn)
    }

    public open fun initWithURL_cached(anURL: NSURL, willCache: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:cached:", anURL, willCache) as ObjCObject

    public open fun propertyForKey(propertyKey: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyForKey:", propertyKey) as ObjCObject

    public open fun propertyForKeyIfAvailable(propertyKey: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyForKeyIfAvailable:", propertyKey) as ObjCObject

    public open fun writeProperty_forKey(propertyValue: ObjCObject, propertyKey: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "writeProperty:forKey:", propertyValue, propertyKey) as Boolean

    public open fun writeData(data: NSData): Boolean =
        Native.objc_msgSend("boolean", this, "writeData:", data) as Boolean

    public open fun loadInForeground(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "loadInForeground") as NSData

    public open fun beginLoadInBackground(): Unit {
        Native.objc_msgSend("void", this, "beginLoadInBackground")
    }

    public open fun endLoadInBackground(): Unit {
        Native.objc_msgSend("void", this, "endLoadInBackground")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun registerURLHandleClass(anURLHandleSubclass: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "registerURLHandleClass:", anURLHandleSubclass)
        }

        public open fun URLHandleClassForURL(anURL: NSURL): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "URLHandleClassForURL:", anURL) as ObjCClass

        public open fun canInitWithURL(anURL: NSURL): Boolean =
            Native.objc_msgSend("boolean", this, "canInitWithURL:", anURL) as Boolean

        public open fun cachedHandleForURL(anURL: NSURL): NSURLHandle =
            Native.objc_msgSend("class objc.NSURLHandle", this, "cachedHandleForURL:", anURL) as NSURLHandle

    }

    companion object : NSObject(Native.objc_getClass("NSURLHandle")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURL(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying, NSURLHandleClient, NSURL_NSPromisedItems, NSURL_NSURLPathUtilities, NSURL_NSURLLoading, NSURL_NSPasteboardSupport {
    public open fun initWithScheme_host_path(scheme: NSString, host: NSString, path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithScheme:host:path:", scheme, host, path) as ObjCObject

    public open fun initFileURLWithPath_isDirectory(path: NSString, isDir: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initFileURLWithPath:isDirectory:", path, isDir) as ObjCObject

    public open fun initFileURLWithPath(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initFileURLWithPath:", path) as ObjCObject

    public open fun initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL(path: Pointer<Char>, isDir: Boolean, baseURL: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", path, isDir, baseURL) as ObjCObject

    public open fun initWithString(URLString: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", URLString) as ObjCObject

    public open fun initWithString_relativeToURL(URLString: NSString, baseURL: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:relativeToURL:", URLString, baseURL) as ObjCObject

    public open fun absoluteString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "absoluteString") as NSString

    public open fun relativeString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "relativeString") as NSString

    public open fun baseURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "baseURL") as NSURL

    public open fun absoluteURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "absoluteURL") as NSURL

    public open fun scheme(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "scheme") as NSString

    public open fun resourceSpecifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "resourceSpecifier") as NSString

    public open fun host(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "host") as NSString

    public open fun port(): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "port") as NSNumber

    public open fun user(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "user") as NSString

    public open fun password(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "password") as NSString

    public open fun path(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "path") as NSString

    public open fun fragment(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fragment") as NSString

    public open fun parameterString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "parameterString") as NSString

    public open fun query(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "query") as NSString

    public open fun relativePath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "relativePath") as NSString

    public open fun getFileSystemRepresentation_maxLength(buffer: Pointer<Char>, maxBufferLength: Int): Boolean =
        Native.objc_msgSend("boolean", this, "getFileSystemRepresentation:maxLength:", buffer, maxBufferLength) as Boolean

    public open fun fileSystemRepresentation(): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "fileSystemRepresentation") as Pointer<Char>

    public open fun isFileURL(): Boolean =
        Native.objc_msgSend("boolean", this, "isFileURL") as Boolean

    public open fun standardizedURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "standardizedURL") as NSURL

    public open fun checkResourceIsReachableAndReturnError(error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "checkResourceIsReachableAndReturnError:", error) as Boolean

    public open fun isFileReferenceURL(): Boolean =
        Native.objc_msgSend("boolean", this, "isFileReferenceURL") as Boolean

    public open fun fileReferenceURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "fileReferenceURL") as NSURL

    public open fun filePathURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "filePathURL") as NSURL

    public open fun getResourceValue_forKey_error(value: Pointer<ObjCObject>, key: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "getResourceValue:forKey:error:", value, key, error) as Boolean

    public open fun resourceValuesForKeys_error(keys: NSArray, error: Pointer<NSError>): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "resourceValuesForKeys:error:", keys, error) as NSDictionary

    public open fun setResourceValue_forKey_error(value: ObjCObject, key: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "setResourceValue:forKey:error:", value, key, error) as Boolean

    public open fun setResourceValues_error(keyedValues: NSDictionary, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "setResourceValues:error:", keyedValues, error) as Boolean

    public open fun removeCachedResourceValueForKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "removeCachedResourceValueForKey:", key)
    }

    public open fun removeAllCachedResourceValues(): Unit {
        Native.objc_msgSend("void", this, "removeAllCachedResourceValues")
    }

    public open fun setTemporaryResourceValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setTemporaryResourceValue:forKey:", value, key)
    }

    public open fun bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error(options: Any, keys: NSArray, relativeURL: NSURL, error: Pointer<NSError>): NSData =
        Native.objc_msgSend("class objc.NSData", this, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:", options, keys, relativeURL, error) as NSData

    public open fun initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(bookmarkData: NSData, options: Any, relativeURL: NSURL, isStale: Pointer<Boolean>, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", bookmarkData, options, relativeURL, isStale, error) as ObjCObject

    public open fun startAccessingSecurityScopedResource(): Boolean =
        Native.objc_msgSend("boolean", this, "startAccessingSecurityScopedResource") as Boolean

    public open fun stopAccessingSecurityScopedResource(): Unit {
        Native.objc_msgSend("void", this, "stopAccessingSecurityScopedResource")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass, NSURLHandleClient.metaclass, NSURL_NSPromisedItems.metaclass, NSURL_NSURLPathUtilities.metaclass, NSURL_NSURLLoading.metaclass, NSURL_NSPasteboardSupport.metaclass {
        public open fun fileURLWithPath_isDirectory(path: NSString, isDir: Boolean): NSURL =
            Native.objc_msgSend("class objc.NSURL", this, "fileURLWithPath:isDirectory:", path, isDir) as NSURL

        public open fun fileURLWithPath(path: NSString): NSURL =
            Native.objc_msgSend("class objc.NSURL", this, "fileURLWithPath:", path) as NSURL

        public open fun fileURLWithFileSystemRepresentation_isDirectory_relativeToURL(path: Pointer<Char>, isDir: Boolean, baseURL: NSURL): NSURL =
            Native.objc_msgSend("class objc.NSURL", this, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", path, isDir, baseURL) as NSURL

        public open fun URLWithString(URLString: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "URLWithString:", URLString) as ObjCObject

        public open fun URLWithString_relativeToURL(URLString: NSString, baseURL: NSURL): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "URLWithString:relativeToURL:", URLString, baseURL) as ObjCObject

        public open fun URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(bookmarkData: NSData, options: Any, relativeURL: NSURL, isStale: Pointer<Boolean>, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:", bookmarkData, options, relativeURL, isStale, error) as ObjCObject

        public open fun resourceValuesForKeys_fromBookmarkData(keys: NSArray, bookmarkData: NSData): NSDictionary =
            Native.objc_msgSend("class objc.NSDictionary", this, "resourceValuesForKeys:fromBookmarkData:", keys, bookmarkData) as NSDictionary

        public open fun writeBookmarkData_toURL_options_error(bookmarkData: NSData, bookmarkFileURL: NSURL, options: Int, error: Pointer<NSError>): Boolean =
            Native.objc_msgSend("boolean", this, "writeBookmarkData:toURL:options:error:", bookmarkData, bookmarkFileURL, options, error) as Boolean

        public open fun bookmarkDataWithContentsOfURL_error(bookmarkFileURL: NSURL, error: Pointer<NSError>): NSData =
            Native.objc_msgSend("class objc.NSData", this, "bookmarkDataWithContentsOfURL:error:", bookmarkFileURL, error) as NSData

        public open fun URLByResolvingAliasFileAtURL_options_error(url: NSURL, options: Any, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "URLByResolvingAliasFileAtURL:options:error:", url, options, error) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSURL")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLQueryItem(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying {
    public open fun initWithName_value(name: NSString, value: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:value:", name, value) as ObjCObject

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    override fun value(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "value") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass {
        public open fun queryItemWithName_value(name: NSString, value: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "queryItemWithName:value:", name, value) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSURLQueryItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLComponents(pointer: Long) : NSObject(pointer), NSCopying {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithURL_resolvingAgainstBaseURL(url: NSURL, resolve: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:resolvingAgainstBaseURL:", url, resolve) as ObjCObject

    public open fun initWithString(URLString: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", URLString) as ObjCObject

    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun URLRelativeToURL(baseURL: NSURL): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLRelativeToURL:", baseURL) as NSURL

    public open fun string(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "string") as NSString

    public open fun scheme(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "scheme") as NSString

    public open fun setScheme(scheme: NSString): Unit {
        Native.objc_msgSend("void", this, "setScheme:", scheme)
    }

    public open fun user(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "user") as NSString

    public open fun setUser(user: NSString): Unit {
        Native.objc_msgSend("void", this, "setUser:", user)
    }

    public open fun password(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "password") as NSString

    public open fun setPassword(password: NSString): Unit {
        Native.objc_msgSend("void", this, "setPassword:", password)
    }

    public open fun host(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "host") as NSString

    public open fun setHost(host: NSString): Unit {
        Native.objc_msgSend("void", this, "setHost:", host)
    }

    public open fun port(): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "port") as NSNumber

    public open fun setPort(port: NSNumber): Unit {
        Native.objc_msgSend("void", this, "setPort:", port)
    }

    public open fun path(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "path") as NSString

    public open fun setPath(path: NSString): Unit {
        Native.objc_msgSend("void", this, "setPath:", path)
    }

    public open fun query(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "query") as NSString

    public open fun setQuery(query: NSString): Unit {
        Native.objc_msgSend("void", this, "setQuery:", query)
    }

    public open fun fragment(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fragment") as NSString

    public open fun setFragment(fragment: NSString): Unit {
        Native.objc_msgSend("void", this, "setFragment:", fragment)
    }

    public open fun percentEncodedUser(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "percentEncodedUser") as NSString

    public open fun setPercentEncodedUser(percentEncodedUser: NSString): Unit {
        Native.objc_msgSend("void", this, "setPercentEncodedUser:", percentEncodedUser)
    }

    public open fun percentEncodedPassword(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "percentEncodedPassword") as NSString

    public open fun setPercentEncodedPassword(percentEncodedPassword: NSString): Unit {
        Native.objc_msgSend("void", this, "setPercentEncodedPassword:", percentEncodedPassword)
    }

    public open fun percentEncodedHost(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "percentEncodedHost") as NSString

    public open fun setPercentEncodedHost(percentEncodedHost: NSString): Unit {
        Native.objc_msgSend("void", this, "setPercentEncodedHost:", percentEncodedHost)
    }

    public open fun percentEncodedPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "percentEncodedPath") as NSString

    public open fun setPercentEncodedPath(percentEncodedPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setPercentEncodedPath:", percentEncodedPath)
    }

    public open fun percentEncodedQuery(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "percentEncodedQuery") as NSString

    public open fun setPercentEncodedQuery(percentEncodedQuery: NSString): Unit {
        Native.objc_msgSend("void", this, "setPercentEncodedQuery:", percentEncodedQuery)
    }

    public open fun percentEncodedFragment(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "percentEncodedFragment") as NSString

    public open fun setPercentEncodedFragment(percentEncodedFragment: NSString): Unit {
        Native.objc_msgSend("void", this, "setPercentEncodedFragment:", percentEncodedFragment)
    }

    public open fun queryItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "queryItems") as NSArray

    public open fun setQueryItems(queryItems: NSArray): Unit {
        Native.objc_msgSend("void", this, "setQueryItems:", queryItems)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass {
        public open fun componentsWithURL_resolvingAgainstBaseURL(url: NSURL, resolve: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "componentsWithURL:resolvingAgainstBaseURL:", url, resolve) as ObjCObject

        public open fun componentsWithString(URLString: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "componentsWithString:", URLString) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSURLComponents")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFileSecurity(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun initWithCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", aDecoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSFileSecurity")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLAuthenticationChallenge(pointer: Long) : NSObject(pointer), NSSecureCoding {
    public open fun initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender(space: NSURLProtectionSpace, credential: NSURLCredential, previousFailureCount: Int, response: NSURLResponse, error: NSError, sender: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:", space, credential, previousFailureCount, response, error, sender) as ObjCObject

    public open fun initWithAuthenticationChallenge_sender(challenge: NSURLAuthenticationChallenge, sender: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithAuthenticationChallenge:sender:", challenge, sender) as ObjCObject

    public open fun protectionSpace(): NSURLProtectionSpace =
        Native.objc_msgSend("class objc.NSURLProtectionSpace", this, "protectionSpace") as NSURLProtectionSpace

    public open fun proposedCredential(): NSURLCredential =
        Native.objc_msgSend("class objc.NSURLCredential", this, "proposedCredential") as NSURLCredential

    public open fun previousFailureCount(): Int =
        Native.objc_msgSend("int", this, "previousFailureCount") as Int

    public open fun failureResponse(): NSURLResponse =
        Native.objc_msgSend("class objc.NSURLResponse", this, "failureResponse") as NSURLResponse

    public open fun error(): NSError =
        Native.objc_msgSend("class objc.NSError", this, "error") as NSError

    public open fun sender(): Any =
        Native.objc_msgSend("class objc.Any", this, "sender")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSURLAuthenticationChallenge")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCachedURLResponse(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying {
    public open fun initWithResponse_data(response: NSURLResponse, data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithResponse:data:", response, data) as ObjCObject

    public open fun initWithResponse_data_userInfo_storagePolicy(response: NSURLResponse, data: NSData, userInfo: NSDictionary, storagePolicy: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithResponse:data:userInfo:storagePolicy:", response, data, userInfo, storagePolicy) as ObjCObject

    public open fun response(): NSURLResponse =
        Native.objc_msgSend("class objc.NSURLResponse", this, "response") as NSURLResponse

    public open fun data(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "data") as NSData

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun storagePolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "storagePolicy")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCachedURLResponse")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLCache(pointer: Long) : NSObject(pointer), NSURLCache_NSURLSessionTaskAdditions {
    public open fun initWithMemoryCapacity_diskCapacity_diskPath(memoryCapacity: Int, diskCapacity: Int, path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithMemoryCapacity:diskCapacity:diskPath:", memoryCapacity, diskCapacity, path) as ObjCObject

    public open fun cachedResponseForRequest(request: NSURLRequest): NSCachedURLResponse =
        Native.objc_msgSend("class objc.NSCachedURLResponse", this, "cachedResponseForRequest:", request) as NSCachedURLResponse

    public open fun storeCachedResponse_forRequest(cachedResponse: NSCachedURLResponse, request: NSURLRequest): Unit {
        Native.objc_msgSend("void", this, "storeCachedResponse:forRequest:", cachedResponse, request)
    }

    public open fun removeCachedResponseForRequest(request: NSURLRequest): Unit {
        Native.objc_msgSend("void", this, "removeCachedResponseForRequest:", request)
    }

    public open fun removeAllCachedResponses(): Unit {
        Native.objc_msgSend("void", this, "removeAllCachedResponses")
    }

    public open fun removeCachedResponsesSinceDate(date: NSDate): Unit {
        Native.objc_msgSend("void", this, "removeCachedResponsesSinceDate:", date)
    }

    public open fun memoryCapacity(): Int =
        Native.objc_msgSend("int", this, "memoryCapacity") as Int

    public open fun setMemoryCapacity(memoryCapacity: Int): Unit {
        Native.objc_msgSend("void", this, "setMemoryCapacity:", memoryCapacity)
    }

    public open fun diskCapacity(): Int =
        Native.objc_msgSend("int", this, "diskCapacity") as Int

    public open fun setDiskCapacity(diskCapacity: Int): Unit {
        Native.objc_msgSend("void", this, "setDiskCapacity:", diskCapacity)
    }

    public open fun currentMemoryUsage(): Int =
        Native.objc_msgSend("int", this, "currentMemoryUsage") as Int

    public open fun currentDiskUsage(): Int =
        Native.objc_msgSend("int", this, "currentDiskUsage") as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSURLCache_NSURLSessionTaskAdditions.metaclass {
        public open fun sharedURLCache(): NSURLCache =
            Native.objc_msgSend("class objc.NSURLCache", this, "sharedURLCache") as NSURLCache

        public open fun setSharedURLCache(cache: NSURLCache): Unit {
            Native.objc_msgSend("void", this, "setSharedURLCache:", cache)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSURLCache")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLConnection(pointer: Long) : NSObject(pointer), NSURLConnection_NSURLConnectionSynchronousLoading, NSURLConnection_NSURLConnectionQueuedLoading {
    public open fun initWithRequest_delegate_startImmediately(request: NSURLRequest, delegate: ObjCObject, startImmediately: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRequest:delegate:startImmediately:", request, delegate, startImmediately) as ObjCObject

    public open fun initWithRequest_delegate(request: NSURLRequest, delegate: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRequest:delegate:", request, delegate) as ObjCObject

    public open fun originalRequest(): NSURLRequest =
        Native.objc_msgSend("class objc.NSURLRequest", this, "originalRequest") as NSURLRequest

    public open fun currentRequest(): NSURLRequest =
        Native.objc_msgSend("class objc.NSURLRequest", this, "currentRequest") as NSURLRequest

    public open fun start(): Unit {
        Native.objc_msgSend("void", this, "start")
    }

    public open fun cancel(): Unit {
        Native.objc_msgSend("void", this, "cancel")
    }

    public open fun scheduleInRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "scheduleInRunLoop:forMode:", aRunLoop, mode)
    }

    public open fun unscheduleFromRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "unscheduleFromRunLoop:forMode:", aRunLoop, mode)
    }

    public open fun setDelegateQueue(queue: NSOperationQueue): Unit {
        Native.objc_msgSend("void", this, "setDelegateQueue:", queue)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSURLConnection_NSURLConnectionSynchronousLoading.metaclass, NSURLConnection_NSURLConnectionQueuedLoading.metaclass {
        public open fun connectionWithRequest_delegate(request: NSURLRequest, delegate: ObjCObject): NSURLConnection =
            Native.objc_msgSend("class objc.NSURLConnection", this, "connectionWithRequest:delegate:", request, delegate) as NSURLConnection

        public open fun canHandleRequest(request: NSURLRequest): Boolean =
            Native.objc_msgSend("boolean", this, "canHandleRequest:", request) as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSURLConnection")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLCredential(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying, NSURLCredential_NSInternetPassword, NSURLCredential_NSClientCertificate, NSURLCredential_NSServerTrust {
    public open fun persistence(): Any =
        Native.objc_msgSend("class objc.Any", this, "persistence")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass, NSURLCredential_NSInternetPassword.metaclass, NSURLCredential_NSClientCertificate.metaclass, NSURLCredential_NSServerTrust.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSURLCredential")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLCredentialStorage(pointer: Long) : NSObject(pointer), NSURLCredentialStorage_NSURLSessionTaskAdditions {
    public open fun credentialsForProtectionSpace(space: NSURLProtectionSpace): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "credentialsForProtectionSpace:", space) as NSDictionary

    public open fun allCredentials(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "allCredentials") as NSDictionary

    public open fun setCredential_forProtectionSpace(credential: NSURLCredential, space: NSURLProtectionSpace): Unit {
        Native.objc_msgSend("void", this, "setCredential:forProtectionSpace:", credential, space)
    }

    public open fun removeCredential_forProtectionSpace(credential: NSURLCredential, space: NSURLProtectionSpace): Unit {
        Native.objc_msgSend("void", this, "removeCredential:forProtectionSpace:", credential, space)
    }

    public open fun removeCredential_forProtectionSpace_options(credential: NSURLCredential, space: NSURLProtectionSpace, options: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "removeCredential:forProtectionSpace:options:", credential, space, options)
    }

    public open fun defaultCredentialForProtectionSpace(space: NSURLProtectionSpace): NSURLCredential =
        Native.objc_msgSend("class objc.NSURLCredential", this, "defaultCredentialForProtectionSpace:", space) as NSURLCredential

    public open fun setDefaultCredential_forProtectionSpace(credential: NSURLCredential, space: NSURLProtectionSpace): Unit {
        Native.objc_msgSend("void", this, "setDefaultCredential:forProtectionSpace:", credential, space)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSURLCredentialStorage_NSURLSessionTaskAdditions.metaclass {
        public open fun sharedCredentialStorage(): NSURLCredentialStorage =
            Native.objc_msgSend("class objc.NSURLCredentialStorage", this, "sharedCredentialStorage") as NSURLCredentialStorage

    }

    companion object : NSObject(Native.objc_getClass("NSURLCredentialStorage")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLProtectionSpace(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying, NSURLProtectionSpace_NSClientCertificateSpace, NSURLProtectionSpace_NSServerTrustValidationSpace {
    public open fun initWithHost_port_protocol_realm_authenticationMethod(host: NSString, port: Int, protocol: NSString, realm: NSString, authenticationMethod: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithHost:port:protocol:realm:authenticationMethod:", host, port, protocol, realm, authenticationMethod) as ObjCObject

    public open fun initWithProxyHost_port_type_realm_authenticationMethod(host: NSString, port: Int, type: NSString, realm: NSString, authenticationMethod: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithProxyHost:port:type:realm:authenticationMethod:", host, port, type, realm, authenticationMethod) as ObjCObject

    public open fun realm(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "realm") as NSString

    public open fun receivesCredentialSecurely(): Boolean =
        Native.objc_msgSend("boolean", this, "receivesCredentialSecurely") as Boolean

    public open fun isProxy(): Boolean =
        Native.objc_msgSend("boolean", this, "isProxy") as Boolean

    public open fun host(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "host") as NSString

    public open fun port(): Int =
        Native.objc_msgSend("int", this, "port") as Int

    public open fun proxyType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "proxyType") as NSString

    public open fun protocol(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "protocol") as NSString

    public open fun authenticationMethod(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "authenticationMethod") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass, NSURLProtectionSpace_NSClientCertificateSpace.metaclass, NSURLProtectionSpace_NSServerTrustValidationSpace.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSURLProtectionSpace")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLProtocol(pointer: Long) : NSObject(pointer), NSURLProtocol_NSURLSessionTaskAdditions {
    public open fun initWithRequest_cachedResponse_client(request: NSURLRequest, cachedResponse: NSCachedURLResponse, client: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRequest:cachedResponse:client:", request, cachedResponse, client) as ObjCObject

    public open fun client(): Any =
        Native.objc_msgSend("class objc.Any", this, "client")

    public open fun request(): NSURLRequest =
        Native.objc_msgSend("class objc.NSURLRequest", this, "request") as NSURLRequest

    public open fun cachedResponse(): NSCachedURLResponse =
        Native.objc_msgSend("class objc.NSCachedURLResponse", this, "cachedResponse") as NSCachedURLResponse

    public open fun startLoading(): Unit {
        Native.objc_msgSend("void", this, "startLoading")
    }

    public open fun stopLoading(): Unit {
        Native.objc_msgSend("void", this, "stopLoading")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSURLProtocol_NSURLSessionTaskAdditions.metaclass {
        public open fun canInitWithRequest(request: NSURLRequest): Boolean =
            Native.objc_msgSend("boolean", this, "canInitWithRequest:", request) as Boolean

        public open fun canonicalRequestForRequest(request: NSURLRequest): NSURLRequest =
            Native.objc_msgSend("class objc.NSURLRequest", this, "canonicalRequestForRequest:", request) as NSURLRequest

        public open fun requestIsCacheEquivalent_toRequest(a: NSURLRequest, b: NSURLRequest): Boolean =
            Native.objc_msgSend("boolean", this, "requestIsCacheEquivalent:toRequest:", a, b) as Boolean

        public open fun propertyForKey_inRequest(key: NSString, request: NSURLRequest): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyForKey:inRequest:", key, request) as ObjCObject

        public open fun setProperty_forKey_inRequest(value: ObjCObject, key: NSString, request: NSMutableURLRequest): Unit {
            Native.objc_msgSend("void", this, "setProperty:forKey:inRequest:", value, key, request)
        }

        public open fun removePropertyForKey_inRequest(key: NSString, request: NSMutableURLRequest): Unit {
            Native.objc_msgSend("void", this, "removePropertyForKey:inRequest:", key, request)
        }

        public open fun registerClass(protocolClass: ObjCClass): Boolean =
            Native.objc_msgSend("boolean", this, "registerClass:", protocolClass) as Boolean

        public open fun unregisterClass(protocolClass: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "unregisterClass:", protocolClass)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSURLProtocol")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLRequest(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying, NSMutableCopying, NSURLRequest_NSHTTPURLRequest {
    public open fun initWithURL(URL: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:", URL) as ObjCObject

    public open fun initWithURL_cachePolicy_timeoutInterval(URL: NSURL, cachePolicy: Any, timeoutInterval: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:cachePolicy:timeoutInterval:", URL, cachePolicy, timeoutInterval) as ObjCObject

    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun cachePolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "cachePolicy")

    public open fun timeoutInterval(): Double =
        Native.objc_msgSend("double", this, "timeoutInterval") as Double

    public open fun mainDocumentURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "mainDocumentURL") as NSURL

    public open fun networkServiceType(): Any =
        Native.objc_msgSend("class objc.Any", this, "networkServiceType")

    public open fun allowsCellularAccess(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsCellularAccess") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSURLRequest_NSHTTPURLRequest.metaclass {
        public open fun requestWithURL(URL: NSURL): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "requestWithURL:", URL) as ObjCObject

        public open fun supportsSecureCoding(): Boolean =
            Native.objc_msgSend("boolean", this, "supportsSecureCoding") as Boolean

        public open fun requestWithURL_cachePolicy_timeoutInterval(URL: NSURL, cachePolicy: Any, timeoutInterval: Double): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "requestWithURL:cachePolicy:timeoutInterval:", URL, cachePolicy, timeoutInterval) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSURLRequest")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableURLRequest(pointer: Long) : NSURLRequest(pointer), NSMutableURLRequest_NSMutableHTTPURLRequest {
    override fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun setURL(URL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setURL:", URL)
    }

    override fun cachePolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "cachePolicy")

    public open fun setCachePolicy(cachePolicy: Any): Unit {
        Native.objc_msgSend("void", this, "setCachePolicy:", cachePolicy)
    }

    override fun timeoutInterval(): Double =
        Native.objc_msgSend("double", this, "timeoutInterval") as Double

    public open fun setTimeoutInterval(timeoutInterval: Double): Unit {
        Native.objc_msgSend("void", this, "setTimeoutInterval:", timeoutInterval)
    }

    override fun mainDocumentURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "mainDocumentURL") as NSURL

    public open fun setMainDocumentURL(mainDocumentURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setMainDocumentURL:", mainDocumentURL)
    }

    override fun networkServiceType(): Any =
        Native.objc_msgSend("class objc.Any", this, "networkServiceType")

    public open fun setNetworkServiceType(networkServiceType: Any): Unit {
        Native.objc_msgSend("void", this, "setNetworkServiceType:", networkServiceType)
    }

    override fun allowsCellularAccess(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsCellularAccess") as Boolean

    public open fun setAllowsCellularAccess(allowsCellularAccess: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsCellularAccess:", allowsCellularAccess)
    }

    override fun HTTPBody(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "HTTPBody") as NSData

    override fun HTTPBodyStream(): NSInputStream =
        Native.objc_msgSend("class objc.NSInputStream", this, "HTTPBodyStream") as NSInputStream

    override fun HTTPMethod(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "HTTPMethod") as NSString

    override fun HTTPShouldHandleCookies(): Boolean =
        Native.objc_msgSend("boolean", this, "HTTPShouldHandleCookies") as Boolean

    override fun HTTPShouldUsePipelining(): Boolean =
        Native.objc_msgSend("boolean", this, "HTTPShouldUsePipelining") as Boolean

    override fun allHTTPHeaderFields(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "allHTTPHeaderFields") as NSDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSURLRequest.metaclass, NSMutableURLRequest_NSMutableHTTPURLRequest.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMutableURLRequest")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLResponse(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying {
    public open fun initWithURL_MIMEType_expectedContentLength_textEncodingName(URL: NSURL, MIMEType: NSString, length: Int, name: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:MIMEType:expectedContentLength:textEncodingName:", URL, MIMEType, length, name) as ObjCObject

    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun MIMEType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "MIMEType") as NSString

    public open fun expectedContentLength(): Long =
        Native.objc_msgSend("long", this, "expectedContentLength") as Long

    public open fun textEncodingName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "textEncodingName") as NSString

    public open fun suggestedFilename(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "suggestedFilename") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSURLResponse")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHTTPURLResponse(pointer: Long) : NSURLResponse(pointer) {
    public open fun initWithURL_statusCode_HTTPVersion_headerFields(url: NSURL, statusCode: Int, HTTPVersion: NSString, headerFields: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:statusCode:HTTPVersion:headerFields:", url, statusCode, HTTPVersion, headerFields) as ObjCObject

    public open fun statusCode(): Int =
        Native.objc_msgSend("int", this, "statusCode") as Int

    public open fun allHeaderFields(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "allHeaderFields") as NSDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSURLResponse.metaclass {
        public open fun localizedStringForStatusCode(statusCode: Int): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localizedStringForStatusCode:", statusCode) as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSHTTPURLResponse")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserDefaults(pointer: Long) : NSObject(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithSuiteName(suitename: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSuiteName:", suitename) as ObjCObject

    public open fun initWithUser(username: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithUser:", username) as ObjCObject

    public open fun objectForKey(defaultName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForKey:", defaultName) as ObjCObject

    public open fun setObject_forKey(value: ObjCObject, defaultName: NSString): Unit {
        Native.objc_msgSend("void", this, "setObject:forKey:", value, defaultName)
    }

    public open fun removeObjectForKey(defaultName: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObjectForKey:", defaultName)
    }

    public open fun stringForKey(defaultName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringForKey:", defaultName) as NSString

    public open fun arrayForKey(defaultName: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arrayForKey:", defaultName) as NSArray

    public open fun dictionaryForKey(defaultName: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryForKey:", defaultName) as NSDictionary

    public open fun dataForKey(defaultName: NSString): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataForKey:", defaultName) as NSData

    public open fun stringArrayForKey(defaultName: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "stringArrayForKey:", defaultName) as NSArray

    public open fun integerForKey(defaultName: NSString): Int =
        Native.objc_msgSend("int", this, "integerForKey:", defaultName) as Int

    public open fun floatForKey(defaultName: NSString): Float =
        Native.objc_msgSend("float", this, "floatForKey:", defaultName) as Float

    public open fun doubleForKey(defaultName: NSString): Double =
        Native.objc_msgSend("double", this, "doubleForKey:", defaultName) as Double

    public open fun boolForKey(defaultName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "boolForKey:", defaultName) as Boolean

    public open fun URLForKey(defaultName: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForKey:", defaultName) as NSURL

    public open fun setInteger_forKey(value: Int, defaultName: NSString): Unit {
        Native.objc_msgSend("void", this, "setInteger:forKey:", value, defaultName)
    }

    public open fun setFloat_forKey(value: Float, defaultName: NSString): Unit {
        Native.objc_msgSend("void", this, "setFloat:forKey:", value, defaultName)
    }

    public open fun setDouble_forKey(value: Double, defaultName: NSString): Unit {
        Native.objc_msgSend("void", this, "setDouble:forKey:", value, defaultName)
    }

    public open fun setBool_forKey(value: Boolean, defaultName: NSString): Unit {
        Native.objc_msgSend("void", this, "setBool:forKey:", value, defaultName)
    }

    public open fun setURL_forKey(url: NSURL, defaultName: NSString): Unit {
        Native.objc_msgSend("void", this, "setURL:forKey:", url, defaultName)
    }

    public open fun registerDefaults(registrationDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "registerDefaults:", registrationDictionary)
    }

    public open fun addSuiteNamed(suiteName: NSString): Unit {
        Native.objc_msgSend("void", this, "addSuiteNamed:", suiteName)
    }

    public open fun removeSuiteNamed(suiteName: NSString): Unit {
        Native.objc_msgSend("void", this, "removeSuiteNamed:", suiteName)
    }

    public open fun dictionaryRepresentation(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryRepresentation") as NSDictionary

    public open fun volatileDomainNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "volatileDomainNames") as NSArray

    public open fun volatileDomainForName(domainName: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "volatileDomainForName:", domainName) as NSDictionary

    public open fun setVolatileDomain_forName(domain: NSDictionary, domainName: NSString): Unit {
        Native.objc_msgSend("void", this, "setVolatileDomain:forName:", domain, domainName)
    }

    public open fun removeVolatileDomainForName(domainName: NSString): Unit {
        Native.objc_msgSend("void", this, "removeVolatileDomainForName:", domainName)
    }

    public open fun persistentDomainNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "persistentDomainNames") as NSArray

    public open fun persistentDomainForName(domainName: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "persistentDomainForName:", domainName) as NSDictionary

    public open fun setPersistentDomain_forName(domain: NSDictionary, domainName: NSString): Unit {
        Native.objc_msgSend("void", this, "setPersistentDomain:forName:", domain, domainName)
    }

    public open fun removePersistentDomainForName(domainName: NSString): Unit {
        Native.objc_msgSend("void", this, "removePersistentDomainForName:", domainName)
    }

    public open fun synchronize(): Boolean =
        Native.objc_msgSend("boolean", this, "synchronize") as Boolean

    public open fun objectIsForcedForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "objectIsForcedForKey:", key) as Boolean

    public open fun objectIsForcedForKey_inDomain(key: NSString, domain: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "objectIsForcedForKey:inDomain:", key, domain) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun standardUserDefaults(): NSUserDefaults =
            Native.objc_msgSend("class objc.NSUserDefaults", this, "standardUserDefaults") as NSUserDefaults

        public open fun resetStandardUserDefaults(): Unit {
            Native.objc_msgSend("void", this, "resetStandardUserDefaults")
        }

    }

    companion object : NSObject(Native.objc_getClass("NSUserDefaults")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSValueTransformer(pointer: Long) : NSObject(pointer) {
    public open fun transformedValue(value: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "transformedValue:", value) as ObjCObject

    public open fun reverseTransformedValue(value: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "reverseTransformedValue:", value) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun setValueTransformer_forName(transformer: NSValueTransformer, name: NSString): Unit {
            Native.objc_msgSend("void", this, "setValueTransformer:forName:", transformer, name)
        }

        public open fun valueTransformerForName(name: NSString): NSValueTransformer =
            Native.objc_msgSend("class objc.NSValueTransformer", this, "valueTransformerForName:", name) as NSValueTransformer

        public open fun valueTransformerNames(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "valueTransformerNames") as NSArray

        public open fun transformedValueClass(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "transformedValueClass") as ObjCClass

        public open fun allowsReverseTransformation(): Boolean =
            Native.objc_msgSend("boolean", this, "allowsReverseTransformation") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSValueTransformer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXMLParser(pointer: Long) : NSObject(pointer), NSXMLParser_NSXMLParserLocatorAdditions {
    public open fun initWithContentsOfURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:", url) as ObjCObject

    public open fun initWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", data) as ObjCObject

    public open fun initWithStream(stream: NSInputStream): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithStream:", stream) as ObjCObject

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun shouldProcessNamespaces(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldProcessNamespaces") as Boolean

    public open fun setShouldProcessNamespaces(shouldProcessNamespaces: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldProcessNamespaces:", shouldProcessNamespaces)
    }

    public open fun shouldReportNamespacePrefixes(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldReportNamespacePrefixes") as Boolean

    public open fun setShouldReportNamespacePrefixes(shouldReportNamespacePrefixes: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldReportNamespacePrefixes:", shouldReportNamespacePrefixes)
    }

    public open fun externalEntityResolvingPolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "externalEntityResolvingPolicy")

    public open fun setExternalEntityResolvingPolicy(externalEntityResolvingPolicy: Any): Unit {
        Native.objc_msgSend("void", this, "setExternalEntityResolvingPolicy:", externalEntityResolvingPolicy)
    }

    public open fun allowedExternalEntityURLs(): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "allowedExternalEntityURLs") as NSSet

    public open fun setAllowedExternalEntityURLs(allowedExternalEntityURLs: NSSet): Unit {
        Native.objc_msgSend("void", this, "setAllowedExternalEntityURLs:", allowedExternalEntityURLs)
    }

    public open fun parse(): Boolean =
        Native.objc_msgSend("boolean", this, "parse") as Boolean

    public open fun abortParsing(): Unit {
        Native.objc_msgSend("void", this, "abortParsing")
    }

    public open fun parserError(): NSError =
        Native.objc_msgSend("class objc.NSError", this, "parserError") as NSError

    public open fun shouldResolveExternalEntities(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldResolveExternalEntities") as Boolean

    public open fun setShouldResolveExternalEntities(shouldResolveExternalEntities: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldResolveExternalEntities:", shouldResolveExternalEntities)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSXMLParser_NSXMLParserLocatorAdditions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSXMLParser")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAttributedString(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding, NSAttributedString_NSExtendedAttributedString, NSAttributedString_NSAttributedStringKitAdditions, NSAttributedString_NSAttributedStringPasteboardAdditions, NSAttributedString_NSDeprecatedKitAdditions, NSAttributedString_NSAttributedStringAttachmentConveniences, NSAttributedString_NSStringDrawing, NSAttributedString_NSExtendedStringDrawing {
    public open fun string(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "string") as NSString

    public open fun attributesAtIndex_effectiveRange(location: Int, range: Pointer<Any>): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "attributesAtIndex:effectiveRange:", location, range) as NSDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass, NSAttributedString_NSExtendedAttributedString.metaclass, NSAttributedString_NSAttributedStringKitAdditions.metaclass, NSAttributedString_NSAttributedStringPasteboardAdditions.metaclass, NSAttributedString_NSDeprecatedKitAdditions.metaclass, NSAttributedString_NSAttributedStringAttachmentConveniences.metaclass, NSAttributedString_NSStringDrawing.metaclass, NSAttributedString_NSExtendedStringDrawing.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSAttributedString")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableAttributedString(pointer: Long) : NSAttributedString(pointer), NSMutableAttributedString_NSExtendedMutableAttributedString, NSMutableAttributedString_NSMutableAttributedStringKitAdditions, NSMutableAttributedString_NSMutableAttributedStringAttachmentConveniences {
    public open fun replaceCharactersInRange_withString(range: Any, str: NSString): Unit {
        Native.objc_msgSend("void", this, "replaceCharactersInRange:withString:", range, str)
    }

    public open fun setAttributes_range(attrs: NSDictionary, range: Any): Unit {
        Native.objc_msgSend("void", this, "setAttributes:range:", attrs, range)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSAttributedString.metaclass, NSMutableAttributedString_NSExtendedMutableAttributedString.metaclass, NSMutableAttributedString_NSMutableAttributedStringKitAdditions.metaclass, NSMutableAttributedString_NSMutableAttributedStringAttachmentConveniences.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMutableAttributedString")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSByteCountFormatter(pointer: Long) : NSFormatter(pointer) {
    public open fun stringFromByteCount(byteCount: Long): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromByteCount:", byteCount) as NSString

    public open fun allowedUnits(): Any =
        Native.objc_msgSend("class objc.Any", this, "allowedUnits")

    public open fun setAllowedUnits(allowedUnits: Any): Unit {
        Native.objc_msgSend("void", this, "setAllowedUnits:", allowedUnits)
    }

    public open fun countStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "countStyle")

    public open fun setCountStyle(countStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setCountStyle:", countStyle)
    }

    public open fun allowsNonnumericFormatting(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsNonnumericFormatting") as Boolean

    public open fun setAllowsNonnumericFormatting(allowsNonnumericFormatting: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsNonnumericFormatting:", allowsNonnumericFormatting)
    }

    public open fun includesUnit(): Boolean =
        Native.objc_msgSend("boolean", this, "includesUnit") as Boolean

    public open fun setIncludesUnit(includesUnit: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncludesUnit:", includesUnit)
    }

    public open fun includesCount(): Boolean =
        Native.objc_msgSend("boolean", this, "includesCount") as Boolean

    public open fun setIncludesCount(includesCount: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncludesCount:", includesCount)
    }

    public open fun includesActualByteCount(): Boolean =
        Native.objc_msgSend("boolean", this, "includesActualByteCount") as Boolean

    public open fun setIncludesActualByteCount(includesActualByteCount: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncludesActualByteCount:", includesActualByteCount)
    }

    public open fun isAdaptive(): Boolean =
        Native.objc_msgSend("boolean", this, "isAdaptive") as Boolean

    public open fun setAdaptive(adaptive: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAdaptive:", adaptive)
    }

    public open fun zeroPadsFractionDigits(): Boolean =
        Native.objc_msgSend("boolean", this, "zeroPadsFractionDigits") as Boolean

    public open fun setZeroPadsFractionDigits(zeroPadsFractionDigits: Boolean): Unit {
        Native.objc_msgSend("void", this, "setZeroPadsFractionDigits:", zeroPadsFractionDigits)
    }

    public open fun formattingContext(): Any =
        Native.objc_msgSend("class objc.Any", this, "formattingContext")

    public open fun setFormattingContext(formattingContext: Any): Unit {
        Native.objc_msgSend("void", this, "setFormattingContext:", formattingContext)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFormatter.metaclass {
        public open fun stringFromByteCount_countStyle(byteCount: Long, countStyle: Any): NSString =
            Native.objc_msgSend("class objc.NSString", this, "stringFromByteCount:countStyle:", byteCount, countStyle) as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSByteCountFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCache(pointer: Long) : NSObject(pointer) {
    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun objectForKey(key: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForKey:", key) as ObjCObject

    public open fun setObject_forKey(obj: ObjCObject, key: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setObject:forKey:", obj, key)
    }

    public open fun setObject_forKey_cost(obj: ObjCObject, key: ObjCObject, g: Int): Unit {
        Native.objc_msgSend("void", this, "setObject:forKey:cost:", obj, key, g)
    }

    public open fun removeObjectForKey(key: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObjectForKey:", key)
    }

    public open fun removeAllObjects(): Unit {
        Native.objc_msgSend("void", this, "removeAllObjects")
    }

    public open fun totalCostLimit(): Int =
        Native.objc_msgSend("int", this, "totalCostLimit") as Int

    public open fun setTotalCostLimit(totalCostLimit: Int): Unit {
        Native.objc_msgSend("void", this, "setTotalCostLimit:", totalCostLimit)
    }

    public open fun countLimit(): Int =
        Native.objc_msgSend("int", this, "countLimit") as Int

    public open fun setCountLimit(countLimit: Int): Unit {
        Native.objc_msgSend("void", this, "setCountLimit:", countLimit)
    }

    public open fun evictsObjectsWithDiscardedContent(): Boolean =
        Native.objc_msgSend("boolean", this, "evictsObjectsWithDiscardedContent") as Boolean

    public open fun setEvictsObjectsWithDiscardedContent(evictsObjectsWithDiscardedContent: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEvictsObjectsWithDiscardedContent:", evictsObjectsWithDiscardedContent)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCache")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPredicate(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying {
    public open fun predicateFormat(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "predicateFormat") as NSString

    public open fun predicateWithSubstitutionVariables(variables: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "predicateWithSubstitutionVariables:", variables) as ObjCObject

    public open fun evaluateWithObject(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "evaluateWithObject:", `object`) as Boolean

    public open fun evaluateWithObject_substitutionVariables(`object`: ObjCObject, bindings: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "evaluateWithObject:substitutionVariables:", `object`, bindings) as Boolean

    public open fun allowEvaluation(): Unit {
        Native.objc_msgSend("void", this, "allowEvaluation")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass {
        public open fun predicateWithFormat_argumentArray(predicateFormat: NSString, arguments: NSArray): NSPredicate =
            Native.objc_msgSend("class objc.NSPredicate", this, "predicateWithFormat:argumentArray:", predicateFormat, arguments) as NSPredicate

        public open fun predicateWithFormat(predicateFormat: NSString): NSPredicate =
            Native.objc_msgSend("class objc.NSPredicate", this, "predicateWithFormat:", predicateFormat) as NSPredicate

        public open fun predicateWithFormat_arguments(predicateFormat: NSString, argList: Any): NSPredicate =
            Native.objc_msgSend("class objc.NSPredicate", this, "predicateWithFormat:arguments:", predicateFormat, argList) as NSPredicate

        public open fun predicateFromMetadataQueryString(queryString: NSString): NSPredicate =
            Native.objc_msgSend("class objc.NSPredicate", this, "predicateFromMetadataQueryString:", queryString) as NSPredicate

        public open fun predicateWithValue(value: Boolean): NSPredicate =
            Native.objc_msgSend("class objc.NSPredicate", this, "predicateWithValue:", value) as NSPredicate

        public open fun predicateWithBlock(block: Any): NSPredicate =
            Native.objc_msgSend("class objc.NSPredicate", this, "predicateWithBlock:", block) as NSPredicate

    }

    companion object : NSObject(Native.objc_getClass("NSPredicate")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSComparisonPredicate(pointer: Long) : NSPredicate(pointer) {
    public open fun initWithLeftExpression_rightExpression_modifier_type_options(lhs: NSExpression, rhs: NSExpression, modifier: Any, type: Any, options: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLeftExpression:rightExpression:modifier:type:options:", lhs, rhs, modifier, type, options) as ObjCObject

    public open fun initWithLeftExpression_rightExpression_customSelector(lhs: NSExpression, rhs: NSExpression, selector: ObjCSelector): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLeftExpression:rightExpression:customSelector:", lhs, rhs, selector) as ObjCObject

    public open fun predicateOperatorType(): Any =
        Native.objc_msgSend("class objc.Any", this, "predicateOperatorType")

    public open fun comparisonPredicateModifier(): Any =
        Native.objc_msgSend("class objc.Any", this, "comparisonPredicateModifier")

    public open fun leftExpression(): NSExpression =
        Native.objc_msgSend("class objc.NSExpression", this, "leftExpression") as NSExpression

    public open fun rightExpression(): NSExpression =
        Native.objc_msgSend("class objc.NSExpression", this, "rightExpression") as NSExpression

    public open fun customSelector(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "customSelector") as ObjCSelector

    public open fun options(): Any =
        Native.objc_msgSend("class objc.Any", this, "options")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPredicate.metaclass {
        public open fun predicateWithLeftExpression_rightExpression_modifier_type_options(lhs: NSExpression, rhs: NSExpression, modifier: Any, type: Any, options: Any): NSComparisonPredicate =
            Native.objc_msgSend("class objc.NSComparisonPredicate", this, "predicateWithLeftExpression:rightExpression:modifier:type:options:", lhs, rhs, modifier, type, options) as NSComparisonPredicate

        public open fun predicateWithLeftExpression_rightExpression_customSelector(lhs: NSExpression, rhs: NSExpression, selector: ObjCSelector): NSComparisonPredicate =
            Native.objc_msgSend("class objc.NSComparisonPredicate", this, "predicateWithLeftExpression:rightExpression:customSelector:", lhs, rhs, selector) as NSComparisonPredicate

    }

    companion object : NSObject(Native.objc_getClass("NSComparisonPredicate")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCompoundPredicate(pointer: Long) : NSPredicate(pointer) {
    public open fun initWithType_subpredicates(type: Any, subpredicates: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithType:subpredicates:", type, subpredicates) as ObjCObject

    public open fun compoundPredicateType(): Any =
        Native.objc_msgSend("class objc.Any", this, "compoundPredicateType")

    public open fun subpredicates(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "subpredicates") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPredicate.metaclass {
        public open fun andPredicateWithSubpredicates(subpredicates: NSArray): NSCompoundPredicate =
            Native.objc_msgSend("class objc.NSCompoundPredicate", this, "andPredicateWithSubpredicates:", subpredicates) as NSCompoundPredicate

        public open fun orPredicateWithSubpredicates(subpredicates: NSArray): NSCompoundPredicate =
            Native.objc_msgSend("class objc.NSCompoundPredicate", this, "orPredicateWithSubpredicates:", subpredicates) as NSCompoundPredicate

        public open fun notPredicateWithSubpredicate(predicate: NSPredicate): NSCompoundPredicate =
            Native.objc_msgSend("class objc.NSCompoundPredicate", this, "notPredicateWithSubpredicate:", predicate) as NSCompoundPredicate

    }

    companion object : NSObject(Native.objc_getClass("NSCompoundPredicate")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDateComponentsFormatter(pointer: Long) : NSFormatter(pointer) {
    override fun stringForObjectValue(obj: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringForObjectValue:", obj) as NSString

    public open fun stringFromDateComponents(components: NSDateComponents): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromDateComponents:", components) as NSString

    public open fun stringFromDate_toDate(startDate: NSDate, endDate: NSDate): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromDate:toDate:", startDate, endDate) as NSString

    public open fun stringFromTimeInterval(ti: Double): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringFromTimeInterval:", ti) as NSString

    public open fun unitsStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "unitsStyle")

    public open fun setUnitsStyle(unitsStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setUnitsStyle:", unitsStyle)
    }

    public open fun allowedUnits(): Any =
        Native.objc_msgSend("class objc.Any", this, "allowedUnits")

    public open fun setAllowedUnits(allowedUnits: Any): Unit {
        Native.objc_msgSend("void", this, "setAllowedUnits:", allowedUnits)
    }

    public open fun zeroFormattingBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "zeroFormattingBehavior")

    public open fun setZeroFormattingBehavior(zeroFormattingBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setZeroFormattingBehavior:", zeroFormattingBehavior)
    }

    public open fun calendar(): NSCalendar =
        Native.objc_msgSend("class objc.NSCalendar", this, "calendar") as NSCalendar

    public open fun setCalendar(calendar: NSCalendar): Unit {
        Native.objc_msgSend("void", this, "setCalendar:", calendar)
    }

    public open fun allowsFractionalUnits(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsFractionalUnits") as Boolean

    public open fun setAllowsFractionalUnits(allowsFractionalUnits: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsFractionalUnits:", allowsFractionalUnits)
    }

    public open fun maximumUnitCount(): Int =
        Native.objc_msgSend("int", this, "maximumUnitCount") as Int

    public open fun setMaximumUnitCount(maximumUnitCount: Int): Unit {
        Native.objc_msgSend("void", this, "setMaximumUnitCount:", maximumUnitCount)
    }

    public open fun collapsesLargestUnit(): Boolean =
        Native.objc_msgSend("boolean", this, "collapsesLargestUnit") as Boolean

    public open fun setCollapsesLargestUnit(collapsesLargestUnit: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCollapsesLargestUnit:", collapsesLargestUnit)
    }

    public open fun includesApproximationPhrase(): Boolean =
        Native.objc_msgSend("boolean", this, "includesApproximationPhrase") as Boolean

    public open fun setIncludesApproximationPhrase(includesApproximationPhrase: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncludesApproximationPhrase:", includesApproximationPhrase)
    }

    public open fun includesTimeRemainingPhrase(): Boolean =
        Native.objc_msgSend("boolean", this, "includesTimeRemainingPhrase") as Boolean

    public open fun setIncludesTimeRemainingPhrase(includesTimeRemainingPhrase: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncludesTimeRemainingPhrase:", includesTimeRemainingPhrase)
    }

    public open fun formattingContext(): Any =
        Native.objc_msgSend("class objc.Any", this, "formattingContext")

    public open fun setFormattingContext(formattingContext: Any): Unit {
        Native.objc_msgSend("void", this, "setFormattingContext:", formattingContext)
    }

    override fun getObjectValue_forString_errorDescription(obj: Pointer<ObjCObject>, string: NSString, error: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "getObjectValue:forString:errorDescription:", obj, string, error) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFormatter.metaclass {
        public open fun localizedStringFromDateComponents_unitsStyle(components: NSDateComponents, unitsStyle: Any): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localizedStringFromDateComponents:unitsStyle:", components, unitsStyle) as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSDateComponentsFormatter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSExpression(pointer: Long) : NSObject(pointer), NSSecureCoding, NSCopying {
    public open fun initWithExpressionType(type: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithExpressionType:", type) as ObjCObject

    public open fun expressionType(): Any =
        Native.objc_msgSend("class objc.Any", this, "expressionType")

    public open fun constantValue(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "constantValue") as ObjCObject

    public open fun keyPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyPath") as NSString

    public open fun function(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "function") as NSString

    public open fun variable(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "variable") as NSString

    public open fun operand(): NSExpression =
        Native.objc_msgSend("class objc.NSExpression", this, "operand") as NSExpression

    public open fun arguments(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arguments") as NSArray

    public open fun collection(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "collection") as ObjCObject

    public open fun predicate(): NSPredicate =
        Native.objc_msgSend("class objc.NSPredicate", this, "predicate") as NSPredicate

    public open fun leftExpression(): NSExpression =
        Native.objc_msgSend("class objc.NSExpression", this, "leftExpression") as NSExpression

    public open fun rightExpression(): NSExpression =
        Native.objc_msgSend("class objc.NSExpression", this, "rightExpression") as NSExpression

    public open fun expressionBlock(): Any =
        Native.objc_msgSend("class objc.Any", this, "expressionBlock")

    public open fun expressionValueWithObject_context(`object`: ObjCObject, context: NSMutableDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "expressionValueWithObject:context:", `object`, context) as ObjCObject

    public open fun allowEvaluation(): Unit {
        Native.objc_msgSend("void", this, "allowEvaluation")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass, NSCopying.metaclass {
        public open fun expressionWithFormat_argumentArray(expressionFormat: NSString, arguments: NSArray): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionWithFormat:argumentArray:", expressionFormat, arguments) as NSExpression

        public open fun expressionWithFormat(expressionFormat: NSString): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionWithFormat:", expressionFormat) as NSExpression

        public open fun expressionWithFormat_arguments(expressionFormat: NSString, argList: Any): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionWithFormat:arguments:", expressionFormat, argList) as NSExpression

        public open fun expressionForConstantValue(obj: ObjCObject): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForConstantValue:", obj) as NSExpression

        public open fun expressionForEvaluatedObject(): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForEvaluatedObject") as NSExpression

        public open fun expressionForVariable(string: NSString): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForVariable:", string) as NSExpression

        public open fun expressionForKeyPath(keyPath: NSString): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForKeyPath:", keyPath) as NSExpression

        public open fun expressionForFunction_arguments(name: NSString, parameters: NSArray): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForFunction:arguments:", name, parameters) as NSExpression

        public open fun expressionForAggregate(subexpressions: NSArray): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForAggregate:", subexpressions) as NSExpression

        public open fun expressionForUnionSet_with(left: NSExpression, right: NSExpression): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForUnionSet:with:", left, right) as NSExpression

        public open fun expressionForIntersectSet_with(left: NSExpression, right: NSExpression): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForIntersectSet:with:", left, right) as NSExpression

        public open fun expressionForMinusSet_with(left: NSExpression, right: NSExpression): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForMinusSet:with:", left, right) as NSExpression

        public open fun expressionForSubquery_usingIteratorVariable_predicate(expression: NSExpression, variable: NSString, predicate: ObjCObject): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForSubquery:usingIteratorVariable:predicate:", expression, variable, predicate) as NSExpression

        public open fun expressionForFunction_selectorName_arguments(target: NSExpression, name: NSString, parameters: NSArray): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForFunction:selectorName:arguments:", target, name, parameters) as NSExpression

        public open fun expressionForAnyKey(): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForAnyKey") as NSExpression

        public open fun expressionForBlock_arguments(block: Any, arguments: NSArray): NSExpression =
            Native.objc_msgSend("class objc.NSExpression", this, "expressionForBlock:arguments:", block, arguments) as NSExpression

    }

    companion object : NSObject(Native.objc_getClass("NSExpression")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSExtensionContext(pointer: Long) : NSObject(pointer) {
    public open fun inputItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "inputItems") as NSArray

    public open fun completeRequestReturningItems_completionHandler(items: NSArray, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "completeRequestReturningItems:completionHandler:", items, completionHandler)
    }

    public open fun cancelRequestWithError(error: NSError): Unit {
        Native.objc_msgSend("void", this, "cancelRequestWithError:", error)
    }

    public open fun openURL_completionHandler(URL: NSURL, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "openURL:completionHandler:", URL, completionHandler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSExtensionContext")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSItemProvider(pointer: Long) : NSObject(pointer), NSCopying, NSItemProvider_NSPreviewSupport, NSItemProvider_NSItemSourceInfo {
    public open fun initWithItem_typeIdentifier(item: Any, typeIdentifier: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithItem:typeIdentifier:", item, typeIdentifier) as ObjCObject

    public open fun initWithContentsOfURL(fileURL: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:", fileURL) as ObjCObject

    public open fun registerItemForTypeIdentifier_loadHandler(typeIdentifier: NSString, loadHandler: Any): Unit {
        Native.objc_msgSend("void", this, "registerItemForTypeIdentifier:loadHandler:", typeIdentifier, loadHandler)
    }

    public open fun registeredTypeIdentifiers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "registeredTypeIdentifiers") as NSArray

    public open fun hasItemConformingToTypeIdentifier(typeIdentifier: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "hasItemConformingToTypeIdentifier:", typeIdentifier) as Boolean

    public open fun loadItemForTypeIdentifier_options_completionHandler(typeIdentifier: NSString, options: NSDictionary, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "loadItemForTypeIdentifier:options:completionHandler:", typeIdentifier, options, completionHandler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSItemProvider_NSPreviewSupport.metaclass, NSItemProvider_NSItemSourceInfo.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSItemProvider")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSExtensionItem(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun attributedTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedTitle") as NSAttributedString

    public open fun setAttributedTitle(attributedTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedTitle:", attributedTitle)
    }

    public open fun attributedContentText(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedContentText") as NSAttributedString

    public open fun setAttributedContentText(attributedContentText: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedContentText:", attributedContentText)
    }

    public open fun attachments(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "attachments") as NSArray

    public open fun setAttachments(attachments: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAttachments:", attachments)
    }

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun setUserInfo(userInfo: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setUserInfo:", userInfo)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSExtensionItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFileAccessIntent(pointer: Long) : NSObject(pointer) {
    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun readingIntentWithURL_options(url: NSURL, options: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "readingIntentWithURL:options:", url, options) as ObjCObject

        public open fun writingIntentWithURL_options(url: NSURL, options: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "writingIntentWithURL:options:", url, options) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSFileAccessIntent")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFileCoordinator(pointer: Long) : NSObject(pointer) {
    public open fun initWithFilePresenter(filePresenterOrNil: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFilePresenter:", filePresenterOrNil) as ObjCObject

    public open fun purposeIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "purposeIdentifier") as NSString

    public open fun setPurposeIdentifier(purposeIdentifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setPurposeIdentifier:", purposeIdentifier)
    }

    public open fun coordinateAccessWithIntents_queue_byAccessor(intents: NSArray, queue: NSOperationQueue, accessor: Any): Unit {
        Native.objc_msgSend("void", this, "coordinateAccessWithIntents:queue:byAccessor:", intents, queue, accessor)
    }

    public open fun coordinateReadingItemAtURL_options_error_byAccessor(url: NSURL, options: Any, outError: Pointer<NSError>, reader: Any): Unit {
        Native.objc_msgSend("void", this, "coordinateReadingItemAtURL:options:error:byAccessor:", url, options, outError, reader)
    }

    public open fun coordinateWritingItemAtURL_options_error_byAccessor(url: NSURL, options: Any, outError: Pointer<NSError>, writer: Any): Unit {
        Native.objc_msgSend("void", this, "coordinateWritingItemAtURL:options:error:byAccessor:", url, options, outError, writer)
    }

    public open fun coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor(readingURL: NSURL, readingOptions: Any, writingURL: NSURL, writingOptions: Any, outError: Pointer<NSError>, readerWriter: Any): Unit {
        Native.objc_msgSend("void", this, "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:", readingURL, readingOptions, writingURL, writingOptions, outError, readerWriter)
    }

    public open fun coordinateWritingItemAtURL_options_writingItemAtURL_options_error_byAccessor(url1: NSURL, options1: Any, url2: NSURL, options2: Any, outError: Pointer<NSError>, writer: Any): Unit {
        Native.objc_msgSend("void", this, "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:", url1, options1, url2, options2, outError, writer)
    }

    public open fun prepareForReadingItemsAtURLs_options_writingItemsAtURLs_options_error_byAccessor(readingURLs: NSArray, readingOptions: Any, writingURLs: NSArray, writingOptions: Any, outError: Pointer<NSError>, batchAccessor: Any): Unit {
        Native.objc_msgSend("void", this, "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:", readingURLs, readingOptions, writingURLs, writingOptions, outError, batchAccessor)
    }

    public open fun itemAtURL_willMoveToURL(oldURL: NSURL, newURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "itemAtURL:willMoveToURL:", oldURL, newURL)
    }

    public open fun itemAtURL_didMoveToURL(oldURL: NSURL, newURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "itemAtURL:didMoveToURL:", oldURL, newURL)
    }

    public open fun cancel(): Unit {
        Native.objc_msgSend("void", this, "cancel")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun addFilePresenter(filePresenter: Any): Unit {
            Native.objc_msgSend("void", this, "addFilePresenter:", filePresenter)
        }

        public open fun removeFilePresenter(filePresenter: Any): Unit {
            Native.objc_msgSend("void", this, "removeFilePresenter:", filePresenter)
        }

        public open fun filePresenters(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "filePresenters") as NSArray

    }

    companion object : NSObject(Native.objc_getClass("NSFileCoordinator")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFileVersion(pointer: Long) : NSObject(pointer) {
    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun localizedName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedName") as NSString

    public open fun localizedNameOfSavingComputer(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedNameOfSavingComputer") as NSString

    public open fun modificationDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "modificationDate") as NSDate

    public open fun persistentIdentifier(): Any =
        Native.objc_msgSend("class objc.Any", this, "persistentIdentifier")

    public open fun isConflict(): Boolean =
        Native.objc_msgSend("boolean", this, "isConflict") as Boolean

    public open fun isResolved(): Boolean =
        Native.objc_msgSend("boolean", this, "isResolved") as Boolean

    public open fun setResolved(resolved: Boolean): Unit {
        Native.objc_msgSend("void", this, "setResolved:", resolved)
    }

    public open fun isDiscardable(): Boolean =
        Native.objc_msgSend("boolean", this, "isDiscardable") as Boolean

    public open fun setDiscardable(discardable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDiscardable:", discardable)
    }

    public open fun hasLocalContents(): Boolean =
        Native.objc_msgSend("boolean", this, "hasLocalContents") as Boolean

    public open fun hasThumbnail(): Boolean =
        Native.objc_msgSend("boolean", this, "hasThumbnail") as Boolean

    public open fun replaceItemAtURL_options_error(url: NSURL, options: Any, error: Pointer<NSError>): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "replaceItemAtURL:options:error:", url, options, error) as NSURL

    public open fun removeAndReturnError(outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "removeAndReturnError:", outError) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun currentVersionOfItemAtURL(url: NSURL): NSFileVersion =
            Native.objc_msgSend("class objc.NSFileVersion", this, "currentVersionOfItemAtURL:", url) as NSFileVersion

        public open fun otherVersionsOfItemAtURL(url: NSURL): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "otherVersionsOfItemAtURL:", url) as NSArray

        public open fun unresolvedConflictVersionsOfItemAtURL(url: NSURL): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "unresolvedConflictVersionsOfItemAtURL:", url) as NSArray

        public open fun getNonlocalVersionsOfItemAtURL_completionHandler(url: NSURL, completionHandler: Any): Unit {
            Native.objc_msgSend("void", this, "getNonlocalVersionsOfItemAtURL:completionHandler:", url, completionHandler)
        }

        public open fun versionOfItemAtURL_forPersistentIdentifier(url: NSURL, persistentIdentifier: ObjCObject): NSFileVersion =
            Native.objc_msgSend("class objc.NSFileVersion", this, "versionOfItemAtURL:forPersistentIdentifier:", url, persistentIdentifier) as NSFileVersion

        public open fun addVersionOfItemAtURL_withContentsOfURL_options_error(url: NSURL, contentsURL: NSURL, options: Any, outError: Pointer<NSError>): NSFileVersion =
            Native.objc_msgSend("class objc.NSFileVersion", this, "addVersionOfItemAtURL:withContentsOfURL:options:error:", url, contentsURL, options, outError) as NSFileVersion

        public open fun temporaryDirectoryURLForNewVersionOfItemAtURL(url: NSURL): NSURL =
            Native.objc_msgSend("class objc.NSURL", this, "temporaryDirectoryURLForNewVersionOfItemAtURL:", url) as NSURL

        public open fun removeOtherVersionsOfItemAtURL_error(url: NSURL, outError: Pointer<NSError>): Boolean =
            Native.objc_msgSend("boolean", this, "removeOtherVersionsOfItemAtURL:error:", url, outError) as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSFileVersion")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFileWrapper(pointer: Long) : NSObject(pointer), NSCoding, NSFileWrapper_NSDeprecated, NSFileWrapper_NSExtensions {
    public open fun initWithURL_options_error(url: NSURL, options: Any, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:options:error:", url, options, outError) as ObjCObject

    public open fun initDirectoryWithFileWrappers(childrenByPreferredName: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initDirectoryWithFileWrappers:", childrenByPreferredName) as ObjCObject

    public open fun initRegularFileWithContents(contents: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initRegularFileWithContents:", contents) as ObjCObject

    public open fun initSymbolicLinkWithDestinationURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initSymbolicLinkWithDestinationURL:", url) as ObjCObject

    public open fun initWithSerializedRepresentation(serializeRepresentation: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSerializedRepresentation:", serializeRepresentation) as ObjCObject

    public open fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun isDirectory(): Boolean =
        Native.objc_msgSend("boolean", this, "isDirectory") as Boolean

    public open fun isRegularFile(): Boolean =
        Native.objc_msgSend("boolean", this, "isRegularFile") as Boolean

    public open fun isSymbolicLink(): Boolean =
        Native.objc_msgSend("boolean", this, "isSymbolicLink") as Boolean

    public open fun preferredFilename(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "preferredFilename") as NSString

    public open fun setPreferredFilename(preferredFilename: NSString): Unit {
        Native.objc_msgSend("void", this, "setPreferredFilename:", preferredFilename)
    }

    public open fun filename(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "filename") as NSString

    public open fun setFilename(filename: NSString): Unit {
        Native.objc_msgSend("void", this, "setFilename:", filename)
    }

    public open fun fileAttributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fileAttributes") as NSDictionary

    public open fun setFileAttributes(fileAttributes: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setFileAttributes:", fileAttributes)
    }

    public open fun matchesContentsOfURL(url: NSURL): Boolean =
        Native.objc_msgSend("boolean", this, "matchesContentsOfURL:", url) as Boolean

    public open fun readFromURL_options_error(url: NSURL, options: Any, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromURL:options:error:", url, options, outError) as Boolean

    public open fun writeToURL_options_originalContentsURL_error(url: NSURL, options: Any, originalContentsURL: NSURL, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:options:originalContentsURL:error:", url, options, originalContentsURL, outError) as Boolean

    public open fun serializedRepresentation(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "serializedRepresentation") as NSData

    public open fun addFileWrapper(child: NSFileWrapper): NSString =
        Native.objc_msgSend("class objc.NSString", this, "addFileWrapper:", child) as NSString

    public open fun addRegularFileWithContents_preferredFilename(data: NSData, fileName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "addRegularFileWithContents:preferredFilename:", data, fileName) as NSString

    public open fun removeFileWrapper(child: NSFileWrapper): Unit {
        Native.objc_msgSend("void", this, "removeFileWrapper:", child)
    }

    public open fun fileWrappers(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fileWrappers") as NSDictionary

    public open fun keyForFileWrapper(child: NSFileWrapper): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyForFileWrapper:", child) as NSString

    public open fun regularFileContents(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "regularFileContents") as NSData

    public open fun symbolicLinkDestinationURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "symbolicLinkDestinationURL") as NSURL

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSFileWrapper_NSDeprecated.metaclass, NSFileWrapper_NSExtensions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSFileWrapper")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLinguisticTagger(pointer: Long) : NSObject(pointer) {
    public open fun initWithTagSchemes_options(tagSchemes: NSArray, opts: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTagSchemes:options:", tagSchemes, opts) as ObjCObject

    public open fun tagSchemes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tagSchemes") as NSArray

    public open fun string(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "string") as NSString

    public open fun setString(string: NSString): Unit {
        Native.objc_msgSend("void", this, "setString:", string)
    }

    public open fun setOrthography_range(orthography: NSOrthography, range: Any): Unit {
        Native.objc_msgSend("void", this, "setOrthography:range:", orthography, range)
    }

    public open fun orthographyAtIndex_effectiveRange(charIndex: Int, effectiveRange: Pointer<Any>): NSOrthography =
        Native.objc_msgSend("class objc.NSOrthography", this, "orthographyAtIndex:effectiveRange:", charIndex, effectiveRange) as NSOrthography

    public open fun stringEditedInRange_changeInLength(newRange: Any, delta: Int): Unit {
        Native.objc_msgSend("void", this, "stringEditedInRange:changeInLength:", newRange, delta)
    }

    public open fun enumerateTagsInRange_scheme_options_usingBlock(range: Any, tagScheme: NSString, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateTagsInRange:scheme:options:usingBlock:", range, tagScheme, opts, block)
    }

    public open fun sentenceRangeForRange(range: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "sentenceRangeForRange:", range)

    public open fun tagAtIndex_scheme_tokenRange_sentenceRange(charIndex: Int, tagScheme: NSString, tokenRange: Pointer<Any>, sentenceRange: Pointer<Any>): NSString =
        Native.objc_msgSend("class objc.NSString", this, "tagAtIndex:scheme:tokenRange:sentenceRange:", charIndex, tagScheme, tokenRange, sentenceRange) as NSString

    public open fun tagsInRange_scheme_options_tokenRanges(range: Any, tagScheme: NSString, opts: Any, tokenRanges: Pointer<NSArray>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tagsInRange:scheme:options:tokenRanges:", range, tagScheme, opts, tokenRanges) as NSArray

    public open fun possibleTagsAtIndex_scheme_tokenRange_sentenceRange_scores(charIndex: Int, tagScheme: NSString, tokenRange: Pointer<Any>, sentenceRange: Pointer<Any>, scores: Pointer<NSArray>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:", charIndex, tagScheme, tokenRange, sentenceRange, scores) as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun availableTagSchemesForLanguage(language: NSString): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "availableTagSchemesForLanguage:", language) as NSArray

    }

    companion object : NSObject(Native.objc_getClass("NSLinguisticTagger")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMetadataQuery(pointer: Long) : NSObject(pointer) {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun predicate(): NSPredicate =
        Native.objc_msgSend("class objc.NSPredicate", this, "predicate") as NSPredicate

    public open fun setPredicate(predicate: NSPredicate): Unit {
        Native.objc_msgSend("void", this, "setPredicate:", predicate)
    }

    public open fun sortDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortDescriptors") as NSArray

    public open fun setSortDescriptors(sortDescriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSortDescriptors:", sortDescriptors)
    }

    public open fun valueListAttributes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "valueListAttributes") as NSArray

    public open fun setValueListAttributes(valueListAttributes: NSArray): Unit {
        Native.objc_msgSend("void", this, "setValueListAttributes:", valueListAttributes)
    }

    public open fun groupingAttributes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "groupingAttributes") as NSArray

    public open fun setGroupingAttributes(groupingAttributes: NSArray): Unit {
        Native.objc_msgSend("void", this, "setGroupingAttributes:", groupingAttributes)
    }

    public open fun notificationBatchingInterval(): Double =
        Native.objc_msgSend("double", this, "notificationBatchingInterval") as Double

    public open fun setNotificationBatchingInterval(notificationBatchingInterval: Double): Unit {
        Native.objc_msgSend("void", this, "setNotificationBatchingInterval:", notificationBatchingInterval)
    }

    public open fun searchScopes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "searchScopes") as NSArray

    public open fun setSearchScopes(searchScopes: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSearchScopes:", searchScopes)
    }

    public open fun searchItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "searchItems") as NSArray

    public open fun setSearchItems(searchItems: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSearchItems:", searchItems)
    }

    public open fun operationQueue(): NSOperationQueue =
        Native.objc_msgSend("class objc.NSOperationQueue", this, "operationQueue") as NSOperationQueue

    public open fun setOperationQueue(operationQueue: NSOperationQueue): Unit {
        Native.objc_msgSend("void", this, "setOperationQueue:", operationQueue)
    }

    public open fun startQuery(): Boolean =
        Native.objc_msgSend("boolean", this, "startQuery") as Boolean

    public open fun stopQuery(): Unit {
        Native.objc_msgSend("void", this, "stopQuery")
    }

    public open fun isStarted(): Boolean =
        Native.objc_msgSend("boolean", this, "isStarted") as Boolean

    public open fun isGathering(): Boolean =
        Native.objc_msgSend("boolean", this, "isGathering") as Boolean

    public open fun isStopped(): Boolean =
        Native.objc_msgSend("boolean", this, "isStopped") as Boolean

    public open fun disableUpdates(): Unit {
        Native.objc_msgSend("void", this, "disableUpdates")
    }

    public open fun enableUpdates(): Unit {
        Native.objc_msgSend("void", this, "enableUpdates")
    }

    public open fun resultCount(): Int =
        Native.objc_msgSend("int", this, "resultCount") as Int

    public open fun resultAtIndex(idx: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "resultAtIndex:", idx) as ObjCObject

    public open fun enumerateResultsUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateResultsUsingBlock:", block)
    }

    public open fun enumerateResultsWithOptions_usingBlock(opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateResultsWithOptions:usingBlock:", opts, block)
    }

    public open fun results(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "results") as NSArray

    public open fun indexOfResult(result: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfResult:", result) as Int

    public open fun valueLists(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "valueLists") as NSDictionary

    public open fun groupedResults(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "groupedResults") as NSArray

    public open fun valueOfAttribute_forResultAtIndex(attrName: NSString, idx: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueOfAttribute:forResultAtIndex:", attrName, idx) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMetadataQuery")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMetadataItem(pointer: Long) : NSObject(pointer) {
    public open fun initWithURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:", url) as ObjCObject

    public open fun valueForAttribute(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForAttribute:", key) as ObjCObject

    public open fun valuesForAttributes(keys: NSArray): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "valuesForAttributes:", keys) as NSDictionary

    public open fun attributes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "attributes") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMetadataItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMetadataQueryAttributeValueTuple(pointer: Long) : NSObject(pointer) {
    public open fun attribute(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "attribute") as NSString

    override fun value(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "value") as ObjCObject

    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMetadataQueryAttributeValueTuple")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMetadataQueryResultGroup(pointer: Long) : NSObject(pointer) {
    public open fun attribute(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "attribute") as NSString

    override fun value(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "value") as ObjCObject

    public open fun subgroups(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "subgroups") as NSArray

    public open fun resultCount(): Int =
        Native.objc_msgSend("int", this, "resultCount") as Int

    public open fun resultAtIndex(idx: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "resultAtIndex:", idx) as ObjCObject

    public open fun results(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "results") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMetadataQueryResultGroup")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNetService(pointer: Long) : NSObject(pointer), NSNetService_NSDeprecated {
    public open fun initWithDomain_type_name_port(domain: NSString, type: NSString, name: NSString, port: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDomain:type:name:port:", domain, type, name, port) as ObjCObject

    public open fun initWithDomain_type_name(domain: NSString, type: NSString, name: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDomain:type:name:", domain, type, name) as ObjCObject

    public open fun scheduleInRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "scheduleInRunLoop:forMode:", aRunLoop, mode)
    }

    public open fun removeFromRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "removeFromRunLoop:forMode:", aRunLoop, mode)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun includesPeerToPeer(): Boolean =
        Native.objc_msgSend("boolean", this, "includesPeerToPeer") as Boolean

    public open fun setIncludesPeerToPeer(includesPeerToPeer: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncludesPeerToPeer:", includesPeerToPeer)
    }

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun type(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "type") as NSString

    public open fun domain(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "domain") as NSString

    public open fun hostName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "hostName") as NSString

    public open fun addresses(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "addresses") as NSArray

    public open fun port(): Int =
        Native.objc_msgSend("int", this, "port") as Int

    public open fun publish(): Unit {
        Native.objc_msgSend("void", this, "publish")
    }

    public open fun publishWithOptions(options: Any): Unit {
        Native.objc_msgSend("void", this, "publishWithOptions:", options)
    }

    public open fun resolve(): Unit {
        Native.objc_msgSend("void", this, "resolve")
    }

    public open fun stop(): Unit {
        Native.objc_msgSend("void", this, "stop")
    }

    public open fun resolveWithTimeout(timeout: Double): Unit {
        Native.objc_msgSend("void", this, "resolveWithTimeout:", timeout)
    }

    public open fun getInputStream_outputStream(inputStream: Pointer<NSInputStream>, outputStream: Pointer<NSOutputStream>): Boolean =
        Native.objc_msgSend("boolean", this, "getInputStream:outputStream:", inputStream, outputStream) as Boolean

    public open fun setTXTRecordData(recordData: NSData): Boolean =
        Native.objc_msgSend("boolean", this, "setTXTRecordData:", recordData) as Boolean

    public open fun TXTRecordData(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "TXTRecordData") as NSData

    public open fun startMonitoring(): Unit {
        Native.objc_msgSend("void", this, "startMonitoring")
    }

    public open fun stopMonitoring(): Unit {
        Native.objc_msgSend("void", this, "stopMonitoring")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSNetService_NSDeprecated.metaclass {
        public open fun dictionaryFromTXTRecordData(txtData: NSData): NSDictionary =
            Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryFromTXTRecordData:", txtData) as NSDictionary

        public open fun dataFromTXTRecordDictionary(txtDictionary: NSDictionary): NSData =
            Native.objc_msgSend("class objc.NSData", this, "dataFromTXTRecordDictionary:", txtDictionary) as NSData

    }

    companion object : NSObject(Native.objc_getClass("NSNetService")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNetServiceBrowser(pointer: Long) : NSObject(pointer), NSNetServiceBrowser_NSDeprecated {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun includesPeerToPeer(): Boolean =
        Native.objc_msgSend("boolean", this, "includesPeerToPeer") as Boolean

    public open fun setIncludesPeerToPeer(includesPeerToPeer: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncludesPeerToPeer:", includesPeerToPeer)
    }

    public open fun scheduleInRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "scheduleInRunLoop:forMode:", aRunLoop, mode)
    }

    public open fun removeFromRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSString): Unit {
        Native.objc_msgSend("void", this, "removeFromRunLoop:forMode:", aRunLoop, mode)
    }

    public open fun searchForBrowsableDomains(): Unit {
        Native.objc_msgSend("void", this, "searchForBrowsableDomains")
    }

    public open fun searchForRegistrationDomains(): Unit {
        Native.objc_msgSend("void", this, "searchForRegistrationDomains")
    }

    public open fun searchForServicesOfType_inDomain(type: NSString, domainString: NSString): Unit {
        Native.objc_msgSend("void", this, "searchForServicesOfType:inDomain:", type, domainString)
    }

    public open fun stop(): Unit {
        Native.objc_msgSend("void", this, "stop")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSNetServiceBrowser_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSNetServiceBrowser")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSProgress(pointer: Long) : NSObject(pointer) {
    public open fun initWithParent_userInfo(parentProgressOrNil: NSProgress, userInfoOrNil: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithParent:userInfo:", parentProgressOrNil, userInfoOrNil) as ObjCObject

    public open fun becomeCurrentWithPendingUnitCount(unitCount: Long): Unit {
        Native.objc_msgSend("void", this, "becomeCurrentWithPendingUnitCount:", unitCount)
    }

    public open fun resignCurrent(): Unit {
        Native.objc_msgSend("void", this, "resignCurrent")
    }

    public open fun totalUnitCount(): Long =
        Native.objc_msgSend("long", this, "totalUnitCount") as Long

    public open fun setTotalUnitCount(totalUnitCount: Long): Unit {
        Native.objc_msgSend("void", this, "setTotalUnitCount:", totalUnitCount)
    }

    public open fun completedUnitCount(): Long =
        Native.objc_msgSend("long", this, "completedUnitCount") as Long

    public open fun setCompletedUnitCount(completedUnitCount: Long): Unit {
        Native.objc_msgSend("void", this, "setCompletedUnitCount:", completedUnitCount)
    }

    public open fun localizedDescription(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedDescription") as NSString

    public open fun setLocalizedDescription(localizedDescription: NSString): Unit {
        Native.objc_msgSend("void", this, "setLocalizedDescription:", localizedDescription)
    }

    public open fun localizedAdditionalDescription(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedAdditionalDescription") as NSString

    public open fun setLocalizedAdditionalDescription(localizedAdditionalDescription: NSString): Unit {
        Native.objc_msgSend("void", this, "setLocalizedAdditionalDescription:", localizedAdditionalDescription)
    }

    public open fun isCancellable(): Boolean =
        Native.objc_msgSend("boolean", this, "isCancellable") as Boolean

    public open fun setCancellable(cancellable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCancellable:", cancellable)
    }

    public open fun isPausable(): Boolean =
        Native.objc_msgSend("boolean", this, "isPausable") as Boolean

    public open fun setPausable(pausable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPausable:", pausable)
    }

    public open fun isCancelled(): Boolean =
        Native.objc_msgSend("boolean", this, "isCancelled") as Boolean

    public open fun isPaused(): Boolean =
        Native.objc_msgSend("boolean", this, "isPaused") as Boolean

    public open fun cancellationHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "cancellationHandler")

    public open fun setCancellationHandler(cancellationHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setCancellationHandler:", cancellationHandler)
    }

    public open fun pausingHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "pausingHandler")

    public open fun setPausingHandler(pausingHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setPausingHandler:", pausingHandler)
    }

    public open fun setUserInfoObject_forKey(objectOrNil: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setUserInfoObject:forKey:", objectOrNil, key)
    }

    public open fun isIndeterminate(): Boolean =
        Native.objc_msgSend("boolean", this, "isIndeterminate") as Boolean

    public open fun fractionCompleted(): Double =
        Native.objc_msgSend("double", this, "fractionCompleted") as Double

    public open fun cancel(): Unit {
        Native.objc_msgSend("void", this, "cancel")
    }

    public open fun pause(): Unit {
        Native.objc_msgSend("void", this, "pause")
    }

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun kind(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "kind") as NSString

    public open fun setKind(kind: NSString): Unit {
        Native.objc_msgSend("void", this, "setKind:", kind)
    }

    public open fun publish(): Unit {
        Native.objc_msgSend("void", this, "publish")
    }

    public open fun unpublish(): Unit {
        Native.objc_msgSend("void", this, "unpublish")
    }

    public open fun isOld(): Boolean =
        Native.objc_msgSend("boolean", this, "isOld") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun currentProgress(): NSProgress =
            Native.objc_msgSend("class objc.NSProgress", this, "currentProgress") as NSProgress

        public open fun progressWithTotalUnitCount(unitCount: Long): NSProgress =
            Native.objc_msgSend("class objc.NSProgress", this, "progressWithTotalUnitCount:", unitCount) as NSProgress

        public open fun addSubscriberForFileURL_withPublishingHandler(url: NSURL, publishingHandler: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "addSubscriberForFileURL:withPublishingHandler:", url, publishingHandler) as ObjCObject

        public open fun removeSubscriber(subscriber: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "removeSubscriber:", subscriber)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSProgress")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUbiquitousKeyValueStore(pointer: Long) : NSObject(pointer) {
    public open fun objectForKey(aKey: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForKey:", aKey) as ObjCObject

    public open fun setObject_forKey(anObject: ObjCObject, aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setObject:forKey:", anObject, aKey)
    }

    public open fun removeObjectForKey(aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObjectForKey:", aKey)
    }

    public open fun stringForKey(aKey: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringForKey:", aKey) as NSString

    public open fun arrayForKey(aKey: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arrayForKey:", aKey) as NSArray

    public open fun dictionaryForKey(aKey: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryForKey:", aKey) as NSDictionary

    public open fun dataForKey(aKey: NSString): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataForKey:", aKey) as NSData

    public open fun longLongForKey(aKey: NSString): Long =
        Native.objc_msgSend("long", this, "longLongForKey:", aKey) as Long

    public open fun doubleForKey(aKey: NSString): Double =
        Native.objc_msgSend("double", this, "doubleForKey:", aKey) as Double

    public open fun boolForKey(aKey: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "boolForKey:", aKey) as Boolean

    public open fun setString_forKey(aString: NSString, aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setString:forKey:", aString, aKey)
    }

    public open fun setData_forKey(aData: NSData, aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setData:forKey:", aData, aKey)
    }

    public open fun setArray_forKey(anArray: NSArray, aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setArray:forKey:", anArray, aKey)
    }

    public open fun setDictionary_forKey(aDictionary: NSDictionary, aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setDictionary:forKey:", aDictionary, aKey)
    }

    public open fun setLongLong_forKey(value: Long, aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setLongLong:forKey:", value, aKey)
    }

    public open fun setDouble_forKey(value: Double, aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setDouble:forKey:", value, aKey)
    }

    public open fun setBool_forKey(value: Boolean, aKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setBool:forKey:", value, aKey)
    }

    public open fun dictionaryRepresentation(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryRepresentation") as NSDictionary

    public open fun synchronize(): Boolean =
        Native.objc_msgSend("boolean", this, "synchronize") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun defaultStore(): NSUbiquitousKeyValueStore =
            Native.objc_msgSend("class objc.NSUbiquitousKeyValueStore", this, "defaultStore") as NSUbiquitousKeyValueStore

    }

    companion object : NSObject(Native.objc_getClass("NSUbiquitousKeyValueStore")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUndoManager(pointer: Long) : NSObject(pointer) {
    public open fun beginUndoGrouping(): Unit {
        Native.objc_msgSend("void", this, "beginUndoGrouping")
    }

    public open fun endUndoGrouping(): Unit {
        Native.objc_msgSend("void", this, "endUndoGrouping")
    }

    public open fun groupingLevel(): Int =
        Native.objc_msgSend("int", this, "groupingLevel") as Int

    public open fun disableUndoRegistration(): Unit {
        Native.objc_msgSend("void", this, "disableUndoRegistration")
    }

    public open fun enableUndoRegistration(): Unit {
        Native.objc_msgSend("void", this, "enableUndoRegistration")
    }

    public open fun isUndoRegistrationEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isUndoRegistrationEnabled") as Boolean

    public open fun groupsByEvent(): Boolean =
        Native.objc_msgSend("boolean", this, "groupsByEvent") as Boolean

    public open fun setGroupsByEvent(groupsByEvent: Boolean): Unit {
        Native.objc_msgSend("void", this, "setGroupsByEvent:", groupsByEvent)
    }

    public open fun levelsOfUndo(): Int =
        Native.objc_msgSend("int", this, "levelsOfUndo") as Int

    public open fun setLevelsOfUndo(levelsOfUndo: Int): Unit {
        Native.objc_msgSend("void", this, "setLevelsOfUndo:", levelsOfUndo)
    }

    public open fun runLoopModes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "runLoopModes") as NSArray

    public open fun setRunLoopModes(runLoopModes: NSArray): Unit {
        Native.objc_msgSend("void", this, "setRunLoopModes:", runLoopModes)
    }

    public open fun undo(): Unit {
        Native.objc_msgSend("void", this, "undo")
    }

    public open fun redo(): Unit {
        Native.objc_msgSend("void", this, "redo")
    }

    public open fun undoNestedGroup(): Unit {
        Native.objc_msgSend("void", this, "undoNestedGroup")
    }

    public open fun canUndo(): Boolean =
        Native.objc_msgSend("boolean", this, "canUndo") as Boolean

    public open fun canRedo(): Boolean =
        Native.objc_msgSend("boolean", this, "canRedo") as Boolean

    public open fun isUndoing(): Boolean =
        Native.objc_msgSend("boolean", this, "isUndoing") as Boolean

    public open fun isRedoing(): Boolean =
        Native.objc_msgSend("boolean", this, "isRedoing") as Boolean

    public open fun removeAllActions(): Unit {
        Native.objc_msgSend("void", this, "removeAllActions")
    }

    public open fun removeAllActionsWithTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeAllActionsWithTarget:", target)
    }

    public open fun registerUndoWithTarget_selector_object(target: ObjCObject, selector: ObjCSelector, anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "registerUndoWithTarget:selector:object:", target, selector, anObject)
    }

    public open fun prepareWithInvocationTarget(target: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "prepareWithInvocationTarget:", target) as ObjCObject

    public open fun setActionIsDiscardable(discardable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setActionIsDiscardable:", discardable)
    }

    public open fun undoActionIsDiscardable(): Boolean =
        Native.objc_msgSend("boolean", this, "undoActionIsDiscardable") as Boolean

    public open fun redoActionIsDiscardable(): Boolean =
        Native.objc_msgSend("boolean", this, "redoActionIsDiscardable") as Boolean

    public open fun undoActionName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "undoActionName") as NSString

    public open fun redoActionName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "redoActionName") as NSString

    public open fun setActionName(actionName: NSString): Unit {
        Native.objc_msgSend("void", this, "setActionName:", actionName)
    }

    public open fun undoMenuItemTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "undoMenuItemTitle") as NSString

    public open fun redoMenuItemTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "redoMenuItemTitle") as NSString

    public open fun undoMenuTitleForUndoActionName(actionName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "undoMenuTitleForUndoActionName:", actionName) as NSString

    public open fun redoMenuTitleForUndoActionName(actionName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "redoMenuTitleForUndoActionName:", actionName) as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSUndoManager")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLSession(pointer: Long) : NSObject(pointer), NSURLSession_NSURLSessionAsynchronousConvenience, NSURLSession_NSURLSessionDeprecated {
    public open fun delegateQueue(): NSOperationQueue =
        Native.objc_msgSend("class objc.NSOperationQueue", this, "delegateQueue") as NSOperationQueue

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun configuration(): NSURLSessionConfiguration =
        Native.objc_msgSend("class objc.NSURLSessionConfiguration", this, "configuration") as NSURLSessionConfiguration

    public open fun sessionDescription(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "sessionDescription") as NSString

    public open fun setSessionDescription(sessionDescription: NSString): Unit {
        Native.objc_msgSend("void", this, "setSessionDescription:", sessionDescription)
    }

    public open fun finishTasksAndInvalidate(): Unit {
        Native.objc_msgSend("void", this, "finishTasksAndInvalidate")
    }

    public open fun invalidateAndCancel(): Unit {
        Native.objc_msgSend("void", this, "invalidateAndCancel")
    }

    public open fun resetWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "resetWithCompletionHandler:", completionHandler)
    }

    public open fun flushWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "flushWithCompletionHandler:", completionHandler)
    }

    public open fun getTasksWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "getTasksWithCompletionHandler:", completionHandler)
    }

    public open fun dataTaskWithRequest(request: NSURLRequest): NSURLSessionDataTask =
        Native.objc_msgSend("class objc.NSURLSessionDataTask", this, "dataTaskWithRequest:", request) as NSURLSessionDataTask

    public open fun dataTaskWithURL(url: NSURL): NSURLSessionDataTask =
        Native.objc_msgSend("class objc.NSURLSessionDataTask", this, "dataTaskWithURL:", url) as NSURLSessionDataTask

    public open fun uploadTaskWithRequest_fromFile(request: NSURLRequest, fileURL: NSURL): NSURLSessionUploadTask =
        Native.objc_msgSend("class objc.NSURLSessionUploadTask", this, "uploadTaskWithRequest:fromFile:", request, fileURL) as NSURLSessionUploadTask

    public open fun uploadTaskWithRequest_fromData(request: NSURLRequest, bodyData: NSData): NSURLSessionUploadTask =
        Native.objc_msgSend("class objc.NSURLSessionUploadTask", this, "uploadTaskWithRequest:fromData:", request, bodyData) as NSURLSessionUploadTask

    public open fun uploadTaskWithStreamedRequest(request: NSURLRequest): NSURLSessionUploadTask =
        Native.objc_msgSend("class objc.NSURLSessionUploadTask", this, "uploadTaskWithStreamedRequest:", request) as NSURLSessionUploadTask

    public open fun downloadTaskWithRequest(request: NSURLRequest): NSURLSessionDownloadTask =
        Native.objc_msgSend("class objc.NSURLSessionDownloadTask", this, "downloadTaskWithRequest:", request) as NSURLSessionDownloadTask

    public open fun downloadTaskWithURL(url: NSURL): NSURLSessionDownloadTask =
        Native.objc_msgSend("class objc.NSURLSessionDownloadTask", this, "downloadTaskWithURL:", url) as NSURLSessionDownloadTask

    public open fun downloadTaskWithResumeData(resumeData: NSData): NSURLSessionDownloadTask =
        Native.objc_msgSend("class objc.NSURLSessionDownloadTask", this, "downloadTaskWithResumeData:", resumeData) as NSURLSessionDownloadTask

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSURLSession_NSURLSessionAsynchronousConvenience.metaclass, NSURLSession_NSURLSessionDeprecated.metaclass {
        public open fun sharedSession(): NSURLSession =
            Native.objc_msgSend("class objc.NSURLSession", this, "sharedSession") as NSURLSession

        public open fun sessionWithConfiguration(configuration: NSURLSessionConfiguration): NSURLSession =
            Native.objc_msgSend("class objc.NSURLSession", this, "sessionWithConfiguration:", configuration) as NSURLSession

        public open fun sessionWithConfiguration_delegate_delegateQueue(configuration: NSURLSessionConfiguration, delegate: Any, queue: NSOperationQueue): NSURLSession =
            Native.objc_msgSend("class objc.NSURLSession", this, "sessionWithConfiguration:delegate:delegateQueue:", configuration, delegate, queue) as NSURLSession

    }

    companion object : NSObject(Native.objc_getClass("NSURLSession")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLSessionTask(pointer: Long) : NSObject(pointer), NSCopying {
    public open fun taskIdentifier(): Int =
        Native.objc_msgSend("int", this, "taskIdentifier") as Int

    public open fun originalRequest(): NSURLRequest =
        Native.objc_msgSend("class objc.NSURLRequest", this, "originalRequest") as NSURLRequest

    public open fun currentRequest(): NSURLRequest =
        Native.objc_msgSend("class objc.NSURLRequest", this, "currentRequest") as NSURLRequest

    public open fun response(): NSURLResponse =
        Native.objc_msgSend("class objc.NSURLResponse", this, "response") as NSURLResponse

    public open fun countOfBytesReceived(): Long =
        Native.objc_msgSend("long", this, "countOfBytesReceived") as Long

    public open fun countOfBytesSent(): Long =
        Native.objc_msgSend("long", this, "countOfBytesSent") as Long

    public open fun countOfBytesExpectedToSend(): Long =
        Native.objc_msgSend("long", this, "countOfBytesExpectedToSend") as Long

    public open fun countOfBytesExpectedToReceive(): Long =
        Native.objc_msgSend("long", this, "countOfBytesExpectedToReceive") as Long

    public open fun taskDescription(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "taskDescription") as NSString

    public open fun setTaskDescription(taskDescription: NSString): Unit {
        Native.objc_msgSend("void", this, "setTaskDescription:", taskDescription)
    }

    public open fun cancel(): Unit {
        Native.objc_msgSend("void", this, "cancel")
    }

    public open fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    public open fun error(): NSError =
        Native.objc_msgSend("class objc.NSError", this, "error") as NSError

    public open fun suspend(): Unit {
        Native.objc_msgSend("void", this, "suspend")
    }

    public open fun resume(): Unit {
        Native.objc_msgSend("void", this, "resume")
    }

    public open fun priority(): Float =
        Native.objc_msgSend("float", this, "priority") as Float

    public open fun setPriority(priority: Float): Unit {
        Native.objc_msgSend("void", this, "setPriority:", priority)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSURLSessionTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLSessionDataTask(pointer: Long) : NSURLSessionTask(pointer) {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSURLSessionTask.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSURLSessionDataTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLSessionUploadTask(pointer: Long) : NSURLSessionDataTask(pointer) {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSURLSessionDataTask.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSURLSessionUploadTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLSessionDownloadTask(pointer: Long) : NSURLSessionTask(pointer) {
    public open fun cancelByProducingResumeData(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "cancelByProducingResumeData:", completionHandler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSURLSessionTask.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSURLSessionDownloadTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLSessionConfiguration(pointer: Long) : NSObject(pointer), NSCopying, NSURLSessionConfiguration_NSURLSessionDeprecated {
    public open fun identifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "identifier") as NSString

    public open fun requestCachePolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "requestCachePolicy")

    public open fun setRequestCachePolicy(requestCachePolicy: Any): Unit {
        Native.objc_msgSend("void", this, "setRequestCachePolicy:", requestCachePolicy)
    }

    public open fun timeoutIntervalForRequest(): Double =
        Native.objc_msgSend("double", this, "timeoutIntervalForRequest") as Double

    public open fun setTimeoutIntervalForRequest(timeoutIntervalForRequest: Double): Unit {
        Native.objc_msgSend("void", this, "setTimeoutIntervalForRequest:", timeoutIntervalForRequest)
    }

    public open fun timeoutIntervalForResource(): Double =
        Native.objc_msgSend("double", this, "timeoutIntervalForResource") as Double

    public open fun setTimeoutIntervalForResource(timeoutIntervalForResource: Double): Unit {
        Native.objc_msgSend("void", this, "setTimeoutIntervalForResource:", timeoutIntervalForResource)
    }

    public open fun networkServiceType(): Any =
        Native.objc_msgSend("class objc.Any", this, "networkServiceType")

    public open fun setNetworkServiceType(networkServiceType: Any): Unit {
        Native.objc_msgSend("void", this, "setNetworkServiceType:", networkServiceType)
    }

    public open fun allowsCellularAccess(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsCellularAccess") as Boolean

    public open fun setAllowsCellularAccess(allowsCellularAccess: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsCellularAccess:", allowsCellularAccess)
    }

    public open fun isDiscretionary(): Boolean =
        Native.objc_msgSend("boolean", this, "isDiscretionary") as Boolean

    public open fun setDiscretionary(discretionary: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDiscretionary:", discretionary)
    }

    public open fun sharedContainerIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "sharedContainerIdentifier") as NSString

    public open fun setSharedContainerIdentifier(sharedContainerIdentifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setSharedContainerIdentifier:", sharedContainerIdentifier)
    }

    public open fun sessionSendsLaunchEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "sessionSendsLaunchEvents") as Boolean

    public open fun setSessionSendsLaunchEvents(sessionSendsLaunchEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSessionSendsLaunchEvents:", sessionSendsLaunchEvents)
    }

    public open fun connectionProxyDictionary(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "connectionProxyDictionary") as NSDictionary

    public open fun setConnectionProxyDictionary(connectionProxyDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setConnectionProxyDictionary:", connectionProxyDictionary)
    }

    public open fun TLSMinimumSupportedProtocol(): Any =
        Native.objc_msgSend("class objc.Any", this, "TLSMinimumSupportedProtocol")

    public open fun setTLSMinimumSupportedProtocol(TLSMinimumSupportedProtocol: Any): Unit {
        Native.objc_msgSend("void", this, "setTLSMinimumSupportedProtocol:", TLSMinimumSupportedProtocol)
    }

    public open fun TLSMaximumSupportedProtocol(): Any =
        Native.objc_msgSend("class objc.Any", this, "TLSMaximumSupportedProtocol")

    public open fun setTLSMaximumSupportedProtocol(TLSMaximumSupportedProtocol: Any): Unit {
        Native.objc_msgSend("void", this, "setTLSMaximumSupportedProtocol:", TLSMaximumSupportedProtocol)
    }

    public open fun HTTPShouldUsePipelining(): Boolean =
        Native.objc_msgSend("boolean", this, "HTTPShouldUsePipelining") as Boolean

    public open fun setHTTPShouldUsePipelining(HTTPShouldUsePipelining: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHTTPShouldUsePipelining:", HTTPShouldUsePipelining)
    }

    public open fun HTTPShouldSetCookies(): Boolean =
        Native.objc_msgSend("boolean", this, "HTTPShouldSetCookies") as Boolean

    public open fun setHTTPShouldSetCookies(HTTPShouldSetCookies: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHTTPShouldSetCookies:", HTTPShouldSetCookies)
    }

    public open fun HTTPCookieAcceptPolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "HTTPCookieAcceptPolicy")

    public open fun setHTTPCookieAcceptPolicy(HTTPCookieAcceptPolicy: Any): Unit {
        Native.objc_msgSend("void", this, "setHTTPCookieAcceptPolicy:", HTTPCookieAcceptPolicy)
    }

    public open fun HTTPAdditionalHeaders(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "HTTPAdditionalHeaders") as NSDictionary

    public open fun setHTTPAdditionalHeaders(HTTPAdditionalHeaders: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setHTTPAdditionalHeaders:", HTTPAdditionalHeaders)
    }

    public open fun HTTPMaximumConnectionsPerHost(): Int =
        Native.objc_msgSend("int", this, "HTTPMaximumConnectionsPerHost") as Int

    public open fun setHTTPMaximumConnectionsPerHost(HTTPMaximumConnectionsPerHost: Int): Unit {
        Native.objc_msgSend("void", this, "setHTTPMaximumConnectionsPerHost:", HTTPMaximumConnectionsPerHost)
    }

    public open fun HTTPCookieStorage(): NSHTTPCookieStorage =
        Native.objc_msgSend("class objc.NSHTTPCookieStorage", this, "HTTPCookieStorage") as NSHTTPCookieStorage

    public open fun setHTTPCookieStorage(HTTPCookieStorage: NSHTTPCookieStorage): Unit {
        Native.objc_msgSend("void", this, "setHTTPCookieStorage:", HTTPCookieStorage)
    }

    public open fun URLCredentialStorage(): NSURLCredentialStorage =
        Native.objc_msgSend("class objc.NSURLCredentialStorage", this, "URLCredentialStorage") as NSURLCredentialStorage

    public open fun setURLCredentialStorage(URLCredentialStorage: NSURLCredentialStorage): Unit {
        Native.objc_msgSend("void", this, "setURLCredentialStorage:", URLCredentialStorage)
    }

    public open fun URLCache(): NSURLCache =
        Native.objc_msgSend("class objc.NSURLCache", this, "URLCache") as NSURLCache

    public open fun setURLCache(URLCache: NSURLCache): Unit {
        Native.objc_msgSend("void", this, "setURLCache:", URLCache)
    }

    public open fun protocolClasses(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "protocolClasses") as NSArray

    public open fun setProtocolClasses(protocolClasses: NSArray): Unit {
        Native.objc_msgSend("void", this, "setProtocolClasses:", protocolClasses)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSURLSessionConfiguration_NSURLSessionDeprecated.metaclass {
        public open fun defaultSessionConfiguration(): NSURLSessionConfiguration =
            Native.objc_msgSend("class objc.NSURLSessionConfiguration", this, "defaultSessionConfiguration") as NSURLSessionConfiguration

        public open fun ephemeralSessionConfiguration(): NSURLSessionConfiguration =
            Native.objc_msgSend("class objc.NSURLSessionConfiguration", this, "ephemeralSessionConfiguration") as NSURLSessionConfiguration

        public open fun backgroundSessionConfigurationWithIdentifier(identifier: NSString): NSURLSessionConfiguration =
            Native.objc_msgSend("class objc.NSURLSessionConfiguration", this, "backgroundSessionConfigurationWithIdentifier:", identifier) as NSURLSessionConfiguration

    }

    companion object : NSObject(Native.objc_getClass("NSURLSessionConfiguration")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserActivity(pointer: Long) : NSObject(pointer) {
    public open fun initWithActivityType(activityType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithActivityType:", activityType) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun activityType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "activityType") as NSString

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun setUserInfo(userInfo: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setUserInfo:", userInfo)
    }

    public open fun addUserInfoEntriesFromDictionary(otherDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "addUserInfoEntriesFromDictionary:", otherDictionary)
    }

    public open fun needsSave(): Boolean =
        Native.objc_msgSend("boolean", this, "needsSave") as Boolean

    public open fun setNeedsSave(needsSave: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNeedsSave:", needsSave)
    }

    public open fun webpageURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "webpageURL") as NSURL

    public open fun setWebpageURL(webpageURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setWebpageURL:", webpageURL)
    }

    public open fun supportsContinuationStreams(): Boolean =
        Native.objc_msgSend("boolean", this, "supportsContinuationStreams") as Boolean

    public open fun setSupportsContinuationStreams(supportsContinuationStreams: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSupportsContinuationStreams:", supportsContinuationStreams)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun becomeCurrent(): Unit {
        Native.objc_msgSend("void", this, "becomeCurrent")
    }

    public open fun invalidate(): Unit {
        Native.objc_msgSend("void", this, "invalidate")
    }

    public open fun getContinuationStreamsWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "getContinuationStreamsWithCompletionHandler:", completionHandler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSUserActivity")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUUID(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithUUIDString(string: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithUUIDString:", string) as ObjCObject

    public open fun initWithUUIDBytes(bytes: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithUUIDBytes:", bytes) as ObjCObject

    public open fun getUUIDBytes(uuid: Any): Unit {
        Native.objc_msgSend("void", this, "getUUIDBytes:", uuid)
    }

    public open fun UUIDString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "UUIDString") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun UUID(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "UUID") as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSUUID")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSArchiver(pointer: Long) : NSCoder(pointer) {
    public open fun initForWritingWithMutableData(mdata: NSMutableData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initForWritingWithMutableData:", mdata) as ObjCObject

    public open fun archiverData(): NSMutableData =
        Native.objc_msgSend("class objc.NSMutableData", this, "archiverData") as NSMutableData

    override fun encodeRootObject(rootObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodeRootObject:", rootObject)
    }

    override fun encodeConditionalObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodeConditionalObject:", `object`)
    }

    public open fun encodeClassName_intoClassName(trueName: NSString, inArchiveName: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeClassName:intoClassName:", trueName, inArchiveName)
    }

    public open fun classNameEncodedForTrueClassName(trueName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "classNameEncodedForTrueClassName:", trueName) as NSString

    public open fun replaceObject_withObject(`object`: ObjCObject, newObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "replaceObject:withObject:", `object`, newObject)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCoder.metaclass {
        public open fun archivedDataWithRootObject(rootObject: ObjCObject): NSData =
            Native.objc_msgSend("class objc.NSData", this, "archivedDataWithRootObject:", rootObject) as NSData

        public open fun archiveRootObject_toFile(rootObject: ObjCObject, path: NSString): Boolean =
            Native.objc_msgSend("boolean", this, "archiveRootObject:toFile:", rootObject, path) as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSArchiver")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUnarchiver(pointer: Long) : NSCoder(pointer) {
    public open fun initForReadingWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initForReadingWithData:", data) as ObjCObject

    override fun setObjectZone(zone: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "setObjectZone:", zone)
    }

    override fun objectZone(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "objectZone") as Pointer<Any>

    public open fun isAtEnd(): Boolean =
        Native.objc_msgSend("boolean", this, "isAtEnd") as Boolean

    override fun systemVersion(): Int =
        Native.objc_msgSend("int", this, "systemVersion") as Int

    public open fun decodeClassName_asClassName(inArchiveName: NSString, trueName: NSString): Unit {
        Native.objc_msgSend("void", this, "decodeClassName:asClassName:", inArchiveName, trueName)
    }

    public open fun classNameDecodedForArchiveClassName(inArchiveName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "classNameDecodedForArchiveClassName:", inArchiveName) as NSString

    public open fun replaceObject_withObject(`object`: ObjCObject, newObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "replaceObject:withObject:", `object`, newObject)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCoder.metaclass {
        public open fun unarchiveObjectWithData(data: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "unarchiveObjectWithData:", data) as ObjCObject

        public open fun unarchiveObjectWithFile(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "unarchiveObjectWithFile:", path) as ObjCObject

        public open fun decodeClassName_asClassName(inArchiveName: NSString, trueName: NSString): Unit {
            Native.objc_msgSend("void", this, "decodeClassName:asClassName:", inArchiveName, trueName)
        }

        public open fun classNameDecodedForArchiveClassName(inArchiveName: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "classNameDecodedForArchiveClassName:", inArchiveName) as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSUnarchiver")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSBackgroundActivityScheduler(pointer: Long) : NSObject(pointer) {
    public open fun initWithIdentifier(identifier: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIdentifier:", identifier) as ObjCObject

    public open fun identifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "identifier") as NSString

    public open fun qualityOfService(): Any =
        Native.objc_msgSend("class objc.Any", this, "qualityOfService")

    public open fun setQualityOfService(qualityOfService: Any): Unit {
        Native.objc_msgSend("void", this, "setQualityOfService:", qualityOfService)
    }

    public open fun repeats(): Boolean =
        Native.objc_msgSend("boolean", this, "repeats") as Boolean

    public open fun setRepeats(repeats: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRepeats:", repeats)
    }

    public open fun interval(): Double =
        Native.objc_msgSend("double", this, "interval") as Double

    public open fun setInterval(interval: Double): Unit {
        Native.objc_msgSend("void", this, "setInterval:", interval)
    }

    public open fun tolerance(): Double =
        Native.objc_msgSend("double", this, "tolerance") as Double

    public open fun setTolerance(tolerance: Double): Unit {
        Native.objc_msgSend("void", this, "setTolerance:", tolerance)
    }

    public open fun scheduleWithBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "scheduleWithBlock:", block)
    }

    public open fun invalidate(): Unit {
        Native.objc_msgSend("void", this, "invalidate")
    }

    public open fun shouldDefer(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldDefer") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSBackgroundActivityScheduler")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCalendarDate(pointer: Long) : NSDate(pointer) {
    public open fun dateByAddingYears_months_days_hours_minutes_seconds(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int): NSCalendarDate =
        Native.objc_msgSend("class objc.NSCalendarDate", this, "dateByAddingYears:months:days:hours:minutes:seconds:", year, month, day, hour, minute, second) as NSCalendarDate

    public open fun dayOfCommonEra(): Int =
        Native.objc_msgSend("int", this, "dayOfCommonEra") as Int

    public open fun dayOfMonth(): Int =
        Native.objc_msgSend("int", this, "dayOfMonth") as Int

    public open fun dayOfWeek(): Int =
        Native.objc_msgSend("int", this, "dayOfWeek") as Int

    public open fun dayOfYear(): Int =
        Native.objc_msgSend("int", this, "dayOfYear") as Int

    public open fun hourOfDay(): Int =
        Native.objc_msgSend("int", this, "hourOfDay") as Int

    public open fun minuteOfHour(): Int =
        Native.objc_msgSend("int", this, "minuteOfHour") as Int

    public open fun monthOfYear(): Int =
        Native.objc_msgSend("int", this, "monthOfYear") as Int

    public open fun secondOfMinute(): Int =
        Native.objc_msgSend("int", this, "secondOfMinute") as Int

    public open fun yearOfCommonEra(): Int =
        Native.objc_msgSend("int", this, "yearOfCommonEra") as Int

    public open fun calendarFormat(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "calendarFormat") as NSString

    public open fun descriptionWithCalendarFormat_locale(format: NSString, locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithCalendarFormat:locale:", format, locale) as NSString

    public open fun descriptionWithCalendarFormat(format: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithCalendarFormat:", format) as NSString

    override fun descriptionWithLocale(locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:", locale) as NSString

    public open fun timeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "timeZone") as NSTimeZone

    public open fun initWithString_calendarFormat_locale(description: NSString, format: NSString, locale: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:calendarFormat:locale:", description, format, locale) as ObjCObject

    public open fun initWithString_calendarFormat(description: NSString, format: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:calendarFormat:", description, format) as ObjCObject

    override fun initWithString(description: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", description) as ObjCObject

    public open fun initWithYear_month_day_hour_minute_second_timeZone(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int, aTimeZone: NSTimeZone): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithYear:month:day:hour:minute:second:timeZone:", year, month, day, hour, minute, second, aTimeZone) as ObjCObject

    public open fun setCalendarFormat(format: NSString): Unit {
        Native.objc_msgSend("void", this, "setCalendarFormat:", format)
    }

    public open fun setTimeZone(aTimeZone: NSTimeZone): Unit {
        Native.objc_msgSend("void", this, "setTimeZone:", aTimeZone)
    }

    public open fun years_months_days_hours_minutes_seconds_sinceDate(yp: Pointer<Int>, mop: Pointer<Int>, dp: Pointer<Int>, hp: Pointer<Int>, mip: Pointer<Int>, sp: Pointer<Int>, date: NSCalendarDate): Unit {
        Native.objc_msgSend("void", this, "years:months:days:hours:minutes:seconds:sinceDate:", yp, mop, dp, hp, mip, sp, date)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSDate.metaclass {
        public open fun calendarDate(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "calendarDate") as ObjCObject

        public open fun dateWithString_calendarFormat_locale(description: NSString, format: NSString, locale: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithString:calendarFormat:locale:", description, format, locale) as ObjCObject

        public open fun dateWithString_calendarFormat(description: NSString, format: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithString:calendarFormat:", description, format) as ObjCObject

        public open fun dateWithYear_month_day_hour_minute_second_timeZone(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int, aTimeZone: NSTimeZone): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithYear:month:day:hour:minute:second:timeZone:", year, month, day, hour, minute, second, aTimeZone) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSCalendarDate")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSConnection(pointer: Long) : NSObject(pointer) {
    public open fun statistics(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "statistics") as NSDictionary

    public open fun requestTimeout(): Double =
        Native.objc_msgSend("double", this, "requestTimeout") as Double

    public open fun setRequestTimeout(requestTimeout: Double): Unit {
        Native.objc_msgSend("void", this, "setRequestTimeout:", requestTimeout)
    }

    public open fun replyTimeout(): Double =
        Native.objc_msgSend("double", this, "replyTimeout") as Double

    public open fun setReplyTimeout(replyTimeout: Double): Unit {
        Native.objc_msgSend("void", this, "setReplyTimeout:", replyTimeout)
    }

    public open fun rootObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "rootObject") as ObjCObject

    public open fun setRootObject(rootObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setRootObject:", rootObject)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun independentConversationQueueing(): Boolean =
        Native.objc_msgSend("boolean", this, "independentConversationQueueing") as Boolean

    public open fun setIndependentConversationQueueing(independentConversationQueueing: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIndependentConversationQueueing:", independentConversationQueueing)
    }

    public open fun isValid(): Boolean =
        Native.objc_msgSend("boolean", this, "isValid") as Boolean

    public open fun rootProxy(): NSDistantObject =
        Native.objc_msgSend("class objc.NSDistantObject", this, "rootProxy") as NSDistantObject

    public open fun invalidate(): Unit {
        Native.objc_msgSend("void", this, "invalidate")
    }

    public open fun addRequestMode(rmode: NSString): Unit {
        Native.objc_msgSend("void", this, "addRequestMode:", rmode)
    }

    public open fun removeRequestMode(rmode: NSString): Unit {
        Native.objc_msgSend("void", this, "removeRequestMode:", rmode)
    }

    public open fun requestModes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "requestModes") as NSArray

    public open fun registerName(name: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "registerName:", name) as Boolean

    public open fun registerName_withNameServer(name: NSString, server: NSPortNameServer): Boolean =
        Native.objc_msgSend("boolean", this, "registerName:withNameServer:", name, server) as Boolean

    public open fun initWithReceivePort_sendPort(receivePort: NSPort, sendPort: NSPort): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithReceivePort:sendPort:", receivePort, sendPort) as ObjCObject

    public open fun sendPort(): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "sendPort") as NSPort

    public open fun receivePort(): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "receivePort") as NSPort

    public open fun enableMultipleThreads(): Unit {
        Native.objc_msgSend("void", this, "enableMultipleThreads")
    }

    public open fun multipleThreadsEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "multipleThreadsEnabled") as Boolean

    public open fun addRunLoop(runloop: NSRunLoop): Unit {
        Native.objc_msgSend("void", this, "addRunLoop:", runloop)
    }

    public open fun removeRunLoop(runloop: NSRunLoop): Unit {
        Native.objc_msgSend("void", this, "removeRunLoop:", runloop)
    }

    public open fun runInNewThread(): Unit {
        Native.objc_msgSend("void", this, "runInNewThread")
    }

    public open fun remoteObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "remoteObjects") as NSArray

    public open fun localObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "localObjects") as NSArray

    public open fun dispatchWithComponents(components: NSArray): Unit {
        Native.objc_msgSend("void", this, "dispatchWithComponents:", components)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun allConnections(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "allConnections") as NSArray

        public open fun defaultConnection(): NSConnection =
            Native.objc_msgSend("class objc.NSConnection", this, "defaultConnection") as NSConnection

        public open fun connectionWithRegisteredName_host(name: NSString, hostName: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "connectionWithRegisteredName:host:", name, hostName) as ObjCObject

        public open fun connectionWithRegisteredName_host_usingNameServer(name: NSString, hostName: NSString, server: NSPortNameServer): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "connectionWithRegisteredName:host:usingNameServer:", name, hostName, server) as ObjCObject

        public open fun rootProxyForConnectionWithRegisteredName_host(name: NSString, hostName: NSString): NSDistantObject =
            Native.objc_msgSend("class objc.NSDistantObject", this, "rootProxyForConnectionWithRegisteredName:host:", name, hostName) as NSDistantObject

        public open fun rootProxyForConnectionWithRegisteredName_host_usingNameServer(name: NSString, hostName: NSString, server: NSPortNameServer): NSDistantObject =
            Native.objc_msgSend("class objc.NSDistantObject", this, "rootProxyForConnectionWithRegisteredName:host:usingNameServer:", name, hostName, server) as NSDistantObject

        public open fun serviceConnectionWithName_rootObject_usingNameServer(name: NSString, root: ObjCObject, server: NSPortNameServer): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "serviceConnectionWithName:rootObject:usingNameServer:", name, root, server) as ObjCObject

        public open fun serviceConnectionWithName_rootObject(name: NSString, root: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "serviceConnectionWithName:rootObject:", name, root) as ObjCObject

        public open fun connectionWithReceivePort_sendPort(receivePort: NSPort, sendPort: NSPort): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "connectionWithReceivePort:sendPort:", receivePort, sendPort) as ObjCObject

        public open fun currentConversation(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "currentConversation") as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSConnection")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDistantObjectRequest(pointer: Long) : NSObject(pointer) {
    public open fun invocation(): NSInvocation =
        Native.objc_msgSend("class objc.NSInvocation", this, "invocation") as NSInvocation

    public open fun connection(): NSConnection =
        Native.objc_msgSend("class objc.NSConnection", this, "connection") as NSConnection

    public open fun conversation(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "conversation") as ObjCObject

    public open fun replyWithException(exception: NSException): Unit {
        Native.objc_msgSend("void", this, "replyWithException:", exception)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDistantObjectRequest")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDistantObject(pointer: Long) : NSProxy(pointer), NSCoding {
    public open fun initWithTarget_connection(target: ObjCObject, connection: NSConnection): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTarget:connection:", target, connection) as ObjCObject

    public open fun initWithLocal_connection(target: ObjCObject, connection: NSConnection): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLocal:connection:", target, connection) as ObjCObject

    public open fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun setProtocolForProxy(proto: Any?): Unit {
        Native.objc_msgSend("void", this, "setProtocolForProxy:", proto)
    }

    public open fun connectionForProxy(): NSConnection =
        Native.objc_msgSend("class objc.NSConnection", this, "connectionForProxy") as NSConnection

    trait metaclass : NSProxy.metaclass, NSCoding.metaclass {
        public open fun proxyWithTarget_connection(target: ObjCObject, connection: NSConnection): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "proxyWithTarget:connection:", target, connection) as ObjCObject

        public open fun proxyWithLocal_connection(target: ObjCObject, connection: NSConnection): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "proxyWithLocal:connection:", target, connection) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSDistantObject")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDistributedNotificationCenter(pointer: Long) : NSNotificationCenter(pointer) {
    public open fun addObserver_selector_name_object_suspensionBehavior(observer: ObjCObject, selector: ObjCSelector, name: NSString, `object`: NSString, suspensionBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "addObserver:selector:name:object:suspensionBehavior:", observer, selector, name, `object`, suspensionBehavior)
    }

    public open fun postNotificationName_object_userInfo_deliverImmediately(name: NSString, `object`: NSString, userInfo: NSDictionary, deliverImmediately: Boolean): Unit {
        Native.objc_msgSend("void", this, "postNotificationName:object:userInfo:deliverImmediately:", name, `object`, userInfo, deliverImmediately)
    }

    public open fun postNotificationName_object_userInfo_options(name: NSString, `object`: NSString, userInfo: NSDictionary, options: Int): Unit {
        Native.objc_msgSend("void", this, "postNotificationName:object:userInfo:options:", name, `object`, userInfo, options)
    }

    public open fun suspended(): Boolean =
        Native.objc_msgSend("boolean", this, "suspended") as Boolean

    public open fun setSuspended(suspended: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSuspended:", suspended)
    }

    public open fun addObserver_selector_name_object(observer: ObjCObject, aSelector: ObjCSelector, aName: NSString, anObject: NSString): Unit {
        Native.objc_msgSend("void", this, "addObserver:selector:name:object:", observer, aSelector, aName, anObject)
    }

    public open fun postNotificationName_object(aName: NSString, anObject: NSString): Unit {
        Native.objc_msgSend("void", this, "postNotificationName:object:", aName, anObject)
    }

    public open fun postNotificationName_object_userInfo(aName: NSString, anObject: NSString, aUserInfo: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "postNotificationName:object:userInfo:", aName, anObject, aUserInfo)
    }

    public open fun removeObserver_name_object(observer: ObjCObject, aName: NSString, anObject: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:name:object:", observer, aName, anObject)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSNotificationCenter.metaclass {
        public open fun notificationCenterForType(notificationCenterType: NSString): NSDistributedNotificationCenter =
            Native.objc_msgSend("class objc.NSDistributedNotificationCenter", this, "notificationCenterForType:", notificationCenterType) as NSDistributedNotificationCenter

        override fun defaultCenter(): NSDistributedNotificationCenter =
            Native.objc_msgSend("class objc.NSDistributedNotificationCenter", this, "defaultCenter") as NSDistributedNotificationCenter

    }

    companion object : NSObject(Native.objc_getClass("NSDistributedNotificationCenter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPortCoder(pointer: Long) : NSCoder(pointer) {
    public open fun isBycopy(): Boolean =
        Native.objc_msgSend("boolean", this, "isBycopy") as Boolean

    public open fun isByref(): Boolean =
        Native.objc_msgSend("boolean", this, "isByref") as Boolean

    public open fun encodePortObject(aport: NSPort): Unit {
        Native.objc_msgSend("void", this, "encodePortObject:", aport)
    }

    public open fun decodePortObject(): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "decodePortObject") as NSPort

    public open fun connection(): NSConnection =
        Native.objc_msgSend("class objc.NSConnection", this, "connection") as NSConnection

    public open fun initWithReceivePort_sendPort_components(rcvPort: NSPort, sndPort: NSPort, comps: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithReceivePort:sendPort:components:", rcvPort, sndPort, comps) as ObjCObject

    public open fun dispatch(): Unit {
        Native.objc_msgSend("void", this, "dispatch")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCoder.metaclass {
        public open fun portCoderWithReceivePort_sendPort_components(rcvPort: NSPort, sndPort: NSPort, comps: NSArray): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "portCoderWithReceivePort:sendPort:components:", rcvPort, sndPort, comps) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSPortCoder")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPortMessage(pointer: Long) : NSObject(pointer) {
    public open fun initWithSendPort_receivePort_components(sendPort: NSPort, replyPort: NSPort, components: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSendPort:receivePort:components:", sendPort, replyPort, components) as ObjCObject

    public open fun components(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "components") as NSArray

    public open fun receivePort(): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "receivePort") as NSPort

    public open fun sendPort(): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "sendPort") as NSPort

    public open fun sendBeforeDate(date: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "sendBeforeDate:", date) as Boolean

    public open fun msgid(): Int =
        Native.objc_msgSend("int", this, "msgid") as Int

    public open fun setMsgid(msgid: Int): Unit {
        Native.objc_msgSend("void", this, "setMsgid:", msgid)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPortMessage")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPortNameServer(pointer: Long) : NSObject(pointer) {
    public open fun portForName(name: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:", name) as NSPort

    public open fun portForName_host(name: NSString, host: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:host:", name, host) as NSPort

    public open fun registerPort_name(port: NSPort, name: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "registerPort:name:", port, name) as Boolean

    public open fun removePortForName(name: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "removePortForName:", name) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun systemDefaultPortNameServer(): NSPortNameServer =
            Native.objc_msgSend("class objc.NSPortNameServer", this, "systemDefaultPortNameServer") as NSPortNameServer

    }

    companion object : NSObject(Native.objc_getClass("NSPortNameServer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMachBootstrapServer(pointer: Long) : NSPortNameServer(pointer) {
    override fun portForName(name: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:", name) as NSPort

    override fun portForName_host(name: NSString, host: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:host:", name, host) as NSPort

    override fun registerPort_name(port: NSPort, name: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "registerPort:name:", port, name) as Boolean

    public open fun servicePortWithName(name: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "servicePortWithName:", name) as NSPort

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPortNameServer.metaclass {
        public open fun sharedInstance(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sharedInstance") as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSMachBootstrapServer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMessagePortNameServer(pointer: Long) : NSPortNameServer(pointer) {
    override fun portForName(name: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:", name) as NSPort

    override fun portForName_host(name: NSString, host: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:host:", name, host) as NSPort

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPortNameServer.metaclass {
        public open fun sharedInstance(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sharedInstance") as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSMessagePortNameServer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSocketPortNameServer(pointer: Long) : NSPortNameServer(pointer) {
    override fun portForName(name: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:", name) as NSPort

    override fun portForName_host(name: NSString, host: NSString): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:host:", name, host) as NSPort

    override fun registerPort_name(port: NSPort, name: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "registerPort:name:", port, name) as Boolean

    override fun removePortForName(name: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "removePortForName:", name) as Boolean

    public open fun portForName_host_nameServerPortNumber(name: NSString, host: NSString, portNumber: Short): NSPort =
        Native.objc_msgSend("class objc.NSPort", this, "portForName:host:nameServerPortNumber:", name, host, portNumber) as NSPort

    public open fun registerPort_name_nameServerPortNumber(port: NSPort, name: NSString, portNumber: Short): Boolean =
        Native.objc_msgSend("boolean", this, "registerPort:name:nameServerPortNumber:", port, name, portNumber) as Boolean

    public open fun defaultNameServerPortNumber(): Short =
        Native.objc_msgSend("short", this, "defaultNameServerPortNumber") as Short

    public open fun setDefaultNameServerPortNumber(defaultNameServerPortNumber: Short): Unit {
        Native.objc_msgSend("void", this, "setDefaultNameServerPortNumber:", defaultNameServerPortNumber)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPortNameServer.metaclass {
        public open fun sharedInstance(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sharedInstance") as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSSocketPortNameServer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSProtocolChecker(pointer: Long) : NSProxy(pointer), NSProtocolChecker_NSProtocolCheckerCreation {
    public open fun protocol(): Any? =
        Native.objc_msgSend("class objc.Any?", this, "protocol") as Any?

    public open fun target(): NSObject =
        Native.objc_msgSend("class objc.NSObject", this, "target") as NSObject

    trait metaclass : NSProxy.metaclass, NSProtocolChecker_NSProtocolCheckerCreation.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSProtocolChecker")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTask(pointer: Long) : NSObject(pointer), NSTask_NSTaskConveniences {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun launchPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "launchPath") as NSString

    public open fun setLaunchPath(launchPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setLaunchPath:", launchPath)
    }

    public open fun arguments(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arguments") as NSArray

    public open fun setArguments(arguments: NSArray): Unit {
        Native.objc_msgSend("void", this, "setArguments:", arguments)
    }

    public open fun environment(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "environment") as NSDictionary

    public open fun setEnvironment(environment: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setEnvironment:", environment)
    }

    public open fun currentDirectoryPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "currentDirectoryPath") as NSString

    public open fun setCurrentDirectoryPath(currentDirectoryPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setCurrentDirectoryPath:", currentDirectoryPath)
    }

    public open fun standardInput(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "standardInput") as ObjCObject

    public open fun setStandardInput(standardInput: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setStandardInput:", standardInput)
    }

    public open fun standardOutput(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "standardOutput") as ObjCObject

    public open fun setStandardOutput(standardOutput: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setStandardOutput:", standardOutput)
    }

    public open fun standardError(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "standardError") as ObjCObject

    public open fun setStandardError(standardError: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setStandardError:", standardError)
    }

    public open fun launch(): Unit {
        Native.objc_msgSend("void", this, "launch")
    }

    public open fun interrupt(): Unit {
        Native.objc_msgSend("void", this, "interrupt")
    }

    public open fun terminate(): Unit {
        Native.objc_msgSend("void", this, "terminate")
    }

    public open fun suspend(): Boolean =
        Native.objc_msgSend("boolean", this, "suspend") as Boolean

    public open fun resume(): Boolean =
        Native.objc_msgSend("boolean", this, "resume") as Boolean

    public open fun processIdentifier(): Int =
        Native.objc_msgSend("int", this, "processIdentifier") as Int

    public open fun isRunning(): Boolean =
        Native.objc_msgSend("boolean", this, "isRunning") as Boolean

    public open fun terminationStatus(): Int =
        Native.objc_msgSend("int", this, "terminationStatus") as Int

    public open fun terminationReason(): Any =
        Native.objc_msgSend("class objc.Any", this, "terminationReason")

    public open fun terminationHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "terminationHandler")

    public open fun setTerminationHandler(terminationHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setTerminationHandler:", terminationHandler)
    }

    public open fun qualityOfService(): Any =
        Native.objc_msgSend("class objc.Any", this, "qualityOfService")

    public open fun setQualityOfService(qualityOfService: Any): Unit {
        Native.objc_msgSend("void", this, "setQualityOfService:", qualityOfService)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSTask_NSTaskConveniences.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXMLNode(pointer: Long) : NSObject(pointer), NSCopying {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithKind(kind: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKind:", kind) as ObjCObject

    public open fun initWithKind_options(kind: Any, options: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKind:options:", kind, options) as ObjCObject

    public open fun kind(): Any =
        Native.objc_msgSend("class objc.Any", this, "kind")

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    public open fun objectValue(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectValue") as ObjCObject

    public open fun setObjectValue(objectValue: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setObjectValue:", objectValue)
    }

    public open fun stringValue(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringValue") as NSString

    public open fun setStringValue(stringValue: NSString): Unit {
        Native.objc_msgSend("void", this, "setStringValue:", stringValue)
    }

    public open fun setStringValue_resolvingEntities(string: NSString, resolve: Boolean): Unit {
        Native.objc_msgSend("void", this, "setStringValue:resolvingEntities:", string, resolve)
    }

    public open fun index(): Int =
        Native.objc_msgSend("int", this, "index") as Int

    public open fun level(): Int =
        Native.objc_msgSend("int", this, "level") as Int

    public open fun rootDocument(): NSXMLDocument =
        Native.objc_msgSend("class objc.NSXMLDocument", this, "rootDocument") as NSXMLDocument

    public open fun parent(): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "parent") as NSXMLNode

    public open fun childCount(): Int =
        Native.objc_msgSend("int", this, "childCount") as Int

    public open fun children(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "children") as NSArray

    public open fun childAtIndex(index: Int): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "childAtIndex:", index) as NSXMLNode

    public open fun previousSibling(): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "previousSibling") as NSXMLNode

    public open fun nextSibling(): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "nextSibling") as NSXMLNode

    public open fun previousNode(): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "previousNode") as NSXMLNode

    public open fun nextNode(): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "nextNode") as NSXMLNode

    public open fun detach(): Unit {
        Native.objc_msgSend("void", this, "detach")
    }

    public open fun XPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "XPath") as NSString

    public open fun localName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localName") as NSString

    public open fun prefix(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "prefix") as NSString

    public open fun URI(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "URI") as NSString

    public open fun setURI(URI: NSString): Unit {
        Native.objc_msgSend("void", this, "setURI:", URI)
    }

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun XMLString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "XMLString") as NSString

    public open fun XMLStringWithOptions(options: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "XMLStringWithOptions:", options) as NSString

    public open fun canonicalXMLStringPreservingComments(comments: Boolean): NSString =
        Native.objc_msgSend("class objc.NSString", this, "canonicalXMLStringPreservingComments:", comments) as NSString

    public open fun nodesForXPath_error(xpath: NSString, error: Pointer<NSError>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "nodesForXPath:error:", xpath, error) as NSArray

    public open fun objectsForXQuery_constants_error(xquery: NSString, constants: NSDictionary, error: Pointer<NSError>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "objectsForXQuery:constants:error:", xquery, constants, error) as NSArray

    public open fun objectsForXQuery_error(xquery: NSString, error: Pointer<NSError>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "objectsForXQuery:error:", xquery, error) as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass {
        public open fun document(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "document") as ObjCObject

        public open fun documentWithRootElement(element: NSXMLElement): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "documentWithRootElement:", element) as ObjCObject

        public open fun elementWithName(name: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "elementWithName:", name) as ObjCObject

        public open fun elementWithName_URI(name: NSString, URI: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "elementWithName:URI:", name, URI) as ObjCObject

        public open fun elementWithName_stringValue(name: NSString, string: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "elementWithName:stringValue:", name, string) as ObjCObject

        public open fun elementWithName_children_attributes(name: NSString, children: NSArray, attributes: NSArray): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "elementWithName:children:attributes:", name, children, attributes) as ObjCObject

        public open fun attributeWithName_stringValue(name: NSString, stringValue: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "attributeWithName:stringValue:", name, stringValue) as ObjCObject

        public open fun attributeWithName_URI_stringValue(name: NSString, URI: NSString, stringValue: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "attributeWithName:URI:stringValue:", name, URI, stringValue) as ObjCObject

        public open fun namespaceWithName_stringValue(name: NSString, stringValue: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "namespaceWithName:stringValue:", name, stringValue) as ObjCObject

        public open fun processingInstructionWithName_stringValue(name: NSString, stringValue: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "processingInstructionWithName:stringValue:", name, stringValue) as ObjCObject

        public open fun commentWithStringValue(stringValue: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "commentWithStringValue:", stringValue) as ObjCObject

        public open fun textWithStringValue(stringValue: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "textWithStringValue:", stringValue) as ObjCObject

        public open fun DTDNodeWithXMLString(string: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "DTDNodeWithXMLString:", string) as ObjCObject

        public open fun localNameForName(name: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localNameForName:", name) as NSString

        public open fun prefixForName(name: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "prefixForName:", name) as NSString

        public open fun predefinedNamespaceForPrefix(name: NSString): NSXMLNode =
            Native.objc_msgSend("class objc.NSXMLNode", this, "predefinedNamespaceForPrefix:", name) as NSXMLNode

    }

    companion object : NSObject(Native.objc_getClass("NSXMLNode")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXMLDTD(pointer: Long) : NSXMLNode(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithKind_options(kind: Any, options: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKind:options:", kind, options) as ObjCObject

    public open fun initWithContentsOfURL_options_error(url: NSURL, mask: Int, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:options:error:", url, mask, error) as ObjCObject

    public open fun initWithData_options_error(data: NSData, mask: Int, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:options:error:", data, mask, error) as ObjCObject

    public open fun publicID(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "publicID") as NSString

    public open fun setPublicID(publicID: NSString): Unit {
        Native.objc_msgSend("void", this, "setPublicID:", publicID)
    }

    public open fun systemID(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "systemID") as NSString

    public open fun setSystemID(systemID: NSString): Unit {
        Native.objc_msgSend("void", this, "setSystemID:", systemID)
    }

    public open fun insertChild_atIndex(child: NSXMLNode, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertChild:atIndex:", child, index)
    }

    public open fun insertChildren_atIndex(children: NSArray, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertChildren:atIndex:", children, index)
    }

    public open fun removeChildAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeChildAtIndex:", index)
    }

    public open fun setChildren(children: NSArray): Unit {
        Native.objc_msgSend("void", this, "setChildren:", children)
    }

    public open fun addChild(child: NSXMLNode): Unit {
        Native.objc_msgSend("void", this, "addChild:", child)
    }

    public open fun replaceChildAtIndex_withNode(index: Int, node: NSXMLNode): Unit {
        Native.objc_msgSend("void", this, "replaceChildAtIndex:withNode:", index, node)
    }

    public open fun entityDeclarationForName(name: NSString): NSXMLDTDNode =
        Native.objc_msgSend("class objc.NSXMLDTDNode", this, "entityDeclarationForName:", name) as NSXMLDTDNode

    public open fun notationDeclarationForName(name: NSString): NSXMLDTDNode =
        Native.objc_msgSend("class objc.NSXMLDTDNode", this, "notationDeclarationForName:", name) as NSXMLDTDNode

    public open fun elementDeclarationForName(name: NSString): NSXMLDTDNode =
        Native.objc_msgSend("class objc.NSXMLDTDNode", this, "elementDeclarationForName:", name) as NSXMLDTDNode

    public open fun attributeDeclarationForName_elementName(name: NSString, elementName: NSString): NSXMLDTDNode =
        Native.objc_msgSend("class objc.NSXMLDTDNode", this, "attributeDeclarationForName:elementName:", name, elementName) as NSXMLDTDNode

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSXMLNode.metaclass {
        public open fun predefinedEntityDeclarationForName(name: NSString): NSXMLDTDNode =
            Native.objc_msgSend("class objc.NSXMLDTDNode", this, "predefinedEntityDeclarationForName:", name) as NSXMLDTDNode

    }

    companion object : NSObject(Native.objc_getClass("NSXMLDTD")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXMLDTDNode(pointer: Long) : NSXMLNode(pointer) {
    public open fun initWithXMLString(string: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithXMLString:", string) as ObjCObject

    override fun initWithKind_options(kind: Any, options: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKind:options:", kind, options) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun DTDKind(): Any =
        Native.objc_msgSend("class objc.Any", this, "DTDKind")

    public open fun setDTDKind(DTDKind: Any): Unit {
        Native.objc_msgSend("void", this, "setDTDKind:", DTDKind)
    }

    public open fun isExternal(): Boolean =
        Native.objc_msgSend("boolean", this, "isExternal") as Boolean

    public open fun publicID(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "publicID") as NSString

    public open fun setPublicID(publicID: NSString): Unit {
        Native.objc_msgSend("void", this, "setPublicID:", publicID)
    }

    public open fun systemID(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "systemID") as NSString

    public open fun setSystemID(systemID: NSString): Unit {
        Native.objc_msgSend("void", this, "setSystemID:", systemID)
    }

    public open fun notationName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "notationName") as NSString

    public open fun setNotationName(notationName: NSString): Unit {
        Native.objc_msgSend("void", this, "setNotationName:", notationName)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSXMLNode.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSXMLDTDNode")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXMLDocument(pointer: Long) : NSXMLNode(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithXMLString_options_error(string: NSString, mask: Int, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithXMLString:options:error:", string, mask, error) as ObjCObject

    public open fun initWithContentsOfURL_options_error(url: NSURL, mask: Int, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:options:error:", url, mask, error) as ObjCObject

    public open fun initWithData_options_error(data: NSData, mask: Int, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:options:error:", data, mask, error) as ObjCObject

    public open fun initWithRootElement(element: NSXMLElement): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRootElement:", element) as ObjCObject

    public open fun characterEncoding(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "characterEncoding") as NSString

    public open fun setCharacterEncoding(characterEncoding: NSString): Unit {
        Native.objc_msgSend("void", this, "setCharacterEncoding:", characterEncoding)
    }

    public open fun version(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "version") as NSString

    public open fun setVersion(version: NSString): Unit {
        Native.objc_msgSend("void", this, "setVersion:", version)
    }

    public open fun isStandalone(): Boolean =
        Native.objc_msgSend("boolean", this, "isStandalone") as Boolean

    public open fun setStandalone(standalone: Boolean): Unit {
        Native.objc_msgSend("void", this, "setStandalone:", standalone)
    }

    public open fun documentContentKind(): Any =
        Native.objc_msgSend("class objc.Any", this, "documentContentKind")

    public open fun setDocumentContentKind(documentContentKind: Any): Unit {
        Native.objc_msgSend("void", this, "setDocumentContentKind:", documentContentKind)
    }

    public open fun MIMEType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "MIMEType") as NSString

    public open fun setMIMEType(MIMEType: NSString): Unit {
        Native.objc_msgSend("void", this, "setMIMEType:", MIMEType)
    }

    public open fun DTD(): NSXMLDTD =
        Native.objc_msgSend("class objc.NSXMLDTD", this, "DTD") as NSXMLDTD

    public open fun setDTD(DTD: NSXMLDTD): Unit {
        Native.objc_msgSend("void", this, "setDTD:", DTD)
    }

    public open fun setRootElement(root: NSXMLElement): Unit {
        Native.objc_msgSend("void", this, "setRootElement:", root)
    }

    public open fun rootElement(): NSXMLElement =
        Native.objc_msgSend("class objc.NSXMLElement", this, "rootElement") as NSXMLElement

    public open fun insertChild_atIndex(child: NSXMLNode, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertChild:atIndex:", child, index)
    }

    public open fun insertChildren_atIndex(children: NSArray, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertChildren:atIndex:", children, index)
    }

    public open fun removeChildAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeChildAtIndex:", index)
    }

    public open fun setChildren(children: NSArray): Unit {
        Native.objc_msgSend("void", this, "setChildren:", children)
    }

    public open fun addChild(child: NSXMLNode): Unit {
        Native.objc_msgSend("void", this, "addChild:", child)
    }

    public open fun replaceChildAtIndex_withNode(index: Int, node: NSXMLNode): Unit {
        Native.objc_msgSend("void", this, "replaceChildAtIndex:withNode:", index, node)
    }

    public open fun XMLData(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "XMLData") as NSData

    public open fun XMLDataWithOptions(options: Int): NSData =
        Native.objc_msgSend("class objc.NSData", this, "XMLDataWithOptions:", options) as NSData

    public open fun objectByApplyingXSLT_arguments_error(xslt: NSData, arguments: NSDictionary, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectByApplyingXSLT:arguments:error:", xslt, arguments, error) as ObjCObject

    public open fun objectByApplyingXSLTString_arguments_error(xslt: NSString, arguments: NSDictionary, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectByApplyingXSLTString:arguments:error:", xslt, arguments, error) as ObjCObject

    public open fun objectByApplyingXSLTAtURL_arguments_error(xsltURL: NSURL, argument: NSDictionary, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectByApplyingXSLTAtURL:arguments:error:", xsltURL, argument, error) as ObjCObject

    public open fun validateAndReturnError(error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "validateAndReturnError:", error) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSXMLNode.metaclass {
        public open fun replacementClassForClass(cls: ObjCClass): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "replacementClassForClass:", cls) as ObjCClass

    }

    companion object : NSObject(Native.objc_getClass("NSXMLDocument")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXMLElement(pointer: Long) : NSXMLNode(pointer), NSXMLElement_NSDeprecated {
    public open fun initWithName(name: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:", name) as ObjCObject

    public open fun initWithName_URI(name: NSString, URI: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:URI:", name, URI) as ObjCObject

    public open fun initWithName_stringValue(name: NSString, string: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:stringValue:", name, string) as ObjCObject

    public open fun initWithXMLString_error(string: NSString, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithXMLString:error:", string, error) as ObjCObject

    override fun initWithKind_options(kind: Any, options: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKind:options:", kind, options) as ObjCObject

    public open fun elementsForName(name: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "elementsForName:", name) as NSArray

    public open fun elementsForLocalName_URI(localName: NSString, URI: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "elementsForLocalName:URI:", localName, URI) as NSArray

    public open fun addAttribute(attribute: NSXMLNode): Unit {
        Native.objc_msgSend("void", this, "addAttribute:", attribute)
    }

    public open fun removeAttributeForName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "removeAttributeForName:", name)
    }

    public open fun attributes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "attributes") as NSArray

    public open fun setAttributes(attributes: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAttributes:", attributes)
    }

    public open fun setAttributesWithDictionary(attributes: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setAttributesWithDictionary:", attributes)
    }

    public open fun attributeForName(name: NSString): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "attributeForName:", name) as NSXMLNode

    public open fun attributeForLocalName_URI(localName: NSString, URI: NSString): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "attributeForLocalName:URI:", localName, URI) as NSXMLNode

    public open fun addNamespace(aNamespace: NSXMLNode): Unit {
        Native.objc_msgSend("void", this, "addNamespace:", aNamespace)
    }

    public open fun removeNamespaceForPrefix(name: NSString): Unit {
        Native.objc_msgSend("void", this, "removeNamespaceForPrefix:", name)
    }

    public open fun namespaces(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "namespaces") as NSArray

    public open fun setNamespaces(namespaces: NSArray): Unit {
        Native.objc_msgSend("void", this, "setNamespaces:", namespaces)
    }

    public open fun namespaceForPrefix(name: NSString): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "namespaceForPrefix:", name) as NSXMLNode

    public open fun resolveNamespaceForName(name: NSString): NSXMLNode =
        Native.objc_msgSend("class objc.NSXMLNode", this, "resolveNamespaceForName:", name) as NSXMLNode

    public open fun resolvePrefixForNamespaceURI(namespaceURI: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "resolvePrefixForNamespaceURI:", namespaceURI) as NSString

    public open fun insertChild_atIndex(child: NSXMLNode, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertChild:atIndex:", child, index)
    }

    public open fun insertChildren_atIndex(children: NSArray, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertChildren:atIndex:", children, index)
    }

    public open fun removeChildAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeChildAtIndex:", index)
    }

    public open fun setChildren(children: NSArray): Unit {
        Native.objc_msgSend("void", this, "setChildren:", children)
    }

    public open fun addChild(child: NSXMLNode): Unit {
        Native.objc_msgSend("void", this, "addChild:", child)
    }

    public open fun replaceChildAtIndex_withNode(index: Int, node: NSXMLNode): Unit {
        Native.objc_msgSend("void", this, "replaceChildAtIndex:withNode:", index, node)
    }

    public open fun normalizeAdjacentTextNodesPreservingCDATA(preserve: Boolean): Unit {
        Native.objc_msgSend("void", this, "normalizeAdjacentTextNodesPreservingCDATA:", preserve)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSXMLNode.metaclass, NSXMLElement_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSXMLElement")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLDownload(pointer: Long) : NSObject(pointer) {
    public open fun initWithRequest_delegate(request: NSURLRequest, delegate: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRequest:delegate:", request, delegate) as ObjCObject

    public open fun initWithResumeData_delegate_path(resumeData: NSData, delegate: Any, path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithResumeData:delegate:path:", resumeData, delegate, path) as ObjCObject

    public open fun cancel(): Unit {
        Native.objc_msgSend("void", this, "cancel")
    }

    public open fun setDestination_allowOverwrite(path: NSString, allowOverwrite: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDestination:allowOverwrite:", path, allowOverwrite)
    }

    public open fun request(): NSURLRequest =
        Native.objc_msgSend("class objc.NSURLRequest", this, "request") as NSURLRequest

    public open fun resumeData(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "resumeData") as NSData

    public open fun deletesFileUponFailure(): Boolean =
        Native.objc_msgSend("boolean", this, "deletesFileUponFailure") as Boolean

    public open fun setDeletesFileUponFailure(deletesFileUponFailure: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDeletesFileUponFailure:", deletesFileUponFailure)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun canResumeDownloadDecodedWithEncodingMIMEType(MIMEType: NSString): Boolean =
            Native.objc_msgSend("boolean", this, "canResumeDownloadDecodedWithEncodingMIMEType:", MIMEType) as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSURLDownload")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAffineTransform(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSAffineTransform_NSAppKitAdditons {
    public open fun initWithTransform(transform: NSAffineTransform): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTransform:", transform) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun translateXBy_yBy(deltaX: Double, deltaY: Double): Unit {
        Native.objc_msgSend("void", this, "translateXBy:yBy:", deltaX, deltaY)
    }

    public open fun rotateByDegrees(angle: Double): Unit {
        Native.objc_msgSend("void", this, "rotateByDegrees:", angle)
    }

    public open fun rotateByRadians(angle: Double): Unit {
        Native.objc_msgSend("void", this, "rotateByRadians:", angle)
    }

    public open fun scaleBy(scale: Double): Unit {
        Native.objc_msgSend("void", this, "scaleBy:", scale)
    }

    public open fun scaleXBy_yBy(scaleX: Double, scaleY: Double): Unit {
        Native.objc_msgSend("void", this, "scaleXBy:yBy:", scaleX, scaleY)
    }

    public open fun invert(): Unit {
        Native.objc_msgSend("void", this, "invert")
    }

    public open fun appendTransform(transform: NSAffineTransform): Unit {
        Native.objc_msgSend("void", this, "appendTransform:", transform)
    }

    public open fun prependTransform(transform: NSAffineTransform): Unit {
        Native.objc_msgSend("void", this, "prependTransform:", transform)
    }

    public open fun transformPoint(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "transformPoint:", aPoint)

    public open fun transformSize(aSize: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "transformSize:", aSize)

    public open fun transformStruct(): Any =
        Native.objc_msgSend("class objc.Any", this, "transformStruct")

    public open fun setTransformStruct(transformStruct: Any): Unit {
        Native.objc_msgSend("void", this, "setTransformStruct:", transformStruct)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSAffineTransform_NSAppKitAdditons.metaclass {
        public open fun transform(): NSAffineTransform =
            Native.objc_msgSend("class objc.NSAffineTransform", this, "transform") as NSAffineTransform

    }

    companion object : NSObject(Native.objc_getClass("NSAffineTransform")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAppleEventDescriptor(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun initWithAEDescNoCopy(aeDesc: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithAEDescNoCopy:", aeDesc) as ObjCObject

    public open fun initWithDescriptorType_bytes_length(descriptorType: Int, bytes: Pointer<Unit>, byteCount: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDescriptorType:bytes:length:", descriptorType, bytes, byteCount) as ObjCObject

    public open fun initWithDescriptorType_data(descriptorType: Int, data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDescriptorType:data:", descriptorType, data) as ObjCObject

    public open fun initWithEventClass_eventID_targetDescriptor_returnID_transactionID(eventClass: Int, eventID: Int, targetDescriptor: NSAppleEventDescriptor, returnID: Short, transactionID: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:", eventClass, eventID, targetDescriptor, returnID, transactionID) as ObjCObject

    public open fun initListDescriptor(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initListDescriptor") as ObjCObject

    public open fun initRecordDescriptor(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initRecordDescriptor") as ObjCObject

    public open fun aeDesc(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "aeDesc") as Pointer<Any>

    public open fun descriptorType(): Int =
        Native.objc_msgSend("int", this, "descriptorType") as Int

    public open fun data(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "data") as NSData

    public open fun booleanValue(): Byte =
        Native.objc_msgSend("class objc.Byte", this, "booleanValue") as Byte

    public open fun enumCodeValue(): Int =
        Native.objc_msgSend("int", this, "enumCodeValue") as Int

    public open fun int32Value(): Int =
        Native.objc_msgSend("int", this, "int32Value") as Int

    public open fun typeCodeValue(): Int =
        Native.objc_msgSend("int", this, "typeCodeValue") as Int

    public open fun stringValue(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringValue") as NSString

    public open fun eventClass(): Int =
        Native.objc_msgSend("int", this, "eventClass") as Int

    public open fun eventID(): Int =
        Native.objc_msgSend("int", this, "eventID") as Int

    public open fun returnID(): Short =
        Native.objc_msgSend("short", this, "returnID") as Short

    public open fun transactionID(): Int =
        Native.objc_msgSend("int", this, "transactionID") as Int

    public open fun setParamDescriptor_forKeyword(descriptor: NSAppleEventDescriptor, keyword: Int): Unit {
        Native.objc_msgSend("void", this, "setParamDescriptor:forKeyword:", descriptor, keyword)
    }

    public open fun paramDescriptorForKeyword(keyword: Int): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "paramDescriptorForKeyword:", keyword) as NSAppleEventDescriptor

    public open fun removeParamDescriptorWithKeyword(keyword: Int): Unit {
        Native.objc_msgSend("void", this, "removeParamDescriptorWithKeyword:", keyword)
    }

    public open fun setAttributeDescriptor_forKeyword(descriptor: NSAppleEventDescriptor, keyword: Int): Unit {
        Native.objc_msgSend("void", this, "setAttributeDescriptor:forKeyword:", descriptor, keyword)
    }

    public open fun attributeDescriptorForKeyword(keyword: Int): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "attributeDescriptorForKeyword:", keyword) as NSAppleEventDescriptor

    public open fun numberOfItems(): Int =
        Native.objc_msgSend("int", this, "numberOfItems") as Int

    public open fun insertDescriptor_atIndex(descriptor: NSAppleEventDescriptor, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertDescriptor:atIndex:", descriptor, index)
    }

    public open fun descriptorAtIndex(index: Int): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorAtIndex:", index) as NSAppleEventDescriptor

    public open fun removeDescriptorAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeDescriptorAtIndex:", index)
    }

    public open fun setDescriptor_forKeyword(descriptor: NSAppleEventDescriptor, keyword: Int): Unit {
        Native.objc_msgSend("void", this, "setDescriptor:forKeyword:", descriptor, keyword)
    }

    public open fun descriptorForKeyword(keyword: Int): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorForKeyword:", keyword) as NSAppleEventDescriptor

    public open fun removeDescriptorWithKeyword(keyword: Int): Unit {
        Native.objc_msgSend("void", this, "removeDescriptorWithKeyword:", keyword)
    }

    public open fun keywordForDescriptorAtIndex(index: Int): Int =
        Native.objc_msgSend("int", this, "keywordForDescriptorAtIndex:", index) as Int

    public open fun coerceToDescriptorType(descriptorType: Int): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "coerceToDescriptorType:", descriptorType) as NSAppleEventDescriptor

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun nullDescriptor(): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "nullDescriptor") as NSAppleEventDescriptor

        public open fun descriptorWithDescriptorType_bytes_length(descriptorType: Int, bytes: Pointer<Unit>, byteCount: Int): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorWithDescriptorType:bytes:length:", descriptorType, bytes, byteCount) as NSAppleEventDescriptor

        public open fun descriptorWithDescriptorType_data(descriptorType: Int, data: NSData): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorWithDescriptorType:data:", descriptorType, data) as NSAppleEventDescriptor

        public open fun descriptorWithBoolean(boolean: Byte): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorWithBoolean:", boolean) as NSAppleEventDescriptor

        public open fun descriptorWithEnumCode(enumerator: Int): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorWithEnumCode:", enumerator) as NSAppleEventDescriptor

        public open fun descriptorWithInt32(signedInt: Int): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorWithInt32:", signedInt) as NSAppleEventDescriptor

        public open fun descriptorWithTypeCode(typeCode: Int): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorWithTypeCode:", typeCode) as NSAppleEventDescriptor

        public open fun descriptorWithString(string: NSString): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptorWithString:", string) as NSAppleEventDescriptor

        public open fun appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID(eventClass: Int, eventID: Int, targetDescriptor: NSAppleEventDescriptor, returnID: Short, transactionID: Int): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:", eventClass, eventID, targetDescriptor, returnID, transactionID) as NSAppleEventDescriptor

        public open fun listDescriptor(): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "listDescriptor") as NSAppleEventDescriptor

        public open fun recordDescriptor(): NSAppleEventDescriptor =
            Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "recordDescriptor") as NSAppleEventDescriptor

    }

    companion object : NSObject(Native.objc_getClass("NSAppleEventDescriptor")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAppleEventManager(pointer: Long) : NSObject(pointer) {
    public open fun setEventHandler_andSelector_forEventClass_andEventID(handler: ObjCObject, handleEventSelector: ObjCSelector, eventClass: Int, eventID: Int): Unit {
        Native.objc_msgSend("void", this, "setEventHandler:andSelector:forEventClass:andEventID:", handler, handleEventSelector, eventClass, eventID)
    }

    public open fun removeEventHandlerForEventClass_andEventID(eventClass: Int, eventID: Int): Unit {
        Native.objc_msgSend("void", this, "removeEventHandlerForEventClass:andEventID:", eventClass, eventID)
    }

    public open fun dispatchRawAppleEvent_withRawReply_handlerRefCon(theAppleEvent: Pointer<Any>, theReply: Pointer<Any>, handlerRefCon: Pointer<*>): Short =
        Native.objc_msgSend("short", this, "dispatchRawAppleEvent:withRawReply:handlerRefCon:", theAppleEvent, theReply, handlerRefCon) as Short

    public open fun currentAppleEvent(): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "currentAppleEvent") as NSAppleEventDescriptor

    public open fun currentReplyAppleEvent(): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "currentReplyAppleEvent") as NSAppleEventDescriptor

    public open fun suspendCurrentAppleEvent(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "suspendCurrentAppleEvent") as Pointer<Any>

    public open fun appleEventForSuspensionID(suspensionID: Pointer<Any>): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "appleEventForSuspensionID:", suspensionID) as NSAppleEventDescriptor

    public open fun replyAppleEventForSuspensionID(suspensionID: Pointer<Any>): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "replyAppleEventForSuspensionID:", suspensionID) as NSAppleEventDescriptor

    public open fun setCurrentAppleEventAndReplyEventWithSuspensionID(suspensionID: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "setCurrentAppleEventAndReplyEventWithSuspensionID:", suspensionID)
    }

    public open fun resumeWithSuspensionID(suspensionID: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "resumeWithSuspensionID:", suspensionID)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun sharedAppleEventManager(): NSAppleEventManager =
            Native.objc_msgSend("class objc.NSAppleEventManager", this, "sharedAppleEventManager") as NSAppleEventManager

    }

    companion object : NSObject(Native.objc_getClass("NSAppleEventManager")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAppleScript(pointer: Long) : NSObject(pointer), NSCopying, NSAppleScript_NSExtensions {
    public open fun initWithContentsOfURL_error(url: NSURL, errorInfo: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:error:", url, errorInfo) as ObjCObject

    public open fun initWithSource(source: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSource:", source) as ObjCObject

    public open fun source(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "source") as NSString

    public open fun isCompiled(): Boolean =
        Native.objc_msgSend("boolean", this, "isCompiled") as Boolean

    public open fun compileAndReturnError(errorInfo: Pointer<NSDictionary>): Boolean =
        Native.objc_msgSend("boolean", this, "compileAndReturnError:", errorInfo) as Boolean

    public open fun executeAndReturnError(errorInfo: Pointer<NSDictionary>): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "executeAndReturnError:", errorInfo) as NSAppleEventDescriptor

    public open fun executeAppleEvent_error(event: NSAppleEventDescriptor, errorInfo: Pointer<NSDictionary>): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "executeAppleEvent:error:", event, errorInfo) as NSAppleEventDescriptor

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSAppleScript_NSExtensions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSAppleScript")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSClassDescription(pointer: Long) : NSObject(pointer) {
    override fun attributeKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "attributeKeys") as NSArray

    override fun toOneRelationshipKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toOneRelationshipKeys") as NSArray

    override fun toManyRelationshipKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toManyRelationshipKeys") as NSArray

    override fun inverseForRelationshipKey(relationshipKey: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "inverseForRelationshipKey:", relationshipKey) as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun registerClassDescription_forClass(description: NSClassDescription, aClass: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "registerClassDescription:forClass:", description, aClass)
        }

        public open fun invalidateClassDescriptionCache(): Unit {
            Native.objc_msgSend("void", this, "invalidateClassDescriptionCache")
        }

        public open fun classDescriptionForClass(aClass: ObjCClass): NSClassDescription =
            Native.objc_msgSend("class objc.NSClassDescription", this, "classDescriptionForClass:", aClass) as NSClassDescription

    }

    companion object : NSObject(Native.objc_getClass("NSClassDescription")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDistributedLock(pointer: Long) : NSObject(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithPath(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPath:", path) as ObjCObject

    public open fun tryLock(): Boolean =
        Native.objc_msgSend("boolean", this, "tryLock") as Boolean

    public open fun unlock(): Unit {
        Native.objc_msgSend("void", this, "unlock")
    }

    public open fun breakLock(): Unit {
        Native.objc_msgSend("void", this, "breakLock")
    }

    public open fun lockDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "lockDate") as NSDate

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun lockWithPath(path: NSString): NSDistributedLock =
            Native.objc_msgSend("class objc.NSDistributedLock", this, "lockWithPath:", path) as NSDistributedLock

    }

    companion object : NSObject(Native.objc_getClass("NSDistributedLock")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSGarbageCollector(pointer: Long) : NSObject(pointer) {
    public open fun isCollecting(): Boolean =
        Native.objc_msgSend("boolean", this, "isCollecting") as Boolean

    public open fun disable(): Unit {
        Native.objc_msgSend("void", this, "disable")
    }

    public open fun enable(): Unit {
        Native.objc_msgSend("void", this, "enable")
    }

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun collectIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "collectIfNeeded")
    }

    public open fun collectExhaustively(): Unit {
        Native.objc_msgSend("void", this, "collectExhaustively")
    }

    public open fun disableCollectorForPointer(ptr: Pointer<Unit>): Unit {
        Native.objc_msgSend("void", this, "disableCollectorForPointer:", ptr)
    }

    public open fun enableCollectorForPointer(ptr: Pointer<Unit>): Unit {
        Native.objc_msgSend("void", this, "enableCollectorForPointer:", ptr)
    }

    public open fun zone(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "zone") as Pointer<Any>

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun defaultCollector(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "defaultCollector") as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSGarbageCollector")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHost(pointer: Long) : NSObject(pointer) {
    public open fun isEqualToHost(aHost: NSHost): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToHost:", aHost) as Boolean

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun names(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "names") as NSArray

    public open fun address(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "address") as NSString

    public open fun addresses(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "addresses") as NSArray

    public open fun localizedName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedName") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun currentHost(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "currentHost") as ObjCObject

        public open fun hostWithName(name: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "hostWithName:", name) as ObjCObject

        public open fun hostWithAddress(address: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "hostWithAddress:", address) as ObjCObject

        public open fun setHostCacheEnabled(flag: Boolean): Unit {
            Native.objc_msgSend("void", this, "setHostCacheEnabled:", flag)
        }

        public open fun isHostCacheEnabled(): Boolean =
            Native.objc_msgSend("boolean", this, "isHostCacheEnabled") as Boolean

        public open fun flushHostCache(): Unit {
            Native.objc_msgSend("void", this, "flushHostCache")
        }

    }

    companion object : NSObject(Native.objc_getClass("NSHost")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScriptClassDescription(pointer: Long) : NSClassDescription(pointer), NSScriptClassDescription_NSDeprecated {
    public open fun initWithSuiteName_className_dictionary(suiteName: NSString, className: NSString, classDeclaration: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSuiteName:className:dictionary:", suiteName, className, classDeclaration) as ObjCObject

    public open fun suiteName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "suiteName") as NSString

    override fun className(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "className") as NSString

    public open fun implementationClassName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "implementationClassName") as NSString

    public open fun superclassDescription(): NSScriptClassDescription =
        Native.objc_msgSend("class objc.NSScriptClassDescription", this, "superclassDescription") as NSScriptClassDescription

    public open fun appleEventCode(): Int =
        Native.objc_msgSend("int", this, "appleEventCode") as Int

    public open fun matchesAppleEventCode(appleEventCode: Int): Boolean =
        Native.objc_msgSend("boolean", this, "matchesAppleEventCode:", appleEventCode) as Boolean

    public open fun supportsCommand(commandDescription: NSScriptCommandDescription): Boolean =
        Native.objc_msgSend("boolean", this, "supportsCommand:", commandDescription) as Boolean

    public open fun selectorForCommand(commandDescription: NSScriptCommandDescription): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "selectorForCommand:", commandDescription) as ObjCSelector

    public open fun typeForKey(key: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "typeForKey:", key) as NSString

    public open fun classDescriptionForKey(key: NSString): NSScriptClassDescription =
        Native.objc_msgSend("class objc.NSScriptClassDescription", this, "classDescriptionForKey:", key) as NSScriptClassDescription

    public open fun appleEventCodeForKey(key: NSString): Int =
        Native.objc_msgSend("int", this, "appleEventCodeForKey:", key) as Int

    public open fun keyWithAppleEventCode(appleEventCode: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyWithAppleEventCode:", appleEventCode) as NSString

    public open fun defaultSubcontainerAttributeKey(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "defaultSubcontainerAttributeKey") as NSString

    public open fun isLocationRequiredToCreateForKey(toManyRelationshipKey: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isLocationRequiredToCreateForKey:", toManyRelationshipKey) as Boolean

    public open fun hasPropertyForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "hasPropertyForKey:", key) as Boolean

    public open fun hasOrderedToManyRelationshipForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "hasOrderedToManyRelationshipForKey:", key) as Boolean

    public open fun hasReadablePropertyForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "hasReadablePropertyForKey:", key) as Boolean

    public open fun hasWritablePropertyForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "hasWritablePropertyForKey:", key) as Boolean

    override fun attributeKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "attributeKeys") as NSArray

    override fun inverseForRelationshipKey(relationshipKey: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "inverseForRelationshipKey:", relationshipKey) as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun toManyRelationshipKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toManyRelationshipKeys") as NSArray

    override fun toOneRelationshipKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toOneRelationshipKeys") as NSArray

    trait metaclass : NSClassDescription.metaclass, NSScriptClassDescription_NSDeprecated.metaclass {
        override fun classDescriptionForClass(aClass: ObjCClass): NSScriptClassDescription =
            Native.objc_msgSend("class objc.NSScriptClassDescription", this, "classDescriptionForClass:", aClass) as NSScriptClassDescription

    }

    companion object : NSObject(Native.objc_getClass("NSScriptClassDescription")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScriptCoercionHandler(pointer: Long) : NSObject(pointer) {
    public open fun coerceValue_toClass(value: ObjCObject, toClass: ObjCClass): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "coerceValue:toClass:", value, toClass) as ObjCObject

    public open fun registerCoercer_selector_toConvertFromClass_toClass(coercer: ObjCObject, selector: ObjCSelector, fromClass: ObjCClass, toClass: ObjCClass): Unit {
        Native.objc_msgSend("void", this, "registerCoercer:selector:toConvertFromClass:toClass:", coercer, selector, fromClass, toClass)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun sharedCoercionHandler(): NSScriptCoercionHandler =
            Native.objc_msgSend("class objc.NSScriptCoercionHandler", this, "sharedCoercionHandler") as NSScriptCoercionHandler

    }

    companion object : NSObject(Native.objc_getClass("NSScriptCoercionHandler")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScriptCommand(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun initWithCommandDescription(commandDef: NSScriptCommandDescription): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCommandDescription:", commandDef) as ObjCObject

    public open fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun commandDescription(): NSScriptCommandDescription =
        Native.objc_msgSend("class objc.NSScriptCommandDescription", this, "commandDescription") as NSScriptCommandDescription

    public open fun directParameter(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "directParameter") as ObjCObject

    public open fun setDirectParameter(directParameter: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDirectParameter:", directParameter)
    }

    public open fun receiversSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "receiversSpecifier") as NSScriptObjectSpecifier

    public open fun setReceiversSpecifier(receiversSpecifier: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setReceiversSpecifier:", receiversSpecifier)
    }

    public open fun evaluatedReceivers(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "evaluatedReceivers") as ObjCObject

    public open fun arguments(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "arguments") as NSDictionary

    public open fun setArguments(arguments: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setArguments:", arguments)
    }

    public open fun evaluatedArguments(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "evaluatedArguments") as NSDictionary

    public open fun isWellFormed(): Boolean =
        Native.objc_msgSend("boolean", this, "isWellFormed") as Boolean

    public open fun performDefaultImplementation(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "performDefaultImplementation") as ObjCObject

    public open fun executeCommand(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "executeCommand") as ObjCObject

    public open fun scriptErrorNumber(): Int =
        Native.objc_msgSend("int", this, "scriptErrorNumber") as Int

    public open fun setScriptErrorNumber(scriptErrorNumber: Int): Unit {
        Native.objc_msgSend("void", this, "setScriptErrorNumber:", scriptErrorNumber)
    }

    public open fun scriptErrorOffendingObjectDescriptor(): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "scriptErrorOffendingObjectDescriptor") as NSAppleEventDescriptor

    public open fun setScriptErrorOffendingObjectDescriptor(scriptErrorOffendingObjectDescriptor: NSAppleEventDescriptor): Unit {
        Native.objc_msgSend("void", this, "setScriptErrorOffendingObjectDescriptor:", scriptErrorOffendingObjectDescriptor)
    }

    public open fun scriptErrorExpectedTypeDescriptor(): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "scriptErrorExpectedTypeDescriptor") as NSAppleEventDescriptor

    public open fun setScriptErrorExpectedTypeDescriptor(scriptErrorExpectedTypeDescriptor: NSAppleEventDescriptor): Unit {
        Native.objc_msgSend("void", this, "setScriptErrorExpectedTypeDescriptor:", scriptErrorExpectedTypeDescriptor)
    }

    public open fun scriptErrorString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "scriptErrorString") as NSString

    public open fun setScriptErrorString(scriptErrorString: NSString): Unit {
        Native.objc_msgSend("void", this, "setScriptErrorString:", scriptErrorString)
    }

    public open fun appleEvent(): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "appleEvent") as NSAppleEventDescriptor

    public open fun suspendExecution(): Unit {
        Native.objc_msgSend("void", this, "suspendExecution")
    }

    public open fun resumeExecutionWithResult(result: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "resumeExecutionWithResult:", result)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
        public open fun currentCommand(): NSScriptCommand =
            Native.objc_msgSend("class objc.NSScriptCommand", this, "currentCommand") as NSScriptCommand

    }

    companion object : NSObject(Native.objc_getClass("NSScriptCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScriptCommandDescription(pointer: Long) : NSObject(pointer), NSCoding {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithSuiteName_commandName_dictionary(suiteName: NSString, commandName: NSString, commandDeclaration: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSuiteName:commandName:dictionary:", suiteName, commandName, commandDeclaration) as ObjCObject

    public open fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun suiteName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "suiteName") as NSString

    public open fun commandName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "commandName") as NSString

    public open fun appleEventClassCode(): Int =
        Native.objc_msgSend("int", this, "appleEventClassCode") as Int

    public open fun appleEventCode(): Int =
        Native.objc_msgSend("int", this, "appleEventCode") as Int

    public open fun commandClassName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "commandClassName") as NSString

    public open fun returnType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "returnType") as NSString

    public open fun appleEventCodeForReturnType(): Int =
        Native.objc_msgSend("int", this, "appleEventCodeForReturnType") as Int

    public open fun argumentNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "argumentNames") as NSArray

    public open fun typeForArgumentWithName(argumentName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "typeForArgumentWithName:", argumentName) as NSString

    public open fun appleEventCodeForArgumentWithName(argumentName: NSString): Int =
        Native.objc_msgSend("int", this, "appleEventCodeForArgumentWithName:", argumentName) as Int

    public open fun isOptionalArgumentWithName(argumentName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isOptionalArgumentWithName:", argumentName) as Boolean

    public open fun createCommandInstance(): NSScriptCommand =
        Native.objc_msgSend("class objc.NSScriptCommand", this, "createCommandInstance") as NSScriptCommand

    public open fun createCommandInstanceWithZone(zone: Pointer<Any>): NSScriptCommand =
        Native.objc_msgSend("class objc.NSScriptCommand", this, "createCommandInstanceWithZone:", zone) as NSScriptCommand

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSScriptCommandDescription")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScriptExecutionContext(pointer: Long) : NSObject(pointer) {
    public open fun topLevelObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "topLevelObject") as ObjCObject

    public open fun setTopLevelObject(topLevelObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTopLevelObject:", topLevelObject)
    }

    public open fun objectBeingTested(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectBeingTested") as ObjCObject

    public open fun setObjectBeingTested(objectBeingTested: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setObjectBeingTested:", objectBeingTested)
    }

    public open fun rangeContainerObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "rangeContainerObject") as ObjCObject

    public open fun setRangeContainerObject(rangeContainerObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setRangeContainerObject:", rangeContainerObject)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun sharedScriptExecutionContext(): NSScriptExecutionContext =
            Native.objc_msgSend("class objc.NSScriptExecutionContext", this, "sharedScriptExecutionContext") as NSScriptExecutionContext

    }

    companion object : NSObject(Native.objc_getClass("NSScriptExecutionContext")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScriptObjectSpecifier(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun initWithContainerSpecifier_key(container: NSScriptObjectSpecifier, property: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerSpecifier:key:", container, property) as ObjCObject

    public open fun initWithContainerClassDescription_containerSpecifier_key(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier, property: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerClassDescription:containerSpecifier:key:", classDesc, container, property) as ObjCObject

    public open fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun childSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "childSpecifier") as NSScriptObjectSpecifier

    public open fun setChildSpecifier(childSpecifier: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setChildSpecifier:", childSpecifier)
    }

    public open fun containerSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "containerSpecifier") as NSScriptObjectSpecifier

    public open fun setContainerSpecifier(containerSpecifier: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setContainerSpecifier:", containerSpecifier)
    }

    public open fun containerIsObjectBeingTested(): Boolean =
        Native.objc_msgSend("boolean", this, "containerIsObjectBeingTested") as Boolean

    public open fun setContainerIsObjectBeingTested(containerIsObjectBeingTested: Boolean): Unit {
        Native.objc_msgSend("void", this, "setContainerIsObjectBeingTested:", containerIsObjectBeingTested)
    }

    public open fun containerIsRangeContainerObject(): Boolean =
        Native.objc_msgSend("boolean", this, "containerIsRangeContainerObject") as Boolean

    public open fun setContainerIsRangeContainerObject(containerIsRangeContainerObject: Boolean): Unit {
        Native.objc_msgSend("void", this, "setContainerIsRangeContainerObject:", containerIsRangeContainerObject)
    }

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    public open fun containerClassDescription(): NSScriptClassDescription =
        Native.objc_msgSend("class objc.NSScriptClassDescription", this, "containerClassDescription") as NSScriptClassDescription

    public open fun setContainerClassDescription(containerClassDescription: NSScriptClassDescription): Unit {
        Native.objc_msgSend("void", this, "setContainerClassDescription:", containerClassDescription)
    }

    public open fun keyClassDescription(): NSScriptClassDescription =
        Native.objc_msgSend("class objc.NSScriptClassDescription", this, "keyClassDescription") as NSScriptClassDescription

    public open fun indicesOfObjectsByEvaluatingWithContainer_count(container: ObjCObject, count: Pointer<Int>): Pointer<Int> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "indicesOfObjectsByEvaluatingWithContainer:count:", container, count) as Pointer<Int>

    public open fun objectsByEvaluatingWithContainers(containers: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectsByEvaluatingWithContainers:", containers) as ObjCObject

    public open fun objectsByEvaluatingSpecifier(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectsByEvaluatingSpecifier") as ObjCObject

    public open fun evaluationErrorNumber(): Int =
        Native.objc_msgSend("int", this, "evaluationErrorNumber") as Int

    public open fun setEvaluationErrorNumber(evaluationErrorNumber: Int): Unit {
        Native.objc_msgSend("void", this, "setEvaluationErrorNumber:", evaluationErrorNumber)
    }

    public open fun evaluationErrorSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "evaluationErrorSpecifier") as NSScriptObjectSpecifier

    public open fun descriptor(): NSAppleEventDescriptor =
        Native.objc_msgSend("class objc.NSAppleEventDescriptor", this, "descriptor") as NSAppleEventDescriptor

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
        public open fun objectSpecifierWithDescriptor(descriptor: NSAppleEventDescriptor): NSScriptObjectSpecifier =
            Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "objectSpecifierWithDescriptor:", descriptor) as NSScriptObjectSpecifier

    }

    companion object : NSObject(Native.objc_getClass("NSScriptObjectSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSIndexSpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    public open fun initWithContainerClassDescription_containerSpecifier_key_index(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier, property: NSString, index: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerClassDescription:containerSpecifier:key:index:", classDesc, container, property, index) as ObjCObject

    public open fun index(): Int =
        Native.objc_msgSend("int", this, "index") as Int

    public open fun setIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "setIndex:", index)
    }

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSIndexSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMiddleSpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMiddleSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNameSpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    override fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun initWithContainerClassDescription_containerSpecifier_key_name(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier, property: NSString, name: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerClassDescription:containerSpecifier:key:name:", classDesc, container, property, name) as ObjCObject

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSNameSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPositionalSpecifier(pointer: Long) : NSObject(pointer) {
    public open fun initWithPosition_objectSpecifier(position: Any, specifier: NSScriptObjectSpecifier): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPosition:objectSpecifier:", position, specifier) as ObjCObject

    public open fun position(): Any =
        Native.objc_msgSend("class objc.Any", this, "position")

    override fun objectSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "objectSpecifier") as NSScriptObjectSpecifier

    public open fun setInsertionClassDescription(classDescription: NSScriptClassDescription): Unit {
        Native.objc_msgSend("void", this, "setInsertionClassDescription:", classDescription)
    }

    public open fun evaluate(): Unit {
        Native.objc_msgSend("void", this, "evaluate")
    }

    public open fun insertionContainer(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "insertionContainer") as ObjCObject

    public open fun insertionKey(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "insertionKey") as NSString

    public open fun insertionIndex(): Int =
        Native.objc_msgSend("int", this, "insertionIndex") as Int

    public open fun insertionReplaces(): Boolean =
        Native.objc_msgSend("boolean", this, "insertionReplaces") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPositionalSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPropertySpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPropertySpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRandomSpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSRandomSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRangeSpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    override fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier, property: NSString, startSpec: NSScriptObjectSpecifier, endSpec: NSScriptObjectSpecifier): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:", classDesc, container, property, startSpec, endSpec) as ObjCObject

    public open fun startSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "startSpecifier") as NSScriptObjectSpecifier

    public open fun setStartSpecifier(startSpecifier: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setStartSpecifier:", startSpecifier)
    }

    public open fun endSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "endSpecifier") as NSScriptObjectSpecifier

    public open fun setEndSpecifier(endSpecifier: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setEndSpecifier:", endSpecifier)
    }

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSRangeSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRelativeSpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    override fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier, property: NSString, relPos: Any, baseSpecifier: NSScriptObjectSpecifier): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:", classDesc, container, property, relPos, baseSpecifier) as ObjCObject

    public open fun relativePosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "relativePosition")

    public open fun setRelativePosition(relativePosition: Any): Unit {
        Native.objc_msgSend("void", this, "setRelativePosition:", relativePosition)
    }

    public open fun baseSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "baseSpecifier") as NSScriptObjectSpecifier

    public open fun setBaseSpecifier(baseSpecifier: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setBaseSpecifier:", baseSpecifier)
    }

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSRelativeSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUniqueIDSpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    override fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun initWithContainerClassDescription_containerSpecifier_key_uniqueID(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier, property: NSString, uniqueID: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerClassDescription:containerSpecifier:key:uniqueID:", classDesc, container, property, uniqueID) as ObjCObject

    public open fun uniqueID(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "uniqueID") as ObjCObject

    public open fun setUniqueID(uniqueID: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setUniqueID:", uniqueID)
    }

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSUniqueIDSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSWhoseSpecifier(pointer: Long) : NSScriptObjectSpecifier(pointer) {
    override fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun initWithContainerClassDescription_containerSpecifier_key_test(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier, property: NSString, test: NSScriptWhoseTest): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerClassDescription:containerSpecifier:key:test:", classDesc, container, property, test) as ObjCObject

    public open fun test(): NSScriptWhoseTest =
        Native.objc_msgSend("class objc.NSScriptWhoseTest", this, "test") as NSScriptWhoseTest

    public open fun setTest(test: NSScriptWhoseTest): Unit {
        Native.objc_msgSend("void", this, "setTest:", test)
    }

    public open fun startSubelementIdentifier(): Any =
        Native.objc_msgSend("class objc.Any", this, "startSubelementIdentifier")

    public open fun setStartSubelementIdentifier(startSubelementIdentifier: Any): Unit {
        Native.objc_msgSend("void", this, "setStartSubelementIdentifier:", startSubelementIdentifier)
    }

    public open fun startSubelementIndex(): Int =
        Native.objc_msgSend("int", this, "startSubelementIndex") as Int

    public open fun setStartSubelementIndex(startSubelementIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setStartSubelementIndex:", startSubelementIndex)
    }

    public open fun endSubelementIdentifier(): Any =
        Native.objc_msgSend("class objc.Any", this, "endSubelementIdentifier")

    public open fun setEndSubelementIdentifier(endSubelementIdentifier: Any): Unit {
        Native.objc_msgSend("void", this, "setEndSubelementIdentifier:", endSubelementIdentifier)
    }

    public open fun endSubelementIndex(): Int =
        Native.objc_msgSend("int", this, "endSubelementIndex") as Int

    public open fun setEndSubelementIndex(endSubelementIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setEndSubelementIndex:", endSubelementIndex)
    }

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    trait metaclass : NSScriptObjectSpecifier.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSWhoseSpecifier")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCloneCommand(pointer: Long) : NSScriptCommand(pointer) {
    override fun setReceiversSpecifier(receiversRef: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setReceiversSpecifier:", receiversRef)
    }

    public open fun keySpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "keySpecifier") as NSScriptObjectSpecifier

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCloneCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCloseCommand(pointer: Long) : NSScriptCommand(pointer) {
    public open fun saveOptions(): Any =
        Native.objc_msgSend("class objc.Any", this, "saveOptions")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCloseCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCountCommand(pointer: Long) : NSScriptCommand(pointer) {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCountCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCreateCommand(pointer: Long) : NSScriptCommand(pointer) {
    public open fun createClassDescription(): NSScriptClassDescription =
        Native.objc_msgSend("class objc.NSScriptClassDescription", this, "createClassDescription") as NSScriptClassDescription

    public open fun resolvedKeyDictionary(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "resolvedKeyDictionary") as NSDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCreateCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDeleteCommand(pointer: Long) : NSScriptCommand(pointer) {
    override fun setReceiversSpecifier(receiversRef: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setReceiversSpecifier:", receiversRef)
    }

    public open fun keySpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "keySpecifier") as NSScriptObjectSpecifier

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDeleteCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSExistsCommand(pointer: Long) : NSScriptCommand(pointer) {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSExistsCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSGetCommand(pointer: Long) : NSScriptCommand(pointer) {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSGetCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMoveCommand(pointer: Long) : NSScriptCommand(pointer) {
    override fun setReceiversSpecifier(receiversRef: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setReceiversSpecifier:", receiversRef)
    }

    public open fun keySpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "keySpecifier") as NSScriptObjectSpecifier

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMoveCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSQuitCommand(pointer: Long) : NSScriptCommand(pointer) {
    public open fun saveOptions(): Any =
        Native.objc_msgSend("class objc.Any", this, "saveOptions")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSQuitCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSetCommand(pointer: Long) : NSScriptCommand(pointer) {
    override fun setReceiversSpecifier(receiversRef: NSScriptObjectSpecifier): Unit {
        Native.objc_msgSend("void", this, "setReceiversSpecifier:", receiversRef)
    }

    public open fun keySpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "keySpecifier") as NSScriptObjectSpecifier

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptCommand.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSetCommand")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScriptSuiteRegistry(pointer: Long) : NSObject(pointer) {
    public open fun loadSuitesFromBundle(bundle: NSBundle): Unit {
        Native.objc_msgSend("void", this, "loadSuitesFromBundle:", bundle)
    }

    public open fun loadSuiteWithDictionary_fromBundle(suiteDeclaration: NSDictionary, bundle: NSBundle): Unit {
        Native.objc_msgSend("void", this, "loadSuiteWithDictionary:fromBundle:", suiteDeclaration, bundle)
    }

    public open fun registerClassDescription(classDescription: NSScriptClassDescription): Unit {
        Native.objc_msgSend("void", this, "registerClassDescription:", classDescription)
    }

    public open fun registerCommandDescription(commandDescription: NSScriptCommandDescription): Unit {
        Native.objc_msgSend("void", this, "registerCommandDescription:", commandDescription)
    }

    public open fun suiteNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "suiteNames") as NSArray

    public open fun appleEventCodeForSuite(suiteName: NSString): Int =
        Native.objc_msgSend("int", this, "appleEventCodeForSuite:", suiteName) as Int

    public open fun bundleForSuite(suiteName: NSString): NSBundle =
        Native.objc_msgSend("class objc.NSBundle", this, "bundleForSuite:", suiteName) as NSBundle

    public open fun classDescriptionsInSuite(suiteName: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "classDescriptionsInSuite:", suiteName) as NSDictionary

    public open fun commandDescriptionsInSuite(suiteName: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "commandDescriptionsInSuite:", suiteName) as NSDictionary

    public open fun suiteForAppleEventCode(appleEventCode: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "suiteForAppleEventCode:", appleEventCode) as NSString

    public open fun classDescriptionWithAppleEventCode(appleEventCode: Int): NSScriptClassDescription =
        Native.objc_msgSend("class objc.NSScriptClassDescription", this, "classDescriptionWithAppleEventCode:", appleEventCode) as NSScriptClassDescription

    public open fun commandDescriptionWithAppleEventClass_andAppleEventCode(appleEventClassCode: Int, appleEventIDCode: Int): NSScriptCommandDescription =
        Native.objc_msgSend("class objc.NSScriptCommandDescription", this, "commandDescriptionWithAppleEventClass:andAppleEventCode:", appleEventClassCode, appleEventIDCode) as NSScriptCommandDescription

    public open fun aeteResource(languageName: NSString): NSData =
        Native.objc_msgSend("class objc.NSData", this, "aeteResource:", languageName) as NSData

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun sharedScriptSuiteRegistry(): NSScriptSuiteRegistry =
            Native.objc_msgSend("class objc.NSScriptSuiteRegistry", this, "sharedScriptSuiteRegistry") as NSScriptSuiteRegistry

        public open fun setSharedScriptSuiteRegistry(registry: NSScriptSuiteRegistry): Unit {
            Native.objc_msgSend("void", this, "setSharedScriptSuiteRegistry:", registry)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSScriptSuiteRegistry")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScriptWhoseTest(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun isTrue(): Boolean =
        Native.objc_msgSend("boolean", this, "isTrue") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSScriptWhoseTest")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLogicalTest(pointer: Long) : NSScriptWhoseTest(pointer) {
    public open fun initAndTestWithTests(subTests: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initAndTestWithTests:", subTests) as ObjCObject

    public open fun initOrTestWithTests(subTests: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initOrTestWithTests:", subTests) as ObjCObject

    public open fun initNotTestWithTest(subTest: NSScriptWhoseTest): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initNotTestWithTest:", subTest) as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptWhoseTest.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSLogicalTest")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSpecifierTest(pointer: Long) : NSScriptWhoseTest(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(inCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", inCoder) as ObjCObject

    public open fun initWithObjectSpecifier_comparisonOperator_testObject(obj1: NSScriptObjectSpecifier, compOp: Any, obj2: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjectSpecifier:comparisonOperator:testObject:", obj1, compOp, obj2) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSScriptWhoseTest.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSpecifierTest")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSpellServer(pointer: Long) : NSObject(pointer) {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun registerLanguage_byVendor(language: NSString, vendor: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "registerLanguage:byVendor:", language, vendor) as Boolean

    public open fun isWordInUserDictionaries_caseSensitive(word: NSString, flag: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "isWordInUserDictionaries:caseSensitive:", word, flag) as Boolean

    public open fun run(): Unit {
        Native.objc_msgSend("void", this, "run")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSpellServer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserNotification(pointer: Long) : NSObject(pointer), NSCopying {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun subtitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "subtitle") as NSString

    public open fun setSubtitle(subtitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setSubtitle:", subtitle)
    }

    public open fun informativeText(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "informativeText") as NSString

    public open fun setInformativeText(informativeText: NSString): Unit {
        Native.objc_msgSend("void", this, "setInformativeText:", informativeText)
    }

    public open fun actionButtonTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "actionButtonTitle") as NSString

    public open fun setActionButtonTitle(actionButtonTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setActionButtonTitle:", actionButtonTitle)
    }

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun setUserInfo(userInfo: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setUserInfo:", userInfo)
    }

    public open fun deliveryDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "deliveryDate") as NSDate

    public open fun setDeliveryDate(deliveryDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setDeliveryDate:", deliveryDate)
    }

    public open fun deliveryTimeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "deliveryTimeZone") as NSTimeZone

    public open fun setDeliveryTimeZone(deliveryTimeZone: NSTimeZone): Unit {
        Native.objc_msgSend("void", this, "setDeliveryTimeZone:", deliveryTimeZone)
    }

    public open fun deliveryRepeatInterval(): NSDateComponents =
        Native.objc_msgSend("class objc.NSDateComponents", this, "deliveryRepeatInterval") as NSDateComponents

    public open fun setDeliveryRepeatInterval(deliveryRepeatInterval: NSDateComponents): Unit {
        Native.objc_msgSend("void", this, "setDeliveryRepeatInterval:", deliveryRepeatInterval)
    }

    public open fun actualDeliveryDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "actualDeliveryDate") as NSDate

    public open fun isPresented(): Boolean =
        Native.objc_msgSend("boolean", this, "isPresented") as Boolean

    public open fun isRemote(): Boolean =
        Native.objc_msgSend("boolean", this, "isRemote") as Boolean

    public open fun soundName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "soundName") as NSString

    public open fun setSoundName(soundName: NSString): Unit {
        Native.objc_msgSend("void", this, "setSoundName:", soundName)
    }

    public open fun hasActionButton(): Boolean =
        Native.objc_msgSend("boolean", this, "hasActionButton") as Boolean

    public open fun setHasActionButton(hasActionButton: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasActionButton:", hasActionButton)
    }

    public open fun activationType(): Any =
        Native.objc_msgSend("class objc.Any", this, "activationType")

    public open fun otherButtonTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "otherButtonTitle") as NSString

    public open fun setOtherButtonTitle(otherButtonTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setOtherButtonTitle:", otherButtonTitle)
    }

    public open fun identifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "identifier") as NSString

    public open fun setIdentifier(identifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setIdentifier:", identifier)
    }

    public open fun contentImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "contentImage") as NSImage

    public open fun setContentImage(contentImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setContentImage:", contentImage)
    }

    public open fun hasReplyButton(): Boolean =
        Native.objc_msgSend("boolean", this, "hasReplyButton") as Boolean

    public open fun setHasReplyButton(hasReplyButton: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasReplyButton:", hasReplyButton)
    }

    public open fun responsePlaceholder(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "responsePlaceholder") as NSString

    public open fun setResponsePlaceholder(responsePlaceholder: NSString): Unit {
        Native.objc_msgSend("void", this, "setResponsePlaceholder:", responsePlaceholder)
    }

    public open fun response(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "response") as NSAttributedString

    public open fun additionalActions(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "additionalActions") as NSArray

    public open fun setAdditionalActions(additionalActions: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAdditionalActions:", additionalActions)
    }

    public open fun additionalActivationAction(): NSUserNotificationAction =
        Native.objc_msgSend("class objc.NSUserNotificationAction", this, "additionalActivationAction") as NSUserNotificationAction

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSUserNotification")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserNotificationAction(pointer: Long) : NSObject(pointer), NSCopying {
    public open fun identifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "identifier") as NSString

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass {
        public open fun actionWithIdentifier_title(identifier: NSString, title: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "actionWithIdentifier:title:", identifier, title) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSUserNotificationAction")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserNotificationCenter(pointer: Long) : NSObject(pointer) {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun scheduledNotifications(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "scheduledNotifications") as NSArray

    public open fun setScheduledNotifications(scheduledNotifications: NSArray): Unit {
        Native.objc_msgSend("void", this, "setScheduledNotifications:", scheduledNotifications)
    }

    public open fun scheduleNotification(notification: NSUserNotification): Unit {
        Native.objc_msgSend("void", this, "scheduleNotification:", notification)
    }

    public open fun removeScheduledNotification(notification: NSUserNotification): Unit {
        Native.objc_msgSend("void", this, "removeScheduledNotification:", notification)
    }

    public open fun deliveredNotifications(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "deliveredNotifications") as NSArray

    public open fun deliverNotification(notification: NSUserNotification): Unit {
        Native.objc_msgSend("void", this, "deliverNotification:", notification)
    }

    public open fun removeDeliveredNotification(notification: NSUserNotification): Unit {
        Native.objc_msgSend("void", this, "removeDeliveredNotification:", notification)
    }

    public open fun removeAllDeliveredNotifications(): Unit {
        Native.objc_msgSend("void", this, "removeAllDeliveredNotifications")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun defaultUserNotificationCenter(): NSUserNotificationCenter =
            Native.objc_msgSend("class objc.NSUserNotificationCenter", this, "defaultUserNotificationCenter") as NSUserNotificationCenter

    }

    companion object : NSObject(Native.objc_getClass("NSUserNotificationCenter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserScriptTask(pointer: Long) : NSObject(pointer) {
    public open fun initWithURL_error(url: NSURL, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:error:", url, error) as ObjCObject

    public open fun scriptURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "scriptURL") as NSURL

    public open fun executeWithCompletionHandler(handler: Any): Unit {
        Native.objc_msgSend("void", this, "executeWithCompletionHandler:", handler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSUserScriptTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserUnixTask(pointer: Long) : NSUserScriptTask(pointer) {
    public open fun standardInput(): NSFileHandle =
        Native.objc_msgSend("class objc.NSFileHandle", this, "standardInput") as NSFileHandle

    public open fun setStandardInput(standardInput: NSFileHandle): Unit {
        Native.objc_msgSend("void", this, "setStandardInput:", standardInput)
    }

    public open fun standardOutput(): NSFileHandle =
        Native.objc_msgSend("class objc.NSFileHandle", this, "standardOutput") as NSFileHandle

    public open fun setStandardOutput(standardOutput: NSFileHandle): Unit {
        Native.objc_msgSend("void", this, "setStandardOutput:", standardOutput)
    }

    public open fun standardError(): NSFileHandle =
        Native.objc_msgSend("class objc.NSFileHandle", this, "standardError") as NSFileHandle

    public open fun setStandardError(standardError: NSFileHandle): Unit {
        Native.objc_msgSend("void", this, "setStandardError:", standardError)
    }

    public open fun executeWithArguments_completionHandler(arguments: NSArray, handler: Any): Unit {
        Native.objc_msgSend("void", this, "executeWithArguments:completionHandler:", arguments, handler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSUserScriptTask.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSUserUnixTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserAppleScriptTask(pointer: Long) : NSUserScriptTask(pointer) {
    public open fun executeWithAppleEvent_completionHandler(event: NSAppleEventDescriptor, handler: Any): Unit {
        Native.objc_msgSend("void", this, "executeWithAppleEvent:completionHandler:", event, handler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSUserScriptTask.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSUserAppleScriptTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserAutomatorTask(pointer: Long) : NSUserScriptTask(pointer) {
    public open fun variables(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "variables") as NSDictionary

    public open fun setVariables(variables: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setVariables:", variables)
    }

    public open fun executeWithInput_completionHandler(input: Any, handler: Any): Unit {
        Native.objc_msgSend("void", this, "executeWithInput:completionHandler:", input, handler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSUserScriptTask.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSUserAutomatorTask")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXPCConnection(pointer: Long) : NSObject(pointer), NSXPCProxyCreating {
    public open fun initWithServiceName(serviceName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithServiceName:", serviceName) as ObjCObject

    public open fun serviceName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "serviceName") as NSString

    public open fun initWithMachServiceName_options(name: NSString, options: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithMachServiceName:options:", name, options) as ObjCObject

    public open fun initWithListenerEndpoint(endpoint: NSXPCListenerEndpoint): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithListenerEndpoint:", endpoint) as ObjCObject

    public open fun endpoint(): NSXPCListenerEndpoint =
        Native.objc_msgSend("class objc.NSXPCListenerEndpoint", this, "endpoint") as NSXPCListenerEndpoint

    public open fun exportedInterface(): NSXPCInterface =
        Native.objc_msgSend("class objc.NSXPCInterface", this, "exportedInterface") as NSXPCInterface

    public open fun setExportedInterface(exportedInterface: NSXPCInterface): Unit {
        Native.objc_msgSend("void", this, "setExportedInterface:", exportedInterface)
    }

    public open fun exportedObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "exportedObject") as ObjCObject

    public open fun setExportedObject(exportedObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setExportedObject:", exportedObject)
    }

    public open fun remoteObjectInterface(): NSXPCInterface =
        Native.objc_msgSend("class objc.NSXPCInterface", this, "remoteObjectInterface") as NSXPCInterface

    public open fun setRemoteObjectInterface(remoteObjectInterface: NSXPCInterface): Unit {
        Native.objc_msgSend("void", this, "setRemoteObjectInterface:", remoteObjectInterface)
    }

    public open fun remoteObjectProxy(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "remoteObjectProxy") as ObjCObject

    public open fun remoteObjectProxyWithErrorHandler(handler: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "remoteObjectProxyWithErrorHandler:", handler) as ObjCObject

    public open fun interruptionHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "interruptionHandler")

    public open fun setInterruptionHandler(interruptionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setInterruptionHandler:", interruptionHandler)
    }

    public open fun invalidationHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "invalidationHandler")

    public open fun setInvalidationHandler(invalidationHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setInvalidationHandler:", invalidationHandler)
    }

    public open fun resume(): Unit {
        Native.objc_msgSend("void", this, "resume")
    }

    public open fun suspend(): Unit {
        Native.objc_msgSend("void", this, "suspend")
    }

    public open fun invalidate(): Unit {
        Native.objc_msgSend("void", this, "invalidate")
    }

    public open fun auditSessionIdentifier(): Int =
        Native.objc_msgSend("int", this, "auditSessionIdentifier") as Int

    public open fun processIdentifier(): Int =
        Native.objc_msgSend("int", this, "processIdentifier") as Int

    public open fun effectiveUserIdentifier(): Int =
        Native.objc_msgSend("int", this, "effectiveUserIdentifier") as Int

    public open fun effectiveGroupIdentifier(): Int =
        Native.objc_msgSend("int", this, "effectiveGroupIdentifier") as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSXPCProxyCreating.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSXPCConnection")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXPCListener(pointer: Long) : NSObject(pointer) {
    public open fun initWithMachServiceName(name: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithMachServiceName:", name) as ObjCObject

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun endpoint(): NSXPCListenerEndpoint =
        Native.objc_msgSend("class objc.NSXPCListenerEndpoint", this, "endpoint") as NSXPCListenerEndpoint

    public open fun resume(): Unit {
        Native.objc_msgSend("void", this, "resume")
    }

    public open fun suspend(): Unit {
        Native.objc_msgSend("void", this, "suspend")
    }

    public open fun invalidate(): Unit {
        Native.objc_msgSend("void", this, "invalidate")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun serviceListener(): NSXPCListener =
            Native.objc_msgSend("class objc.NSXPCListener", this, "serviceListener") as NSXPCListener

        public open fun anonymousListener(): NSXPCListener =
            Native.objc_msgSend("class objc.NSXPCListener", this, "anonymousListener") as NSXPCListener

    }

    companion object : NSObject(Native.objc_getClass("NSXPCListener")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXPCInterface(pointer: Long) : NSObject(pointer) {
    public open fun protocol(): Any? =
        Native.objc_msgSend("class objc.Any?", this, "protocol") as Any?

    public open fun setProtocol(protocol: Any?): Unit {
        Native.objc_msgSend("void", this, "setProtocol:", protocol)
    }

    public open fun setClasses_forSelector_argumentIndex_ofReply(classes: NSSet, sel: ObjCSelector, arg: Int, ofReply: Boolean): Unit {
        Native.objc_msgSend("void", this, "setClasses:forSelector:argumentIndex:ofReply:", classes, sel, arg, ofReply)
    }

    public open fun classesForSelector_argumentIndex_ofReply(sel: ObjCSelector, arg: Int, ofReply: Boolean): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "classesForSelector:argumentIndex:ofReply:", sel, arg, ofReply) as NSSet

    public open fun setInterface_forSelector_argumentIndex_ofReply(ifc: NSXPCInterface, sel: ObjCSelector, arg: Int, ofReply: Boolean): Unit {
        Native.objc_msgSend("void", this, "setInterface:forSelector:argumentIndex:ofReply:", ifc, sel, arg, ofReply)
    }

    public open fun interfaceForSelector_argumentIndex_ofReply(sel: ObjCSelector, arg: Int, ofReply: Boolean): NSXPCInterface =
        Native.objc_msgSend("class objc.NSXPCInterface", this, "interfaceForSelector:argumentIndex:ofReply:", sel, arg, ofReply) as NSXPCInterface

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun interfaceWithProtocol(protocol: Any?): NSXPCInterface =
            Native.objc_msgSend("class objc.NSXPCInterface", this, "interfaceWithProtocol:", protocol) as NSXPCInterface

    }

    companion object : NSObject(Native.objc_getClass("NSXPCInterface")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSXPCListenerEndpoint(pointer: Long) : NSObject(pointer), NSSecureCoding {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSXPCListenerEndpoint")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSGraphicsContext(pointer: Long) : NSObject(pointer), NSGraphicsContext_NSGraphicsContext_RenderingOptions, NSGraphicsContext_NSQuartzCoreAdditions, NSGraphicsContext_NSGraphicsContextDeprecated {
    public open fun attributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "attributes") as NSDictionary

    public open fun isDrawingToScreen(): Boolean =
        Native.objc_msgSend("boolean", this, "isDrawingToScreen") as Boolean

    public open fun saveGraphicsState(): Unit {
        Native.objc_msgSend("void", this, "saveGraphicsState")
    }

    public open fun restoreGraphicsState(): Unit {
        Native.objc_msgSend("void", this, "restoreGraphicsState")
    }

    public open fun flushGraphics(): Unit {
        Native.objc_msgSend("void", this, "flushGraphics")
    }

    public open fun CGContext(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGContext") as Pointer<Any>

    public open fun isFlipped(): Boolean =
        Native.objc_msgSend("boolean", this, "isFlipped") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSGraphicsContext_NSGraphicsContext_RenderingOptions.metaclass, NSGraphicsContext_NSQuartzCoreAdditions.metaclass, NSGraphicsContext_NSGraphicsContextDeprecated.metaclass {
        public open fun graphicsContextWithAttributes(attributes: NSDictionary): NSGraphicsContext =
            Native.objc_msgSend("class objc.NSGraphicsContext", this, "graphicsContextWithAttributes:", attributes) as NSGraphicsContext

        public open fun graphicsContextWithWindow(window: NSWindow): NSGraphicsContext =
            Native.objc_msgSend("class objc.NSGraphicsContext", this, "graphicsContextWithWindow:", window) as NSGraphicsContext

        public open fun graphicsContextWithBitmapImageRep(bitmapRep: NSBitmapImageRep): NSGraphicsContext =
            Native.objc_msgSend("class objc.NSGraphicsContext", this, "graphicsContextWithBitmapImageRep:", bitmapRep) as NSGraphicsContext

        public open fun graphicsContextWithCGContext_flipped(graphicsPort: Pointer<Any>, initialFlippedState: Boolean): NSGraphicsContext =
            Native.objc_msgSend("class objc.NSGraphicsContext", this, "graphicsContextWithCGContext:flipped:", graphicsPort, initialFlippedState) as NSGraphicsContext

        public open fun currentContext(): NSGraphicsContext =
            Native.objc_msgSend("class objc.NSGraphicsContext", this, "currentContext") as NSGraphicsContext

        public open fun setCurrentContext(context: NSGraphicsContext): Unit {
            Native.objc_msgSend("void", this, "setCurrentContext:", context)
        }

        public open fun currentContextDrawingToScreen(): Boolean =
            Native.objc_msgSend("boolean", this, "currentContextDrawingToScreen") as Boolean

        public open fun saveGraphicsState(): Unit {
            Native.objc_msgSend("void", this, "saveGraphicsState")
        }

        public open fun restoreGraphicsState(): Unit {
            Native.objc_msgSend("void", this, "restoreGraphicsState")
        }

    }

    companion object : NSObject(Native.objc_getClass("NSGraphicsContext")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAccessibilityElement(pointer: Long) : NSObject(pointer), NSAccessibility {
    public open fun accessibilityAddChildElement(childElement: NSAccessibilityElement): Unit {
        Native.objc_msgSend("void", this, "accessibilityAddChildElement:", childElement)
    }

    public open fun accessibilityFrameInParentSpace(): Any =
        Native.objc_msgSend("class objc.Any", this, "accessibilityFrameInParentSpace")

    public open fun setAccessibilityFrameInParentSpace(accessibilityFrameInParentSpace: Any): Unit {
        Native.objc_msgSend("void", this, "setAccessibilityFrameInParentSpace:", accessibilityFrameInParentSpace)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSAccessibility.metaclass {
        public open fun accessibilityElementWithRole_frame_label_parent(role: NSString, frame: Any, label: NSString, parent: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "accessibilityElementWithRole:frame:label:parent:", role, frame, label, parent) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSAccessibilityElement")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSWorkspace(pointer: Long) : NSObject(pointer), NSWorkspace_NSDesktopImages, NSWorkspace_NSDeprecated, NSWorkspace_NSWorkspaceAccessibilityDisplay, NSWorkspace_NSWorkspaceRunningApplications {
    public open fun notificationCenter(): NSNotificationCenter =
        Native.objc_msgSend("class objc.NSNotificationCenter", this, "notificationCenter") as NSNotificationCenter

    public open fun openFile(fullPath: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "openFile:", fullPath) as Boolean

    public open fun openFile_withApplication(fullPath: NSString, appName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "openFile:withApplication:", fullPath, appName) as Boolean

    public open fun openFile_withApplication_andDeactivate(fullPath: NSString, appName: NSString, flag: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "openFile:withApplication:andDeactivate:", fullPath, appName, flag) as Boolean

    public open fun openFile_fromImage_at_inView(fullPath: NSString, anImage: NSImage, point: Any, aView: NSView): Boolean =
        Native.objc_msgSend("boolean", this, "openFile:fromImage:at:inView:", fullPath, anImage, point, aView) as Boolean

    public open fun openURL(url: NSURL): Boolean =
        Native.objc_msgSend("boolean", this, "openURL:", url) as Boolean

    public open fun launchApplication(appName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "launchApplication:", appName) as Boolean

    public open fun launchApplicationAtURL_options_configuration_error(url: NSURL, options: Any, configuration: NSDictionary, error: Pointer<NSError>): NSRunningApplication =
        Native.objc_msgSend("class objc.NSRunningApplication", this, "launchApplicationAtURL:options:configuration:error:", url, options, configuration, error) as NSRunningApplication

    public open fun openURL_options_configuration_error(url: NSURL, options: Any, configuration: NSDictionary, error: Pointer<NSError>): NSRunningApplication =
        Native.objc_msgSend("class objc.NSRunningApplication", this, "openURL:options:configuration:error:", url, options, configuration, error) as NSRunningApplication

    public open fun openURLs_withApplicationAtURL_options_configuration_error(urls: NSArray, applicationURL: NSURL, options: Any, configuration: NSDictionary, error: Pointer<NSError>): NSRunningApplication =
        Native.objc_msgSend("class objc.NSRunningApplication", this, "openURLs:withApplicationAtURL:options:configuration:error:", urls, applicationURL, options, configuration, error) as NSRunningApplication

    public open fun launchApplication_showIcon_autolaunch(appName: NSString, showIcon: Boolean, autolaunch: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "launchApplication:showIcon:autolaunch:", appName, showIcon, autolaunch) as Boolean

    public open fun fullPathForApplication(appName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fullPathForApplication:", appName) as NSString

    public open fun selectFile_inFileViewerRootedAtPath(fullPath: NSString, rootFullPath: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "selectFile:inFileViewerRootedAtPath:", fullPath, rootFullPath) as Boolean

    public open fun activateFileViewerSelectingURLs(fileURLs: NSArray): Unit {
        Native.objc_msgSend("void", this, "activateFileViewerSelectingURLs:", fileURLs)
    }

    public open fun showSearchResultsForQueryString(queryString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "showSearchResultsForQueryString:", queryString) as Boolean

    public open fun noteFileSystemChanged(path: NSString): Unit {
        Native.objc_msgSend("void", this, "noteFileSystemChanged:", path)
    }

    public open fun getInfoForFile_application_type(fullPath: NSString, appName: Pointer<NSString>, type: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "getInfoForFile:application:type:", fullPath, appName, type) as Boolean

    public open fun isFilePackageAtPath(fullPath: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isFilePackageAtPath:", fullPath) as Boolean

    public open fun iconForFile(fullPath: NSString): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "iconForFile:", fullPath) as NSImage

    public open fun iconForFiles(fullPaths: NSArray): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "iconForFiles:", fullPaths) as NSImage

    public open fun iconForFileType(fileType: NSString): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "iconForFileType:", fileType) as NSImage

    public open fun setIcon_forFile_options(image: NSImage, fullPath: NSString, options: Any): Boolean =
        Native.objc_msgSend("boolean", this, "setIcon:forFile:options:", image, fullPath, options) as Boolean

    public open fun fileLabels(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "fileLabels") as NSArray

    public open fun fileLabelColors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "fileLabelColors") as NSArray

    public open fun recycleURLs_completionHandler(URLs: NSArray, handler: Any): Unit {
        Native.objc_msgSend("void", this, "recycleURLs:completionHandler:", URLs, handler)
    }

    public open fun duplicateURLs_completionHandler(URLs: NSArray, handler: Any): Unit {
        Native.objc_msgSend("void", this, "duplicateURLs:completionHandler:", URLs, handler)
    }

    public open fun getFileSystemInfoForPath_isRemovable_isWritable_isUnmountable_description_type(fullPath: NSString, removableFlag: Pointer<Boolean>, writableFlag: Pointer<Boolean>, unmountableFlag: Pointer<Boolean>, description: Pointer<NSString>, fileSystemType: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:", fullPath, removableFlag, writableFlag, unmountableFlag, description, fileSystemType) as Boolean

    public open fun performFileOperation_source_destination_files_tag(operation: NSString, source: NSString, destination: NSString, files: NSArray, tag: Pointer<Int>): Boolean =
        Native.objc_msgSend("boolean", this, "performFileOperation:source:destination:files:tag:", operation, source, destination, files, tag) as Boolean

    public open fun unmountAndEjectDeviceAtPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "unmountAndEjectDeviceAtPath:", path) as Boolean

    public open fun unmountAndEjectDeviceAtURL_error(url: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "unmountAndEjectDeviceAtURL:error:", url, error) as Boolean

    public open fun extendPowerOffBy(requested: Int): Int =
        Native.objc_msgSend("int", this, "extendPowerOffBy:", requested) as Int

    public open fun hideOtherApplications(): Unit {
        Native.objc_msgSend("void", this, "hideOtherApplications")
    }

    public open fun URLForApplicationWithBundleIdentifier(bundleIdentifier: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForApplicationWithBundleIdentifier:", bundleIdentifier) as NSURL

    public open fun URLForApplicationToOpenURL(url: NSURL): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForApplicationToOpenURL:", url) as NSURL

    public open fun absolutePathForAppBundleWithIdentifier(bundleIdentifier: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "absolutePathForAppBundleWithIdentifier:", bundleIdentifier) as NSString

    public open fun launchAppWithBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifier(bundleIdentifier: NSString, options: Any, descriptor: NSAppleEventDescriptor, identifier: Pointer<NSNumber>): Boolean =
        Native.objc_msgSend("boolean", this, "launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:", bundleIdentifier, options, descriptor, identifier) as Boolean

    public open fun openURLs_withAppBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifiers(urls: NSArray, bundleIdentifier: NSString, options: Any, descriptor: NSAppleEventDescriptor, identifiers: Pointer<NSArray>): Boolean =
        Native.objc_msgSend("boolean", this, "openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:", urls, bundleIdentifier, options, descriptor, identifiers) as Boolean

    public open fun frontmostApplication(): NSRunningApplication =
        Native.objc_msgSend("class objc.NSRunningApplication", this, "frontmostApplication") as NSRunningApplication

    public open fun menuBarOwningApplication(): NSRunningApplication =
        Native.objc_msgSend("class objc.NSRunningApplication", this, "menuBarOwningApplication") as NSRunningApplication

    public open fun typeOfFile_error(absoluteFilePath: NSString, outError: Pointer<NSError>): NSString =
        Native.objc_msgSend("class objc.NSString", this, "typeOfFile:error:", absoluteFilePath, outError) as NSString

    public open fun localizedDescriptionForType(typeName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedDescriptionForType:", typeName) as NSString

    public open fun preferredFilenameExtensionForType(typeName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "preferredFilenameExtensionForType:", typeName) as NSString

    public open fun filenameExtension_isValidForType(filenameExtension: NSString, typeName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "filenameExtension:isValidForType:", filenameExtension, typeName) as Boolean

    public open fun type_conformsToType(firstTypeName: NSString, secondTypeName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "type:conformsToType:", firstTypeName, secondTypeName) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSWorkspace_NSDesktopImages.metaclass, NSWorkspace_NSDeprecated.metaclass, NSWorkspace_NSWorkspaceAccessibilityDisplay.metaclass, NSWorkspace_NSWorkspaceRunningApplications.metaclass {
        public open fun sharedWorkspace(): NSWorkspace =
            Native.objc_msgSend("class objc.NSWorkspace", this, "sharedWorkspace") as NSWorkspace

    }

    companion object : NSObject(Native.objc_getClass("NSWorkspace")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTouch(pointer: Long) : NSObject(pointer), NSCopying {
    public open fun identity(): Any =
        Native.objc_msgSend("class objc.Any", this, "identity")

    public open fun phase(): Any =
        Native.objc_msgSend("class objc.Any", this, "phase")

    public open fun normalizedPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "normalizedPosition")

    public open fun isResting(): Boolean =
        Native.objc_msgSend("boolean", this, "isResting") as Boolean

    public open fun device(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "device") as ObjCObject

    public open fun deviceSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "deviceSize")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTouch")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSEvent(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun type(): Any =
        Native.objc_msgSend("class objc.Any", this, "type")

    public open fun modifierFlags(): Any =
        Native.objc_msgSend("class objc.Any", this, "modifierFlags")

    public open fun timestamp(): Double =
        Native.objc_msgSend("double", this, "timestamp") as Double

    public open fun window(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "window") as NSWindow

    public open fun windowNumber(): Int =
        Native.objc_msgSend("int", this, "windowNumber") as Int

    public open fun context(): NSGraphicsContext =
        Native.objc_msgSend("class objc.NSGraphicsContext", this, "context") as NSGraphicsContext

    public open fun clickCount(): Int =
        Native.objc_msgSend("int", this, "clickCount") as Int

    public open fun buttonNumber(): Int =
        Native.objc_msgSend("int", this, "buttonNumber") as Int

    public open fun eventNumber(): Int =
        Native.objc_msgSend("int", this, "eventNumber") as Int

    public open fun pressure(): Float =
        Native.objc_msgSend("float", this, "pressure") as Float

    public open fun locationInWindow(): Any =
        Native.objc_msgSend("class objc.Any", this, "locationInWindow")

    public open fun deltaX(): Double =
        Native.objc_msgSend("double", this, "deltaX") as Double

    public open fun deltaY(): Double =
        Native.objc_msgSend("double", this, "deltaY") as Double

    public open fun deltaZ(): Double =
        Native.objc_msgSend("double", this, "deltaZ") as Double

    public open fun hasPreciseScrollingDeltas(): Boolean =
        Native.objc_msgSend("boolean", this, "hasPreciseScrollingDeltas") as Boolean

    public open fun scrollingDeltaX(): Double =
        Native.objc_msgSend("double", this, "scrollingDeltaX") as Double

    public open fun scrollingDeltaY(): Double =
        Native.objc_msgSend("double", this, "scrollingDeltaY") as Double

    public open fun momentumPhase(): Any =
        Native.objc_msgSend("class objc.Any", this, "momentumPhase")

    public open fun isDirectionInvertedFromDevice(): Boolean =
        Native.objc_msgSend("boolean", this, "isDirectionInvertedFromDevice") as Boolean

    public open fun characters(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "characters") as NSString

    public open fun charactersIgnoringModifiers(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "charactersIgnoringModifiers") as NSString

    public open fun isARepeat(): Boolean =
        Native.objc_msgSend("boolean", this, "isARepeat") as Boolean

    public open fun keyCode(): Short =
        Native.objc_msgSend("short", this, "keyCode") as Short

    public open fun trackingNumber(): Int =
        Native.objc_msgSend("int", this, "trackingNumber") as Int

    public open fun userData(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "userData") as Pointer<*>

    public open fun trackingArea(): NSTrackingArea =
        Native.objc_msgSend("class objc.NSTrackingArea", this, "trackingArea") as NSTrackingArea

    public open fun subtype(): Any =
        Native.objc_msgSend("class objc.Any", this, "subtype")

    public open fun data1(): Int =
        Native.objc_msgSend("int", this, "data1") as Int

    public open fun data2(): Int =
        Native.objc_msgSend("int", this, "data2") as Int

    public open fun eventRef(): Pointer<Unit> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "eventRef") as Pointer<Unit>

    public open fun CGEvent(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGEvent") as Pointer<Any>

    public open fun magnification(): Double =
        Native.objc_msgSend("double", this, "magnification") as Double

    public open fun deviceID(): Int =
        Native.objc_msgSend("int", this, "deviceID") as Int

    public open fun rotation(): Float =
        Native.objc_msgSend("float", this, "rotation") as Float

    public open fun absoluteX(): Int =
        Native.objc_msgSend("int", this, "absoluteX") as Int

    public open fun absoluteY(): Int =
        Native.objc_msgSend("int", this, "absoluteY") as Int

    public open fun absoluteZ(): Int =
        Native.objc_msgSend("int", this, "absoluteZ") as Int

    public open fun buttonMask(): Any =
        Native.objc_msgSend("class objc.Any", this, "buttonMask")

    public open fun tilt(): Any =
        Native.objc_msgSend("class objc.Any", this, "tilt")

    public open fun tangentialPressure(): Float =
        Native.objc_msgSend("float", this, "tangentialPressure") as Float

    public open fun vendorDefined(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "vendorDefined") as ObjCObject

    public open fun vendorID(): Int =
        Native.objc_msgSend("int", this, "vendorID") as Int

    public open fun tabletID(): Int =
        Native.objc_msgSend("int", this, "tabletID") as Int

    public open fun pointingDeviceID(): Int =
        Native.objc_msgSend("int", this, "pointingDeviceID") as Int

    public open fun systemTabletID(): Int =
        Native.objc_msgSend("int", this, "systemTabletID") as Int

    public open fun vendorPointingDeviceType(): Int =
        Native.objc_msgSend("int", this, "vendorPointingDeviceType") as Int

    public open fun pointingDeviceSerialNumber(): Int =
        Native.objc_msgSend("int", this, "pointingDeviceSerialNumber") as Int

    public open fun uniqueID(): Long =
        Native.objc_msgSend("long", this, "uniqueID") as Long

    public open fun capabilityMask(): Int =
        Native.objc_msgSend("int", this, "capabilityMask") as Int

    public open fun pointingDeviceType(): Any =
        Native.objc_msgSend("class objc.Any", this, "pointingDeviceType")

    public open fun isEnteringProximity(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnteringProximity") as Boolean

    public open fun touchesMatchingPhase_inView(phase: Any, view: NSView): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "touchesMatchingPhase:inView:", phase, view) as NSSet

    public open fun phase(): Any =
        Native.objc_msgSend("class objc.Any", this, "phase")

    public open fun stage(): Int =
        Native.objc_msgSend("int", this, "stage") as Int

    public open fun stageTransition(): Double =
        Native.objc_msgSend("double", this, "stageTransition") as Double

    public open fun associatedEventsMask(): Any =
        Native.objc_msgSend("class objc.Any", this, "associatedEventsMask")

    public open fun trackSwipeEventWithOptions_dampenAmountThresholdMin_max_usingHandler(options: Any, minDampenThreshold: Double, maxDampenThreshold: Double, trackingHandler: Any): Unit {
        Native.objc_msgSend("void", this, "trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:", options, minDampenThreshold, maxDampenThreshold, trackingHandler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
        public open fun eventWithEventRef(eventRef: Pointer<Unit>): NSEvent =
            Native.objc_msgSend("class objc.NSEvent", this, "eventWithEventRef:", eventRef) as NSEvent

        public open fun eventWithCGEvent(cgEvent: Pointer<Any>): NSEvent =
            Native.objc_msgSend("class objc.NSEvent", this, "eventWithCGEvent:", cgEvent) as NSEvent

        public open fun setMouseCoalescingEnabled(flag: Boolean): Unit {
            Native.objc_msgSend("void", this, "setMouseCoalescingEnabled:", flag)
        }

        public open fun isMouseCoalescingEnabled(): Boolean =
            Native.objc_msgSend("boolean", this, "isMouseCoalescingEnabled") as Boolean

        public open fun isSwipeTrackingFromScrollEventsEnabled(): Boolean =
            Native.objc_msgSend("boolean", this, "isSwipeTrackingFromScrollEventsEnabled") as Boolean

        public open fun startPeriodicEventsAfterDelay_withPeriod(delay: Double, period: Double): Unit {
            Native.objc_msgSend("void", this, "startPeriodicEventsAfterDelay:withPeriod:", delay, period)
        }

        public open fun stopPeriodicEvents(): Unit {
            Native.objc_msgSend("void", this, "stopPeriodicEvents")
        }

        public open fun mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure(type: Any, location: Any, flags: Any, time: Double, wNum: Int, context: NSGraphicsContext, eNum: Int, cNum: Int, pressure: Float): NSEvent =
            Native.objc_msgSend("class objc.NSEvent", this, "mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:", type, location, flags, time, wNum, context, eNum, cNum, pressure) as NSEvent

        public open fun keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode(type: Any, location: Any, flags: Any, time: Double, wNum: Int, context: NSGraphicsContext, keys: NSString, ukeys: NSString, flag: Boolean, code: Short): NSEvent =
            Native.objc_msgSend("class objc.NSEvent", this, "keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:", type, location, flags, time, wNum, context, keys, ukeys, flag, code) as NSEvent

        public open fun enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData(type: Any, location: Any, flags: Any, time: Double, wNum: Int, context: NSGraphicsContext, eNum: Int, tNum: Int, data: Pointer<*>): NSEvent =
            Native.objc_msgSend("class objc.NSEvent", this, "enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:", type, location, flags, time, wNum, context, eNum, tNum, data) as NSEvent

        public open fun otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2(type: Any, location: Any, flags: Any, time: Double, wNum: Int, context: NSGraphicsContext, subtype: Short, d1: Int, d2: Int): NSEvent =
            Native.objc_msgSend("class objc.NSEvent", this, "otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:", type, location, flags, time, wNum, context, subtype, d1, d2) as NSEvent

        public open fun mouseLocation(): Any =
            Native.objc_msgSend("class objc.Any", this, "mouseLocation")

        public open fun modifierFlags(): Any =
            Native.objc_msgSend("class objc.Any", this, "modifierFlags")

        public open fun pressedMouseButtons(): Int =
            Native.objc_msgSend("int", this, "pressedMouseButtons") as Int

        public open fun doubleClickInterval(): Double =
            Native.objc_msgSend("double", this, "doubleClickInterval") as Double

        public open fun keyRepeatDelay(): Double =
            Native.objc_msgSend("double", this, "keyRepeatDelay") as Double

        public open fun keyRepeatInterval(): Double =
            Native.objc_msgSend("double", this, "keyRepeatInterval") as Double

        public open fun addGlobalMonitorForEventsMatchingMask_handler(mask: Any, block: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "addGlobalMonitorForEventsMatchingMask:handler:", mask, block) as ObjCObject

        public open fun addLocalMonitorForEventsMatchingMask_handler(mask: Any, block: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "addLocalMonitorForEventsMatchingMask:handler:", mask, block) as ObjCObject

        public open fun removeMonitor(eventMonitor: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "removeMonitor:", eventMonitor)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSEvent")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSResponder(pointer: Long) : NSObject(pointer), NSCoding, NSResponder_NSStandardKeyBindingMethods, NSResponder_NSUndoSupport, NSResponder_NSControlEditingSupport, NSResponder_NSErrorPresentation, NSResponder_NSTextFinderSupport, NSResponder_NSDeprecated, NSResponder_NSUserActivity, NSResponder_NSInterfaceStyle, NSResponder_NSRestorableState {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun nextResponder(): NSResponder =
        Native.objc_msgSend("class objc.NSResponder", this, "nextResponder") as NSResponder

    public open fun setNextResponder(nextResponder: NSResponder): Unit {
        Native.objc_msgSend("void", this, "setNextResponder:", nextResponder)
    }

    public open fun tryToPerform_with(anAction: ObjCSelector, anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "tryToPerform:with:", anAction, anObject) as Boolean

    public open fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    public open fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    public open fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    public open fun rightMouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rightMouseDown:", theEvent)
    }

    public open fun otherMouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "otherMouseDown:", theEvent)
    }

    public open fun mouseUp(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseUp:", theEvent)
    }

    public open fun rightMouseUp(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rightMouseUp:", theEvent)
    }

    public open fun otherMouseUp(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "otherMouseUp:", theEvent)
    }

    public open fun mouseMoved(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseMoved:", theEvent)
    }

    public open fun mouseDragged(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDragged:", theEvent)
    }

    public open fun scrollWheel(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "scrollWheel:", theEvent)
    }

    public open fun rightMouseDragged(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rightMouseDragged:", theEvent)
    }

    public open fun otherMouseDragged(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "otherMouseDragged:", theEvent)
    }

    public open fun mouseEntered(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseEntered:", theEvent)
    }

    public open fun mouseExited(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseExited:", theEvent)
    }

    public open fun keyDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyDown:", theEvent)
    }

    public open fun keyUp(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyUp:", theEvent)
    }

    public open fun flagsChanged(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "flagsChanged:", theEvent)
    }

    public open fun tabletPoint(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "tabletPoint:", theEvent)
    }

    public open fun tabletProximity(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "tabletProximity:", theEvent)
    }

    public open fun cursorUpdate(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "cursorUpdate:", event)
    }

    public open fun magnifyWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "magnifyWithEvent:", event)
    }

    public open fun rotateWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rotateWithEvent:", event)
    }

    public open fun swipeWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "swipeWithEvent:", event)
    }

    public open fun beginGestureWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "beginGestureWithEvent:", event)
    }

    public open fun endGestureWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "endGestureWithEvent:", event)
    }

    public open fun smartMagnifyWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "smartMagnifyWithEvent:", event)
    }

    public open fun touchesBeganWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "touchesBeganWithEvent:", event)
    }

    public open fun touchesMovedWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "touchesMovedWithEvent:", event)
    }

    public open fun touchesEndedWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "touchesEndedWithEvent:", event)
    }

    public open fun touchesCancelledWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "touchesCancelledWithEvent:", event)
    }

    public open fun quickLookWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "quickLookWithEvent:", event)
    }

    public open fun pressureChangeWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "pressureChangeWithEvent:", event)
    }

    public open fun noResponderFor(eventSelector: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "noResponderFor:", eventSelector)
    }

    public open fun acceptsFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstResponder") as Boolean

    public open fun becomeFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "becomeFirstResponder") as Boolean

    public open fun resignFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "resignFirstResponder") as Boolean

    public open fun interpretKeyEvents(eventArray: NSArray): Unit {
        Native.objc_msgSend("void", this, "interpretKeyEvents:", eventArray)
    }

    public open fun flushBufferedKeyEvents(): Unit {
        Native.objc_msgSend("void", this, "flushBufferedKeyEvents")
    }

    public open fun menu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menu") as NSMenu

    public open fun setMenu(menu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setMenu:", menu)
    }

    public open fun showContextHelp(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "showContextHelp:", sender)
    }

    public open fun helpRequested(eventPtr: NSEvent): Unit {
        Native.objc_msgSend("void", this, "helpRequested:", eventPtr)
    }

    public open fun shouldBeTreatedAsInkEvent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBeTreatedAsInkEvent:", theEvent) as Boolean

    public open fun wantsScrollEventsForSwipeTrackingOnAxis(axis: Any): Boolean =
        Native.objc_msgSend("boolean", this, "wantsScrollEventsForSwipeTrackingOnAxis:", axis) as Boolean

    public open fun wantsForwardedScrollEventsForAxis(axis: Any): Boolean =
        Native.objc_msgSend("boolean", this, "wantsForwardedScrollEventsForAxis:", axis) as Boolean

    public open fun supplementalTargetForAction_sender(action: ObjCSelector, sender: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "supplementalTargetForAction:sender:", action, sender) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSResponder_NSStandardKeyBindingMethods.metaclass, NSResponder_NSUndoSupport.metaclass, NSResponder_NSControlEditingSupport.metaclass, NSResponder_NSErrorPresentation.metaclass, NSResponder_NSTextFinderSupport.metaclass, NSResponder_NSDeprecated.metaclass, NSResponder_NSUserActivity.metaclass, NSResponder_NSInterfaceStyle.metaclass, NSResponder_NSRestorableState.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSResponder")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRunningApplication(pointer: Long) : NSObject(pointer) {
    public open fun isTerminated(): Boolean =
        Native.objc_msgSend("boolean", this, "isTerminated") as Boolean

    public open fun isFinishedLaunching(): Boolean =
        Native.objc_msgSend("boolean", this, "isFinishedLaunching") as Boolean

    public open fun isHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "isHidden") as Boolean

    public open fun isActive(): Boolean =
        Native.objc_msgSend("boolean", this, "isActive") as Boolean

    public open fun ownsMenuBar(): Boolean =
        Native.objc_msgSend("boolean", this, "ownsMenuBar") as Boolean

    public open fun activationPolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "activationPolicy")

    public open fun localizedName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedName") as NSString

    public open fun bundleIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "bundleIdentifier") as NSString

    public open fun bundleURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "bundleURL") as NSURL

    public open fun executableURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "executableURL") as NSURL

    public open fun processIdentifier(): Int =
        Native.objc_msgSend("int", this, "processIdentifier") as Int

    public open fun launchDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "launchDate") as NSDate

    public open fun icon(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "icon") as NSImage

    public open fun executableArchitecture(): Int =
        Native.objc_msgSend("int", this, "executableArchitecture") as Int

    public open fun hide(): Boolean =
        Native.objc_msgSend("boolean", this, "hide") as Boolean

    public open fun unhide(): Boolean =
        Native.objc_msgSend("boolean", this, "unhide") as Boolean

    public open fun activateWithOptions(options: Any): Boolean =
        Native.objc_msgSend("boolean", this, "activateWithOptions:", options) as Boolean

    public open fun terminate(): Boolean =
        Native.objc_msgSend("boolean", this, "terminate") as Boolean

    public open fun forceTerminate(): Boolean =
        Native.objc_msgSend("boolean", this, "forceTerminate") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun runningApplicationsWithBundleIdentifier(bundleIdentifier: NSString): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "runningApplicationsWithBundleIdentifier:", bundleIdentifier) as NSArray

        public open fun runningApplicationWithProcessIdentifier(pid: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "runningApplicationWithProcessIdentifier:", pid) as ObjCObject

        public open fun currentApplication(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "currentApplication") as ObjCObject

        public open fun terminateAutomaticallyTerminableApplications(): Unit {
            Native.objc_msgSend("void", this, "terminateAutomaticallyTerminableApplications")
        }

    }

    companion object : NSObject(Native.objc_getClass("NSRunningApplication")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSApplication(pointer: Long) : NSResponder(pointer), NSUserInterfaceValidations, NSAccessibilityElementProtocol, NSAccessibility, NSApplication_NSWindowsMenu, NSApplication_NSFullKeyboardAccess, NSApplication_NSServicesMenu, NSApplication_NSServicesHandling, NSApplication_NSStandardAboutPanel, NSApplication_NSApplicationLayoutDirection, NSApplication_NSRestorableUserInterface, NSApplication_NSRemoteNotifications, NSApplication_NSDeprecated, NSApplication_NSColorPanel, NSApplication_NSApplicationHelpExtension, NSApplication_NSPageLayoutPanel, NSApplication_NSScripting, NSApplication_NSUserInterfaceItemSearching, NSApplication_NSWindowRestoration, NSApplication_NSRestorableStateExtension {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun context(): NSGraphicsContext =
        Native.objc_msgSend("class objc.NSGraphicsContext", this, "context") as NSGraphicsContext

    public open fun hide(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "hide:", sender)
    }

    public open fun unhide(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "unhide:", sender)
    }

    public open fun unhideWithoutActivation(): Unit {
        Native.objc_msgSend("void", this, "unhideWithoutActivation")
    }

    public open fun windowWithWindowNumber(windowNum: Int): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "windowWithWindowNumber:", windowNum) as NSWindow

    public open fun mainWindow(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "mainWindow") as NSWindow

    public open fun keyWindow(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "keyWindow") as NSWindow

    public open fun isActive(): Boolean =
        Native.objc_msgSend("boolean", this, "isActive") as Boolean

    public open fun isHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "isHidden") as Boolean

    public open fun isRunning(): Boolean =
        Native.objc_msgSend("boolean", this, "isRunning") as Boolean

    public open fun deactivate(): Unit {
        Native.objc_msgSend("void", this, "deactivate")
    }

    public open fun activateIgnoringOtherApps(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "activateIgnoringOtherApps:", flag)
    }

    public open fun hideOtherApplications(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "hideOtherApplications:", sender)
    }

    public open fun unhideAllApplications(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "unhideAllApplications:", sender)
    }

    public open fun finishLaunching(): Unit {
        Native.objc_msgSend("void", this, "finishLaunching")
    }

    public open fun run(): Unit {
        Native.objc_msgSend("void", this, "run")
    }

    public open fun runModalForWindow(theWindow: NSWindow): Int =
        Native.objc_msgSend("int", this, "runModalForWindow:", theWindow) as Int

    public open fun stop(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "stop:", sender)
    }

    public open fun stopModal(): Unit {
        Native.objc_msgSend("void", this, "stopModal")
    }

    public open fun stopModalWithCode(returnCode: Int): Unit {
        Native.objc_msgSend("void", this, "stopModalWithCode:", returnCode)
    }

    public open fun abortModal(): Unit {
        Native.objc_msgSend("void", this, "abortModal")
    }

    public open fun modalWindow(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "modalWindow") as NSWindow

    public open fun beginModalSessionForWindow(theWindow: NSWindow): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "beginModalSessionForWindow:", theWindow) as Pointer<Any>

    public open fun runModalSession(session: Pointer<Any>): Int =
        Native.objc_msgSend("int", this, "runModalSession:", session) as Int

    public open fun endModalSession(session: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "endModalSession:", session)
    }

    public open fun terminate(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "terminate:", sender)
    }

    public open fun requestUserAttention(requestType: Any): Int =
        Native.objc_msgSend("int", this, "requestUserAttention:", requestType) as Int

    public open fun cancelUserAttentionRequest(request: Int): Unit {
        Native.objc_msgSend("void", this, "cancelUserAttentionRequest:", request)
    }

    public open fun nextEventMatchingMask_untilDate_inMode_dequeue(mask: Int, expiration: NSDate, mode: NSString, deqFlag: Boolean): NSEvent =
        Native.objc_msgSend("class objc.NSEvent", this, "nextEventMatchingMask:untilDate:inMode:dequeue:", mask, expiration, mode, deqFlag) as NSEvent

    public open fun discardEventsMatchingMask_beforeEvent(mask: Int, lastEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "discardEventsMatchingMask:beforeEvent:", mask, lastEvent)
    }

    public open fun postEvent_atStart(event: NSEvent, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "postEvent:atStart:", event, flag)
    }

    public open fun currentEvent(): NSEvent =
        Native.objc_msgSend("class objc.NSEvent", this, "currentEvent") as NSEvent

    public open fun sendEvent(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "sendEvent:", theEvent)
    }

    public open fun preventWindowOrdering(): Unit {
        Native.objc_msgSend("void", this, "preventWindowOrdering")
    }

    public open fun makeWindowsPerform_inOrder(aSelector: ObjCSelector, flag: Boolean): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "makeWindowsPerform:inOrder:", aSelector, flag) as NSWindow

    public open fun windows(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "windows") as NSArray

    public open fun setWindowsNeedUpdate(needUpdate: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWindowsNeedUpdate:", needUpdate)
    }

    public open fun updateWindows(): Unit {
        Native.objc_msgSend("void", this, "updateWindows")
    }

    public open fun mainMenu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "mainMenu") as NSMenu

    public open fun setMainMenu(mainMenu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setMainMenu:", mainMenu)
    }

    public open fun helpMenu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "helpMenu") as NSMenu

    public open fun setHelpMenu(helpMenu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setHelpMenu:", helpMenu)
    }

    public open fun applicationIconImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "applicationIconImage") as NSImage

    public open fun setApplicationIconImage(applicationIconImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setApplicationIconImage:", applicationIconImage)
    }

    public open fun activationPolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "activationPolicy")

    public open fun setActivationPolicy(activationPolicy: Any): Boolean =
        Native.objc_msgSend("boolean", this, "setActivationPolicy:", activationPolicy) as Boolean

    public open fun dockTile(): NSDockTile =
        Native.objc_msgSend("class objc.NSDockTile", this, "dockTile") as NSDockTile

    public open fun sendAction_to_from(theAction: ObjCSelector, theTarget: ObjCObject, sender: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "sendAction:to:from:", theAction, theTarget, sender) as Boolean

    public open fun targetForAction(theAction: ObjCSelector): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "targetForAction:", theAction) as ObjCObject

    public open fun targetForAction_to_from(theAction: ObjCSelector, theTarget: ObjCObject, sender: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "targetForAction:to:from:", theAction, theTarget, sender) as ObjCObject

    override fun tryToPerform_with(anAction: ObjCSelector, anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "tryToPerform:with:", anAction, anObject) as Boolean

    override fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    public open fun reportException(theException: NSException): Unit {
        Native.objc_msgSend("void", this, "reportException:", theException)
    }

    public open fun replyToApplicationShouldTerminate(shouldTerminate: Boolean): Unit {
        Native.objc_msgSend("void", this, "replyToApplicationShouldTerminate:", shouldTerminate)
    }

    public open fun replyToOpenOrPrint(reply: Any): Unit {
        Native.objc_msgSend("void", this, "replyToOpenOrPrint:", reply)
    }

    public open fun orderFrontCharacterPalette(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontCharacterPalette:", sender)
    }

    public open fun presentationOptions(): Any =
        Native.objc_msgSend("class objc.Any", this, "presentationOptions")

    public open fun setPresentationOptions(presentationOptions: Any): Unit {
        Native.objc_msgSend("void", this, "setPresentationOptions:", presentationOptions)
    }

    public open fun currentSystemPresentationOptions(): Any =
        Native.objc_msgSend("class objc.Any", this, "currentSystemPresentationOptions")

    public open fun occlusionState(): Any =
        Native.objc_msgSend("class objc.Any", this, "occlusionState")

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSResponder.metaclass, NSUserInterfaceValidations.metaclass, NSAccessibilityElementProtocol.metaclass, NSAccessibility.metaclass, NSApplication_NSWindowsMenu.metaclass, NSApplication_NSFullKeyboardAccess.metaclass, NSApplication_NSServicesMenu.metaclass, NSApplication_NSServicesHandling.metaclass, NSApplication_NSStandardAboutPanel.metaclass, NSApplication_NSApplicationLayoutDirection.metaclass, NSApplication_NSRestorableUserInterface.metaclass, NSApplication_NSRemoteNotifications.metaclass, NSApplication_NSDeprecated.metaclass, NSApplication_NSColorPanel.metaclass, NSApplication_NSApplicationHelpExtension.metaclass, NSApplication_NSPageLayoutPanel.metaclass, NSApplication_NSScripting.metaclass, NSApplication_NSUserInterfaceItemSearching.metaclass, NSApplication_NSWindowRestoration.metaclass, NSApplication_NSRestorableStateExtension.metaclass {
        public open fun sharedApplication(): NSApplication =
            Native.objc_msgSend("class objc.NSApplication", this, "sharedApplication") as NSApplication

        public open fun detachDrawingThread_toTarget_withObject(selector: ObjCSelector, target: ObjCObject, argument: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "detachDrawingThread:toTarget:withObject:", selector, target, argument)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSApplication")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAnimation(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun initWithDuration_animationCurve(duration: Double, animationCurve: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDuration:animationCurve:", duration, animationCurve) as ObjCObject

    public open fun startAnimation(): Unit {
        Native.objc_msgSend("void", this, "startAnimation")
    }

    public open fun stopAnimation(): Unit {
        Native.objc_msgSend("void", this, "stopAnimation")
    }

    public open fun isAnimating(): Boolean =
        Native.objc_msgSend("boolean", this, "isAnimating") as Boolean

    public open fun currentProgress(): Float =
        Native.objc_msgSend("float", this, "currentProgress") as Float

    public open fun setCurrentProgress(currentProgress: Float): Unit {
        Native.objc_msgSend("void", this, "setCurrentProgress:", currentProgress)
    }

    public open fun duration(): Double =
        Native.objc_msgSend("double", this, "duration") as Double

    public open fun setDuration(duration: Double): Unit {
        Native.objc_msgSend("void", this, "setDuration:", duration)
    }

    public open fun animationBlockingMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "animationBlockingMode")

    public open fun setAnimationBlockingMode(animationBlockingMode: Any): Unit {
        Native.objc_msgSend("void", this, "setAnimationBlockingMode:", animationBlockingMode)
    }

    public open fun frameRate(): Float =
        Native.objc_msgSend("float", this, "frameRate") as Float

    public open fun setFrameRate(frameRate: Float): Unit {
        Native.objc_msgSend("void", this, "setFrameRate:", frameRate)
    }

    public open fun animationCurve(): Any =
        Native.objc_msgSend("class objc.Any", this, "animationCurve")

    public open fun setAnimationCurve(animationCurve: Any): Unit {
        Native.objc_msgSend("void", this, "setAnimationCurve:", animationCurve)
    }

    public open fun currentValue(): Float =
        Native.objc_msgSend("float", this, "currentValue") as Float

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun progressMarks(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "progressMarks") as NSArray

    public open fun setProgressMarks(progressMarks: NSArray): Unit {
        Native.objc_msgSend("void", this, "setProgressMarks:", progressMarks)
    }

    public open fun addProgressMark(progressMark: Float): Unit {
        Native.objc_msgSend("void", this, "addProgressMark:", progressMark)
    }

    public open fun removeProgressMark(progressMark: Float): Unit {
        Native.objc_msgSend("void", this, "removeProgressMark:", progressMark)
    }

    public open fun startWhenAnimation_reachesProgress(animation: NSAnimation, startProgress: Float): Unit {
        Native.objc_msgSend("void", this, "startWhenAnimation:reachesProgress:", animation, startProgress)
    }

    public open fun stopWhenAnimation_reachesProgress(animation: NSAnimation, stopProgress: Float): Unit {
        Native.objc_msgSend("void", this, "stopWhenAnimation:reachesProgress:", animation, stopProgress)
    }

    public open fun clearStartAnimation(): Unit {
        Native.objc_msgSend("void", this, "clearStartAnimation")
    }

    public open fun clearStopAnimation(): Unit {
        Native.objc_msgSend("void", this, "clearStopAnimation")
    }

    public open fun runLoopModesForAnimating(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "runLoopModesForAnimating") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSAnimation")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSViewAnimation(pointer: Long) : NSAnimation(pointer) {
    public open fun initWithViewAnimations(viewAnimations: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithViewAnimations:", viewAnimations) as ObjCObject

    public open fun viewAnimations(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "viewAnimations") as NSArray

    public open fun setViewAnimations(viewAnimations: NSArray): Unit {
        Native.objc_msgSend("void", this, "setViewAnimations:", viewAnimations)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSAnimation.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSViewAnimation")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAppearance(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun initWithAppearanceNamed_bundle(name: NSString, bundle: NSBundle): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithAppearanceNamed:bundle:", name, bundle) as ObjCObject

    public open fun allowsVibrancy(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsVibrancy") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
        public open fun currentAppearance(): NSAppearance =
            Native.objc_msgSend("class objc.NSAppearance", this, "currentAppearance") as NSAppearance

        public open fun setCurrentAppearance(appearance: NSAppearance): Unit {
            Native.objc_msgSend("void", this, "setCurrentAppearance:", appearance)
        }

        public open fun appearanceNamed(name: NSString): NSAppearance =
            Native.objc_msgSend("class objc.NSAppearance", this, "appearanceNamed:", name) as NSAppearance

    }

    companion object : NSObject(Native.objc_getClass("NSAppearance")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSView(pointer: Long) : NSResponder(pointer), NSAnimatablePropertyContainer, NSUserInterfaceItemIdentification, NSDraggingDestination, NSAppearanceCustomization, NSAccessibilityElementProtocol, NSAccessibility, NSView_NSKeyboardUI, NSView_NSPrinting, NSView_NSDrag, NSView_NSFullScreenMode, NSView_NSDefinition, NSView_NSFindIndicator, NSView_NSGestureRecognizer, NSView_NSDeprecated, NSView_NSClipViewSuperview, NSView_NSViewEnclosingMenuItem, NSView_NSConstraintBasedLayoutInstallingConstraints, NSView_NSConstraintBasedLayoutCoreMethods, NSView_NSConstraintBasedCompatibility, NSView_NSConstraintBasedLayoutLayering, NSView_NSConstraintBasedLayoutFittingSize, NSView_NSConstraintBasedLayoutDebugging, NSView_NSRulerMarkerClientViewDelegation, NSView_NSOpenGLSurfaceResolution {
    public open fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun window(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "window") as NSWindow

    public open fun superview(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "superview") as NSView

    public open fun subviews(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "subviews") as NSArray

    public open fun setSubviews(newSubviews: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSubviews:", newSubviews)
    }

    public open fun isDescendantOf(aView: NSView): Boolean =
        Native.objc_msgSend("boolean", this, "isDescendantOf:", aView) as Boolean

    public open fun ancestorSharedWithView(aView: NSView): NSView =
        Native.objc_msgSend("class objc.NSView", this, "ancestorSharedWithView:", aView) as NSView

    public open fun opaqueAncestor(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "opaqueAncestor") as NSView

    public open fun isHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "isHidden") as Boolean

    public open fun setHidden(hidden: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHidden:", hidden)
    }

    public open fun isHiddenOrHasHiddenAncestor(): Boolean =
        Native.objc_msgSend("boolean", this, "isHiddenOrHasHiddenAncestor") as Boolean

    public open fun getRectsBeingDrawn_count(rects: Pointer<Pointer<Any>>, count: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "getRectsBeingDrawn:count:", rects, count)
    }

    public open fun needsToDrawRect(aRect: Any): Boolean =
        Native.objc_msgSend("boolean", this, "needsToDrawRect:", aRect) as Boolean

    public open fun wantsDefaultClipping(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsDefaultClipping") as Boolean

    public open fun viewDidHide(): Unit {
        Native.objc_msgSend("void", this, "viewDidHide")
    }

    public open fun viewDidUnhide(): Unit {
        Native.objc_msgSend("void", this, "viewDidUnhide")
    }

    public open fun addSubview(aView: NSView): Unit {
        Native.objc_msgSend("void", this, "addSubview:", aView)
    }

    public open fun addSubview_positioned_relativeTo(aView: NSView, place: Any, otherView: NSView): Unit {
        Native.objc_msgSend("void", this, "addSubview:positioned:relativeTo:", aView, place, otherView)
    }

    public open fun sortSubviewsUsingFunction_context(compare: (Any, Any, Pointer<*>) -> Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "sortSubviewsUsingFunction:context:", compare, context)
    }

    public open fun viewWillMoveToWindow(newWindow: NSWindow): Unit {
        Native.objc_msgSend("void", this, "viewWillMoveToWindow:", newWindow)
    }

    public open fun viewDidMoveToWindow(): Unit {
        Native.objc_msgSend("void", this, "viewDidMoveToWindow")
    }

    public open fun viewWillMoveToSuperview(newSuperview: NSView): Unit {
        Native.objc_msgSend("void", this, "viewWillMoveToSuperview:", newSuperview)
    }

    public open fun viewDidMoveToSuperview(): Unit {
        Native.objc_msgSend("void", this, "viewDidMoveToSuperview")
    }

    public open fun didAddSubview(subview: NSView): Unit {
        Native.objc_msgSend("void", this, "didAddSubview:", subview)
    }

    public open fun willRemoveSubview(subview: NSView): Unit {
        Native.objc_msgSend("void", this, "willRemoveSubview:", subview)
    }

    public open fun removeFromSuperview(): Unit {
        Native.objc_msgSend("void", this, "removeFromSuperview")
    }

    public open fun replaceSubview_with(oldView: NSView, newView: NSView): Unit {
        Native.objc_msgSend("void", this, "replaceSubview:with:", oldView, newView)
    }

    public open fun removeFromSuperviewWithoutNeedingDisplay(): Unit {
        Native.objc_msgSend("void", this, "removeFromSuperviewWithoutNeedingDisplay")
    }

    public open fun viewDidChangeBackingProperties(): Unit {
        Native.objc_msgSend("void", this, "viewDidChangeBackingProperties")
    }

    public open fun postsFrameChangedNotifications(): Boolean =
        Native.objc_msgSend("boolean", this, "postsFrameChangedNotifications") as Boolean

    public open fun setPostsFrameChangedNotifications(postsFrameChangedNotifications: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPostsFrameChangedNotifications:", postsFrameChangedNotifications)
    }

    public open fun resizeSubviewsWithOldSize(oldSize: Any): Unit {
        Native.objc_msgSend("void", this, "resizeSubviewsWithOldSize:", oldSize)
    }

    public open fun resizeWithOldSuperviewSize(oldSize: Any): Unit {
        Native.objc_msgSend("void", this, "resizeWithOldSuperviewSize:", oldSize)
    }

    public open fun autoresizesSubviews(): Boolean =
        Native.objc_msgSend("boolean", this, "autoresizesSubviews") as Boolean

    public open fun setAutoresizesSubviews(autoresizesSubviews: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutoresizesSubviews:", autoresizesSubviews)
    }

    public open fun autoresizingMask(): Any =
        Native.objc_msgSend("class objc.Any", this, "autoresizingMask")

    public open fun setAutoresizingMask(autoresizingMask: Any): Unit {
        Native.objc_msgSend("void", this, "setAutoresizingMask:", autoresizingMask)
    }

    public open fun setFrameOrigin(newOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "setFrameOrigin:", newOrigin)
    }

    public open fun setFrameSize(newSize: Any): Unit {
        Native.objc_msgSend("void", this, "setFrameSize:", newSize)
    }

    public open fun frame(): Any =
        Native.objc_msgSend("class objc.Any", this, "frame")

    public open fun setFrame(frame: Any): Unit {
        Native.objc_msgSend("void", this, "setFrame:", frame)
    }

    public open fun frameRotation(): Double =
        Native.objc_msgSend("double", this, "frameRotation") as Double

    public open fun setFrameRotation(frameRotation: Double): Unit {
        Native.objc_msgSend("void", this, "setFrameRotation:", frameRotation)
    }

    public open fun frameCenterRotation(): Double =
        Native.objc_msgSend("double", this, "frameCenterRotation") as Double

    public open fun setFrameCenterRotation(frameCenterRotation: Double): Unit {
        Native.objc_msgSend("void", this, "setFrameCenterRotation:", frameCenterRotation)
    }

    public open fun setBoundsOrigin(newOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "setBoundsOrigin:", newOrigin)
    }

    public open fun setBoundsSize(newSize: Any): Unit {
        Native.objc_msgSend("void", this, "setBoundsSize:", newSize)
    }

    public open fun boundsRotation(): Double =
        Native.objc_msgSend("double", this, "boundsRotation") as Double

    public open fun setBoundsRotation(boundsRotation: Double): Unit {
        Native.objc_msgSend("void", this, "setBoundsRotation:", boundsRotation)
    }

    public open fun translateOriginToPoint(translation: Any): Unit {
        Native.objc_msgSend("void", this, "translateOriginToPoint:", translation)
    }

    public open fun scaleUnitSquareToSize(newUnitSize: Any): Unit {
        Native.objc_msgSend("void", this, "scaleUnitSquareToSize:", newUnitSize)
    }

    public open fun rotateByAngle(angle: Double): Unit {
        Native.objc_msgSend("void", this, "rotateByAngle:", angle)
    }

    public open fun bounds(): Any =
        Native.objc_msgSend("class objc.Any", this, "bounds")

    public open fun setBounds(bounds: Any): Unit {
        Native.objc_msgSend("void", this, "setBounds:", bounds)
    }

    public open fun isFlipped(): Boolean =
        Native.objc_msgSend("boolean", this, "isFlipped") as Boolean

    public open fun isRotatedFromBase(): Boolean =
        Native.objc_msgSend("boolean", this, "isRotatedFromBase") as Boolean

    public open fun isRotatedOrScaledFromBase(): Boolean =
        Native.objc_msgSend("boolean", this, "isRotatedOrScaledFromBase") as Boolean

    public open fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    public open fun convertPoint_fromView(aPoint: Any, aView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPoint:fromView:", aPoint, aView)

    public open fun convertPoint_toView(aPoint: Any, aView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPoint:toView:", aPoint, aView)

    public open fun convertSize_fromView(aSize: Any, aView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "convertSize:fromView:", aSize, aView)

    public open fun convertSize_toView(aSize: Any, aView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "convertSize:toView:", aSize, aView)

    public open fun convertRect_fromView(aRect: Any, aView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRect:fromView:", aRect, aView)

    public open fun convertRect_toView(aRect: Any, aView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRect:toView:", aRect, aView)

    public open fun backingAlignedRect_options(aRect: Any, options: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "backingAlignedRect:options:", aRect, options)

    public open fun centerScanRect(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "centerScanRect:", aRect)

    public open fun convertPointToBacking(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPointToBacking:", aPoint)

    public open fun convertPointFromBacking(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPointFromBacking:", aPoint)

    public open fun convertSizeToBacking(aSize: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertSizeToBacking:", aSize)

    public open fun convertSizeFromBacking(aSize: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertSizeFromBacking:", aSize)

    public open fun convertRectToBacking(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectToBacking:", aRect)

    public open fun convertRectFromBacking(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectFromBacking:", aRect)

    public open fun convertPointToLayer(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPointToLayer:", aPoint)

    public open fun convertPointFromLayer(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPointFromLayer:", aPoint)

    public open fun convertSizeToLayer(aSize: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertSizeToLayer:", aSize)

    public open fun convertSizeFromLayer(aSize: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertSizeFromLayer:", aSize)

    public open fun convertRectToLayer(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectToLayer:", aRect)

    public open fun convertRectFromLayer(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectFromLayer:", aRect)

    public open fun convertPointToBase(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPointToBase:", aPoint)

    public open fun convertPointFromBase(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPointFromBase:", aPoint)

    public open fun convertSizeToBase(aSize: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertSizeToBase:", aSize)

    public open fun convertSizeFromBase(aSize: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertSizeFromBase:", aSize)

    public open fun convertRectToBase(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectToBase:", aRect)

    public open fun convertRectFromBase(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectFromBase:", aRect)

    public open fun canDrawConcurrently(): Boolean =
        Native.objc_msgSend("boolean", this, "canDrawConcurrently") as Boolean

    public open fun setCanDrawConcurrently(canDrawConcurrently: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanDrawConcurrently:", canDrawConcurrently)
    }

    public open fun canDraw(): Boolean =
        Native.objc_msgSend("boolean", this, "canDraw") as Boolean

    public open fun setNeedsDisplayInRect(invalidRect: Any): Unit {
        Native.objc_msgSend("void", this, "setNeedsDisplayInRect:", invalidRect)
    }

    public open fun needsDisplay(): Boolean =
        Native.objc_msgSend("boolean", this, "needsDisplay") as Boolean

    public open fun setNeedsDisplay(needsDisplay: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNeedsDisplay:", needsDisplay)
    }

    public open fun lockFocus(): Unit {
        Native.objc_msgSend("void", this, "lockFocus")
    }

    public open fun unlockFocus(): Unit {
        Native.objc_msgSend("void", this, "unlockFocus")
    }

    public open fun lockFocusIfCanDraw(): Boolean =
        Native.objc_msgSend("boolean", this, "lockFocusIfCanDraw") as Boolean

    public open fun lockFocusIfCanDrawInContext(context: NSGraphicsContext): Boolean =
        Native.objc_msgSend("boolean", this, "lockFocusIfCanDrawInContext:", context) as Boolean

    public open fun visibleRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "visibleRect")

    public open fun display(): Unit {
        Native.objc_msgSend("void", this, "display")
    }

    public open fun displayIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "displayIfNeeded")
    }

    public open fun displayIfNeededIgnoringOpacity(): Unit {
        Native.objc_msgSend("void", this, "displayIfNeededIgnoringOpacity")
    }

    public open fun displayRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "displayRect:", rect)
    }

    public open fun displayIfNeededInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "displayIfNeededInRect:", rect)
    }

    public open fun displayRectIgnoringOpacity(rect: Any): Unit {
        Native.objc_msgSend("void", this, "displayRectIgnoringOpacity:", rect)
    }

    public open fun displayIfNeededInRectIgnoringOpacity(rect: Any): Unit {
        Native.objc_msgSend("void", this, "displayIfNeededInRectIgnoringOpacity:", rect)
    }

    public open fun drawRect(dirtyRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawRect:", dirtyRect)
    }

    public open fun displayRectIgnoringOpacity_inContext(aRect: Any, context: NSGraphicsContext): Unit {
        Native.objc_msgSend("void", this, "displayRectIgnoringOpacity:inContext:", aRect, context)
    }

    public open fun bitmapImageRepForCachingDisplayInRect(rect: Any): NSBitmapImageRep =
        Native.objc_msgSend("class objc.NSBitmapImageRep", this, "bitmapImageRepForCachingDisplayInRect:", rect) as NSBitmapImageRep

    public open fun cacheDisplayInRect_toBitmapImageRep(rect: Any, bitmapImageRep: NSBitmapImageRep): Unit {
        Native.objc_msgSend("void", this, "cacheDisplayInRect:toBitmapImageRep:", rect, bitmapImageRep)
    }

    public open fun viewWillDraw(): Unit {
        Native.objc_msgSend("void", this, "viewWillDraw")
    }

    public open fun scrollPoint(aPoint: Any): Unit {
        Native.objc_msgSend("void", this, "scrollPoint:", aPoint)
    }

    public open fun scrollRectToVisible(aRect: Any): Boolean =
        Native.objc_msgSend("boolean", this, "scrollRectToVisible:", aRect) as Boolean

    public open fun autoscroll(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "autoscroll:", theEvent) as Boolean

    public open fun adjustScroll(newVisible: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "adjustScroll:", newVisible)

    public open fun scrollRect_by(aRect: Any, delta: Any): Unit {
        Native.objc_msgSend("void", this, "scrollRect:by:", aRect, delta)
    }

    public open fun translateRectsNeedingDisplayInRect_by(clipRect: Any, delta: Any): Unit {
        Native.objc_msgSend("void", this, "translateRectsNeedingDisplayInRect:by:", clipRect, delta)
    }

    public open fun hitTest(aPoint: Any): NSView =
        Native.objc_msgSend("class objc.NSView", this, "hitTest:", aPoint) as NSView

    public open fun mouse_inRect(aPoint: Any, aRect: Any): Boolean =
        Native.objc_msgSend("boolean", this, "mouse:inRect:", aPoint, aRect) as Boolean

    public open fun viewWithTag(aTag: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "viewWithTag:", aTag) as ObjCObject

    public open fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    public open fun acceptsFirstMouse(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstMouse:", theEvent) as Boolean

    public open fun shouldDelayWindowOrderingForEvent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "shouldDelayWindowOrderingForEvent:", theEvent) as Boolean

    public open fun needsPanelToBecomeKey(): Boolean =
        Native.objc_msgSend("boolean", this, "needsPanelToBecomeKey") as Boolean

    public open fun mouseDownCanMoveWindow(): Boolean =
        Native.objc_msgSend("boolean", this, "mouseDownCanMoveWindow") as Boolean

    public open fun acceptsTouchEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsTouchEvents") as Boolean

    public open fun setAcceptsTouchEvents(acceptsTouchEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAcceptsTouchEvents:", acceptsTouchEvents)
    }

    public open fun wantsRestingTouches(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsRestingTouches") as Boolean

    public open fun setWantsRestingTouches(wantsRestingTouches: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWantsRestingTouches:", wantsRestingTouches)
    }

    public open fun addCursorRect_cursor(aRect: Any, anObj: NSCursor): Unit {
        Native.objc_msgSend("void", this, "addCursorRect:cursor:", aRect, anObj)
    }

    public open fun removeCursorRect_cursor(aRect: Any, anObj: NSCursor): Unit {
        Native.objc_msgSend("void", this, "removeCursorRect:cursor:", aRect, anObj)
    }

    public open fun discardCursorRects(): Unit {
        Native.objc_msgSend("void", this, "discardCursorRects")
    }

    public open fun resetCursorRects(): Unit {
        Native.objc_msgSend("void", this, "resetCursorRects")
    }

    public open fun addTrackingRect_owner_userData_assumeInside(aRect: Any, anObject: ObjCObject, data: Pointer<*>, flag: Boolean): Int =
        Native.objc_msgSend("int", this, "addTrackingRect:owner:userData:assumeInside:", aRect, anObject, data, flag) as Int

    public open fun removeTrackingRect(tag: Int): Unit {
        Native.objc_msgSend("void", this, "removeTrackingRect:", tag)
    }

    public open fun makeBackingLayer(): CALayer =
        Native.objc_msgSend("class objc.CALayer", this, "makeBackingLayer") as CALayer

    public open fun layerContentsRedrawPolicy(): Any =
        Native.objc_msgSend("class objc.Any", this, "layerContentsRedrawPolicy")

    public open fun setLayerContentsRedrawPolicy(layerContentsRedrawPolicy: Any): Unit {
        Native.objc_msgSend("void", this, "setLayerContentsRedrawPolicy:", layerContentsRedrawPolicy)
    }

    public open fun layerContentsPlacement(): Any =
        Native.objc_msgSend("class objc.Any", this, "layerContentsPlacement")

    public open fun setLayerContentsPlacement(layerContentsPlacement: Any): Unit {
        Native.objc_msgSend("void", this, "setLayerContentsPlacement:", layerContentsPlacement)
    }

    public open fun wantsLayer(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsLayer") as Boolean

    public open fun setWantsLayer(wantsLayer: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWantsLayer:", wantsLayer)
    }

    public open fun layer(): CALayer =
        Native.objc_msgSend("class objc.CALayer", this, "layer") as CALayer

    public open fun setLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "setLayer:", layer)
    }

    public open fun wantsUpdateLayer(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsUpdateLayer") as Boolean

    public open fun updateLayer(): Unit {
        Native.objc_msgSend("void", this, "updateLayer")
    }

    public open fun canDrawSubviewsIntoLayer(): Boolean =
        Native.objc_msgSend("boolean", this, "canDrawSubviewsIntoLayer") as Boolean

    public open fun setCanDrawSubviewsIntoLayer(canDrawSubviewsIntoLayer: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanDrawSubviewsIntoLayer:", canDrawSubviewsIntoLayer)
    }

    public open fun alphaValue(): Double =
        Native.objc_msgSend("double", this, "alphaValue") as Double

    public open fun setAlphaValue(alphaValue: Double): Unit {
        Native.objc_msgSend("void", this, "setAlphaValue:", alphaValue)
    }

    public open fun layerUsesCoreImageFilters(): Boolean =
        Native.objc_msgSend("boolean", this, "layerUsesCoreImageFilters") as Boolean

    public open fun setLayerUsesCoreImageFilters(layerUsesCoreImageFilters: Boolean): Unit {
        Native.objc_msgSend("void", this, "setLayerUsesCoreImageFilters:", layerUsesCoreImageFilters)
    }

    public open fun backgroundFilters(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "backgroundFilters") as NSArray

    public open fun setBackgroundFilters(backgroundFilters: NSArray): Unit {
        Native.objc_msgSend("void", this, "setBackgroundFilters:", backgroundFilters)
    }

    public open fun compositingFilter(): CIFilter =
        Native.objc_msgSend("class objc.CIFilter", this, "compositingFilter") as CIFilter

    public open fun setCompositingFilter(compositingFilter: CIFilter): Unit {
        Native.objc_msgSend("void", this, "setCompositingFilter:", compositingFilter)
    }

    public open fun contentFilters(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "contentFilters") as NSArray

    public open fun setContentFilters(contentFilters: NSArray): Unit {
        Native.objc_msgSend("void", this, "setContentFilters:", contentFilters)
    }

    public open fun shadow(): NSShadow =
        Native.objc_msgSend("class objc.NSShadow", this, "shadow") as NSShadow

    public open fun setShadow(shadow: NSShadow): Unit {
        Native.objc_msgSend("void", this, "setShadow:", shadow)
    }

    public open fun addTrackingArea(trackingArea: NSTrackingArea): Unit {
        Native.objc_msgSend("void", this, "addTrackingArea:", trackingArea)
    }

    public open fun removeTrackingArea(trackingArea: NSTrackingArea): Unit {
        Native.objc_msgSend("void", this, "removeTrackingArea:", trackingArea)
    }

    public open fun trackingAreas(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "trackingAreas") as NSArray

    public open fun updateTrackingAreas(): Unit {
        Native.objc_msgSend("void", this, "updateTrackingAreas")
    }

    public open fun postsBoundsChangedNotifications(): Boolean =
        Native.objc_msgSend("boolean", this, "postsBoundsChangedNotifications") as Boolean

    public open fun setPostsBoundsChangedNotifications(postsBoundsChangedNotifications: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPostsBoundsChangedNotifications:", postsBoundsChangedNotifications)
    }

    public open fun enclosingScrollView(): NSScrollView =
        Native.objc_msgSend("class objc.NSScrollView", this, "enclosingScrollView") as NSScrollView

    public open fun menuForEvent(event: NSEvent): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menuForEvent:", event) as NSMenu

    public open fun toolTip(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "toolTip") as NSString

    public open fun setToolTip(toolTip: NSString): Unit {
        Native.objc_msgSend("void", this, "setToolTip:", toolTip)
    }

    public open fun addToolTipRect_owner_userData(aRect: Any, anObject: ObjCObject, data: Pointer<*>): Int =
        Native.objc_msgSend("int", this, "addToolTipRect:owner:userData:", aRect, anObject, data) as Int

    public open fun removeToolTip(tag: Int): Unit {
        Native.objc_msgSend("void", this, "removeToolTip:", tag)
    }

    public open fun removeAllToolTips(): Unit {
        Native.objc_msgSend("void", this, "removeAllToolTips")
    }

    public open fun viewWillStartLiveResize(): Unit {
        Native.objc_msgSend("void", this, "viewWillStartLiveResize")
    }

    public open fun viewDidEndLiveResize(): Unit {
        Native.objc_msgSend("void", this, "viewDidEndLiveResize")
    }

    public open fun inLiveResize(): Boolean =
        Native.objc_msgSend("boolean", this, "inLiveResize") as Boolean

    public open fun preservesContentDuringLiveResize(): Boolean =
        Native.objc_msgSend("boolean", this, "preservesContentDuringLiveResize") as Boolean

    public open fun rectPreservedDuringLiveResize(): Any =
        Native.objc_msgSend("class objc.Any", this, "rectPreservedDuringLiveResize")

    public open fun getRectsExposedDuringLiveResize_count(exposedRects: Any, count: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "getRectsExposedDuringLiveResize:count:", exposedRects, count)
    }

    public open fun inputContext(): NSTextInputContext =
        Native.objc_msgSend("class objc.NSTextInputContext", this, "inputContext") as NSTextInputContext

    public open fun rectForSmartMagnificationAtPoint_inRect(location: Any, visibleRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rectForSmartMagnificationAtPoint:inRect:", location, visibleRect)

    public open fun userInterfaceLayoutDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "userInterfaceLayoutDirection")

    public open fun setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setUserInterfaceLayoutDirection:", userInterfaceLayoutDirection)
    }

    public open fun prepareForReuse(): Unit {
        Native.objc_msgSend("void", this, "prepareForReuse")
    }

    public open fun prepareContentInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "prepareContentInRect:", rect)
    }

    public open fun preparedContentRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "preparedContentRect")

    public open fun setPreparedContentRect(preparedContentRect: Any): Unit {
        Native.objc_msgSend("void", this, "setPreparedContentRect:", preparedContentRect)
    }

    public open fun allowsVibrancy(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsVibrancy") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSResponder.metaclass, NSAnimatablePropertyContainer.metaclass, NSUserInterfaceItemIdentification.metaclass, NSDraggingDestination.metaclass, NSAppearanceCustomization.metaclass, NSAccessibilityElementProtocol.metaclass, NSAccessibility.metaclass, NSView_NSKeyboardUI.metaclass, NSView_NSPrinting.metaclass, NSView_NSDrag.metaclass, NSView_NSFullScreenMode.metaclass, NSView_NSDefinition.metaclass, NSView_NSFindIndicator.metaclass, NSView_NSGestureRecognizer.metaclass, NSView_NSDeprecated.metaclass, NSView_NSClipViewSuperview.metaclass, NSView_NSViewEnclosingMenuItem.metaclass, NSView_NSConstraintBasedLayoutInstallingConstraints.metaclass, NSView_NSConstraintBasedLayoutCoreMethods.metaclass, NSView_NSConstraintBasedCompatibility.metaclass, NSView_NSConstraintBasedLayoutLayering.metaclass, NSView_NSConstraintBasedLayoutFittingSize.metaclass, NSView_NSConstraintBasedLayoutDebugging.metaclass, NSView_NSRulerMarkerClientViewDelegation.metaclass, NSView_NSOpenGLSurfaceResolution.metaclass {
        public open fun focusView(): NSView =
            Native.objc_msgSend("class objc.NSView", this, "focusView") as NSView

        public open fun defaultMenu(): NSMenu =
            Native.objc_msgSend("class objc.NSMenu", this, "defaultMenu") as NSMenu

        public open fun isCompatibleWithResponsiveScrolling(): Boolean =
            Native.objc_msgSend("boolean", this, "isCompatibleWithResponsiveScrolling") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSText(pointer: Long) : NSView(pointer), NSChangeSpelling, NSIgnoreMisspelledWords {
    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun string(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "string") as NSString

    public open fun setString(string: NSString): Unit {
        Native.objc_msgSend("void", this, "setString:", string)
    }

    public open fun replaceCharactersInRange_withString(range: Any, aString: NSString): Unit {
        Native.objc_msgSend("void", this, "replaceCharactersInRange:withString:", range, aString)
    }

    public open fun replaceCharactersInRange_withRTF(range: Any, rtfData: NSData): Unit {
        Native.objc_msgSend("void", this, "replaceCharactersInRange:withRTF:", range, rtfData)
    }

    public open fun replaceCharactersInRange_withRTFD(range: Any, rtfdData: NSData): Unit {
        Native.objc_msgSend("void", this, "replaceCharactersInRange:withRTFD:", range, rtfdData)
    }

    public open fun RTFFromRange(range: Any): NSData =
        Native.objc_msgSend("class objc.NSData", this, "RTFFromRange:", range) as NSData

    public open fun RTFDFromRange(range: Any): NSData =
        Native.objc_msgSend("class objc.NSData", this, "RTFDFromRange:", range) as NSData

    public open fun writeRTFDToFile_atomically(path: NSString, flag: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeRTFDToFile:atomically:", path, flag) as Boolean

    public open fun readRTFDFromFile(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "readRTFDFromFile:", path) as Boolean

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun isSelectable(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectable") as Boolean

    public open fun setSelectable(selectable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectable:", selectable)
    }

    public open fun isRichText(): Boolean =
        Native.objc_msgSend("boolean", this, "isRichText") as Boolean

    public open fun setRichText(richText: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRichText:", richText)
    }

    public open fun importsGraphics(): Boolean =
        Native.objc_msgSend("boolean", this, "importsGraphics") as Boolean

    public open fun setImportsGraphics(importsGraphics: Boolean): Unit {
        Native.objc_msgSend("void", this, "setImportsGraphics:", importsGraphics)
    }

    public open fun isFieldEditor(): Boolean =
        Native.objc_msgSend("boolean", this, "isFieldEditor") as Boolean

    public open fun setFieldEditor(fieldEditor: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFieldEditor:", fieldEditor)
    }

    public open fun usesFontPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFontPanel") as Boolean

    public open fun setUsesFontPanel(usesFontPanel: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFontPanel:", usesFontPanel)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun isRulerVisible(): Boolean =
        Native.objc_msgSend("boolean", this, "isRulerVisible") as Boolean

    public open fun selectedRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "selectedRange")

    public open fun setSelectedRange(selectedRange: Any): Unit {
        Native.objc_msgSend("void", this, "setSelectedRange:", selectedRange)
    }

    public open fun scrollRangeToVisible(range: Any): Unit {
        Native.objc_msgSend("void", this, "scrollRangeToVisible:", range)
    }

    public open fun font(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "font") as NSFont

    public open fun setFont(font: NSFont): Unit {
        Native.objc_msgSend("void", this, "setFont:", font)
    }

    public open fun textColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "textColor") as NSColor

    public open fun setTextColor(textColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setTextColor:", textColor)
    }

    public open fun alignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignment")

    public open fun setAlignment(alignment: Any): Unit {
        Native.objc_msgSend("void", this, "setAlignment:", alignment)
    }

    public open fun baseWritingDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "baseWritingDirection")

    public open fun setBaseWritingDirection(baseWritingDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setBaseWritingDirection:", baseWritingDirection)
    }

    public open fun setTextColor_range(color: NSColor, range: Any): Unit {
        Native.objc_msgSend("void", this, "setTextColor:range:", color, range)
    }

    public open fun setFont_range(font: NSFont, range: Any): Unit {
        Native.objc_msgSend("void", this, "setFont:range:", font, range)
    }

    public open fun maxSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "maxSize")

    public open fun setMaxSize(maxSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMaxSize:", maxSize)
    }

    public open fun minSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "minSize")

    public open fun setMinSize(minSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMinSize:", minSize)
    }

    public open fun isHorizontallyResizable(): Boolean =
        Native.objc_msgSend("boolean", this, "isHorizontallyResizable") as Boolean

    public open fun setHorizontallyResizable(horizontallyResizable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHorizontallyResizable:", horizontallyResizable)
    }

    public open fun isVerticallyResizable(): Boolean =
        Native.objc_msgSend("boolean", this, "isVerticallyResizable") as Boolean

    public open fun setVerticallyResizable(verticallyResizable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setVerticallyResizable:", verticallyResizable)
    }

    public open fun sizeToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeToFit")
    }

    public open fun copy(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "copy:", sender)
    }

    public open fun copyFont(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "copyFont:", sender)
    }

    public open fun copyRuler(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "copyRuler:", sender)
    }

    public open fun cut(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "cut:", sender)
    }

    public open fun delete(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "delete:", sender)
    }

    public open fun paste(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "paste:", sender)
    }

    public open fun pasteFont(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "pasteFont:", sender)
    }

    public open fun pasteRuler(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "pasteRuler:", sender)
    }

    override fun selectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectAll:", sender)
    }

    override fun changeFont(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeFont:", sender)
    }

    public open fun alignLeft(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "alignLeft:", sender)
    }

    public open fun alignRight(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "alignRight:", sender)
    }

    public open fun alignCenter(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "alignCenter:", sender)
    }

    public open fun subscript(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "subscript:", sender)
    }

    public open fun superscript(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "superscript:", sender)
    }

    public open fun underline(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "underline:", sender)
    }

    public open fun unscript(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "unscript:", sender)
    }

    public open fun showGuessPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "showGuessPanel:", sender)
    }

    public open fun checkSpelling(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "checkSpelling:", sender)
    }

    public open fun toggleRuler(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleRuler:", sender)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSChangeSpelling.metaclass, NSIgnoreMisspelledWords.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSText")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextTab(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun initWithTextAlignment_location_options(alignment: Any, loc: Double, options: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTextAlignment:location:options:", alignment, loc, options) as ObjCObject

    public open fun alignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignment")

    public open fun options(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "options") as NSDictionary

    public open fun initWithType_location(type: Any, loc: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithType:location:", type, loc) as ObjCObject

    public open fun location(): Double =
        Native.objc_msgSend("double", this, "location") as Double

    public open fun tabStopType(): Any =
        Native.objc_msgSend("class objc.Any", this, "tabStopType")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextTab")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSParagraphStyle(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSSecureCoding {
    public open fun lineSpacing(): Double =
        Native.objc_msgSend("double", this, "lineSpacing") as Double

    public open fun paragraphSpacing(): Double =
        Native.objc_msgSend("double", this, "paragraphSpacing") as Double

    public open fun alignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignment")

    public open fun headIndent(): Double =
        Native.objc_msgSend("double", this, "headIndent") as Double

    public open fun tailIndent(): Double =
        Native.objc_msgSend("double", this, "tailIndent") as Double

    public open fun firstLineHeadIndent(): Double =
        Native.objc_msgSend("double", this, "firstLineHeadIndent") as Double

    public open fun tabStops(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tabStops") as NSArray

    public open fun minimumLineHeight(): Double =
        Native.objc_msgSend("double", this, "minimumLineHeight") as Double

    public open fun maximumLineHeight(): Double =
        Native.objc_msgSend("double", this, "maximumLineHeight") as Double

    public open fun lineBreakMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "lineBreakMode")

    public open fun baseWritingDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "baseWritingDirection")

    public open fun lineHeightMultiple(): Double =
        Native.objc_msgSend("double", this, "lineHeightMultiple") as Double

    public open fun paragraphSpacingBefore(): Double =
        Native.objc_msgSend("double", this, "paragraphSpacingBefore") as Double

    public open fun defaultTabInterval(): Double =
        Native.objc_msgSend("double", this, "defaultTabInterval") as Double

    public open fun textBlocks(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "textBlocks") as NSArray

    public open fun textLists(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "textLists") as NSArray

    public open fun hyphenationFactor(): Float =
        Native.objc_msgSend("float", this, "hyphenationFactor") as Float

    public open fun tighteningFactorForTruncation(): Float =
        Native.objc_msgSend("float", this, "tighteningFactorForTruncation") as Float

    public open fun headerLevel(): Int =
        Native.objc_msgSend("int", this, "headerLevel") as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSSecureCoding.metaclass {
        public open fun defaultParagraphStyle(): NSParagraphStyle =
            Native.objc_msgSend("class objc.NSParagraphStyle", this, "defaultParagraphStyle") as NSParagraphStyle

        public open fun defaultWritingDirectionForLanguage(languageName: NSString): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultWritingDirectionForLanguage:", languageName)

    }

    companion object : NSObject(Native.objc_getClass("NSParagraphStyle")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableParagraphStyle(pointer: Long) : NSParagraphStyle(pointer) {
    override fun lineSpacing(): Double =
        Native.objc_msgSend("double", this, "lineSpacing") as Double

    public open fun setLineSpacing(lineSpacing: Double): Unit {
        Native.objc_msgSend("void", this, "setLineSpacing:", lineSpacing)
    }

    override fun paragraphSpacing(): Double =
        Native.objc_msgSend("double", this, "paragraphSpacing") as Double

    public open fun setParagraphSpacing(paragraphSpacing: Double): Unit {
        Native.objc_msgSend("void", this, "setParagraphSpacing:", paragraphSpacing)
    }

    override fun alignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignment")

    public open fun setAlignment(alignment: Any): Unit {
        Native.objc_msgSend("void", this, "setAlignment:", alignment)
    }

    override fun headIndent(): Double =
        Native.objc_msgSend("double", this, "headIndent") as Double

    public open fun setHeadIndent(headIndent: Double): Unit {
        Native.objc_msgSend("void", this, "setHeadIndent:", headIndent)
    }

    override fun tailIndent(): Double =
        Native.objc_msgSend("double", this, "tailIndent") as Double

    public open fun setTailIndent(tailIndent: Double): Unit {
        Native.objc_msgSend("void", this, "setTailIndent:", tailIndent)
    }

    override fun firstLineHeadIndent(): Double =
        Native.objc_msgSend("double", this, "firstLineHeadIndent") as Double

    public open fun setFirstLineHeadIndent(firstLineHeadIndent: Double): Unit {
        Native.objc_msgSend("void", this, "setFirstLineHeadIndent:", firstLineHeadIndent)
    }

    public open fun addTabStop(anObject: NSTextTab): Unit {
        Native.objc_msgSend("void", this, "addTabStop:", anObject)
    }

    public open fun removeTabStop(anObject: NSTextTab): Unit {
        Native.objc_msgSend("void", this, "removeTabStop:", anObject)
    }

    override fun tabStops(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tabStops") as NSArray

    public open fun setTabStops(tabStops: NSArray): Unit {
        Native.objc_msgSend("void", this, "setTabStops:", tabStops)
    }

    override fun minimumLineHeight(): Double =
        Native.objc_msgSend("double", this, "minimumLineHeight") as Double

    public open fun setMinimumLineHeight(minimumLineHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setMinimumLineHeight:", minimumLineHeight)
    }

    override fun maximumLineHeight(): Double =
        Native.objc_msgSend("double", this, "maximumLineHeight") as Double

    public open fun setMaximumLineHeight(maximumLineHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setMaximumLineHeight:", maximumLineHeight)
    }

    override fun lineBreakMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "lineBreakMode")

    public open fun setLineBreakMode(lineBreakMode: Any): Unit {
        Native.objc_msgSend("void", this, "setLineBreakMode:", lineBreakMode)
    }

    public open fun setParagraphStyle(obj: NSParagraphStyle): Unit {
        Native.objc_msgSend("void", this, "setParagraphStyle:", obj)
    }

    override fun baseWritingDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "baseWritingDirection")

    public open fun setBaseWritingDirection(baseWritingDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setBaseWritingDirection:", baseWritingDirection)
    }

    override fun lineHeightMultiple(): Double =
        Native.objc_msgSend("double", this, "lineHeightMultiple") as Double

    public open fun setLineHeightMultiple(lineHeightMultiple: Double): Unit {
        Native.objc_msgSend("void", this, "setLineHeightMultiple:", lineHeightMultiple)
    }

    override fun paragraphSpacingBefore(): Double =
        Native.objc_msgSend("double", this, "paragraphSpacingBefore") as Double

    public open fun setParagraphSpacingBefore(paragraphSpacingBefore: Double): Unit {
        Native.objc_msgSend("void", this, "setParagraphSpacingBefore:", paragraphSpacingBefore)
    }

    override fun defaultTabInterval(): Double =
        Native.objc_msgSend("double", this, "defaultTabInterval") as Double

    public open fun setDefaultTabInterval(defaultTabInterval: Double): Unit {
        Native.objc_msgSend("void", this, "setDefaultTabInterval:", defaultTabInterval)
    }

    override fun textBlocks(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "textBlocks") as NSArray

    public open fun setTextBlocks(textBlocks: NSArray): Unit {
        Native.objc_msgSend("void", this, "setTextBlocks:", textBlocks)
    }

    override fun textLists(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "textLists") as NSArray

    public open fun setTextLists(textLists: NSArray): Unit {
        Native.objc_msgSend("void", this, "setTextLists:", textLists)
    }

    override fun hyphenationFactor(): Float =
        Native.objc_msgSend("float", this, "hyphenationFactor") as Float

    public open fun setHyphenationFactor(hyphenationFactor: Float): Unit {
        Native.objc_msgSend("void", this, "setHyphenationFactor:", hyphenationFactor)
    }

    override fun tighteningFactorForTruncation(): Float =
        Native.objc_msgSend("float", this, "tighteningFactorForTruncation") as Float

    public open fun setTighteningFactorForTruncation(tighteningFactorForTruncation: Float): Unit {
        Native.objc_msgSend("void", this, "setTighteningFactorForTruncation:", tighteningFactorForTruncation)
    }

    override fun headerLevel(): Int =
        Native.objc_msgSend("int", this, "headerLevel") as Int

    public open fun setHeaderLevel(headerLevel: Int): Unit {
        Native.objc_msgSend("void", this, "setHeaderLevel:", headerLevel)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSParagraphStyle.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMutableParagraphStyle")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCell(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSUserInterfaceItemIdentification, NSAccessibilityElementProtocol, NSAccessibility, NSCell_NSKeyboardUI, NSCell_NSCellAttributedStringMethods, NSCell_NSCellMixedState, NSCell_NSCellHitTest, NSCell_NSCellExpansion, NSCell_NSCellBackgroundStyle, NSCell_NSDeprecated {
    public open fun initTextCell(aString: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initTextCell:", aString) as ObjCObject

    public open fun initImageCell(image: NSImage): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initImageCell:", image) as ObjCObject

    public open fun controlView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "controlView") as NSView

    public open fun setControlView(controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "setControlView:", controlView)
    }

    public open fun type(): Any =
        Native.objc_msgSend("class objc.Any", this, "type")

    public open fun setType(type: Any): Unit {
        Native.objc_msgSend("void", this, "setType:", type)
    }

    public open fun state(): Int =
        Native.objc_msgSend("int", this, "state") as Int

    public open fun setState(state: Int): Unit {
        Native.objc_msgSend("void", this, "setState:", state)
    }

    public open fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    public open fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    public open fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    public open fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    public open fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    public open fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun setEnabled(enabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEnabled:", enabled)
    }

    public open fun sendActionOn(mask: Int): Int =
        Native.objc_msgSend("int", this, "sendActionOn:", mask) as Int

    public open fun isContinuous(): Boolean =
        Native.objc_msgSend("boolean", this, "isContinuous") as Boolean

    public open fun setContinuous(continuous: Boolean): Unit {
        Native.objc_msgSend("void", this, "setContinuous:", continuous)
    }

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun isSelectable(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectable") as Boolean

    public open fun setSelectable(selectable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectable:", selectable)
    }

    public open fun isBordered(): Boolean =
        Native.objc_msgSend("boolean", this, "isBordered") as Boolean

    public open fun setBordered(bordered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBordered:", bordered)
    }

    public open fun isBezeled(): Boolean =
        Native.objc_msgSend("boolean", this, "isBezeled") as Boolean

    public open fun setBezeled(bezeled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBezeled:", bezeled)
    }

    public open fun isScrollable(): Boolean =
        Native.objc_msgSend("boolean", this, "isScrollable") as Boolean

    public open fun setScrollable(scrollable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setScrollable:", scrollable)
    }

    public open fun isHighlighted(): Boolean =
        Native.objc_msgSend("boolean", this, "isHighlighted") as Boolean

    public open fun setHighlighted(highlighted: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHighlighted:", highlighted)
    }

    public open fun alignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignment")

    public open fun setAlignment(alignment: Any): Unit {
        Native.objc_msgSend("void", this, "setAlignment:", alignment)
    }

    public open fun wraps(): Boolean =
        Native.objc_msgSend("boolean", this, "wraps") as Boolean

    public open fun setWraps(wraps: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWraps:", wraps)
    }

    public open fun font(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "font") as NSFont

    public open fun setFont(font: NSFont): Unit {
        Native.objc_msgSend("void", this, "setFont:", font)
    }

    public open fun keyEquivalent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyEquivalent") as NSString

    public open fun formatter(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "formatter") as ObjCObject

    public open fun setFormatter(formatter: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setFormatter:", formatter)
    }

    public open fun objectValue(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectValue") as ObjCObject

    public open fun setObjectValue(objectValue: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setObjectValue:", objectValue)
    }

    public open fun hasValidObjectValue(): Boolean =
        Native.objc_msgSend("boolean", this, "hasValidObjectValue") as Boolean

    public open fun stringValue(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringValue") as NSString

    public open fun setStringValue(stringValue: NSString): Unit {
        Native.objc_msgSend("void", this, "setStringValue:", stringValue)
    }

    public open fun compare(otherCell: ObjCObject): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:", otherCell)

    public open fun intValue(): Int =
        Native.objc_msgSend("int", this, "intValue") as Int

    public open fun setIntValue(intValue: Int): Unit {
        Native.objc_msgSend("void", this, "setIntValue:", intValue)
    }

    public open fun floatValue(): Float =
        Native.objc_msgSend("float", this, "floatValue") as Float

    public open fun setFloatValue(floatValue: Float): Unit {
        Native.objc_msgSend("void", this, "setFloatValue:", floatValue)
    }

    public open fun doubleValue(): Double =
        Native.objc_msgSend("double", this, "doubleValue") as Double

    public open fun setDoubleValue(doubleValue: Double): Unit {
        Native.objc_msgSend("void", this, "setDoubleValue:", doubleValue)
    }

    public open fun takeIntValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeIntValueFrom:", sender)
    }

    public open fun takeFloatValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeFloatValueFrom:", sender)
    }

    public open fun takeDoubleValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeDoubleValueFrom:", sender)
    }

    public open fun takeStringValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeStringValueFrom:", sender)
    }

    public open fun takeObjectValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeObjectValueFrom:", sender)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun controlTint(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlTint")

    public open fun setControlTint(controlTint: Any): Unit {
        Native.objc_msgSend("void", this, "setControlTint:", controlTint)
    }

    public open fun controlSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlSize")

    public open fun setControlSize(controlSize: Any): Unit {
        Native.objc_msgSend("void", this, "setControlSize:", controlSize)
    }

    public open fun representedObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "representedObject") as ObjCObject

    public open fun setRepresentedObject(representedObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setRepresentedObject:", representedObject)
    }

    public open fun cellAttribute(aParameter: Any): Int =
        Native.objc_msgSend("int", this, "cellAttribute:", aParameter) as Int

    public open fun setCellAttribute_to(aParameter: Any, value: Int): Unit {
        Native.objc_msgSend("void", this, "setCellAttribute:to:", aParameter, value)
    }

    public open fun imageRectForBounds(theRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "imageRectForBounds:", theRect)

    public open fun titleRectForBounds(theRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "titleRectForBounds:", theRect)

    public open fun drawingRectForBounds(theRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "drawingRectForBounds:", theRect)

    public open fun cellSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "cellSize")

    public open fun cellSizeForBounds(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "cellSizeForBounds:", aRect)

    public open fun highlightColorWithFrame_inView(cellFrame: Any, controlView: NSView): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "highlightColorWithFrame:inView:", cellFrame, controlView) as NSColor

    public open fun calcDrawInfo(aRect: Any): Unit {
        Native.objc_msgSend("void", this, "calcDrawInfo:", aRect)
    }

    public open fun setUpFieldEditorAttributes(textObj: NSText): NSText =
        Native.objc_msgSend("class objc.NSText", this, "setUpFieldEditorAttributes:", textObj) as NSText

    public open fun drawInteriorWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawInteriorWithFrame:inView:", cellFrame, controlView)
    }

    public open fun drawWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawWithFrame:inView:", cellFrame, controlView)
    }

    public open fun highlight_withFrame_inView(flag: Boolean, cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "highlight:withFrame:inView:", flag, cellFrame, controlView)
    }

    public open fun mouseDownFlags(): Int =
        Native.objc_msgSend("int", this, "mouseDownFlags") as Int

    public open fun getPeriodicDelay_interval(delay: Pointer<Float>, interval: Pointer<Float>): Unit {
        Native.objc_msgSend("void", this, "getPeriodicDelay:interval:", delay, interval)
    }

    public open fun startTrackingAt_inView(startPoint: Any, controlView: NSView): Boolean =
        Native.objc_msgSend("boolean", this, "startTrackingAt:inView:", startPoint, controlView) as Boolean

    public open fun continueTracking_at_inView(lastPoint: Any, currentPoint: Any, controlView: NSView): Boolean =
        Native.objc_msgSend("boolean", this, "continueTracking:at:inView:", lastPoint, currentPoint, controlView) as Boolean

    public open fun stopTracking_at_inView_mouseIsUp(lastPoint: Any, stopPoint: Any, controlView: NSView, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "stopTracking:at:inView:mouseIsUp:", lastPoint, stopPoint, controlView, flag)
    }

    public open fun trackMouse_inRect_ofView_untilMouseUp(theEvent: NSEvent, cellFrame: Any, controlView: NSView, flag: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "trackMouse:inRect:ofView:untilMouseUp:", theEvent, cellFrame, controlView, flag) as Boolean

    public open fun editWithFrame_inView_editor_delegate_event(aRect: Any, controlView: NSView, textObj: NSText, anObject: ObjCObject, theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "editWithFrame:inView:editor:delegate:event:", aRect, controlView, textObj, anObject, theEvent)
    }

    public open fun selectWithFrame_inView_editor_delegate_start_length(aRect: Any, controlView: NSView, textObj: NSText, anObject: ObjCObject, selStart: Int, selLength: Int): Unit {
        Native.objc_msgSend("void", this, "selectWithFrame:inView:editor:delegate:start:length:", aRect, controlView, textObj, anObject, selStart, selLength)
    }

    public open fun endEditing(textObj: NSText): Unit {
        Native.objc_msgSend("void", this, "endEditing:", textObj)
    }

    public open fun resetCursorRect_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "resetCursorRect:inView:", cellFrame, controlView)
    }

    public open fun menu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menu") as NSMenu

    public open fun setMenu(menu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setMenu:", menu)
    }

    public open fun menuForEvent_inRect_ofView(event: NSEvent, cellFrame: Any, view: NSView): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menuForEvent:inRect:ofView:", event, cellFrame, view) as NSMenu

    public open fun sendsActionOnEndEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "sendsActionOnEndEditing") as Boolean

    public open fun setSendsActionOnEndEditing(sendsActionOnEndEditing: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSendsActionOnEndEditing:", sendsActionOnEndEditing)
    }

    public open fun baseWritingDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "baseWritingDirection")

    public open fun setBaseWritingDirection(baseWritingDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setBaseWritingDirection:", baseWritingDirection)
    }

    public open fun lineBreakMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "lineBreakMode")

    public open fun setLineBreakMode(lineBreakMode: Any): Unit {
        Native.objc_msgSend("void", this, "setLineBreakMode:", lineBreakMode)
    }

    public open fun allowsUndo(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsUndo") as Boolean

    public open fun setAllowsUndo(allowsUndo: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsUndo:", allowsUndo)
    }

    public open fun integerValue(): Int =
        Native.objc_msgSend("int", this, "integerValue") as Int

    public open fun setIntegerValue(integerValue: Int): Unit {
        Native.objc_msgSend("void", this, "setIntegerValue:", integerValue)
    }

    public open fun takeIntegerValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeIntegerValueFrom:", sender)
    }

    public open fun truncatesLastVisibleLine(): Boolean =
        Native.objc_msgSend("boolean", this, "truncatesLastVisibleLine") as Boolean

    public open fun setTruncatesLastVisibleLine(truncatesLastVisibleLine: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTruncatesLastVisibleLine:", truncatesLastVisibleLine)
    }

    public open fun userInterfaceLayoutDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "userInterfaceLayoutDirection")

    public open fun setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setUserInterfaceLayoutDirection:", userInterfaceLayoutDirection)
    }

    public open fun fieldEditorForView(aControlView: NSView): NSTextView =
        Native.objc_msgSend("class objc.NSTextView", this, "fieldEditorForView:", aControlView) as NSTextView

    public open fun usesSingleLineMode(): Boolean =
        Native.objc_msgSend("boolean", this, "usesSingleLineMode") as Boolean

    public open fun setUsesSingleLineMode(usesSingleLineMode: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesSingleLineMode:", usesSingleLineMode)
    }

    public open fun draggingImageComponentsWithFrame_inView(frame: Any, view: NSView): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "draggingImageComponentsWithFrame:inView:", frame, view) as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSUserInterfaceItemIdentification.metaclass, NSAccessibilityElementProtocol.metaclass, NSAccessibility.metaclass, NSCell_NSKeyboardUI.metaclass, NSCell_NSCellAttributedStringMethods.metaclass, NSCell_NSCellMixedState.metaclass, NSCell_NSCellHitTest.metaclass, NSCell_NSCellExpansion.metaclass, NSCell_NSCellBackgroundStyle.metaclass, NSCell_NSDeprecated.metaclass {
        public open fun prefersTrackingUntilMouseUp(): Boolean =
            Native.objc_msgSend("boolean", this, "prefersTrackingUntilMouseUp") as Boolean

        public open fun defaultMenu(): NSMenu =
            Native.objc_msgSend("class objc.NSMenu", this, "defaultMenu") as NSMenu

    }

    companion object : NSObject(Native.objc_getClass("NSCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSActionCell(pointer: Long) : NSCell(pointer) {
    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSActionCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAlert(pointer: Long) : NSObject(pointer) {
    public open fun messageText(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "messageText") as NSString

    public open fun setMessageText(messageText: NSString): Unit {
        Native.objc_msgSend("void", this, "setMessageText:", messageText)
    }

    public open fun informativeText(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "informativeText") as NSString

    public open fun setInformativeText(informativeText: NSString): Unit {
        Native.objc_msgSend("void", this, "setInformativeText:", informativeText)
    }

    public open fun icon(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "icon") as NSImage

    public open fun setIcon(icon: NSImage): Unit {
        Native.objc_msgSend("void", this, "setIcon:", icon)
    }

    public open fun addButtonWithTitle(title: NSString): NSButton =
        Native.objc_msgSend("class objc.NSButton", this, "addButtonWithTitle:", title) as NSButton

    public open fun buttons(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "buttons") as NSArray

    public open fun showsHelp(): Boolean =
        Native.objc_msgSend("boolean", this, "showsHelp") as Boolean

    public open fun setShowsHelp(showsHelp: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsHelp:", showsHelp)
    }

    public open fun helpAnchor(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "helpAnchor") as NSString

    public open fun setHelpAnchor(helpAnchor: NSString): Unit {
        Native.objc_msgSend("void", this, "setHelpAnchor:", helpAnchor)
    }

    public open fun alertStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "alertStyle")

    public open fun setAlertStyle(alertStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setAlertStyle:", alertStyle)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun showsSuppressionButton(): Boolean =
        Native.objc_msgSend("boolean", this, "showsSuppressionButton") as Boolean

    public open fun setShowsSuppressionButton(showsSuppressionButton: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsSuppressionButton:", showsSuppressionButton)
    }

    public open fun suppressionButton(): NSButton =
        Native.objc_msgSend("class objc.NSButton", this, "suppressionButton") as NSButton

    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun setAccessoryView(accessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", accessoryView)
    }

    public open fun layout(): Unit {
        Native.objc_msgSend("void", this, "layout")
    }

    public open fun runModal(): Int =
        Native.objc_msgSend("int", this, "runModal") as Int

    public open fun beginSheetModalForWindow_modalDelegate_didEndSelector_contextInfo(window: NSWindow, delegate: ObjCObject, didEndSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:", window, delegate, didEndSelector, contextInfo)
    }

    public open fun beginSheetModalForWindow_completionHandler(sheetWindow: NSWindow, handler: Any): Unit {
        Native.objc_msgSend("void", this, "beginSheetModalForWindow:completionHandler:", sheetWindow, handler)
    }

    public open fun window(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "window") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun alertWithError(error: NSError): NSAlert =
            Native.objc_msgSend("class objc.NSAlert", this, "alertWithError:", error) as NSAlert

        public open fun alertWithMessageText_defaultButton_alternateButton_otherButton_informativeTextWithFormat(message: NSString, defaultButton: NSString, alternateButton: NSString, otherButton: NSString, format: NSString): NSAlert =
            Native.objc_msgSend("class objc.NSAlert", this, "alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:", message, defaultButton, alternateButton, otherButton, format) as NSAlert

    }

    companion object : NSObject(Native.objc_getClass("NSAlert")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAnimationContext(pointer: Long) : NSObject(pointer) {
    public open fun duration(): Double =
        Native.objc_msgSend("double", this, "duration") as Double

    public open fun setDuration(duration: Double): Unit {
        Native.objc_msgSend("void", this, "setDuration:", duration)
    }

    public open fun timingFunction(): CAMediaTimingFunction =
        Native.objc_msgSend("class objc.CAMediaTimingFunction", this, "timingFunction") as CAMediaTimingFunction

    public open fun setTimingFunction(timingFunction: CAMediaTimingFunction): Unit {
        Native.objc_msgSend("void", this, "setTimingFunction:", timingFunction)
    }

    public open fun completionHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "completionHandler")

    public open fun setCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setCompletionHandler:", completionHandler)
    }

    public open fun allowsImplicitAnimation(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsImplicitAnimation") as Boolean

    public open fun setAllowsImplicitAnimation(allowsImplicitAnimation: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsImplicitAnimation:", allowsImplicitAnimation)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun runAnimationGroup_completionHandler(changes: Any, completionHandler: Any): Unit {
            Native.objc_msgSend("void", this, "runAnimationGroup:completionHandler:", changes, completionHandler)
        }

        public open fun beginGrouping(): Unit {
            Native.objc_msgSend("void", this, "beginGrouping")
        }

        public open fun endGrouping(): Unit {
            Native.objc_msgSend("void", this, "endGrouping")
        }

        public open fun currentContext(): NSAnimationContext =
            Native.objc_msgSend("class objc.NSAnimationContext", this, "currentContext") as NSAnimationContext

    }

    companion object : NSObject(Native.objc_getClass("NSAnimationContext")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSBox(pointer: Long) : NSView(pointer), NSBox_NSDeprecated {
    public open fun borderType(): Any =
        Native.objc_msgSend("class objc.Any", this, "borderType")

    public open fun setBorderType(borderType: Any): Unit {
        Native.objc_msgSend("void", this, "setBorderType:", borderType)
    }

    public open fun titlePosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "titlePosition")

    public open fun setTitlePosition(titlePosition: Any): Unit {
        Native.objc_msgSend("void", this, "setTitlePosition:", titlePosition)
    }

    public open fun boxType(): Any =
        Native.objc_msgSend("class objc.Any", this, "boxType")

    public open fun setBoxType(boxType: Any): Unit {
        Native.objc_msgSend("void", this, "setBoxType:", boxType)
    }

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun titleFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "titleFont") as NSFont

    public open fun setTitleFont(titleFont: NSFont): Unit {
        Native.objc_msgSend("void", this, "setTitleFont:", titleFont)
    }

    public open fun borderRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "borderRect")

    public open fun titleRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "titleRect")

    public open fun titleCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "titleCell") as ObjCObject

    public open fun sizeToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeToFit")
    }

    public open fun contentViewMargins(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentViewMargins")

    public open fun setContentViewMargins(contentViewMargins: Any): Unit {
        Native.objc_msgSend("void", this, "setContentViewMargins:", contentViewMargins)
    }

    public open fun setFrameFromContentFrame(contentFrame: Any): Unit {
        Native.objc_msgSend("void", this, "setFrameFromContentFrame:", contentFrame)
    }

    public open fun contentView(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "contentView") as ObjCObject

    public open fun setContentView(contentView: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setContentView:", contentView)
    }

    public open fun isTransparent(): Boolean =
        Native.objc_msgSend("boolean", this, "isTransparent") as Boolean

    public open fun setTransparent(transparent: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTransparent:", transparent)
    }

    public open fun borderWidth(): Double =
        Native.objc_msgSend("double", this, "borderWidth") as Double

    public open fun setBorderWidth(borderWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setBorderWidth:", borderWidth)
    }

    public open fun cornerRadius(): Double =
        Native.objc_msgSend("double", this, "cornerRadius") as Double

    public open fun setCornerRadius(cornerRadius: Double): Unit {
        Native.objc_msgSend("void", this, "setCornerRadius:", cornerRadius)
    }

    public open fun borderColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "borderColor") as NSColor

    public open fun setBorderColor(borderColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBorderColor:", borderColor)
    }

    public open fun fillColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "fillColor") as NSColor

    public open fun setFillColor(fillColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setFillColor:", fillColor)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSBox_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSBox")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSControl(pointer: Long) : NSView(pointer), NSControl_NSKeyboardUI, NSControl_NSControlTextMethods, NSControl_NSControlEditableTextMethods, NSControl_NSDeprecated, NSControl_NSConstraintBasedLayoutLayering {
    public open fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    public open fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    public open fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    public open fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    public open fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    public open fun ignoresMultiClick(): Boolean =
        Native.objc_msgSend("boolean", this, "ignoresMultiClick") as Boolean

    public open fun setIgnoresMultiClick(ignoresMultiClick: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIgnoresMultiClick:", ignoresMultiClick)
    }

    public open fun isContinuous(): Boolean =
        Native.objc_msgSend("boolean", this, "isContinuous") as Boolean

    public open fun setContinuous(continuous: Boolean): Unit {
        Native.objc_msgSend("void", this, "setContinuous:", continuous)
    }

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun setEnabled(enabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEnabled:", enabled)
    }

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(refusesFirstResponder: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", refusesFirstResponder)
    }

    public open fun isHighlighted(): Boolean =
        Native.objc_msgSend("boolean", this, "isHighlighted") as Boolean

    public open fun setHighlighted(highlighted: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHighlighted:", highlighted)
    }

    public open fun controlSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlSize")

    public open fun setControlSize(controlSize: Any): Unit {
        Native.objc_msgSend("void", this, "setControlSize:", controlSize)
    }

    public open fun formatter(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "formatter") as ObjCObject

    public open fun setFormatter(formatter: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setFormatter:", formatter)
    }

    public open fun stringValue(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringValue") as NSString

    public open fun setStringValue(stringValue: NSString): Unit {
        Native.objc_msgSend("void", this, "setStringValue:", stringValue)
    }

    public open fun attributedStringValue(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedStringValue") as NSAttributedString

    public open fun setAttributedStringValue(attributedStringValue: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedStringValue:", attributedStringValue)
    }

    public open fun objectValue(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectValue") as ObjCObject

    public open fun setObjectValue(objectValue: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setObjectValue:", objectValue)
    }

    public open fun intValue(): Int =
        Native.objc_msgSend("int", this, "intValue") as Int

    public open fun setIntValue(intValue: Int): Unit {
        Native.objc_msgSend("void", this, "setIntValue:", intValue)
    }

    public open fun integerValue(): Int =
        Native.objc_msgSend("int", this, "integerValue") as Int

    public open fun setIntegerValue(integerValue: Int): Unit {
        Native.objc_msgSend("void", this, "setIntegerValue:", integerValue)
    }

    public open fun floatValue(): Float =
        Native.objc_msgSend("float", this, "floatValue") as Float

    public open fun setFloatValue(floatValue: Float): Unit {
        Native.objc_msgSend("void", this, "setFloatValue:", floatValue)
    }

    public open fun doubleValue(): Double =
        Native.objc_msgSend("double", this, "doubleValue") as Double

    public open fun setDoubleValue(doubleValue: Double): Unit {
        Native.objc_msgSend("void", this, "setDoubleValue:", doubleValue)
    }

    public open fun sizeThatFits(size: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "sizeThatFits:", size)

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun sizeToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeToFit")
    }

    public open fun sendActionOn(mask: Int): Int =
        Native.objc_msgSend("int", this, "sendActionOn:", mask) as Int

    public open fun sendAction_to(theAction: ObjCSelector, theTarget: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "sendAction:to:", theAction, theTarget) as Boolean

    public open fun takeIntValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeIntValueFrom:", sender)
    }

    public open fun takeFloatValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeFloatValueFrom:", sender)
    }

    public open fun takeDoubleValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeDoubleValueFrom:", sender)
    }

    public open fun takeStringValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeStringValueFrom:", sender)
    }

    public open fun takeObjectValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeObjectValueFrom:", sender)
    }

    public open fun takeIntegerValueFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeIntegerValueFrom:", sender)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSControl_NSKeyboardUI.metaclass, NSControl_NSControlTextMethods.metaclass, NSControl_NSControlEditableTextMethods.metaclass, NSControl_NSDeprecated.metaclass, NSControl_NSConstraintBasedLayoutLayering.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSControl")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSButtonCell(pointer: Long) : NSActionCell(pointer), NSButtonCell_NSButtonCellExtensions, NSButtonCell_NSButtonCellAttributedStringMethods, NSButtonCell_NSButtonCellBezelStyles, NSButtonCell_NSButtonCellSoundExtensions, NSButtonCell_NSKeyboardUI {
    override fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    override fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun alternateTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "alternateTitle") as NSString

    public open fun setAlternateTitle(alternateTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setAlternateTitle:", alternateTitle)
    }

    public open fun alternateImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "alternateImage") as NSImage

    public open fun setAlternateImage(alternateImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setAlternateImage:", alternateImage)
    }

    public open fun imagePosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "imagePosition")

    public open fun setImagePosition(imagePosition: Any): Unit {
        Native.objc_msgSend("void", this, "setImagePosition:", imagePosition)
    }

    public open fun imageScaling(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageScaling")

    public open fun setImageScaling(imageScaling: Any): Unit {
        Native.objc_msgSend("void", this, "setImageScaling:", imageScaling)
    }

    public open fun highlightsBy(): Any =
        Native.objc_msgSend("class objc.Any", this, "highlightsBy")

    public open fun setHighlightsBy(highlightsBy: Any): Unit {
        Native.objc_msgSend("void", this, "setHighlightsBy:", highlightsBy)
    }

    public open fun showsStateBy(): Any =
        Native.objc_msgSend("class objc.Any", this, "showsStateBy")

    public open fun setShowsStateBy(showsStateBy: Any): Unit {
        Native.objc_msgSend("void", this, "setShowsStateBy:", showsStateBy)
    }

    public open fun setButtonType(aType: Any): Unit {
        Native.objc_msgSend("void", this, "setButtonType:", aType)
    }

    override fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    public open fun isTransparent(): Boolean =
        Native.objc_msgSend("boolean", this, "isTransparent") as Boolean

    public open fun setTransparent(transparent: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTransparent:", transparent)
    }

    public open fun setPeriodicDelay_interval(delay: Float, interval: Float): Unit {
        Native.objc_msgSend("void", this, "setPeriodicDelay:interval:", delay, interval)
    }

    override fun getPeriodicDelay_interval(delay: Pointer<Float>, interval: Pointer<Float>): Unit {
        Native.objc_msgSend("void", this, "getPeriodicDelay:interval:", delay, interval)
    }

    override fun keyEquivalent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyEquivalent") as NSString

    public open fun setKeyEquivalent(keyEquivalent: NSString): Unit {
        Native.objc_msgSend("void", this, "setKeyEquivalent:", keyEquivalent)
    }

    public open fun keyEquivalentModifierMask(): Int =
        Native.objc_msgSend("int", this, "keyEquivalentModifierMask") as Int

    public open fun setKeyEquivalentModifierMask(keyEquivalentModifierMask: Int): Unit {
        Native.objc_msgSend("void", this, "setKeyEquivalentModifierMask:", keyEquivalentModifierMask)
    }

    public open fun keyEquivalentFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "keyEquivalentFont") as NSFont

    public open fun setKeyEquivalentFont(keyEquivalentFont: NSFont): Unit {
        Native.objc_msgSend("void", this, "setKeyEquivalentFont:", keyEquivalentFont)
    }

    public open fun setKeyEquivalentFont_size(fontName: NSString, fontSize: Double): Unit {
        Native.objc_msgSend("void", this, "setKeyEquivalentFont:size:", fontName, fontSize)
    }

    override fun performClick(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performClick:", sender)
    }

    public open fun drawImage_withFrame_inView(image: NSImage, frame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawImage:withFrame:inView:", image, frame, controlView)
    }

    public open fun drawTitle_withFrame_inView(title: NSAttributedString, frame: Any, controlView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "drawTitle:withFrame:inView:", title, frame, controlView)

    public open fun drawBezelWithFrame_inView(frame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawBezelWithFrame:inView:", frame, controlView)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass, NSButtonCell_NSButtonCellExtensions.metaclass, NSButtonCell_NSButtonCellAttributedStringMethods.metaclass, NSButtonCell_NSButtonCellBezelStyles.metaclass, NSButtonCell_NSButtonCellSoundExtensions.metaclass, NSButtonCell_NSKeyboardUI.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSButtonCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSButton(pointer: Long) : NSControl(pointer), NSUserInterfaceValidations, NSAccessibilityButton, NSButton_NSButtonAttributedStringMethods, NSButton_NSButtonBezelStyles, NSButton_NSButtonMixedState, NSButton_NSButtonBorder, NSButton_NSButtonSoundExtensions, NSButton_NSKeyboardUI {
    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun alternateTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "alternateTitle") as NSString

    public open fun setAlternateTitle(alternateTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setAlternateTitle:", alternateTitle)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun alternateImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "alternateImage") as NSImage

    public open fun setAlternateImage(alternateImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setAlternateImage:", alternateImage)
    }

    public open fun imagePosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "imagePosition")

    public open fun setImagePosition(imagePosition: Any): Unit {
        Native.objc_msgSend("void", this, "setImagePosition:", imagePosition)
    }

    public open fun setButtonType(aType: Any): Unit {
        Native.objc_msgSend("void", this, "setButtonType:", aType)
    }

    public open fun state(): Int =
        Native.objc_msgSend("int", this, "state") as Int

    public open fun setState(state: Int): Unit {
        Native.objc_msgSend("void", this, "setState:", state)
    }

    public open fun isBordered(): Boolean =
        Native.objc_msgSend("boolean", this, "isBordered") as Boolean

    public open fun setBordered(bordered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBordered:", bordered)
    }

    public open fun isTransparent(): Boolean =
        Native.objc_msgSend("boolean", this, "isTransparent") as Boolean

    public open fun setTransparent(transparent: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTransparent:", transparent)
    }

    public open fun setPeriodicDelay_interval(delay: Float, interval: Float): Unit {
        Native.objc_msgSend("void", this, "setPeriodicDelay:interval:", delay, interval)
    }

    public open fun getPeriodicDelay_interval(delay: Pointer<Float>, interval: Pointer<Float>): Unit {
        Native.objc_msgSend("void", this, "getPeriodicDelay:interval:", delay, interval)
    }

    public open fun keyEquivalent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyEquivalent") as NSString

    public open fun setKeyEquivalent(keyEquivalent: NSString): Unit {
        Native.objc_msgSend("void", this, "setKeyEquivalent:", keyEquivalent)
    }

    public open fun keyEquivalentModifierMask(): Int =
        Native.objc_msgSend("int", this, "keyEquivalentModifierMask") as Int

    public open fun setKeyEquivalentModifierMask(keyEquivalentModifierMask: Int): Unit {
        Native.objc_msgSend("void", this, "setKeyEquivalentModifierMask:", keyEquivalentModifierMask)
    }

    public open fun highlight(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "highlight:", flag)
    }

    override fun performKeyEquivalent(key: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", key) as Boolean

    public open fun isSpringLoaded(): Boolean =
        Native.objc_msgSend("boolean", this, "isSpringLoaded") as Boolean

    public open fun setSpringLoaded(springLoaded: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSpringLoaded:", springLoaded)
    }

    public open fun maxAcceleratorLevel(): Int =
        Native.objc_msgSend("int", this, "maxAcceleratorLevel") as Int

    public open fun setMaxAcceleratorLevel(maxAcceleratorLevel: Int): Unit {
        Native.objc_msgSend("void", this, "setMaxAcceleratorLevel:", maxAcceleratorLevel)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSUserInterfaceValidations.metaclass, NSAccessibilityButton.metaclass, NSButton_NSButtonAttributedStringMethods.metaclass, NSButton_NSButtonBezelStyles.metaclass, NSButton_NSButtonMixedState.metaclass, NSButton_NSButtonBorder.metaclass, NSButton_NSButtonSoundExtensions.metaclass, NSButton_NSKeyboardUI.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSButton")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSClipView(pointer: Long) : NSView(pointer), NSClipView_NSDeprecated {
    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun documentView(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "documentView") as ObjCObject

    public open fun setDocumentView(documentView: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDocumentView:", documentView)
    }

    public open fun documentRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "documentRect")

    public open fun documentCursor(): NSCursor =
        Native.objc_msgSend("class objc.NSCursor", this, "documentCursor") as NSCursor

    public open fun setDocumentCursor(documentCursor: NSCursor): Unit {
        Native.objc_msgSend("void", this, "setDocumentCursor:", documentCursor)
    }

    public open fun documentVisibleRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "documentVisibleRect")

    public open fun viewFrameChanged(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "viewFrameChanged:", notification)
    }

    public open fun viewBoundsChanged(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "viewBoundsChanged:", notification)
    }

    public open fun copiesOnScroll(): Boolean =
        Native.objc_msgSend("boolean", this, "copiesOnScroll") as Boolean

    public open fun setCopiesOnScroll(copiesOnScroll: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCopiesOnScroll:", copiesOnScroll)
    }

    override fun autoscroll(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "autoscroll:", theEvent) as Boolean

    public open fun scrollToPoint(newOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "scrollToPoint:", newOrigin)
    }

    public open fun constrainBoundsRect(proposedBounds: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "constrainBoundsRect:", proposedBounds)

    public open fun contentInsets(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentInsets")

    public open fun setContentInsets(contentInsets: Any): Unit {
        Native.objc_msgSend("void", this, "setContentInsets:", contentInsets)
    }

    public open fun automaticallyAdjustsContentInsets(): Boolean =
        Native.objc_msgSend("boolean", this, "automaticallyAdjustsContentInsets") as Boolean

    public open fun setAutomaticallyAdjustsContentInsets(automaticallyAdjustsContentInsets: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticallyAdjustsContentInsets:", automaticallyAdjustsContentInsets)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSClipView_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSClipView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDockTile(pointer: Long) : NSObject(pointer) {
    public open fun size(): Any =
        Native.objc_msgSend("class objc.Any", this, "size")

    public open fun contentView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "contentView") as NSView

    public open fun setContentView(contentView: NSView): Unit {
        Native.objc_msgSend("void", this, "setContentView:", contentView)
    }

    public open fun display(): Unit {
        Native.objc_msgSend("void", this, "display")
    }

    public open fun showsApplicationBadge(): Boolean =
        Native.objc_msgSend("boolean", this, "showsApplicationBadge") as Boolean

    public open fun setShowsApplicationBadge(showsApplicationBadge: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsApplicationBadge:", showsApplicationBadge)
    }

    public open fun badgeLabel(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "badgeLabel") as NSString

    public open fun setBadgeLabel(badgeLabel: NSString): Unit {
        Native.objc_msgSend("void", this, "setBadgeLabel:", badgeLabel)
    }

    public open fun owner(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "owner") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDockTile")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFont(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun fontName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fontName") as NSString

    public open fun pointSize(): Double =
        Native.objc_msgSend("double", this, "pointSize") as Double

    public open fun matrix(): Pointer<Double> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "matrix") as Pointer<Double>

    public open fun familyName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "familyName") as NSString

    public open fun displayName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "displayName") as NSString

    public open fun fontDescriptor(): NSFontDescriptor =
        Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptor") as NSFontDescriptor

    public open fun textTransform(): NSAffineTransform =
        Native.objc_msgSend("class objc.NSAffineTransform", this, "textTransform") as NSAffineTransform

    public open fun numberOfGlyphs(): Int =
        Native.objc_msgSend("int", this, "numberOfGlyphs") as Int

    public open fun mostCompatibleStringEncoding(): Int =
        Native.objc_msgSend("int", this, "mostCompatibleStringEncoding") as Int

    public open fun glyphWithName(aName: NSString): Int =
        Native.objc_msgSend("int", this, "glyphWithName:", aName) as Int

    public open fun coveredCharacterSet(): NSCharacterSet =
        Native.objc_msgSend("class objc.NSCharacterSet", this, "coveredCharacterSet") as NSCharacterSet

    public open fun boundingRectForFont(): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingRectForFont")

    public open fun maximumAdvancement(): Any =
        Native.objc_msgSend("class objc.Any", this, "maximumAdvancement")

    public open fun ascender(): Double =
        Native.objc_msgSend("double", this, "ascender") as Double

    public open fun descender(): Double =
        Native.objc_msgSend("double", this, "descender") as Double

    public open fun leading(): Double =
        Native.objc_msgSend("double", this, "leading") as Double

    public open fun underlinePosition(): Double =
        Native.objc_msgSend("double", this, "underlinePosition") as Double

    public open fun underlineThickness(): Double =
        Native.objc_msgSend("double", this, "underlineThickness") as Double

    public open fun italicAngle(): Double =
        Native.objc_msgSend("double", this, "italicAngle") as Double

    public open fun capHeight(): Double =
        Native.objc_msgSend("double", this, "capHeight") as Double

    public open fun xHeight(): Double =
        Native.objc_msgSend("double", this, "xHeight") as Double

    public open fun isFixedPitch(): Boolean =
        Native.objc_msgSend("boolean", this, "isFixedPitch") as Boolean

    public open fun boundingRectForGlyph(aGlyph: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingRectForGlyph:", aGlyph)

    public open fun advancementForGlyph(ag: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "advancementForGlyph:", ag)

    public open fun getBoundingRects_forGlyphs_count(bounds: Pointer<Any>, glyphs: Pointer<Int>, glyphCount: Int): Unit {
        Native.objc_msgSend("void", this, "getBoundingRects:forGlyphs:count:", bounds, glyphs, glyphCount)
    }

    public open fun getAdvancements_forGlyphs_count(advancements: Pointer<Any>, glyphs: Pointer<Int>, glyphCount: Int): Unit {
        Native.objc_msgSend("void", this, "getAdvancements:forGlyphs:count:", advancements, glyphs, glyphCount)
    }

    public open fun getAdvancements_forPackedGlyphs_length(advancements: Pointer<Any>, packedGlyphs: Pointer<Unit>, length: Int): Unit {
        Native.objc_msgSend("void", this, "getAdvancements:forPackedGlyphs:length:", advancements, packedGlyphs, length)
    }

    public open fun set(): Unit {
        Native.objc_msgSend("void", this, "set")
    }

    public open fun setInContext(graphicsContext: NSGraphicsContext): Unit {
        Native.objc_msgSend("void", this, "setInContext:", graphicsContext)
    }

    public open fun printerFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "printerFont") as NSFont

    public open fun screenFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "screenFont") as NSFont

    public open fun screenFontWithRenderingMode(renderingMode: Any): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "screenFontWithRenderingMode:", renderingMode) as NSFont

    public open fun renderingMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "renderingMode")

    public open fun verticalFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "verticalFont") as NSFont

    public open fun isVertical(): Boolean =
        Native.objc_msgSend("boolean", this, "isVertical") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun fontWithName_size(fontName: NSString, fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "fontWithName:size:", fontName, fontSize) as NSFont

        public open fun fontWithName_matrix(fontName: NSString, fontMatrix: Pointer<Double>): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "fontWithName:matrix:", fontName, fontMatrix) as NSFont

        public open fun fontWithDescriptor_size(fontDescriptor: NSFontDescriptor, fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "fontWithDescriptor:size:", fontDescriptor, fontSize) as NSFont

        public open fun fontWithDescriptor_textTransform(fontDescriptor: NSFontDescriptor, textTransform: NSAffineTransform): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "fontWithDescriptor:textTransform:", fontDescriptor, textTransform) as NSFont

        public open fun userFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "userFontOfSize:", fontSize) as NSFont

        public open fun userFixedPitchFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "userFixedPitchFontOfSize:", fontSize) as NSFont

        public open fun setUserFont(aFont: NSFont): Unit {
            Native.objc_msgSend("void", this, "setUserFont:", aFont)
        }

        public open fun setUserFixedPitchFont(aFont: NSFont): Unit {
            Native.objc_msgSend("void", this, "setUserFixedPitchFont:", aFont)
        }

        public open fun systemFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "systemFontOfSize:", fontSize) as NSFont

        public open fun boldSystemFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "boldSystemFontOfSize:", fontSize) as NSFont

        public open fun labelFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "labelFontOfSize:", fontSize) as NSFont

        public open fun titleBarFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "titleBarFontOfSize:", fontSize) as NSFont

        public open fun menuFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "menuFontOfSize:", fontSize) as NSFont

        public open fun menuBarFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "menuBarFontOfSize:", fontSize) as NSFont

        public open fun messageFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "messageFontOfSize:", fontSize) as NSFont

        public open fun paletteFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "paletteFontOfSize:", fontSize) as NSFont

        public open fun toolTipsFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "toolTipsFontOfSize:", fontSize) as NSFont

        public open fun controlContentFontOfSize(fontSize: Double): NSFont =
            Native.objc_msgSend("class objc.NSFont", this, "controlContentFontOfSize:", fontSize) as NSFont

        public open fun systemFontSize(): Double =
            Native.objc_msgSend("double", this, "systemFontSize") as Double

        public open fun smallSystemFontSize(): Double =
            Native.objc_msgSend("double", this, "smallSystemFontSize") as Double

        public open fun labelFontSize(): Double =
            Native.objc_msgSend("double", this, "labelFontSize") as Double

        public open fun systemFontSizeForControlSize(controlSize: Any): Double =
            Native.objc_msgSend("double", this, "systemFontSizeForControlSize:", controlSize) as Double

    }

    companion object : NSObject(Native.objc_getClass("NSFont")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFontCollection(pointer: Long) : NSObject(pointer), NSCopying, NSMutableCopying, NSCoding {
    public open fun queryDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "queryDescriptors") as NSArray

    public open fun exclusionDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "exclusionDescriptors") as NSArray

    public open fun matchingDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "matchingDescriptors") as NSArray

    public open fun matchingDescriptorsWithOptions(options: NSDictionary): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "matchingDescriptorsWithOptions:", options) as NSArray

    public open fun matchingDescriptorsForFamily(family: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "matchingDescriptorsForFamily:", family) as NSArray

    public open fun matchingDescriptorsForFamily_options(family: NSString, options: NSDictionary): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "matchingDescriptorsForFamily:options:", family, options) as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSMutableCopying.metaclass, NSCoding.metaclass {
        public open fun fontCollectionWithDescriptors(queryDescriptors: NSArray): NSFontCollection =
            Native.objc_msgSend("class objc.NSFontCollection", this, "fontCollectionWithDescriptors:", queryDescriptors) as NSFontCollection

        public open fun fontCollectionWithAllAvailableDescriptors(): NSFontCollection =
            Native.objc_msgSend("class objc.NSFontCollection", this, "fontCollectionWithAllAvailableDescriptors") as NSFontCollection

        public open fun fontCollectionWithLocale(locale: NSLocale): NSFontCollection =
            Native.objc_msgSend("class objc.NSFontCollection", this, "fontCollectionWithLocale:", locale) as NSFontCollection

        public open fun showFontCollection_withName_visibility_error(collection: NSFontCollection, name: NSString, visibility: Any, error: Pointer<NSError>): Boolean =
            Native.objc_msgSend("boolean", this, "showFontCollection:withName:visibility:error:", collection, name, visibility, error) as Boolean

        public open fun hideFontCollectionWithName_visibility_error(name: NSString, visibility: Any, error: Pointer<NSError>): Boolean =
            Native.objc_msgSend("boolean", this, "hideFontCollectionWithName:visibility:error:", name, visibility, error) as Boolean

        public open fun renameFontCollectionWithName_visibility_toName_error(name: NSString, visibility: Any, name_2: NSString, error: Pointer<NSError>): Boolean =
            Native.objc_msgSend("boolean", this, "renameFontCollectionWithName:visibility:toName:error:", name, visibility, name, error) as Boolean

        public open fun allFontCollectionNames(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "allFontCollectionNames") as NSArray

        public open fun fontCollectionWithName(name: NSString): NSFontCollection =
            Native.objc_msgSend("class objc.NSFontCollection", this, "fontCollectionWithName:", name) as NSFontCollection

        public open fun fontCollectionWithName_visibility(name: NSString, visibility: Any): NSFontCollection =
            Native.objc_msgSend("class objc.NSFontCollection", this, "fontCollectionWithName:visibility:", name, visibility) as NSFontCollection

    }

    companion object : NSObject(Native.objc_getClass("NSFontCollection")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMutableFontCollection(pointer: Long) : NSFontCollection(pointer) {
    override fun queryDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "queryDescriptors") as NSArray

    public open fun setQueryDescriptors(queryDescriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "setQueryDescriptors:", queryDescriptors)
    }

    override fun exclusionDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "exclusionDescriptors") as NSArray

    public open fun setExclusionDescriptors(exclusionDescriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "setExclusionDescriptors:", exclusionDescriptors)
    }

    public open fun addQueryForDescriptors(descriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "addQueryForDescriptors:", descriptors)
    }

    public open fun removeQueryForDescriptors(descriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "removeQueryForDescriptors:", descriptors)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSFontCollection.metaclass {
        override fun fontCollectionWithDescriptors(queryDescriptors: NSArray): NSMutableFontCollection =
            Native.objc_msgSend("class objc.NSMutableFontCollection", this, "fontCollectionWithDescriptors:", queryDescriptors) as NSMutableFontCollection

        override fun fontCollectionWithAllAvailableDescriptors(): NSMutableFontCollection =
            Native.objc_msgSend("class objc.NSMutableFontCollection", this, "fontCollectionWithAllAvailableDescriptors") as NSMutableFontCollection

        override fun fontCollectionWithLocale(locale: NSLocale): NSMutableFontCollection =
            Native.objc_msgSend("class objc.NSMutableFontCollection", this, "fontCollectionWithLocale:", locale) as NSMutableFontCollection

        override fun fontCollectionWithName(name: NSString): NSMutableFontCollection =
            Native.objc_msgSend("class objc.NSMutableFontCollection", this, "fontCollectionWithName:", name) as NSMutableFontCollection

        override fun fontCollectionWithName_visibility(name: NSString, visibility: Any): NSMutableFontCollection =
            Native.objc_msgSend("class objc.NSMutableFontCollection", this, "fontCollectionWithName:visibility:", name, visibility) as NSMutableFontCollection

    }

    companion object : NSObject(Native.objc_getClass("NSMutableFontCollection")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFontDescriptor(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun postscriptName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "postscriptName") as NSString

    public open fun pointSize(): Double =
        Native.objc_msgSend("double", this, "pointSize") as Double

    public open fun matrix(): NSAffineTransform =
        Native.objc_msgSend("class objc.NSAffineTransform", this, "matrix") as NSAffineTransform

    public open fun symbolicTraits(): Int =
        Native.objc_msgSend("int", this, "symbolicTraits") as Int

    public open fun objectForKey(anAttribute: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForKey:", anAttribute) as ObjCObject

    public open fun fontAttributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fontAttributes") as NSDictionary

    public open fun initWithFontAttributes(attributes: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFontAttributes:", attributes) as ObjCObject

    public open fun matchingFontDescriptorsWithMandatoryKeys(mandatoryKeys: NSSet): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "matchingFontDescriptorsWithMandatoryKeys:", mandatoryKeys) as NSArray

    public open fun matchingFontDescriptorWithMandatoryKeys(mandatoryKeys: NSSet): NSFontDescriptor =
        Native.objc_msgSend("class objc.NSFontDescriptor", this, "matchingFontDescriptorWithMandatoryKeys:", mandatoryKeys) as NSFontDescriptor

    public open fun fontDescriptorByAddingAttributes(attributes: NSDictionary): NSFontDescriptor =
        Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorByAddingAttributes:", attributes) as NSFontDescriptor

    public open fun fontDescriptorWithSymbolicTraits(symbolicTraits: Int): NSFontDescriptor =
        Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorWithSymbolicTraits:", symbolicTraits) as NSFontDescriptor

    public open fun fontDescriptorWithSize(newPointSize: Double): NSFontDescriptor =
        Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorWithSize:", newPointSize) as NSFontDescriptor

    public open fun fontDescriptorWithMatrix(matrix: NSAffineTransform): NSFontDescriptor =
        Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorWithMatrix:", matrix) as NSFontDescriptor

    public open fun fontDescriptorWithFace(newFace: NSString): NSFontDescriptor =
        Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorWithFace:", newFace) as NSFontDescriptor

    public open fun fontDescriptorWithFamily(newFamily: NSString): NSFontDescriptor =
        Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorWithFamily:", newFamily) as NSFontDescriptor

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun fontDescriptorWithFontAttributes(attributes: NSDictionary): NSFontDescriptor =
            Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorWithFontAttributes:", attributes) as NSFontDescriptor

        public open fun fontDescriptorWithName_size(fontName: NSString, size: Double): NSFontDescriptor =
            Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorWithName:size:", fontName, size) as NSFontDescriptor

        public open fun fontDescriptorWithName_matrix(fontName: NSString, matrix: NSAffineTransform): NSFontDescriptor =
            Native.objc_msgSend("class objc.NSFontDescriptor", this, "fontDescriptorWithName:matrix:", fontName, matrix) as NSFontDescriptor

    }

    companion object : NSObject(Native.objc_getClass("NSFontDescriptor")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFontManager(pointer: Long) : NSObject(pointer), NSFontManager_NSFontManagerMenuActionMethods {
    public open fun isMultiple(): Boolean =
        Native.objc_msgSend("boolean", this, "isMultiple") as Boolean

    public open fun selectedFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "selectedFont") as NSFont

    public open fun setSelectedFont_isMultiple(fontObj: NSFont, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectedFont:isMultiple:", fontObj, flag)
    }

    public open fun setFontMenu(newMenu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setFontMenu:", newMenu)
    }

    public open fun fontMenu(create: Boolean): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "fontMenu:", create) as NSMenu

    public open fun fontPanel(create: Boolean): NSFontPanel =
        Native.objc_msgSend("class objc.NSFontPanel", this, "fontPanel:", create) as NSFontPanel

    public open fun fontWithFamily_traits_weight_size(family: NSString, traits: Any, weight: Int, size: Double): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "fontWithFamily:traits:weight:size:", family, traits, weight, size) as NSFont

    public open fun traitsOfFont(fontObj: NSFont): Any =
        Native.objc_msgSend("class objc.Any", this, "traitsOfFont:", fontObj)

    public open fun weightOfFont(fontObj: NSFont): Int =
        Native.objc_msgSend("int", this, "weightOfFont:", fontObj) as Int

    public open fun availableFonts(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "availableFonts") as NSArray

    public open fun availableFontFamilies(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "availableFontFamilies") as NSArray

    public open fun availableMembersOfFontFamily(fam: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "availableMembersOfFontFamily:", fam) as NSArray

    public open fun convertFont(fontObj: NSFont): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "convertFont:", fontObj) as NSFont

    public open fun convertFont_toSize(fontObj: NSFont, size: Double): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "convertFont:toSize:", fontObj, size) as NSFont

    public open fun convertFont_toFace(fontObj: NSFont, typeface: NSString): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "convertFont:toFace:", fontObj, typeface) as NSFont

    public open fun convertFont_toFamily(fontObj: NSFont, family: NSString): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "convertFont:toFamily:", fontObj, family) as NSFont

    public open fun convertFont_toHaveTrait(fontObj: NSFont, `trait`: Any): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "convertFont:toHaveTrait:", fontObj, `trait`) as NSFont

    public open fun convertFont_toNotHaveTrait(fontObj: NSFont, `trait`: Any): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "convertFont:toNotHaveTrait:", fontObj, `trait`) as NSFont

    public open fun convertWeight_ofFont(upFlag: Boolean, fontObj: NSFont): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "convertWeight:ofFont:", upFlag, fontObj) as NSFont

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun setEnabled(enabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEnabled:", enabled)
    }

    public open fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    public open fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    public open fun sendAction(): Boolean =
        Native.objc_msgSend("boolean", this, "sendAction") as Boolean

    public open fun delegate(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "delegate") as ObjCObject

    public open fun setDelegate(delegate: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun localizedNameForFamily_face(family: NSString, faceKey: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedNameForFamily:face:", family, faceKey) as NSString

    public open fun setSelectedAttributes_isMultiple(attributes: NSDictionary, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectedAttributes:isMultiple:", attributes, flag)
    }

    public open fun convertAttributes(attributes: NSDictionary): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "convertAttributes:", attributes) as NSDictionary

    public open fun availableFontNamesMatchingFontDescriptor(descriptor: NSFontDescriptor): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "availableFontNamesMatchingFontDescriptor:", descriptor) as NSArray

    public open fun collectionNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "collectionNames") as NSArray

    public open fun fontDescriptorsInCollection(collectionNames: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "fontDescriptorsInCollection:", collectionNames) as NSArray

    public open fun addCollection_options(collectionName: NSString, collectionOptions: Any): Boolean =
        Native.objc_msgSend("boolean", this, "addCollection:options:", collectionName, collectionOptions) as Boolean

    public open fun removeCollection(collectionName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "removeCollection:", collectionName) as Boolean

    public open fun addFontDescriptors_toCollection(descriptors: NSArray, collectionName: NSString): Unit {
        Native.objc_msgSend("void", this, "addFontDescriptors:toCollection:", descriptors, collectionName)
    }

    public open fun removeFontDescriptor_fromCollection(descriptor: NSFontDescriptor, collection: NSString): Unit {
        Native.objc_msgSend("void", this, "removeFontDescriptor:fromCollection:", descriptor, collection)
    }

    public open fun currentFontAction(): Any =
        Native.objc_msgSend("class objc.Any", this, "currentFontAction")

    public open fun convertFontTraits(traits: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertFontTraits:", traits)

    public open fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    public open fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSFontManager_NSFontManagerMenuActionMethods.metaclass {
        public open fun setFontPanelFactory(factoryId: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "setFontPanelFactory:", factoryId)
        }

        public open fun setFontManagerFactory(factoryId: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "setFontManagerFactory:", factoryId)
        }

        public open fun sharedFontManager(): NSFontManager =
            Native.objc_msgSend("class objc.NSFontManager", this, "sharedFontManager") as NSFontManager

    }

    companion object : NSObject(Native.objc_getClass("NSFontManager")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSWindow(pointer: Long) : NSResponder(pointer), NSAnimatablePropertyContainer, NSUserInterfaceValidations, NSUserInterfaceItemIdentification, NSAppearanceCustomization, NSAccessibilityElementProtocol, NSAccessibility, NSWindow_NSKeyboardUI, NSWindow_NSToolbarSupport, NSWindow_NSDrag, NSWindow_NSCarbonExtensions, NSWindow_NSDeprecated, NSWindow_NSConstraintBasedLayoutCoreMethods, NSWindow_NSConstraintBasedLayoutAnchoring, NSWindow_NSConstraintBasedLayoutDebugging, NSWindow_Drawers, NSWindow_NSScripting, NSWindow_NSUserInterfaceRestoration {
    public open fun frameRectForContentRect(contentRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "frameRectForContentRect:", contentRect)

    public open fun contentRectForFrameRect(frameRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "contentRectForFrameRect:", frameRect)

    public open fun initWithContentRect_styleMask_backing_defer(contentRect: Any, aStyle: Int, bufferingType: Any, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentRect:styleMask:backing:defer:", contentRect, aStyle, bufferingType, flag) as ObjCObject

    public open fun initWithContentRect_styleMask_backing_defer_screen(contentRect: Any, aStyle: Int, bufferingType: Any, flag: Boolean, screen: NSScreen): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentRect:styleMask:backing:defer:screen:", contentRect, aStyle, bufferingType, flag, screen) as ObjCObject

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun titleVisibility(): Any =
        Native.objc_msgSend("class objc.Any", this, "titleVisibility")

    public open fun setTitleVisibility(titleVisibility: Any): Unit {
        Native.objc_msgSend("void", this, "setTitleVisibility:", titleVisibility)
    }

    public open fun titlebarAppearsTransparent(): Boolean =
        Native.objc_msgSend("boolean", this, "titlebarAppearsTransparent") as Boolean

    public open fun setTitlebarAppearsTransparent(titlebarAppearsTransparent: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTitlebarAppearsTransparent:", titlebarAppearsTransparent)
    }

    public open fun contentLayoutRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentLayoutRect")

    public open fun contentLayoutGuide(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "contentLayoutGuide") as ObjCObject

    public open fun titlebarAccessoryViewControllers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "titlebarAccessoryViewControllers") as NSArray

    public open fun setTitlebarAccessoryViewControllers(titlebarAccessoryViewControllers: NSArray): Unit {
        Native.objc_msgSend("void", this, "setTitlebarAccessoryViewControllers:", titlebarAccessoryViewControllers)
    }

    public open fun addTitlebarAccessoryViewController(childViewController: NSTitlebarAccessoryViewController): Unit {
        Native.objc_msgSend("void", this, "addTitlebarAccessoryViewController:", childViewController)
    }

    public open fun insertTitlebarAccessoryViewController_atIndex(childViewController: NSTitlebarAccessoryViewController, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertTitlebarAccessoryViewController:atIndex:", childViewController, index)
    }

    public open fun removeTitlebarAccessoryViewControllerAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeTitlebarAccessoryViewControllerAtIndex:", index)
    }

    public open fun representedURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "representedURL") as NSURL

    public open fun setRepresentedURL(representedURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setRepresentedURL:", representedURL)
    }

    public open fun representedFilename(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "representedFilename") as NSString

    public open fun setRepresentedFilename(representedFilename: NSString): Unit {
        Native.objc_msgSend("void", this, "setRepresentedFilename:", representedFilename)
    }

    public open fun setTitleWithRepresentedFilename(filename: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithRepresentedFilename:", filename)
    }

    public open fun isExcludedFromWindowsMenu(): Boolean =
        Native.objc_msgSend("boolean", this, "isExcludedFromWindowsMenu") as Boolean

    public open fun setExcludedFromWindowsMenu(excludedFromWindowsMenu: Boolean): Unit {
        Native.objc_msgSend("void", this, "setExcludedFromWindowsMenu:", excludedFromWindowsMenu)
    }

    public open fun contentView(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "contentView") as ObjCObject

    public open fun setContentView(contentView: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setContentView:", contentView)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun windowNumber(): Int =
        Native.objc_msgSend("int", this, "windowNumber") as Int

    public open fun styleMask(): Int =
        Native.objc_msgSend("int", this, "styleMask") as Int

    public open fun setStyleMask(styleMask: Int): Unit {
        Native.objc_msgSend("void", this, "setStyleMask:", styleMask)
    }

    public open fun fieldEditor_forObject(createFlag: Boolean, anObject: ObjCObject): NSText =
        Native.objc_msgSend("class objc.NSText", this, "fieldEditor:forObject:", createFlag, anObject) as NSText

    public open fun endEditingFor(anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "endEditingFor:", anObject)
    }

    public open fun constrainFrameRect_toScreen(frameRect: Any, screen: NSScreen): Any =
        Native.objc_msgSend("class objc.Any", this, "constrainFrameRect:toScreen:", frameRect, screen)

    public open fun setFrame_display(frameRect: Any, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFrame:display:", frameRect, flag)
    }

    public open fun setContentSize(aSize: Any): Unit {
        Native.objc_msgSend("void", this, "setContentSize:", aSize)
    }

    public open fun setFrameOrigin(aPoint: Any): Unit {
        Native.objc_msgSend("void", this, "setFrameOrigin:", aPoint)
    }

    public open fun setFrameTopLeftPoint(aPoint: Any): Unit {
        Native.objc_msgSend("void", this, "setFrameTopLeftPoint:", aPoint)
    }

    public open fun cascadeTopLeftFromPoint(topLeftPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "cascadeTopLeftFromPoint:", topLeftPoint)

    public open fun frame(): Any =
        Native.objc_msgSend("class objc.Any", this, "frame")

    public open fun animationResizeTime(newFrame: Any): Double =
        Native.objc_msgSend("double", this, "animationResizeTime:", newFrame) as Double

    public open fun setFrame_display_animate(frameRect: Any, displayFlag: Boolean, animateFlag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFrame:display:animate:", frameRect, displayFlag, animateFlag)
    }

    public open fun inLiveResize(): Boolean =
        Native.objc_msgSend("boolean", this, "inLiveResize") as Boolean

    public open fun showsResizeIndicator(): Boolean =
        Native.objc_msgSend("boolean", this, "showsResizeIndicator") as Boolean

    public open fun setShowsResizeIndicator(showsResizeIndicator: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsResizeIndicator:", showsResizeIndicator)
    }

    public open fun resizeIncrements(): Any =
        Native.objc_msgSend("class objc.Any", this, "resizeIncrements")

    public open fun setResizeIncrements(resizeIncrements: Any): Unit {
        Native.objc_msgSend("void", this, "setResizeIncrements:", resizeIncrements)
    }

    public open fun aspectRatio(): Any =
        Native.objc_msgSend("class objc.Any", this, "aspectRatio")

    public open fun setAspectRatio(aspectRatio: Any): Unit {
        Native.objc_msgSend("void", this, "setAspectRatio:", aspectRatio)
    }

    public open fun contentResizeIncrements(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentResizeIncrements")

    public open fun setContentResizeIncrements(contentResizeIncrements: Any): Unit {
        Native.objc_msgSend("void", this, "setContentResizeIncrements:", contentResizeIncrements)
    }

    public open fun contentAspectRatio(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentAspectRatio")

    public open fun setContentAspectRatio(contentAspectRatio: Any): Unit {
        Native.objc_msgSend("void", this, "setContentAspectRatio:", contentAspectRatio)
    }

    public open fun disableFlushWindow(): Unit {
        Native.objc_msgSend("void", this, "disableFlushWindow")
    }

    public open fun enableFlushWindow(): Unit {
        Native.objc_msgSend("void", this, "enableFlushWindow")
    }

    public open fun isFlushWindowDisabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isFlushWindowDisabled") as Boolean

    public open fun flushWindow(): Unit {
        Native.objc_msgSend("void", this, "flushWindow")
    }

    public open fun flushWindowIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "flushWindowIfNeeded")
    }

    public open fun viewsNeedDisplay(): Boolean =
        Native.objc_msgSend("boolean", this, "viewsNeedDisplay") as Boolean

    public open fun setViewsNeedDisplay(viewsNeedDisplay: Boolean): Unit {
        Native.objc_msgSend("void", this, "setViewsNeedDisplay:", viewsNeedDisplay)
    }

    public open fun displayIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "displayIfNeeded")
    }

    public open fun display(): Unit {
        Native.objc_msgSend("void", this, "display")
    }

    public open fun isAutodisplay(): Boolean =
        Native.objc_msgSend("boolean", this, "isAutodisplay") as Boolean

    public open fun setAutodisplay(autodisplay: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutodisplay:", autodisplay)
    }

    public open fun preservesContentDuringLiveResize(): Boolean =
        Native.objc_msgSend("boolean", this, "preservesContentDuringLiveResize") as Boolean

    public open fun setPreservesContentDuringLiveResize(preservesContentDuringLiveResize: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPreservesContentDuringLiveResize:", preservesContentDuringLiveResize)
    }

    public open fun update(): Unit {
        Native.objc_msgSend("void", this, "update")
    }

    public open fun makeFirstResponder(aResponder: NSResponder): Boolean =
        Native.objc_msgSend("boolean", this, "makeFirstResponder:", aResponder) as Boolean

    public open fun firstResponder(): NSResponder =
        Native.objc_msgSend("class objc.NSResponder", this, "firstResponder") as NSResponder

    public open fun resizeFlags(): Int =
        Native.objc_msgSend("int", this, "resizeFlags") as Int

    override fun keyDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyDown:", theEvent)
    }

    public open fun close(): Unit {
        Native.objc_msgSend("void", this, "close")
    }

    public open fun isReleasedWhenClosed(): Boolean =
        Native.objc_msgSend("boolean", this, "isReleasedWhenClosed") as Boolean

    public open fun setReleasedWhenClosed(releasedWhenClosed: Boolean): Unit {
        Native.objc_msgSend("void", this, "setReleasedWhenClosed:", releasedWhenClosed)
    }

    public open fun miniaturize(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "miniaturize:", sender)
    }

    public open fun deminiaturize(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deminiaturize:", sender)
    }

    public open fun isZoomed(): Boolean =
        Native.objc_msgSend("boolean", this, "isZoomed") as Boolean

    public open fun zoom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "zoom:", sender)
    }

    public open fun isMiniaturized(): Boolean =
        Native.objc_msgSend("boolean", this, "isMiniaturized") as Boolean

    override fun tryToPerform_with(anAction: ObjCSelector, anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "tryToPerform:with:", anAction, anObject) as Boolean

    override fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun setContentBorderThickness_forEdge(thickness: Double, edge: Int): Unit {
        Native.objc_msgSend("void", this, "setContentBorderThickness:forEdge:", thickness, edge)
    }

    public open fun contentBorderThicknessForEdge(edge: Int): Double =
        Native.objc_msgSend("double", this, "contentBorderThicknessForEdge:", edge) as Double

    public open fun setAutorecalculatesContentBorderThickness_forEdge(flag: Boolean, edge: Int): Unit {
        Native.objc_msgSend("void", this, "setAutorecalculatesContentBorderThickness:forEdge:", flag, edge)
    }

    public open fun autorecalculatesContentBorderThicknessForEdge(edge: Int): Boolean =
        Native.objc_msgSend("boolean", this, "autorecalculatesContentBorderThicknessForEdge:", edge) as Boolean

    public open fun isMovable(): Boolean =
        Native.objc_msgSend("boolean", this, "isMovable") as Boolean

    public open fun setMovable(movable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setMovable:", movable)
    }

    public open fun isMovableByWindowBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "isMovableByWindowBackground") as Boolean

    public open fun setMovableByWindowBackground(movableByWindowBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setMovableByWindowBackground:", movableByWindowBackground)
    }

    public open fun hidesOnDeactivate(): Boolean =
        Native.objc_msgSend("boolean", this, "hidesOnDeactivate") as Boolean

    public open fun setHidesOnDeactivate(hidesOnDeactivate: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHidesOnDeactivate:", hidesOnDeactivate)
    }

    public open fun canHide(): Boolean =
        Native.objc_msgSend("boolean", this, "canHide") as Boolean

    public open fun setCanHide(canHide: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanHide:", canHide)
    }

    public open fun center(): Unit {
        Native.objc_msgSend("void", this, "center")
    }

    public open fun makeKeyAndOrderFront(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeKeyAndOrderFront:", sender)
    }

    public open fun orderFront(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFront:", sender)
    }

    public open fun orderBack(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderBack:", sender)
    }

    public open fun orderOut(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderOut:", sender)
    }

    public open fun orderWindow_relativeTo(place: Any, otherWin: Int): Unit {
        Native.objc_msgSend("void", this, "orderWindow:relativeTo:", place, otherWin)
    }

    public open fun orderFrontRegardless(): Unit {
        Native.objc_msgSend("void", this, "orderFrontRegardless")
    }

    public open fun miniwindowImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "miniwindowImage") as NSImage

    public open fun setMiniwindowImage(miniwindowImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setMiniwindowImage:", miniwindowImage)
    }

    public open fun miniwindowTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "miniwindowTitle") as NSString

    public open fun setMiniwindowTitle(miniwindowTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setMiniwindowTitle:", miniwindowTitle)
    }

    public open fun dockTile(): NSDockTile =
        Native.objc_msgSend("class objc.NSDockTile", this, "dockTile") as NSDockTile

    public open fun isDocumentEdited(): Boolean =
        Native.objc_msgSend("boolean", this, "isDocumentEdited") as Boolean

    public open fun setDocumentEdited(documentEdited: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDocumentEdited:", documentEdited)
    }

    public open fun isVisible(): Boolean =
        Native.objc_msgSend("boolean", this, "isVisible") as Boolean

    public open fun isKeyWindow(): Boolean =
        Native.objc_msgSend("boolean", this, "isKeyWindow") as Boolean

    public open fun isMainWindow(): Boolean =
        Native.objc_msgSend("boolean", this, "isMainWindow") as Boolean

    public open fun canBecomeKeyWindow(): Boolean =
        Native.objc_msgSend("boolean", this, "canBecomeKeyWindow") as Boolean

    public open fun canBecomeMainWindow(): Boolean =
        Native.objc_msgSend("boolean", this, "canBecomeMainWindow") as Boolean

    public open fun makeKeyWindow(): Unit {
        Native.objc_msgSend("void", this, "makeKeyWindow")
    }

    public open fun makeMainWindow(): Unit {
        Native.objc_msgSend("void", this, "makeMainWindow")
    }

    public open fun becomeKeyWindow(): Unit {
        Native.objc_msgSend("void", this, "becomeKeyWindow")
    }

    public open fun resignKeyWindow(): Unit {
        Native.objc_msgSend("void", this, "resignKeyWindow")
    }

    public open fun becomeMainWindow(): Unit {
        Native.objc_msgSend("void", this, "becomeMainWindow")
    }

    public open fun resignMainWindow(): Unit {
        Native.objc_msgSend("void", this, "resignMainWindow")
    }

    public open fun worksWhenModal(): Boolean =
        Native.objc_msgSend("boolean", this, "worksWhenModal") as Boolean

    public open fun preventsApplicationTerminationWhenModal(): Boolean =
        Native.objc_msgSend("boolean", this, "preventsApplicationTerminationWhenModal") as Boolean

    public open fun setPreventsApplicationTerminationWhenModal(preventsApplicationTerminationWhenModal: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPreventsApplicationTerminationWhenModal:", preventsApplicationTerminationWhenModal)
    }

    public open fun convertRectToScreen(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectToScreen:", aRect)

    public open fun convertRectFromScreen(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectFromScreen:", aRect)

    public open fun convertRectToBacking(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectToBacking:", aRect)

    public open fun convertRectFromBacking(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectFromBacking:", aRect)

    public open fun backingAlignedRect_options(aRect: Any, options: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "backingAlignedRect:options:", aRect, options)

    public open fun backingScaleFactor(): Double =
        Native.objc_msgSend("double", this, "backingScaleFactor") as Double

    public open fun performClose(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performClose:", sender)
    }

    public open fun performMiniaturize(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performMiniaturize:", sender)
    }

    public open fun performZoom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performZoom:", sender)
    }

    public open fun isOneShot(): Boolean =
        Native.objc_msgSend("boolean", this, "isOneShot") as Boolean

    public open fun setOneShot(oneShot: Boolean): Unit {
        Native.objc_msgSend("void", this, "setOneShot:", oneShot)
    }

    public open fun dataWithEPSInsideRect(rect: Any): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataWithEPSInsideRect:", rect) as NSData

    public open fun dataWithPDFInsideRect(rect: Any): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataWithPDFInsideRect:", rect) as NSData

    public open fun print(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "print:", sender)
    }

    public open fun disableCursorRects(): Unit {
        Native.objc_msgSend("void", this, "disableCursorRects")
    }

    public open fun enableCursorRects(): Unit {
        Native.objc_msgSend("void", this, "enableCursorRects")
    }

    public open fun discardCursorRects(): Unit {
        Native.objc_msgSend("void", this, "discardCursorRects")
    }

    public open fun areCursorRectsEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "areCursorRectsEnabled") as Boolean

    public open fun invalidateCursorRectsForView(aView: NSView): Unit {
        Native.objc_msgSend("void", this, "invalidateCursorRectsForView:", aView)
    }

    public open fun resetCursorRects(): Unit {
        Native.objc_msgSend("void", this, "resetCursorRects")
    }

    public open fun allowsToolTipsWhenApplicationIsInactive(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsToolTipsWhenApplicationIsInactive") as Boolean

    public open fun setAllowsToolTipsWhenApplicationIsInactive(allowsToolTipsWhenApplicationIsInactive: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsToolTipsWhenApplicationIsInactive:", allowsToolTipsWhenApplicationIsInactive)
    }

    public open fun backingType(): Any =
        Native.objc_msgSend("class objc.Any", this, "backingType")

    public open fun setBackingType(backingType: Any): Unit {
        Native.objc_msgSend("void", this, "setBackingType:", backingType)
    }

    public open fun level(): Int =
        Native.objc_msgSend("int", this, "level") as Int

    public open fun setLevel(level: Int): Unit {
        Native.objc_msgSend("void", this, "setLevel:", level)
    }

    public open fun depthLimit(): Int =
        Native.objc_msgSend("int", this, "depthLimit") as Int

    public open fun setDepthLimit(depthLimit: Int): Unit {
        Native.objc_msgSend("void", this, "setDepthLimit:", depthLimit)
    }

    public open fun setDynamicDepthLimit(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDynamicDepthLimit:", flag)
    }

    public open fun hasDynamicDepthLimit(): Boolean =
        Native.objc_msgSend("boolean", this, "hasDynamicDepthLimit") as Boolean

    public open fun screen(): NSScreen =
        Native.objc_msgSend("class objc.NSScreen", this, "screen") as NSScreen

    public open fun deepestScreen(): NSScreen =
        Native.objc_msgSend("class objc.NSScreen", this, "deepestScreen") as NSScreen

    public open fun hasShadow(): Boolean =
        Native.objc_msgSend("boolean", this, "hasShadow") as Boolean

    public open fun setHasShadow(hasShadow: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasShadow:", hasShadow)
    }

    public open fun invalidateShadow(): Unit {
        Native.objc_msgSend("void", this, "invalidateShadow")
    }

    public open fun alphaValue(): Double =
        Native.objc_msgSend("double", this, "alphaValue") as Double

    public open fun setAlphaValue(alphaValue: Double): Unit {
        Native.objc_msgSend("void", this, "setAlphaValue:", alphaValue)
    }

    public open fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    public open fun setOpaque(opaque: Boolean): Unit {
        Native.objc_msgSend("void", this, "setOpaque:", opaque)
    }

    public open fun sharingType(): Any =
        Native.objc_msgSend("class objc.Any", this, "sharingType")

    public open fun setSharingType(sharingType: Any): Unit {
        Native.objc_msgSend("void", this, "setSharingType:", sharingType)
    }

    public open fun preferredBackingLocation(): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredBackingLocation")

    public open fun setPreferredBackingLocation(preferredBackingLocation: Any): Unit {
        Native.objc_msgSend("void", this, "setPreferredBackingLocation:", preferredBackingLocation)
    }

    public open fun backingLocation(): Any =
        Native.objc_msgSend("class objc.Any", this, "backingLocation")

    public open fun allowsConcurrentViewDrawing(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsConcurrentViewDrawing") as Boolean

    public open fun setAllowsConcurrentViewDrawing(allowsConcurrentViewDrawing: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsConcurrentViewDrawing:", allowsConcurrentViewDrawing)
    }

    public open fun displaysWhenScreenProfileChanges(): Boolean =
        Native.objc_msgSend("boolean", this, "displaysWhenScreenProfileChanges") as Boolean

    public open fun setDisplaysWhenScreenProfileChanges(displaysWhenScreenProfileChanges: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDisplaysWhenScreenProfileChanges:", displaysWhenScreenProfileChanges)
    }

    public open fun disableScreenUpdatesUntilFlush(): Unit {
        Native.objc_msgSend("void", this, "disableScreenUpdatesUntilFlush")
    }

    public open fun canBecomeVisibleWithoutLogin(): Boolean =
        Native.objc_msgSend("boolean", this, "canBecomeVisibleWithoutLogin") as Boolean

    public open fun setCanBecomeVisibleWithoutLogin(canBecomeVisibleWithoutLogin: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanBecomeVisibleWithoutLogin:", canBecomeVisibleWithoutLogin)
    }

    public open fun collectionBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "collectionBehavior")

    public open fun setCollectionBehavior(collectionBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setCollectionBehavior:", collectionBehavior)
    }

    public open fun animationBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "animationBehavior")

    public open fun setAnimationBehavior(animationBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setAnimationBehavior:", animationBehavior)
    }

    public open fun isOnActiveSpace(): Boolean =
        Native.objc_msgSend("boolean", this, "isOnActiveSpace") as Boolean

    public open fun toggleFullScreen(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleFullScreen:", sender)
    }

    public open fun stringWithSavedFrame(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringWithSavedFrame") as NSString

    public open fun setFrameFromString(string: NSString): Unit {
        Native.objc_msgSend("void", this, "setFrameFromString:", string)
    }

    public open fun saveFrameUsingName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "saveFrameUsingName:", name)
    }

    public open fun setFrameUsingName_force(name: NSString, force: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "setFrameUsingName:force:", name, force) as Boolean

    public open fun setFrameUsingName(name: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setFrameUsingName:", name) as Boolean

    public open fun setFrameAutosaveName(name: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setFrameAutosaveName:", name) as Boolean

    public open fun frameAutosaveName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "frameAutosaveName") as NSString

    public open fun cacheImageInRect(aRect: Any): Unit {
        Native.objc_msgSend("void", this, "cacheImageInRect:", aRect)
    }

    public open fun restoreCachedImage(): Unit {
        Native.objc_msgSend("void", this, "restoreCachedImage")
    }

    public open fun discardCachedImage(): Unit {
        Native.objc_msgSend("void", this, "discardCachedImage")
    }

    public open fun minSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "minSize")

    public open fun setMinSize(minSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMinSize:", minSize)
    }

    public open fun maxSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "maxSize")

    public open fun setMaxSize(maxSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMaxSize:", maxSize)
    }

    public open fun contentMinSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentMinSize")

    public open fun setContentMinSize(contentMinSize: Any): Unit {
        Native.objc_msgSend("void", this, "setContentMinSize:", contentMinSize)
    }

    public open fun contentMaxSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentMaxSize")

    public open fun setContentMaxSize(contentMaxSize: Any): Unit {
        Native.objc_msgSend("void", this, "setContentMaxSize:", contentMaxSize)
    }

    public open fun trackEventsMatchingMask_timeout_mode_handler(mask: Any, timeout: Double, mode: NSString, trackingHandler: Any): Unit {
        Native.objc_msgSend("void", this, "trackEventsMatchingMask:timeout:mode:handler:", mask, timeout, mode, trackingHandler)
    }

    public open fun nextEventMatchingMask(mask: Int): NSEvent =
        Native.objc_msgSend("class objc.NSEvent", this, "nextEventMatchingMask:", mask) as NSEvent

    public open fun nextEventMatchingMask_untilDate_inMode_dequeue(mask: Int, expiration: NSDate, mode: NSString, deqFlag: Boolean): NSEvent =
        Native.objc_msgSend("class objc.NSEvent", this, "nextEventMatchingMask:untilDate:inMode:dequeue:", mask, expiration, mode, deqFlag) as NSEvent

    public open fun discardEventsMatchingMask_beforeEvent(mask: Int, lastEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "discardEventsMatchingMask:beforeEvent:", mask, lastEvent)
    }

    public open fun postEvent_atStart(event: NSEvent, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "postEvent:atStart:", event, flag)
    }

    public open fun currentEvent(): NSEvent =
        Native.objc_msgSend("class objc.NSEvent", this, "currentEvent") as NSEvent

    public open fun acceptsMouseMovedEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsMouseMovedEvents") as Boolean

    public open fun setAcceptsMouseMovedEvents(acceptsMouseMovedEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAcceptsMouseMovedEvents:", acceptsMouseMovedEvents)
    }

    public open fun ignoresMouseEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "ignoresMouseEvents") as Boolean

    public open fun setIgnoresMouseEvents(ignoresMouseEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIgnoresMouseEvents:", ignoresMouseEvents)
    }

    public open fun deviceDescription(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "deviceDescription") as NSDictionary

    public open fun sendEvent(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "sendEvent:", theEvent)
    }

    public open fun mouseLocationOutsideOfEventStream(): Any =
        Native.objc_msgSend("class objc.Any", this, "mouseLocationOutsideOfEventStream")

    public open fun windowController(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "windowController") as ObjCObject

    public open fun setWindowController(windowController: NSWindowController): Unit {
        Native.objc_msgSend("void", this, "setWindowController:", windowController)
    }

    public open fun beginSheet_completionHandler(sheetWindow: NSWindow, handler: Any): Unit {
        Native.objc_msgSend("void", this, "beginSheet:completionHandler:", sheetWindow, handler)
    }

    public open fun beginCriticalSheet_completionHandler(sheetWindow: NSWindow, handler: Any): Unit {
        Native.objc_msgSend("void", this, "beginCriticalSheet:completionHandler:", sheetWindow, handler)
    }

    public open fun endSheet(sheetWindow: NSWindow): Unit {
        Native.objc_msgSend("void", this, "endSheet:", sheetWindow)
    }

    public open fun endSheet_returnCode(sheetWindow: NSWindow, returnCode: Int): Unit {
        Native.objc_msgSend("void", this, "endSheet:returnCode:", sheetWindow, returnCode)
    }

    public open fun sheets(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sheets") as NSArray

    public open fun attachedSheet(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "attachedSheet") as NSWindow

    public open fun isSheet(): Boolean =
        Native.objc_msgSend("boolean", this, "isSheet") as Boolean

    public open fun sheetParent(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "sheetParent") as NSWindow

    public open fun standardWindowButton(b: Any): NSButton =
        Native.objc_msgSend("class objc.NSButton", this, "standardWindowButton:", b) as NSButton

    public open fun addChildWindow_ordered(childWin: NSWindow, place: Any): Unit {
        Native.objc_msgSend("void", this, "addChildWindow:ordered:", childWin, place)
    }

    public open fun removeChildWindow(childWin: NSWindow): Unit {
        Native.objc_msgSend("void", this, "removeChildWindow:", childWin)
    }

    public open fun childWindows(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "childWindows") as NSArray

    public open fun parentWindow(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "parentWindow") as NSWindow

    public open fun setParentWindow(parentWindow: NSWindow): Unit {
        Native.objc_msgSend("void", this, "setParentWindow:", parentWindow)
    }

    public open fun graphicsContext(): NSGraphicsContext =
        Native.objc_msgSend("class objc.NSGraphicsContext", this, "graphicsContext") as NSGraphicsContext

    public open fun colorSpace(): NSColorSpace =
        Native.objc_msgSend("class objc.NSColorSpace", this, "colorSpace") as NSColorSpace

    public open fun setColorSpace(colorSpace: NSColorSpace): Unit {
        Native.objc_msgSend("void", this, "setColorSpace:", colorSpace)
    }

    public open fun occlusionState(): Any =
        Native.objc_msgSend("class objc.Any", this, "occlusionState")

    public open fun contentViewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "contentViewController") as NSViewController

    public open fun setContentViewController(contentViewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "setContentViewController:", contentViewController)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSResponder.metaclass, NSAnimatablePropertyContainer.metaclass, NSUserInterfaceValidations.metaclass, NSUserInterfaceItemIdentification.metaclass, NSAppearanceCustomization.metaclass, NSAccessibilityElementProtocol.metaclass, NSAccessibility.metaclass, NSWindow_NSKeyboardUI.metaclass, NSWindow_NSToolbarSupport.metaclass, NSWindow_NSDrag.metaclass, NSWindow_NSCarbonExtensions.metaclass, NSWindow_NSDeprecated.metaclass, NSWindow_NSConstraintBasedLayoutCoreMethods.metaclass, NSWindow_NSConstraintBasedLayoutAnchoring.metaclass, NSWindow_NSConstraintBasedLayoutDebugging.metaclass, NSWindow_Drawers.metaclass, NSWindow_NSScripting.metaclass, NSWindow_NSUserInterfaceRestoration.metaclass {
        public open fun frameRectForContentRect_styleMask(cRect: Any, aStyle: Int): Any =
            Native.objc_msgSend("class objc.Any", this, "frameRectForContentRect:styleMask:", cRect, aStyle)

        public open fun contentRectForFrameRect_styleMask(fRect: Any, aStyle: Int): Any =
            Native.objc_msgSend("class objc.Any", this, "contentRectForFrameRect:styleMask:", fRect, aStyle)

        public open fun minFrameWidthWithTitle_styleMask(aTitle: NSString, aStyle: Int): Double =
            Native.objc_msgSend("double", this, "minFrameWidthWithTitle:styleMask:", aTitle, aStyle) as Double

        public open fun defaultDepthLimit(): Int =
            Native.objc_msgSend("int", this, "defaultDepthLimit") as Int

        public open fun removeFrameUsingName(name: NSString): Unit {
            Native.objc_msgSend("void", this, "removeFrameUsingName:", name)
        }

        public open fun menuChanged(menu: NSMenu): Unit {
            Native.objc_msgSend("void", this, "menuChanged:", menu)
        }

        public open fun standardWindowButton_forStyleMask(b: Any, styleMask: Int): NSButton =
            Native.objc_msgSend("class objc.NSButton", this, "standardWindowButton:forStyleMask:", b, styleMask) as NSButton

        public open fun windowNumbersWithOptions(options: Int): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "windowNumbersWithOptions:", options) as NSArray

        public open fun windowNumberAtPoint_belowWindowWithWindowNumber(point: Any, windowNumber: Int): Int =
            Native.objc_msgSend("int", this, "windowNumberAtPoint:belowWindowWithWindowNumber:", point, windowNumber) as Int

        public open fun windowWithContentViewController(contentViewController: NSViewController): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "windowWithContentViewController:", contentViewController) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSWindow")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPanel(pointer: Long) : NSWindow(pointer) {
    override fun isFloatingPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "isFloatingPanel") as Boolean

    public open fun setFloatingPanel(floatingPanel: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFloatingPanel:", floatingPanel)
    }

    public open fun becomesKeyOnlyIfNeeded(): Boolean =
        Native.objc_msgSend("boolean", this, "becomesKeyOnlyIfNeeded") as Boolean

    public open fun setBecomesKeyOnlyIfNeeded(becomesKeyOnlyIfNeeded: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBecomesKeyOnlyIfNeeded:", becomesKeyOnlyIfNeeded)
    }

    override fun worksWhenModal(): Boolean =
        Native.objc_msgSend("boolean", this, "worksWhenModal") as Boolean

    public open fun setWorksWhenModal(worksWhenModal: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWorksWhenModal:", worksWhenModal)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun keyDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyDown:", theEvent)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun tryToPerform_with(anAction: ObjCSelector, anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "tryToPerform:with:", anAction, anObject) as Boolean

    override fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    trait metaclass : NSWindow.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPanel")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFontPanel(pointer: Long) : NSPanel(pointer) {
    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun setAccessoryView(accessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", accessoryView)
    }

    public open fun setPanelFont_isMultiple(fontObj: NSFont, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPanelFont:isMultiple:", fontObj, flag)
    }

    public open fun panelConvertFont(fontObj: NSFont): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "panelConvertFont:", fontObj) as NSFont

    override fun worksWhenModal(): Boolean =
        Native.objc_msgSend("boolean", this, "worksWhenModal") as Boolean

    override fun setWorksWhenModal(worksWhenModal: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWorksWhenModal:", worksWhenModal)
    }

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun setEnabled(enabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEnabled:", enabled)
    }

    public open fun reloadDefaultFontFamilies(): Unit {
        Native.objc_msgSend("void", this, "reloadDefaultFontFamilies")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun isFloatingPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "isFloatingPanel") as Boolean

    override fun keyDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyDown:", theEvent)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun tryToPerform_with(anAction: ObjCSelector, anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "tryToPerform:with:", anAction, anObject) as Boolean

    override fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    trait metaclass : NSPanel.metaclass {
        public open fun sharedFontPanel(): NSFontPanel =
            Native.objc_msgSend("class objc.NSFontPanel", this, "sharedFontPanel") as NSFontPanel

        public open fun sharedFontPanelExists(): Boolean =
            Native.objc_msgSend("boolean", this, "sharedFontPanelExists") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSFontPanel")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMatrix(pointer: Long) : NSControl(pointer), NSUserInterfaceValidations, NSMatrix_NSKeyboardUI {
    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    public open fun initWithFrame_mode_prototype_numberOfRows_numberOfColumns(frameRect: Any, aMode: Any, aCell: NSCell, rowsHigh: Int, colsWide: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:mode:prototype:numberOfRows:numberOfColumns:", frameRect, aMode, aCell, rowsHigh, colsWide) as ObjCObject

    public open fun initWithFrame_mode_cellClass_numberOfRows_numberOfColumns(frameRect: Any, aMode: Any, factoryId: ObjCClass, rowsHigh: Int, colsWide: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:", frameRect, aMode, factoryId, rowsHigh, colsWide) as ObjCObject

    public open fun cellClass(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "cellClass") as ObjCClass

    public open fun setCellClass(cellClass: ObjCClass): Unit {
        Native.objc_msgSend("void", this, "setCellClass:", cellClass)
    }

    public open fun prototype(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "prototype") as ObjCObject

    public open fun setPrototype(prototype: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setPrototype:", prototype)
    }

    public open fun makeCellAtRow_column(row: Int, col: Int): NSCell =
        Native.objc_msgSend("class objc.NSCell", this, "makeCellAtRow:column:", row, col) as NSCell

    public open fun mode(): Any =
        Native.objc_msgSend("class objc.Any", this, "mode")

    public open fun setMode(mode: Any): Unit {
        Native.objc_msgSend("void", this, "setMode:", mode)
    }

    public open fun allowsEmptySelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsEmptySelection") as Boolean

    public open fun setAllowsEmptySelection(allowsEmptySelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsEmptySelection:", allowsEmptySelection)
    }

    public open fun sendAction_to_forAllCells(aSelector: ObjCSelector, anObject: ObjCObject, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "sendAction:to:forAllCells:", aSelector, anObject, flag)
    }

    public open fun cells(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "cells") as NSArray

    public open fun sortUsingSelector(comparator: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "sortUsingSelector:", comparator)
    }

    public open fun sortUsingFunction_context(compare: (Any, Any, Pointer<*>) -> Int, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "sortUsingFunction:context:", compare, context)
    }

    override fun selectedCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "selectedCell") as ObjCObject

    public open fun selectedCells(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectedCells") as NSArray

    public open fun selectedRow(): Int =
        Native.objc_msgSend("int", this, "selectedRow") as Int

    public open fun selectedColumn(): Int =
        Native.objc_msgSend("int", this, "selectedColumn") as Int

    public open fun isSelectionByRect(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectionByRect") as Boolean

    public open fun setSelectionByRect(selectionByRect: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectionByRect:", selectionByRect)
    }

    public open fun setSelectionFrom_to_anchor_highlight(startPos: Int, endPos: Int, anchorPos: Int, lit: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectionFrom:to:anchor:highlight:", startPos, endPos, anchorPos, lit)
    }

    public open fun deselectSelectedCell(): Unit {
        Native.objc_msgSend("void", this, "deselectSelectedCell")
    }

    public open fun deselectAllCells(): Unit {
        Native.objc_msgSend("void", this, "deselectAllCells")
    }

    public open fun selectCellAtRow_column(row: Int, col: Int): Unit {
        Native.objc_msgSend("void", this, "selectCellAtRow:column:", row, col)
    }

    override fun selectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectAll:", sender)
    }

    public open fun selectCellWithTag(anInt: Int): Boolean =
        Native.objc_msgSend("boolean", this, "selectCellWithTag:", anInt) as Boolean

    public open fun cellSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "cellSize")

    public open fun setCellSize(cellSize: Any): Unit {
        Native.objc_msgSend("void", this, "setCellSize:", cellSize)
    }

    public open fun intercellSpacing(): Any =
        Native.objc_msgSend("class objc.Any", this, "intercellSpacing")

    public open fun setIntercellSpacing(intercellSpacing: Any): Unit {
        Native.objc_msgSend("void", this, "setIntercellSpacing:", intercellSpacing)
    }

    public open fun setScrollable(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setScrollable:", flag)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun cellBackgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "cellBackgroundColor") as NSColor

    public open fun setCellBackgroundColor(cellBackgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setCellBackgroundColor:", cellBackgroundColor)
    }

    public open fun drawsCellBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsCellBackground") as Boolean

    public open fun setDrawsCellBackground(drawsCellBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsCellBackground:", drawsCellBackground)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun setState_atRow_column(value: Int, row: Int, col: Int): Unit {
        Native.objc_msgSend("void", this, "setState:atRow:column:", value, row, col)
    }

    public open fun getNumberOfRows_columns(rowCount: Pointer<Int>, colCount: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "getNumberOfRows:columns:", rowCount, colCount)
    }

    public open fun numberOfRows(): Int =
        Native.objc_msgSend("int", this, "numberOfRows") as Int

    public open fun numberOfColumns(): Int =
        Native.objc_msgSend("int", this, "numberOfColumns") as Int

    public open fun cellAtRow_column(row: Int, col: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "cellAtRow:column:", row, col) as ObjCObject

    public open fun cellFrameAtRow_column(row: Int, col: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "cellFrameAtRow:column:", row, col)

    public open fun getRow_column_ofCell(row: Pointer<Int>, col: Pointer<Int>, aCell: NSCell): Boolean =
        Native.objc_msgSend("boolean", this, "getRow:column:ofCell:", row, col, aCell) as Boolean

    public open fun getRow_column_forPoint(row: Pointer<Int>, col: Pointer<Int>, aPoint: Any): Boolean =
        Native.objc_msgSend("boolean", this, "getRow:column:forPoint:", row, col, aPoint) as Boolean

    public open fun renewRows_columns(newRows: Int, newCols: Int): Unit {
        Native.objc_msgSend("void", this, "renewRows:columns:", newRows, newCols)
    }

    public open fun putCell_atRow_column(newCell: NSCell, row: Int, col: Int): Unit {
        Native.objc_msgSend("void", this, "putCell:atRow:column:", newCell, row, col)
    }

    public open fun addRow(): Unit {
        Native.objc_msgSend("void", this, "addRow")
    }

    public open fun addRowWithCells(newCells: NSArray): Unit {
        Native.objc_msgSend("void", this, "addRowWithCells:", newCells)
    }

    public open fun insertRow(row: Int): Unit {
        Native.objc_msgSend("void", this, "insertRow:", row)
    }

    public open fun insertRow_withCells(row: Int, newCells: NSArray): Unit {
        Native.objc_msgSend("void", this, "insertRow:withCells:", row, newCells)
    }

    public open fun removeRow(row: Int): Unit {
        Native.objc_msgSend("void", this, "removeRow:", row)
    }

    public open fun addColumn(): Unit {
        Native.objc_msgSend("void", this, "addColumn")
    }

    public open fun addColumnWithCells(newCells: NSArray): Unit {
        Native.objc_msgSend("void", this, "addColumnWithCells:", newCells)
    }

    public open fun insertColumn(column: Int): Unit {
        Native.objc_msgSend("void", this, "insertColumn:", column)
    }

    public open fun insertColumn_withCells(column: Int, newCells: NSArray): Unit {
        Native.objc_msgSend("void", this, "insertColumn:withCells:", column, newCells)
    }

    public open fun removeColumn(col: Int): Unit {
        Native.objc_msgSend("void", this, "removeColumn:", col)
    }

    public open fun cellWithTag(anInt: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "cellWithTag:", anInt) as ObjCObject

    public open fun doubleAction(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "doubleAction") as ObjCSelector

    public open fun setDoubleAction(doubleAction: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setDoubleAction:", doubleAction)
    }

    public open fun autosizesCells(): Boolean =
        Native.objc_msgSend("boolean", this, "autosizesCells") as Boolean

    public open fun setAutosizesCells(autosizesCells: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutosizesCells:", autosizesCells)
    }

    public open fun sizeToCells(): Unit {
        Native.objc_msgSend("void", this, "sizeToCells")
    }

    public open fun setValidateSize(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setValidateSize:", flag)
    }

    public open fun drawCellAtRow_column(row: Int, col: Int): Unit {
        Native.objc_msgSend("void", this, "drawCellAtRow:column:", row, col)
    }

    public open fun highlightCell_atRow_column(flag: Boolean, row: Int, col: Int): Unit {
        Native.objc_msgSend("void", this, "highlightCell:atRow:column:", flag, row, col)
    }

    public open fun isAutoscroll(): Boolean =
        Native.objc_msgSend("boolean", this, "isAutoscroll") as Boolean

    public open fun setAutoscroll(autoscroll: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutoscroll:", autoscroll)
    }

    public open fun scrollCellToVisibleAtRow_column(row: Int, col: Int): Unit {
        Native.objc_msgSend("void", this, "scrollCellToVisibleAtRow:column:", row, col)
    }

    public open fun mouseDownFlags(): Int =
        Native.objc_msgSend("int", this, "mouseDownFlags") as Int

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    public open fun sendAction(): Boolean =
        Native.objc_msgSend("boolean", this, "sendAction") as Boolean

    public open fun sendDoubleAction(): Unit {
        Native.objc_msgSend("void", this, "sendDoubleAction")
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun textShouldBeginEditing(textObject: NSText): Boolean =
        Native.objc_msgSend("boolean", this, "textShouldBeginEditing:", textObject) as Boolean

    public open fun textShouldEndEditing(textObject: NSText): Boolean =
        Native.objc_msgSend("boolean", this, "textShouldEndEditing:", textObject) as Boolean

    public open fun textDidBeginEditing(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidBeginEditing:", notification)
    }

    public open fun textDidEndEditing(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidEndEditing:", notification)
    }

    public open fun textDidChange(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidChange:", notification)
    }

    public open fun selectText(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectText:", sender)
    }

    public open fun selectTextAtRow_column(row: Int, col: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "selectTextAtRow:column:", row, col) as ObjCObject

    override fun acceptsFirstMouse(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstMouse:", theEvent) as Boolean

    override fun resetCursorRects(): Unit {
        Native.objc_msgSend("void", this, "resetCursorRects")
    }

    public open fun setToolTip_forCell(toolTipString: NSString, cell: NSCell): Unit {
        Native.objc_msgSend("void", this, "setToolTip:forCell:", toolTipString, cell)
    }

    public open fun toolTipForCell(cell: NSCell): NSString =
        Native.objc_msgSend("class objc.NSString", this, "toolTipForCell:", cell) as NSString

    public open fun autorecalculatesCellSize(): Boolean =
        Native.objc_msgSend("boolean", this, "autorecalculatesCellSize") as Boolean

    public open fun setAutorecalculatesCellSize(autorecalculatesCellSize: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutorecalculatesCellSize:", autorecalculatesCellSize)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSUserInterfaceValidations.metaclass, NSMatrix_NSKeyboardUI.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMatrix")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSForm(pointer: Long) : NSMatrix(pointer) {
    public open fun indexOfSelectedItem(): Int =
        Native.objc_msgSend("int", this, "indexOfSelectedItem") as Int

    public open fun setEntryWidth(width: Double): Unit {
        Native.objc_msgSend("void", this, "setEntryWidth:", width)
    }

    public open fun setInterlineSpacing(spacing: Double): Unit {
        Native.objc_msgSend("void", this, "setInterlineSpacing:", spacing)
    }

    public open fun setBordered(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBordered:", flag)
    }

    public open fun setBezeled(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBezeled:", flag)
    }

    public open fun setTitleAlignment(mode: Any): Unit {
        Native.objc_msgSend("void", this, "setTitleAlignment:", mode)
    }

    public open fun setTextAlignment(mode: Any): Unit {
        Native.objc_msgSend("void", this, "setTextAlignment:", mode)
    }

    public open fun setTitleFont(fontObj: NSFont): Unit {
        Native.objc_msgSend("void", this, "setTitleFont:", fontObj)
    }

    public open fun setTextFont(fontObj: NSFont): Unit {
        Native.objc_msgSend("void", this, "setTextFont:", fontObj)
    }

    public open fun cellAtIndex(index: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "cellAtIndex:", index) as ObjCObject

    public open fun drawCellAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "drawCellAtIndex:", index)
    }

    public open fun addEntry(title: NSString): NSFormCell =
        Native.objc_msgSend("class objc.NSFormCell", this, "addEntry:", title) as NSFormCell

    public open fun insertEntry_atIndex(title: NSString, index: Int): NSFormCell =
        Native.objc_msgSend("class objc.NSFormCell", this, "insertEntry:atIndex:", title, index) as NSFormCell

    public open fun removeEntryAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeEntryAtIndex:", index)
    }

    public open fun indexOfCellWithTag(aTag: Int): Int =
        Native.objc_msgSend("int", this, "indexOfCellWithTag:", aTag) as Int

    public open fun selectTextAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "selectTextAtIndex:", index)
    }

    override fun setFrameSize(newSize: Any): Unit {
        Native.objc_msgSend("void", this, "setFrameSize:", newSize)
    }

    public open fun setTitleBaseWritingDirection(writingDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setTitleBaseWritingDirection:", writingDirection)
    }

    public open fun setTextBaseWritingDirection(writingDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setTextBaseWritingDirection:", writingDirection)
    }

    public open fun setPreferredTextFieldWidth(preferredWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setPreferredTextFieldWidth:", preferredWidth)
    }

    public open fun preferredTextFieldWidth(): Double =
        Native.objc_msgSend("double", this, "preferredTextFieldWidth") as Double

    override fun acceptsFirstMouse(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstMouse:", theEvent) as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun resetCursorRects(): Unit {
        Native.objc_msgSend("void", this, "resetCursorRects")
    }

    override fun selectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectAll:", sender)
    }

    override fun selectedCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "selectedCell") as ObjCObject

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSMatrix.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSForm")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFormCell(pointer: Long) : NSActionCell(pointer), NSFormCell_NSKeyboardUI, NSFormCell_NSFormCellAttributedStringMethods {
    override fun initTextCell(aString: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initTextCell:", aString) as ObjCObject

    public open fun titleWidth(aSize: Any): Double =
        Native.objc_msgSend("double", this, "titleWidth:", aSize) as Double

    public open fun titleWidth(): Double =
        Native.objc_msgSend("double", this, "titleWidth") as Double

    public open fun setTitleWidth(titleWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setTitleWidth:", titleWidth)
    }

    override fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    override fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun titleFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "titleFont") as NSFont

    public open fun setTitleFont(titleFont: NSFont): Unit {
        Native.objc_msgSend("void", this, "setTitleFont:", titleFont)
    }

    public open fun titleAlignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "titleAlignment")

    public open fun setTitleAlignment(titleAlignment: Any): Unit {
        Native.objc_msgSend("void", this, "setTitleAlignment:", titleAlignment)
    }

    override fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    public open fun placeholderString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "placeholderString") as NSString

    public open fun setPlaceholderString(placeholderString: NSString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderString:", placeholderString)
    }

    public open fun placeholderAttributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "placeholderAttributedString") as NSAttributedString

    public open fun setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderAttributedString:", placeholderAttributedString)
    }

    public open fun titleBaseWritingDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "titleBaseWritingDirection")

    public open fun setTitleBaseWritingDirection(titleBaseWritingDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setTitleBaseWritingDirection:", titleBaseWritingDirection)
    }

    public open fun preferredTextFieldWidth(): Double =
        Native.objc_msgSend("double", this, "preferredTextFieldWidth") as Double

    public open fun setPreferredTextFieldWidth(preferredTextFieldWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setPreferredTextFieldWidth:", preferredTextFieldWidth)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass, NSFormCell_NSKeyboardUI.metaclass, NSFormCell_NSFormCellAttributedStringMethods.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSFormCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMenuItem(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSValidatedUserInterfaceItem, NSMenuItem_NSDeprecated {
    public open fun initWithTitle_action_keyEquivalent(aString: NSString, aSelector: ObjCSelector, charCode: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTitle:action:keyEquivalent:", aString, aSelector, charCode) as ObjCObject

    public open fun menu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menu") as NSMenu

    public open fun setMenu(menu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setMenu:", menu)
    }

    public open fun hasSubmenu(): Boolean =
        Native.objc_msgSend("boolean", this, "hasSubmenu") as Boolean

    public open fun submenu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "submenu") as NSMenu

    public open fun setSubmenu(submenu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setSubmenu:", submenu)
    }

    public open fun parentItem(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "parentItem") as NSMenuItem

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun attributedTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedTitle") as NSAttributedString

    public open fun setAttributedTitle(attributedTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedTitle:", attributedTitle)
    }

    public open fun isSeparatorItem(): Boolean =
        Native.objc_msgSend("boolean", this, "isSeparatorItem") as Boolean

    public open fun keyEquivalent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyEquivalent") as NSString

    public open fun setKeyEquivalent(keyEquivalent: NSString): Unit {
        Native.objc_msgSend("void", this, "setKeyEquivalent:", keyEquivalent)
    }

    public open fun keyEquivalentModifierMask(): Int =
        Native.objc_msgSend("int", this, "keyEquivalentModifierMask") as Int

    public open fun setKeyEquivalentModifierMask(keyEquivalentModifierMask: Int): Unit {
        Native.objc_msgSend("void", this, "setKeyEquivalentModifierMask:", keyEquivalentModifierMask)
    }

    public open fun userKeyEquivalent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "userKeyEquivalent") as NSString

    public open fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun state(): Int =
        Native.objc_msgSend("int", this, "state") as Int

    public open fun setState(state: Int): Unit {
        Native.objc_msgSend("void", this, "setState:", state)
    }

    public open fun onStateImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "onStateImage") as NSImage

    public open fun setOnStateImage(onStateImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setOnStateImage:", onStateImage)
    }

    public open fun offStateImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "offStateImage") as NSImage

    public open fun setOffStateImage(offStateImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setOffStateImage:", offStateImage)
    }

    public open fun mixedStateImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "mixedStateImage") as NSImage

    public open fun setMixedStateImage(mixedStateImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setMixedStateImage:", mixedStateImage)
    }

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun setEnabled(enabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEnabled:", enabled)
    }

    public open fun isAlternate(): Boolean =
        Native.objc_msgSend("boolean", this, "isAlternate") as Boolean

    public open fun setAlternate(alternate: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAlternate:", alternate)
    }

    public open fun indentationLevel(): Int =
        Native.objc_msgSend("int", this, "indentationLevel") as Int

    public open fun setIndentationLevel(indentationLevel: Int): Unit {
        Native.objc_msgSend("void", this, "setIndentationLevel:", indentationLevel)
    }

    public open fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    public open fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    public open fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    public open fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    public open fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    public open fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    public open fun representedObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "representedObject") as ObjCObject

    public open fun setRepresentedObject(representedObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setRepresentedObject:", representedObject)
    }

    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun setView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "setView:", view)
    }

    public open fun isHighlighted(): Boolean =
        Native.objc_msgSend("boolean", this, "isHighlighted") as Boolean

    public open fun isHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "isHidden") as Boolean

    public open fun setHidden(hidden: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHidden:", hidden)
    }

    public open fun isHiddenOrHasHiddenAncestor(): Boolean =
        Native.objc_msgSend("boolean", this, "isHiddenOrHasHiddenAncestor") as Boolean

    public open fun toolTip(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "toolTip") as NSString

    public open fun setToolTip(toolTip: NSString): Unit {
        Native.objc_msgSend("void", this, "setToolTip:", toolTip)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSValidatedUserInterfaceItem.metaclass, NSMenuItem_NSDeprecated.metaclass {
        public open fun setUsesUserKeyEquivalents(flag: Boolean): Unit {
            Native.objc_msgSend("void", this, "setUsesUserKeyEquivalents:", flag)
        }

        public open fun usesUserKeyEquivalents(): Boolean =
            Native.objc_msgSend("boolean", this, "usesUserKeyEquivalents") as Boolean

        public open fun separatorItem(): NSMenuItem =
            Native.objc_msgSend("class objc.NSMenuItem", this, "separatorItem") as NSMenuItem

    }

    companion object : NSObject(Native.objc_getClass("NSMenuItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMenu(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSMenu_NSSubmenuAction, NSMenu_NSMenuPropertiesToUpdate, NSMenu_NSDeprecated {
    public open fun initWithTitle(aTitle: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTitle:", aTitle) as ObjCObject

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun popUpMenuPositioningItem_atLocation_inView(item: NSMenuItem, location: Any, view: NSView): Boolean =
        Native.objc_msgSend("boolean", this, "popUpMenuPositioningItem:atLocation:inView:", item, location, view) as Boolean

    public open fun supermenu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "supermenu") as NSMenu

    public open fun setSupermenu(supermenu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setSupermenu:", supermenu)
    }

    public open fun insertItem_atIndex(newItem: NSMenuItem, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertItem:atIndex:", newItem, index)
    }

    public open fun addItem(newItem: NSMenuItem): Unit {
        Native.objc_msgSend("void", this, "addItem:", newItem)
    }

    public open fun insertItemWithTitle_action_keyEquivalent_atIndex(aString: NSString, aSelector: ObjCSelector, charCode: NSString, index: Int): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "insertItemWithTitle:action:keyEquivalent:atIndex:", aString, aSelector, charCode, index) as NSMenuItem

    public open fun addItemWithTitle_action_keyEquivalent(aString: NSString, aSelector: ObjCSelector, charCode: NSString): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "addItemWithTitle:action:keyEquivalent:", aString, aSelector, charCode) as NSMenuItem

    public open fun removeItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeItemAtIndex:", index)
    }

    public open fun removeItem(item: NSMenuItem): Unit {
        Native.objc_msgSend("void", this, "removeItem:", item)
    }

    public open fun setSubmenu_forItem(aMenu: NSMenu, anItem: NSMenuItem): Unit {
        Native.objc_msgSend("void", this, "setSubmenu:forItem:", aMenu, anItem)
    }

    public open fun removeAllItems(): Unit {
        Native.objc_msgSend("void", this, "removeAllItems")
    }

    public open fun itemArray(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "itemArray") as NSArray

    public open fun numberOfItems(): Int =
        Native.objc_msgSend("int", this, "numberOfItems") as Int

    public open fun itemAtIndex(index: Int): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "itemAtIndex:", index) as NSMenuItem

    public open fun indexOfItem(index: NSMenuItem): Int =
        Native.objc_msgSend("int", this, "indexOfItem:", index) as Int

    public open fun indexOfItemWithTitle(aTitle: NSString): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTitle:", aTitle) as Int

    public open fun indexOfItemWithTag(aTag: Int): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTag:", aTag) as Int

    public open fun indexOfItemWithRepresentedObject(`object`: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithRepresentedObject:", `object`) as Int

    public open fun indexOfItemWithSubmenu(submenu: NSMenu): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithSubmenu:", submenu) as Int

    public open fun indexOfItemWithTarget_andAction(target: ObjCObject, actionSelector: ObjCSelector): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTarget:andAction:", target, actionSelector) as Int

    public open fun itemWithTitle(aTitle: NSString): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "itemWithTitle:", aTitle) as NSMenuItem

    public open fun itemWithTag(tag: Int): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "itemWithTag:", tag) as NSMenuItem

    public open fun autoenablesItems(): Boolean =
        Native.objc_msgSend("boolean", this, "autoenablesItems") as Boolean

    public open fun setAutoenablesItems(autoenablesItems: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutoenablesItems:", autoenablesItems)
    }

    public open fun update(): Unit {
        Native.objc_msgSend("void", this, "update")
    }

    public open fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    public open fun itemChanged(item: NSMenuItem): Unit {
        Native.objc_msgSend("void", this, "itemChanged:", item)
    }

    public open fun performActionForItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "performActionForItemAtIndex:", index)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun menuBarHeight(): Double =
        Native.objc_msgSend("double", this, "menuBarHeight") as Double

    public open fun cancelTracking(): Unit {
        Native.objc_msgSend("void", this, "cancelTracking")
    }

    public open fun cancelTrackingWithoutAnimation(): Unit {
        Native.objc_msgSend("void", this, "cancelTrackingWithoutAnimation")
    }

    public open fun highlightedItem(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "highlightedItem") as NSMenuItem

    public open fun minimumWidth(): Double =
        Native.objc_msgSend("double", this, "minimumWidth") as Double

    public open fun setMinimumWidth(minimumWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setMinimumWidth:", minimumWidth)
    }

    public open fun size(): Any =
        Native.objc_msgSend("class objc.Any", this, "size")

    public open fun font(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "font") as NSFont

    public open fun setFont(font: NSFont): Unit {
        Native.objc_msgSend("void", this, "setFont:", font)
    }

    public open fun allowsContextMenuPlugIns(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsContextMenuPlugIns") as Boolean

    public open fun setAllowsContextMenuPlugIns(allowsContextMenuPlugIns: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsContextMenuPlugIns:", allowsContextMenuPlugIns)
    }

    public open fun showsStateColumn(): Boolean =
        Native.objc_msgSend("boolean", this, "showsStateColumn") as Boolean

    public open fun setShowsStateColumn(showsStateColumn: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsStateColumn:", showsStateColumn)
    }

    public open fun menuChangedMessagesEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "menuChangedMessagesEnabled") as Boolean

    public open fun setMenuChangedMessagesEnabled(menuChangedMessagesEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setMenuChangedMessagesEnabled:", menuChangedMessagesEnabled)
    }

    public open fun helpRequested(eventPtr: NSEvent): Unit {
        Native.objc_msgSend("void", this, "helpRequested:", eventPtr)
    }

    public open fun isTornOff(): Boolean =
        Native.objc_msgSend("boolean", this, "isTornOff") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSMenu_NSSubmenuAction.metaclass, NSMenu_NSMenuPropertiesToUpdate.metaclass, NSMenu_NSDeprecated.metaclass {
        public open fun popUpContextMenu_withEvent_forView(menu: NSMenu, event: NSEvent, view: NSView): Unit {
            Native.objc_msgSend("void", this, "popUpContextMenu:withEvent:forView:", menu, event, view)
        }

        public open fun popUpContextMenu_withEvent_forView_withFont(menu: NSMenu, event: NSEvent, view: NSView, font: NSFont): Unit {
            Native.objc_msgSend("void", this, "popUpContextMenu:withEvent:forView:withFont:", menu, event, view, font)
        }

        public open fun setMenuBarVisible(visible: Boolean): Unit {
            Native.objc_msgSend("void", this, "setMenuBarVisible:", visible)
        }

        public open fun menuBarVisible(): Boolean =
            Native.objc_msgSend("boolean", this, "menuBarVisible") as Boolean

        public open fun menuZone(): Pointer<Any> =
            Native.objc_msgSend("class kni.objc.Pointer", this, "menuZone") as Pointer<Any>

    }

    companion object : NSObject(Native.objc_getClass("NSMenu")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPasteboard(pointer: Long) : NSObject(pointer), NSPasteboard_FilterServices, NSPasteboard_NSFileContents {
    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun changeCount(): Int =
        Native.objc_msgSend("int", this, "changeCount") as Int

    public open fun releaseGlobally(): Unit {
        Native.objc_msgSend("void", this, "releaseGlobally")
    }

    public open fun clearContents(): Int =
        Native.objc_msgSend("int", this, "clearContents") as Int

    public open fun writeObjects(objects: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "writeObjects:", objects) as Boolean

    public open fun readObjectsForClasses_options(classArray: NSArray, options: NSDictionary): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "readObjectsForClasses:options:", classArray, options) as NSArray

    public open fun pasteboardItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pasteboardItems") as NSArray

    public open fun indexOfPasteboardItem(pasteboardItem: NSPasteboardItem): Int =
        Native.objc_msgSend("int", this, "indexOfPasteboardItem:", pasteboardItem) as Int

    public open fun canReadItemWithDataConformingToTypes(types: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "canReadItemWithDataConformingToTypes:", types) as Boolean

    public open fun canReadObjectForClasses_options(classArray: NSArray, options: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "canReadObjectForClasses:options:", classArray, options) as Boolean

    public open fun declareTypes_owner(newTypes: NSArray, newOwner: ObjCObject): Int =
        Native.objc_msgSend("int", this, "declareTypes:owner:", newTypes, newOwner) as Int

    public open fun addTypes_owner(newTypes: NSArray, newOwner: ObjCObject): Int =
        Native.objc_msgSend("int", this, "addTypes:owner:", newTypes, newOwner) as Int

    public open fun types(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "types") as NSArray

    public open fun availableTypeFromArray(types: NSArray): NSString =
        Native.objc_msgSend("class objc.NSString", this, "availableTypeFromArray:", types) as NSString

    public open fun setData_forType(data: NSData, dataType: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setData:forType:", data, dataType) as Boolean

    public open fun setPropertyList_forType(plist: ObjCObject, dataType: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setPropertyList:forType:", plist, dataType) as Boolean

    public open fun setString_forType(string: NSString, dataType: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setString:forType:", string, dataType) as Boolean

    public open fun dataForType(dataType: NSString): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataForType:", dataType) as NSData

    public open fun propertyListForType(dataType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyListForType:", dataType) as ObjCObject

    public open fun stringForType(dataType: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringForType:", dataType) as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSPasteboard_FilterServices.metaclass, NSPasteboard_NSFileContents.metaclass {
        public open fun generalPasteboard(): NSPasteboard =
            Native.objc_msgSend("class objc.NSPasteboard", this, "generalPasteboard") as NSPasteboard

        public open fun pasteboardWithName(name: NSString): NSPasteboard =
            Native.objc_msgSend("class objc.NSPasteboard", this, "pasteboardWithName:", name) as NSPasteboard

        public open fun pasteboardWithUniqueName(): NSPasteboard =
            Native.objc_msgSend("class objc.NSPasteboard", this, "pasteboardWithUniqueName") as NSPasteboard

    }

    companion object : NSObject(Native.objc_getClass("NSPasteboard")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CIVector(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun initWithValues_count(values: Pointer<Double>, count: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithValues:count:", values, count) as ObjCObject

    public open fun initWithX(x: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithX:", x) as ObjCObject

    public open fun initWithX_Y(x: Double, y: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithX:Y:", x, y) as ObjCObject

    public open fun initWithX_Y_Z(x: Double, y: Double, z: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithX:Y:Z:", x, y, z) as ObjCObject

    public open fun initWithX_Y_Z_W(x: Double, y: Double, z: Double, w: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithX:Y:Z:W:", x, y, z, w) as ObjCObject

    public open fun initWithCGPoint(p: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGPoint:", p) as ObjCObject

    public open fun initWithCGRect(r: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGRect:", r) as ObjCObject

    public open fun initWithCGAffineTransform(r: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGAffineTransform:", r) as ObjCObject

    public open fun initWithString(representation: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", representation) as ObjCObject

    public open fun valueAtIndex(index: Int): Double =
        Native.objc_msgSend("double", this, "valueAtIndex:", index) as Double

    public open fun count(): Int =
        Native.objc_msgSend("int", this, "count") as Int

    public open fun X(): Double =
        Native.objc_msgSend("double", this, "X") as Double

    public open fun Y(): Double =
        Native.objc_msgSend("double", this, "Y") as Double

    public open fun Z(): Double =
        Native.objc_msgSend("double", this, "Z") as Double

    public open fun W(): Double =
        Native.objc_msgSend("double", this, "W") as Double

    public open fun CGPointValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "CGPointValue")

    public open fun CGRectValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "CGRectValue")

    public open fun CGAffineTransformValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "CGAffineTransformValue")

    public open fun stringRepresentation(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringRepresentation") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
        public open fun vectorWithValues_count(values: Pointer<Double>, count: Int): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithValues:count:", values, count) as CIVector

        public open fun vectorWithX(x: Double): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithX:", x) as CIVector

        public open fun vectorWithX_Y(x: Double, y: Double): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithX:Y:", x, y) as CIVector

        public open fun vectorWithX_Y_Z(x: Double, y: Double, z: Double): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithX:Y:Z:", x, y, z) as CIVector

        public open fun vectorWithX_Y_Z_W(x: Double, y: Double, z: Double, w: Double): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithX:Y:Z:W:", x, y, z, w) as CIVector

        public open fun vectorWithCGPoint(p: Any): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithCGPoint:", p) as CIVector

        public open fun vectorWithCGRect(r: Any): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithCGRect:", r) as CIVector

        public open fun vectorWithCGAffineTransform(t: Any): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithCGAffineTransform:", t) as CIVector

        public open fun vectorWithString(representation: NSString): CIVector =
            Native.objc_msgSend("class objc.CIVector", this, "vectorWithString:", representation) as CIVector

    }

    companion object : NSObject(Native.objc_getClass("CIVector")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CIColor(pointer: Long) : NSObject(pointer), NSCoding, NSCopying, CIColor_NSAppKitAdditions {
    public open fun initWithCGColor(c: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGColor:", c) as ObjCObject

    public open fun numberOfComponents(): Int =
        Native.objc_msgSend("int", this, "numberOfComponents") as Int

    public open fun components(): Pointer<Double> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "components") as Pointer<Double>

    public open fun alpha(): Double =
        Native.objc_msgSend("double", this, "alpha") as Double

    public open fun colorSpace(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "colorSpace") as Pointer<Any>

    public open fun red(): Double =
        Native.objc_msgSend("double", this, "red") as Double

    public open fun green(): Double =
        Native.objc_msgSend("double", this, "green") as Double

    public open fun blue(): Double =
        Native.objc_msgSend("double", this, "blue") as Double

    public open fun stringRepresentation(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringRepresentation") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSCopying.metaclass, CIColor_NSAppKitAdditions.metaclass {
        public open fun colorWithCGColor(c: Pointer<Any>): CIColor =
            Native.objc_msgSend("class objc.CIColor", this, "colorWithCGColor:", c) as CIColor

        public open fun colorWithRed_green_blue_alpha(r: Double, g: Double, b: Double, a: Double): CIColor =
            Native.objc_msgSend("class objc.CIColor", this, "colorWithRed:green:blue:alpha:", r, g, b, a) as CIColor

        public open fun colorWithRed_green_blue(r: Double, g: Double, b: Double): CIColor =
            Native.objc_msgSend("class objc.CIColor", this, "colorWithRed:green:blue:", r, g, b) as CIColor

        public open fun colorWithString(representation: NSString): CIColor =
            Native.objc_msgSend("class objc.CIColor", this, "colorWithString:", representation) as CIColor

    }

    companion object : NSObject(Native.objc_getClass("CIColor")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSColor(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding, NSPasteboardReading, NSPasteboardWriting, NSColor_NSQuartzCoreAdditions {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun highlightWithLevel(`val`: Double): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "highlightWithLevel:", `val`) as NSColor

    public open fun shadowWithLevel(`val`: Double): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "shadowWithLevel:", `val`) as NSColor

    public open fun set(): Unit {
        Native.objc_msgSend("void", this, "set")
    }

    public open fun setFill(): Unit {
        Native.objc_msgSend("void", this, "setFill")
    }

    public open fun setStroke(): Unit {
        Native.objc_msgSend("void", this, "setStroke")
    }

    public open fun colorSpaceName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "colorSpaceName") as NSString

    public open fun colorUsingColorSpaceName(colorSpace: NSString): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "colorUsingColorSpaceName:", colorSpace) as NSColor

    public open fun colorUsingColorSpaceName_device(colorSpace: NSString, deviceDescription: NSDictionary): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "colorUsingColorSpaceName:device:", colorSpace, deviceDescription) as NSColor

    public open fun colorUsingColorSpace(space: NSColorSpace): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "colorUsingColorSpace:", space) as NSColor

    public open fun blendedColorWithFraction_ofColor(fraction: Double, color: NSColor): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "blendedColorWithFraction:ofColor:", fraction, color) as NSColor

    public open fun colorWithAlphaComponent(alpha: Double): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "colorWithAlphaComponent:", alpha) as NSColor

    public open fun catalogNameComponent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "catalogNameComponent") as NSString

    public open fun colorNameComponent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "colorNameComponent") as NSString

    public open fun localizedCatalogNameComponent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedCatalogNameComponent") as NSString

    public open fun localizedColorNameComponent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedColorNameComponent") as NSString

    public open fun redComponent(): Double =
        Native.objc_msgSend("double", this, "redComponent") as Double

    public open fun greenComponent(): Double =
        Native.objc_msgSend("double", this, "greenComponent") as Double

    public open fun blueComponent(): Double =
        Native.objc_msgSend("double", this, "blueComponent") as Double

    public open fun getRed_green_blue_alpha(red: Pointer<Double>, green: Pointer<Double>, blue: Pointer<Double>, alpha: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "getRed:green:blue:alpha:", red, green, blue, alpha)
    }

    public open fun hueComponent(): Double =
        Native.objc_msgSend("double", this, "hueComponent") as Double

    public open fun saturationComponent(): Double =
        Native.objc_msgSend("double", this, "saturationComponent") as Double

    public open fun brightnessComponent(): Double =
        Native.objc_msgSend("double", this, "brightnessComponent") as Double

    public open fun getHue_saturation_brightness_alpha(hue: Pointer<Double>, saturation: Pointer<Double>, brightness: Pointer<Double>, alpha: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "getHue:saturation:brightness:alpha:", hue, saturation, brightness, alpha)
    }

    public open fun whiteComponent(): Double =
        Native.objc_msgSend("double", this, "whiteComponent") as Double

    public open fun getWhite_alpha(white: Pointer<Double>, alpha: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "getWhite:alpha:", white, alpha)
    }

    public open fun cyanComponent(): Double =
        Native.objc_msgSend("double", this, "cyanComponent") as Double

    public open fun magentaComponent(): Double =
        Native.objc_msgSend("double", this, "magentaComponent") as Double

    public open fun yellowComponent(): Double =
        Native.objc_msgSend("double", this, "yellowComponent") as Double

    public open fun blackComponent(): Double =
        Native.objc_msgSend("double", this, "blackComponent") as Double

    public open fun getCyan_magenta_yellow_black_alpha(cyan: Pointer<Double>, magenta: Pointer<Double>, yellow: Pointer<Double>, black: Pointer<Double>, alpha: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "getCyan:magenta:yellow:black:alpha:", cyan, magenta, yellow, black, alpha)
    }

    public open fun colorSpace(): NSColorSpace =
        Native.objc_msgSend("class objc.NSColorSpace", this, "colorSpace") as NSColorSpace

    public open fun numberOfComponents(): Int =
        Native.objc_msgSend("int", this, "numberOfComponents") as Int

    public open fun getComponents(components: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "getComponents:", components)
    }

    public open fun alphaComponent(): Double =
        Native.objc_msgSend("double", this, "alphaComponent") as Double

    public open fun writeToPasteboard(pasteBoard: NSPasteboard): Unit {
        Native.objc_msgSend("void", this, "writeToPasteboard:", pasteBoard)
    }

    public open fun patternImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "patternImage") as NSImage

    public open fun drawSwatchInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "drawSwatchInRect:", rect)
    }

    public open fun CGColor(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGColor") as Pointer<Any>

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass, NSPasteboardReading.metaclass, NSPasteboardWriting.metaclass, NSColor_NSQuartzCoreAdditions.metaclass {
        public open fun colorWithCalibratedWhite_alpha(white: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithCalibratedWhite:alpha:", white, alpha) as NSColor

        public open fun colorWithCalibratedHue_saturation_brightness_alpha(hue: Double, saturation: Double, brightness: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithCalibratedHue:saturation:brightness:alpha:", hue, saturation, brightness, alpha) as NSColor

        public open fun colorWithCalibratedRed_green_blue_alpha(red: Double, green: Double, blue: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithCalibratedRed:green:blue:alpha:", red, green, blue, alpha) as NSColor

        public open fun colorWithDeviceWhite_alpha(white: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithDeviceWhite:alpha:", white, alpha) as NSColor

        public open fun colorWithDeviceHue_saturation_brightness_alpha(hue: Double, saturation: Double, brightness: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithDeviceHue:saturation:brightness:alpha:", hue, saturation, brightness, alpha) as NSColor

        public open fun colorWithDeviceRed_green_blue_alpha(red: Double, green: Double, blue: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithDeviceRed:green:blue:alpha:", red, green, blue, alpha) as NSColor

        public open fun colorWithDeviceCyan_magenta_yellow_black_alpha(cyan: Double, magenta: Double, yellow: Double, black: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithDeviceCyan:magenta:yellow:black:alpha:", cyan, magenta, yellow, black, alpha) as NSColor

        public open fun colorWithCatalogName_colorName(listName: NSString, colorName: NSString): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithCatalogName:colorName:", listName, colorName) as NSColor

        public open fun colorWithColorSpace_components_count(space: NSColorSpace, components: Pointer<Double>, numberOfComponents: Int): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithColorSpace:components:count:", space, components, numberOfComponents) as NSColor

        public open fun colorWithGenericGamma22White_alpha(white: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithGenericGamma22White:alpha:", white, alpha) as NSColor

        public open fun colorWithSRGBRed_green_blue_alpha(red: Double, green: Double, blue: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithSRGBRed:green:blue:alpha:", red, green, blue, alpha) as NSColor

        public open fun colorWithWhite_alpha(white: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithWhite:alpha:", white, alpha) as NSColor

        public open fun colorWithRed_green_blue_alpha(red: Double, green: Double, blue: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithRed:green:blue:alpha:", red, green, blue, alpha) as NSColor

        public open fun colorWithHue_saturation_brightness_alpha(hue: Double, saturation: Double, brightness: Double, alpha: Double): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithHue:saturation:brightness:alpha:", hue, saturation, brightness, alpha) as NSColor

        public open fun blackColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "blackColor") as NSColor

        public open fun darkGrayColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "darkGrayColor") as NSColor

        public open fun lightGrayColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "lightGrayColor") as NSColor

        public open fun whiteColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "whiteColor") as NSColor

        public open fun grayColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "grayColor") as NSColor

        public open fun redColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "redColor") as NSColor

        public open fun greenColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "greenColor") as NSColor

        public open fun blueColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "blueColor") as NSColor

        public open fun cyanColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "cyanColor") as NSColor

        public open fun yellowColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "yellowColor") as NSColor

        public open fun magentaColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "magentaColor") as NSColor

        public open fun orangeColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "orangeColor") as NSColor

        public open fun purpleColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "purpleColor") as NSColor

        public open fun brownColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "brownColor") as NSColor

        public open fun clearColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "clearColor") as NSColor

        public open fun controlShadowColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "controlShadowColor") as NSColor

        public open fun controlDarkShadowColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "controlDarkShadowColor") as NSColor

        public open fun controlColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "controlColor") as NSColor

        public open fun controlHighlightColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "controlHighlightColor") as NSColor

        public open fun controlLightHighlightColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "controlLightHighlightColor") as NSColor

        public open fun controlTextColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "controlTextColor") as NSColor

        public open fun controlBackgroundColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "controlBackgroundColor") as NSColor

        public open fun selectedControlColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "selectedControlColor") as NSColor

        public open fun secondarySelectedControlColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "secondarySelectedControlColor") as NSColor

        public open fun selectedControlTextColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "selectedControlTextColor") as NSColor

        public open fun disabledControlTextColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "disabledControlTextColor") as NSColor

        public open fun textColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "textColor") as NSColor

        public open fun textBackgroundColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "textBackgroundColor") as NSColor

        public open fun selectedTextColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "selectedTextColor") as NSColor

        public open fun selectedTextBackgroundColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "selectedTextBackgroundColor") as NSColor

        public open fun gridColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "gridColor") as NSColor

        public open fun keyboardFocusIndicatorColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "keyboardFocusIndicatorColor") as NSColor

        public open fun windowBackgroundColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "windowBackgroundColor") as NSColor

        public open fun underPageBackgroundColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "underPageBackgroundColor") as NSColor

        public open fun labelColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "labelColor") as NSColor

        public open fun secondaryLabelColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "secondaryLabelColor") as NSColor

        public open fun tertiaryLabelColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "tertiaryLabelColor") as NSColor

        public open fun quaternaryLabelColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "quaternaryLabelColor") as NSColor

        public open fun scrollBarColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "scrollBarColor") as NSColor

        public open fun knobColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "knobColor") as NSColor

        public open fun selectedKnobColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "selectedKnobColor") as NSColor

        public open fun windowFrameColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "windowFrameColor") as NSColor

        public open fun windowFrameTextColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "windowFrameTextColor") as NSColor

        public open fun selectedMenuItemColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "selectedMenuItemColor") as NSColor

        public open fun selectedMenuItemTextColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "selectedMenuItemTextColor") as NSColor

        public open fun highlightColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "highlightColor") as NSColor

        public open fun shadowColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "shadowColor") as NSColor

        public open fun headerColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "headerColor") as NSColor

        public open fun headerTextColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "headerTextColor") as NSColor

        public open fun alternateSelectedControlColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "alternateSelectedControlColor") as NSColor

        public open fun alternateSelectedControlTextColor(): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "alternateSelectedControlTextColor") as NSColor

        public open fun controlAlternatingRowBackgroundColors(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "controlAlternatingRowBackgroundColors") as NSArray

        public open fun colorForControlTint(controlTint: Any): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorForControlTint:", controlTint) as NSColor

        public open fun currentControlTint(): Any =
            Native.objc_msgSend("class objc.Any", this, "currentControlTint")

        public open fun colorFromPasteboard(pasteBoard: NSPasteboard): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorFromPasteboard:", pasteBoard) as NSColor

        public open fun colorWithPatternImage(image: NSImage): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithPatternImage:", image) as NSColor

        public open fun colorWithCGColor(cgColor: Pointer<Any>): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithCGColor:", cgColor) as NSColor

        public open fun setIgnoresAlpha(flag: Boolean): Unit {
            Native.objc_msgSend("void", this, "setIgnoresAlpha:", flag)
        }

        public open fun ignoresAlpha(): Boolean =
            Native.objc_msgSend("boolean", this, "ignoresAlpha") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSColor")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSColorSpace(pointer: Long) : NSObject(pointer), NSSecureCoding {
    public open fun initWithICCProfileData(iccData: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithICCProfileData:", iccData) as ObjCObject

    public open fun ICCProfileData(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "ICCProfileData") as NSData

    public open fun initWithColorSyncProfile(prof: Pointer<*>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithColorSyncProfile:", prof) as ObjCObject

    public open fun colorSyncProfile(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "colorSyncProfile") as Pointer<*>

    public open fun initWithCGColorSpace(cgColorSpace: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGColorSpace:", cgColorSpace) as ObjCObject

    public open fun CGColorSpace(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGColorSpace") as Pointer<Any>

    public open fun numberOfColorComponents(): Int =
        Native.objc_msgSend("int", this, "numberOfColorComponents") as Int

    public open fun colorSpaceModel(): Any =
        Native.objc_msgSend("class objc.Any", this, "colorSpaceModel")

    public open fun localizedName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedName") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSecureCoding.metaclass {
        public open fun genericRGBColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "genericRGBColorSpace") as NSColorSpace

        public open fun genericGrayColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "genericGrayColorSpace") as NSColorSpace

        public open fun genericCMYKColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "genericCMYKColorSpace") as NSColorSpace

        public open fun deviceRGBColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "deviceRGBColorSpace") as NSColorSpace

        public open fun deviceGrayColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "deviceGrayColorSpace") as NSColorSpace

        public open fun deviceCMYKColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "deviceCMYKColorSpace") as NSColorSpace

        public open fun sRGBColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "sRGBColorSpace") as NSColorSpace

        public open fun genericGamma22GrayColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "genericGamma22GrayColorSpace") as NSColorSpace

        public open fun adobeRGB1998ColorSpace(): NSColorSpace =
            Native.objc_msgSend("class objc.NSColorSpace", this, "adobeRGB1998ColorSpace") as NSColorSpace

        public open fun availableColorSpacesWithModel(model: Any): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "availableColorSpacesWithModel:", model) as NSArray

    }

    companion object : NSObject(Native.objc_getClass("NSColorSpace")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSImageRep(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun draw(): Boolean =
        Native.objc_msgSend("boolean", this, "draw") as Boolean

    public open fun drawAtPoint(point: Any): Boolean =
        Native.objc_msgSend("boolean", this, "drawAtPoint:", point) as Boolean

    public open fun drawInRect(rect: Any): Boolean =
        Native.objc_msgSend("boolean", this, "drawInRect:", rect) as Boolean

    public open fun drawInRect_fromRect_operation_fraction_respectFlipped_hints(dstSpacePortionRect: Any, srcSpacePortionRect: Any, op: Any, requestedAlpha: Double, respectContextIsFlipped: Boolean, hints: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "drawInRect:fromRect:operation:fraction:respectFlipped:hints:", dstSpacePortionRect, srcSpacePortionRect, op, requestedAlpha, respectContextIsFlipped, hints) as Boolean

    public open fun size(): Any =
        Native.objc_msgSend("class objc.Any", this, "size")

    public open fun setSize(size: Any): Unit {
        Native.objc_msgSend("void", this, "setSize:", size)
    }

    public open fun hasAlpha(): Boolean =
        Native.objc_msgSend("boolean", this, "hasAlpha") as Boolean

    public open fun setAlpha(alpha: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAlpha:", alpha)
    }

    public open fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    public open fun setOpaque(opaque: Boolean): Unit {
        Native.objc_msgSend("void", this, "setOpaque:", opaque)
    }

    public open fun colorSpaceName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "colorSpaceName") as NSString

    public open fun setColorSpaceName(colorSpaceName: NSString): Unit {
        Native.objc_msgSend("void", this, "setColorSpaceName:", colorSpaceName)
    }

    public open fun bitsPerSample(): Int =
        Native.objc_msgSend("int", this, "bitsPerSample") as Int

    public open fun setBitsPerSample(bitsPerSample: Int): Unit {
        Native.objc_msgSend("void", this, "setBitsPerSample:", bitsPerSample)
    }

    public open fun pixelsWide(): Int =
        Native.objc_msgSend("int", this, "pixelsWide") as Int

    public open fun setPixelsWide(pixelsWide: Int): Unit {
        Native.objc_msgSend("void", this, "setPixelsWide:", pixelsWide)
    }

    public open fun pixelsHigh(): Int =
        Native.objc_msgSend("int", this, "pixelsHigh") as Int

    public open fun setPixelsHigh(pixelsHigh: Int): Unit {
        Native.objc_msgSend("void", this, "setPixelsHigh:", pixelsHigh)
    }

    public open fun CGImageForProposedRect_context_hints(proposedDestRect: Pointer<Any>, context: NSGraphicsContext, hints: NSDictionary): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGImageForProposedRect:context:hints:", proposedDestRect, context, hints) as Pointer<Any>

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
        public open fun registerImageRepClass(imageRepClass: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "registerImageRepClass:", imageRepClass)
        }

        public open fun unregisterImageRepClass(imageRepClass: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "unregisterImageRepClass:", imageRepClass)
        }

        public open fun registeredImageRepClasses(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "registeredImageRepClasses") as NSArray

        public open fun imageRepClassForFileType(type: NSString): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "imageRepClassForFileType:", type) as ObjCClass

        public open fun imageRepClassForPasteboardType(type: NSString): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "imageRepClassForPasteboardType:", type) as ObjCClass

        public open fun imageRepClassForType(type: NSString): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "imageRepClassForType:", type) as ObjCClass

        public open fun imageRepClassForData(data: NSData): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "imageRepClassForData:", data) as ObjCClass

        public open fun canInitWithData(data: NSData): Boolean =
            Native.objc_msgSend("boolean", this, "canInitWithData:", data) as Boolean

        public open fun imageUnfilteredFileTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageUnfilteredFileTypes") as NSArray

        public open fun imageUnfilteredPasteboardTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageUnfilteredPasteboardTypes") as NSArray

        public open fun imageFileTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageFileTypes") as NSArray

        public open fun imagePasteboardTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imagePasteboardTypes") as NSArray

        public open fun imageUnfilteredTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageUnfilteredTypes") as NSArray

        public open fun imageTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageTypes") as NSArray

        public open fun canInitWithPasteboard(pasteboard: NSPasteboard): Boolean =
            Native.objc_msgSend("boolean", this, "canInitWithPasteboard:", pasteboard) as Boolean

        public open fun imageRepsWithContentsOfFile(filename: NSString): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageRepsWithContentsOfFile:", filename) as NSArray

        public open fun imageRepWithContentsOfFile(filename: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "imageRepWithContentsOfFile:", filename) as ObjCObject

        public open fun imageRepsWithContentsOfURL(url: NSURL): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageRepsWithContentsOfURL:", url) as NSArray

        public open fun imageRepWithContentsOfURL(url: NSURL): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "imageRepWithContentsOfURL:", url) as ObjCObject

        public open fun imageRepsWithPasteboard(pasteboard: NSPasteboard): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageRepsWithPasteboard:", pasteboard) as NSArray

        public open fun imageRepWithPasteboard(pasteboard: NSPasteboard): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "imageRepWithPasteboard:", pasteboard) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSImageRep")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSBitmapImageRep(pointer: Long) : NSImageRep(pointer), NSSecureCoding, NSBitmapImageRep_NSBitmapImageFileTypeExtensions {
    public open fun initWithFocusedViewRect(rect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFocusedViewRect:", rect) as ObjCObject

    public open fun initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bytesPerRow_bitsPerPixel(planes: Pointer<Pointer<Byte>>, width: Int, height: Int, bps: Int, spp: Int, alpha: Boolean, isPlanar: Boolean, colorSpaceName: NSString, rBytes: Int, pBits: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:", planes, width, height, bps, spp, alpha, isPlanar, colorSpaceName, rBytes, pBits) as ObjCObject

    public open fun initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bitmapFormat_bytesPerRow_bitsPerPixel(planes: Pointer<Pointer<Byte>>, width: Int, height: Int, bps: Int, spp: Int, alpha: Boolean, isPlanar: Boolean, colorSpaceName: NSString, bitmapFormat: Any, rBytes: Int, pBits: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:", planes, width, height, bps, spp, alpha, isPlanar, colorSpaceName, bitmapFormat, rBytes, pBits) as ObjCObject

    public open fun initWithCGImage(cgImage: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGImage:", cgImage) as ObjCObject

    public open fun initWithCIImage(ciImage: CIImage): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCIImage:", ciImage) as ObjCObject

    public open fun initWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", data) as ObjCObject

    public open fun bitmapData(): Pointer<Byte> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "bitmapData") as Pointer<Byte>

    public open fun getBitmapDataPlanes(data: Pointer<Pointer<Byte>>): Unit {
        Native.objc_msgSend("void", this, "getBitmapDataPlanes:", data)
    }

    public open fun isPlanar(): Boolean =
        Native.objc_msgSend("boolean", this, "isPlanar") as Boolean

    public open fun samplesPerPixel(): Int =
        Native.objc_msgSend("int", this, "samplesPerPixel") as Int

    public open fun bitsPerPixel(): Int =
        Native.objc_msgSend("int", this, "bitsPerPixel") as Int

    public open fun bytesPerRow(): Int =
        Native.objc_msgSend("int", this, "bytesPerRow") as Int

    public open fun bytesPerPlane(): Int =
        Native.objc_msgSend("int", this, "bytesPerPlane") as Int

    public open fun numberOfPlanes(): Int =
        Native.objc_msgSend("int", this, "numberOfPlanes") as Int

    public open fun bitmapFormat(): Any =
        Native.objc_msgSend("class objc.Any", this, "bitmapFormat")

    public open fun getCompression_factor(compression: Pointer<Any>, factor: Pointer<Float>): Unit {
        Native.objc_msgSend("void", this, "getCompression:factor:", compression, factor)
    }

    public open fun setCompression_factor(compression: Any, factor: Float): Unit {
        Native.objc_msgSend("void", this, "setCompression:factor:", compression, factor)
    }

    public open fun TIFFRepresentation(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "TIFFRepresentation") as NSData

    public open fun TIFFRepresentationUsingCompression_factor(comp: Any, factor: Float): NSData =
        Native.objc_msgSend("class objc.NSData", this, "TIFFRepresentationUsingCompression:factor:", comp, factor) as NSData

    public open fun canBeCompressedUsing(compression: Any): Boolean =
        Native.objc_msgSend("boolean", this, "canBeCompressedUsing:", compression) as Boolean

    public open fun colorizeByMappingGray_toColor_blackMapping_whiteMapping(midPoint: Double, midPointColor: NSColor, shadowColor: NSColor, lightColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "colorizeByMappingGray:toColor:blackMapping:whiteMapping:", midPoint, midPointColor, shadowColor, lightColor)
    }

    public open fun initForIncrementalLoad(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initForIncrementalLoad") as ObjCObject

    public open fun incrementalLoadFromData_complete(data: NSData, complete: Boolean): Int =
        Native.objc_msgSend("int", this, "incrementalLoadFromData:complete:", data, complete) as Int

    public open fun setColor_atX_y(color: NSColor, x: Int, y: Int): Unit {
        Native.objc_msgSend("void", this, "setColor:atX:y:", color, x, y)
    }

    public open fun colorAtX_y(x: Int, y: Int): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "colorAtX:y:", x, y) as NSColor

    public open fun getPixel_atX_y(p: Any, x: Int, y: Int): Unit {
        Native.objc_msgSend("void", this, "getPixel:atX:y:", p, x, y)
    }

    public open fun setPixel_atX_y(p: Any, x: Int, y: Int): Unit {
        Native.objc_msgSend("void", this, "setPixel:atX:y:", p, x, y)
    }

    public open fun CGImage(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGImage") as Pointer<Any>

    public open fun colorSpace(): NSColorSpace =
        Native.objc_msgSend("class objc.NSColorSpace", this, "colorSpace") as NSColorSpace

    public open fun bitmapImageRepByConvertingToColorSpace_renderingIntent(targetSpace: NSColorSpace, renderingIntent: Any): NSBitmapImageRep =
        Native.objc_msgSend("class objc.NSBitmapImageRep", this, "bitmapImageRepByConvertingToColorSpace:renderingIntent:", targetSpace, renderingIntent) as NSBitmapImageRep

    public open fun bitmapImageRepByRetaggingWithColorSpace(newSpace: NSColorSpace): NSBitmapImageRep =
        Native.objc_msgSend("class objc.NSBitmapImageRep", this, "bitmapImageRepByRetaggingWithColorSpace:", newSpace) as NSBitmapImageRep

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSImageRep.metaclass, NSSecureCoding.metaclass, NSBitmapImageRep_NSBitmapImageFileTypeExtensions.metaclass {
        public open fun imageRepsWithData(data: NSData): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageRepsWithData:", data) as NSArray

        public open fun imageRepWithData(data: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "imageRepWithData:", data) as ObjCObject

        public open fun TIFFRepresentationOfImageRepsInArray(array: NSArray): NSData =
            Native.objc_msgSend("class objc.NSData", this, "TIFFRepresentationOfImageRepsInArray:", array) as NSData

        public open fun TIFFRepresentationOfImageRepsInArray_usingCompression_factor(array: NSArray, comp: Any, factor: Float): NSData =
            Native.objc_msgSend("class objc.NSData", this, "TIFFRepresentationOfImageRepsInArray:usingCompression:factor:", array, comp, factor) as NSData

        public open fun getTIFFCompressionTypes_count(list: Pointer<Pointer<Any>>, numTypes: Pointer<Int>): Unit {
            Native.objc_msgSend("void", this, "getTIFFCompressionTypes:count:", list, numTypes)
        }

        public open fun localizedNameForTIFFCompressionType(compression: Any): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localizedNameForTIFFCompressionType:", compression) as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSBitmapImageRep")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPopover(pointer: Long) : NSResponder(pointer), NSAppearanceCustomization, NSAccessibilityElementProtocol, NSAccessibility {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun appearance(): NSAppearance =
        Native.objc_msgSend("class objc.NSAppearance", this, "appearance") as NSAppearance

    public open fun setAppearance(appearance: NSAppearance): Unit {
        Native.objc_msgSend("void", this, "setAppearance:", appearance)
    }

    public open fun effectiveAppearance(): NSAppearance =
        Native.objc_msgSend("class objc.NSAppearance", this, "effectiveAppearance") as NSAppearance

    public open fun behavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "behavior")

    public open fun setBehavior(behavior: Any): Unit {
        Native.objc_msgSend("void", this, "setBehavior:", behavior)
    }

    public open fun animates(): Boolean =
        Native.objc_msgSend("boolean", this, "animates") as Boolean

    public open fun setAnimates(animates: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAnimates:", animates)
    }

    public open fun contentViewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "contentViewController") as NSViewController

    public open fun setContentViewController(contentViewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "setContentViewController:", contentViewController)
    }

    public open fun contentSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentSize")

    public open fun setContentSize(contentSize: Any): Unit {
        Native.objc_msgSend("void", this, "setContentSize:", contentSize)
    }

    public open fun isShown(): Boolean =
        Native.objc_msgSend("boolean", this, "isShown") as Boolean

    public open fun positioningRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "positioningRect")

    public open fun setPositioningRect(positioningRect: Any): Unit {
        Native.objc_msgSend("void", this, "setPositioningRect:", positioningRect)
    }

    public open fun showRelativeToRect_ofView_preferredEdge(positioningRect: Any, positioningView: NSView, preferredEdge: Int): Unit {
        Native.objc_msgSend("void", this, "showRelativeToRect:ofView:preferredEdge:", positioningRect, positioningView, preferredEdge)
    }

    public open fun performClose(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performClose:", sender)
    }

    public open fun close(): Unit {
        Native.objc_msgSend("void", this, "close")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSResponder.metaclass, NSAppearanceCustomization.metaclass, NSAccessibilityElementProtocol.metaclass, NSAccessibility.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPopover")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStoryboard(pointer: Long) : NSObject(pointer) {
    public open fun instantiateInitialController(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "instantiateInitialController") as ObjCObject

    public open fun instantiateControllerWithIdentifier(identifier: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "instantiateControllerWithIdentifier:", identifier) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun storyboardWithName_bundle(name: NSString, storyboardBundleOrNil: NSBundle): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "storyboardWithName:bundle:", name, storyboardBundleOrNil) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSStoryboard")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStoryboardSegue(pointer: Long) : NSObject(pointer) {
    public open fun initWithIdentifier_source_destination(identifier: NSString, sourceController: ObjCObject, destinationController: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIdentifier:source:destination:", identifier, sourceController, destinationController) as ObjCObject

    public open fun identifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "identifier") as NSString

    public open fun sourceController(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "sourceController") as ObjCObject

    public open fun destinationController(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "destinationController") as ObjCObject

    public open fun perform(): Unit {
        Native.objc_msgSend("void", this, "perform")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun segueWithIdentifier_source_destination_performHandler(identifier: NSString, sourceController: ObjCObject, destinationController: ObjCObject, performHandler: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "segueWithIdentifier:source:destination:performHandler:", identifier, sourceController, destinationController, performHandler) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSStoryboardSegue")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSViewController(pointer: Long) : NSResponder(pointer), NSCoding, NSSeguePerforming, NSUserInterfaceItemIdentification, NSViewController_NSViewControllerPresentation, NSViewController_NSViewControllerPresentationAndTransitionStyles, NSViewController_NSViewControllerContainer, NSViewController_NSViewControllerStoryboardingMethods, NSViewController_NSExtensionAdditions {
    public open fun initWithNibName_bundle(nibNameOrNil: NSString, nibBundleOrNil: NSBundle): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithNibName:bundle:", nibNameOrNil, nibBundleOrNil) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun nibName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "nibName") as NSString

    public open fun nibBundle(): NSBundle =
        Native.objc_msgSend("class objc.NSBundle", this, "nibBundle") as NSBundle

    public open fun representedObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "representedObject") as ObjCObject

    public open fun setRepresentedObject(representedObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setRepresentedObject:", representedObject)
    }

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun setView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "setView:", view)
    }

    public open fun loadView(): Unit {
        Native.objc_msgSend("void", this, "loadView")
    }

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    public open fun viewDidLoad(): Unit {
        Native.objc_msgSend("void", this, "viewDidLoad")
    }

    public open fun isViewLoaded(): Boolean =
        Native.objc_msgSend("boolean", this, "isViewLoaded") as Boolean

    public open fun viewWillAppear(): Unit {
        Native.objc_msgSend("void", this, "viewWillAppear")
    }

    public open fun viewDidAppear(): Unit {
        Native.objc_msgSend("void", this, "viewDidAppear")
    }

    public open fun viewWillDisappear(): Unit {
        Native.objc_msgSend("void", this, "viewWillDisappear")
    }

    public open fun viewDidDisappear(): Unit {
        Native.objc_msgSend("void", this, "viewDidDisappear")
    }

    public open fun preferredContentSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredContentSize")

    public open fun setPreferredContentSize(preferredContentSize: Any): Unit {
        Native.objc_msgSend("void", this, "setPreferredContentSize:", preferredContentSize)
    }

    public open fun updateViewConstraints(): Unit {
        Native.objc_msgSend("void", this, "updateViewConstraints")
    }

    public open fun viewWillLayout(): Unit {
        Native.objc_msgSend("void", this, "viewWillLayout")
    }

    public open fun viewDidLayout(): Unit {
        Native.objc_msgSend("void", this, "viewDidLayout")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSResponder.metaclass, NSCoding.metaclass, NSSeguePerforming.metaclass, NSUserInterfaceItemIdentification.metaclass, NSViewController_NSViewControllerPresentation.metaclass, NSViewController_NSViewControllerPresentationAndTransitionStyles.metaclass, NSViewController_NSViewControllerContainer.metaclass, NSViewController_NSViewControllerStoryboardingMethods.metaclass, NSViewController_NSExtensionAdditions.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSViewController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSBrowser(pointer: Long) : NSControl(pointer), NSBrowser_NSDeprecated {
    public open fun loadColumnZero(): Unit {
        Native.objc_msgSend("void", this, "loadColumnZero")
    }

    public open fun isLoaded(): Boolean =
        Native.objc_msgSend("boolean", this, "isLoaded") as Boolean

    public open fun doubleAction(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "doubleAction") as ObjCSelector

    public open fun setDoubleAction(doubleAction: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setDoubleAction:", doubleAction)
    }

    public open fun setCellClass(factoryId: ObjCClass): Unit {
        Native.objc_msgSend("void", this, "setCellClass:", factoryId)
    }

    public open fun cellPrototype(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "cellPrototype") as ObjCObject

    public open fun setCellPrototype(cellPrototype: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setCellPrototype:", cellPrototype)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun reusesColumns(): Boolean =
        Native.objc_msgSend("boolean", this, "reusesColumns") as Boolean

    public open fun setReusesColumns(reusesColumns: Boolean): Unit {
        Native.objc_msgSend("void", this, "setReusesColumns:", reusesColumns)
    }

    public open fun hasHorizontalScroller(): Boolean =
        Native.objc_msgSend("boolean", this, "hasHorizontalScroller") as Boolean

    public open fun setHasHorizontalScroller(hasHorizontalScroller: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasHorizontalScroller:", hasHorizontalScroller)
    }

    public open fun autohidesScroller(): Boolean =
        Native.objc_msgSend("boolean", this, "autohidesScroller") as Boolean

    public open fun setAutohidesScroller(autohidesScroller: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutohidesScroller:", autohidesScroller)
    }

    public open fun separatesColumns(): Boolean =
        Native.objc_msgSend("boolean", this, "separatesColumns") as Boolean

    public open fun setSeparatesColumns(separatesColumns: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSeparatesColumns:", separatesColumns)
    }

    public open fun isTitled(): Boolean =
        Native.objc_msgSend("boolean", this, "isTitled") as Boolean

    public open fun setTitled(titled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTitled:", titled)
    }

    public open fun minColumnWidth(): Double =
        Native.objc_msgSend("double", this, "minColumnWidth") as Double

    public open fun setMinColumnWidth(minColumnWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setMinColumnWidth:", minColumnWidth)
    }

    public open fun maxVisibleColumns(): Int =
        Native.objc_msgSend("int", this, "maxVisibleColumns") as Int

    public open fun setMaxVisibleColumns(maxVisibleColumns: Int): Unit {
        Native.objc_msgSend("void", this, "setMaxVisibleColumns:", maxVisibleColumns)
    }

    public open fun allowsMultipleSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsMultipleSelection") as Boolean

    public open fun setAllowsMultipleSelection(allowsMultipleSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsMultipleSelection:", allowsMultipleSelection)
    }

    public open fun allowsBranchSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsBranchSelection") as Boolean

    public open fun setAllowsBranchSelection(allowsBranchSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsBranchSelection:", allowsBranchSelection)
    }

    public open fun allowsEmptySelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsEmptySelection") as Boolean

    public open fun setAllowsEmptySelection(allowsEmptySelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsEmptySelection:", allowsEmptySelection)
    }

    public open fun takesTitleFromPreviousColumn(): Boolean =
        Native.objc_msgSend("boolean", this, "takesTitleFromPreviousColumn") as Boolean

    public open fun setTakesTitleFromPreviousColumn(takesTitleFromPreviousColumn: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTakesTitleFromPreviousColumn:", takesTitleFromPreviousColumn)
    }

    public open fun sendsActionOnArrowKeys(): Boolean =
        Native.objc_msgSend("boolean", this, "sendsActionOnArrowKeys") as Boolean

    public open fun setSendsActionOnArrowKeys(sendsActionOnArrowKeys: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSendsActionOnArrowKeys:", sendsActionOnArrowKeys)
    }

    public open fun itemAtIndexPath(indexPath: NSIndexPath): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "itemAtIndexPath:", indexPath) as ObjCObject

    public open fun itemAtRow_inColumn(row: Int, column: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "itemAtRow:inColumn:", row, column) as ObjCObject

    public open fun indexPathForColumn(column: Int): NSIndexPath =
        Native.objc_msgSend("class objc.NSIndexPath", this, "indexPathForColumn:", column) as NSIndexPath

    public open fun isLeafItem(item: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isLeafItem:", item) as Boolean

    public open fun reloadDataForRowIndexes_inColumn(rowIndexes: NSIndexSet, column: Int): Unit {
        Native.objc_msgSend("void", this, "reloadDataForRowIndexes:inColumn:", rowIndexes, column)
    }

    public open fun parentForItemsInColumn(column: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "parentForItemsInColumn:", column) as ObjCObject

    public open fun scrollRowToVisible_inColumn(row: Int, column: Int): Unit {
        Native.objc_msgSend("void", this, "scrollRowToVisible:inColumn:", row, column)
    }

    public open fun setTitle_ofColumn(aString: NSString, column: Int): Unit {
        Native.objc_msgSend("void", this, "setTitle:ofColumn:", aString, column)
    }

    public open fun titleOfColumn(column: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "titleOfColumn:", column) as NSString

    public open fun pathSeparator(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathSeparator") as NSString

    public open fun setPathSeparator(pathSeparator: NSString): Unit {
        Native.objc_msgSend("void", this, "setPathSeparator:", pathSeparator)
    }

    public open fun setPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setPath:", path) as Boolean

    public open fun path(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "path") as NSString

    public open fun pathToColumn(column: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathToColumn:", column) as NSString

    public open fun clickedColumn(): Int =
        Native.objc_msgSend("int", this, "clickedColumn") as Int

    public open fun clickedRow(): Int =
        Native.objc_msgSend("int", this, "clickedRow") as Int

    public open fun selectedColumn(): Int =
        Native.objc_msgSend("int", this, "selectedColumn") as Int

    override fun selectedCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "selectedCell") as ObjCObject

    public open fun selectedCellInColumn(column: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "selectedCellInColumn:", column) as ObjCObject

    public open fun selectedCells(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectedCells") as NSArray

    public open fun selectRow_inColumn(row: Int, column: Int): Unit {
        Native.objc_msgSend("void", this, "selectRow:inColumn:", row, column)
    }

    public open fun selectedRowInColumn(column: Int): Int =
        Native.objc_msgSend("int", this, "selectedRowInColumn:", column) as Int

    public open fun selectionIndexPath(): NSIndexPath =
        Native.objc_msgSend("class objc.NSIndexPath", this, "selectionIndexPath") as NSIndexPath

    public open fun setSelectionIndexPath(selectionIndexPath: NSIndexPath): Unit {
        Native.objc_msgSend("void", this, "setSelectionIndexPath:", selectionIndexPath)
    }

    public open fun selectionIndexPaths(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectionIndexPaths") as NSArray

    public open fun setSelectionIndexPaths(selectionIndexPaths: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSelectionIndexPaths:", selectionIndexPaths)
    }

    public open fun selectRowIndexes_inColumn(indexes: NSIndexSet, column: Int): Unit {
        Native.objc_msgSend("void", this, "selectRowIndexes:inColumn:", indexes, column)
    }

    public open fun selectedRowIndexesInColumn(column: Int): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "selectedRowIndexesInColumn:", column) as NSIndexSet

    public open fun reloadColumn(column: Int): Unit {
        Native.objc_msgSend("void", this, "reloadColumn:", column)
    }

    public open fun validateVisibleColumns(): Unit {
        Native.objc_msgSend("void", this, "validateVisibleColumns")
    }

    public open fun scrollColumnsRightBy(shiftAmount: Int): Unit {
        Native.objc_msgSend("void", this, "scrollColumnsRightBy:", shiftAmount)
    }

    public open fun scrollColumnsLeftBy(shiftAmount: Int): Unit {
        Native.objc_msgSend("void", this, "scrollColumnsLeftBy:", shiftAmount)
    }

    public open fun scrollColumnToVisible(column: Int): Unit {
        Native.objc_msgSend("void", this, "scrollColumnToVisible:", column)
    }

    public open fun lastColumn(): Int =
        Native.objc_msgSend("int", this, "lastColumn") as Int

    public open fun setLastColumn(lastColumn: Int): Unit {
        Native.objc_msgSend("void", this, "setLastColumn:", lastColumn)
    }

    public open fun addColumn(): Unit {
        Native.objc_msgSend("void", this, "addColumn")
    }

    public open fun numberOfVisibleColumns(): Int =
        Native.objc_msgSend("int", this, "numberOfVisibleColumns") as Int

    public open fun firstVisibleColumn(): Int =
        Native.objc_msgSend("int", this, "firstVisibleColumn") as Int

    public open fun lastVisibleColumn(): Int =
        Native.objc_msgSend("int", this, "lastVisibleColumn") as Int

    public open fun loadedCellAtRow_column(row: Int, col: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "loadedCellAtRow:column:", row, col) as ObjCObject

    override fun selectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectAll:", sender)
    }

    public open fun tile(): Unit {
        Native.objc_msgSend("void", this, "tile")
    }

    public open fun doClick(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "doClick:", sender)
    }

    public open fun doDoubleClick(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "doDoubleClick:", sender)
    }

    public open fun sendAction(): Boolean =
        Native.objc_msgSend("boolean", this, "sendAction") as Boolean

    public open fun titleFrameOfColumn(column: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "titleFrameOfColumn:", column)

    public open fun drawTitleOfColumn_inRect(column: Int, aRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawTitleOfColumn:inRect:", column, aRect)
    }

    public open fun titleHeight(): Double =
        Native.objc_msgSend("double", this, "titleHeight") as Double

    public open fun frameOfColumn(column: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "frameOfColumn:", column)

    public open fun frameOfInsideOfColumn(column: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "frameOfInsideOfColumn:", column)

    public open fun frameOfRow_inColumn(row: Int, column: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "frameOfRow:inColumn:", row, column)

    public open fun getRow_column_forPoint(row: Pointer<Int>, column: Pointer<Int>, point: Any): Boolean =
        Native.objc_msgSend("boolean", this, "getRow:column:forPoint:", row, column, point) as Boolean

    public open fun columnWidthForColumnContentWidth(columnContentWidth: Double): Double =
        Native.objc_msgSend("double", this, "columnWidthForColumnContentWidth:", columnContentWidth) as Double

    public open fun columnContentWidthForColumnWidth(columnWidth: Double): Double =
        Native.objc_msgSend("double", this, "columnContentWidthForColumnWidth:", columnWidth) as Double

    public open fun columnResizingType(): Any =
        Native.objc_msgSend("class objc.Any", this, "columnResizingType")

    public open fun setColumnResizingType(columnResizingType: Any): Unit {
        Native.objc_msgSend("void", this, "setColumnResizingType:", columnResizingType)
    }

    public open fun prefersAllColumnUserResizing(): Boolean =
        Native.objc_msgSend("boolean", this, "prefersAllColumnUserResizing") as Boolean

    public open fun setPrefersAllColumnUserResizing(prefersAllColumnUserResizing: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPrefersAllColumnUserResizing:", prefersAllColumnUserResizing)
    }

    public open fun setWidth_ofColumn(columnWidth: Double, columnIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setWidth:ofColumn:", columnWidth, columnIndex)
    }

    public open fun widthOfColumn(column: Int): Double =
        Native.objc_msgSend("double", this, "widthOfColumn:", column) as Double

    public open fun rowHeight(): Double =
        Native.objc_msgSend("double", this, "rowHeight") as Double

    public open fun setRowHeight(rowHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setRowHeight:", rowHeight)
    }

    public open fun noteHeightOfRowsWithIndexesChanged_inColumn(indexSet: NSIndexSet, columnIndex: Int): Unit {
        Native.objc_msgSend("void", this, "noteHeightOfRowsWithIndexesChanged:inColumn:", indexSet, columnIndex)
    }

    public open fun setDefaultColumnWidth(columnWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setDefaultColumnWidth:", columnWidth)
    }

    public open fun defaultColumnWidth(): Double =
        Native.objc_msgSend("double", this, "defaultColumnWidth") as Double

    public open fun columnsAutosaveName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "columnsAutosaveName") as NSString

    public open fun setColumnsAutosaveName(columnsAutosaveName: NSString): Unit {
        Native.objc_msgSend("void", this, "setColumnsAutosaveName:", columnsAutosaveName)
    }

    public open fun canDragRowsWithIndexes_inColumn_withEvent(rowIndexes: NSIndexSet, column: Int, event: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "canDragRowsWithIndexes:inColumn:withEvent:", rowIndexes, column, event) as Boolean

    public open fun draggingImageForRowsWithIndexes_inColumn_withEvent_offset(rowIndexes: NSIndexSet, column: Int, event: NSEvent, dragImageOffset: Pointer<Any>): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "draggingImageForRowsWithIndexes:inColumn:withEvent:offset:", rowIndexes, column, event, dragImageOffset) as NSImage

    public open fun setDraggingSourceOperationMask_forLocal(mask: Any, isLocal: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDraggingSourceOperationMask:forLocal:", mask, isLocal)
    }

    public open fun allowsTypeSelect(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsTypeSelect") as Boolean

    public open fun setAllowsTypeSelect(allowsTypeSelect: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsTypeSelect:", allowsTypeSelect)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun editItemAtIndexPath_withEvent_select(indexPath: NSIndexPath, theEvent: NSEvent, select: Boolean): Unit {
        Native.objc_msgSend("void", this, "editItemAtIndexPath:withEvent:select:", indexPath, theEvent, select)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSBrowser_NSDeprecated.metaclass {
        override fun cellClass(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "cellClass") as ObjCClass

        public open fun removeSavedColumnsWithAutosaveName(name: NSString): Unit {
            Native.objc_msgSend("void", this, "removeSavedColumnsWithAutosaveName:", name)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSBrowser")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSBrowserCell(pointer: Long) : NSCell(pointer) {
    public open fun highlightColorInView(controlView: NSView): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "highlightColorInView:", controlView) as NSColor

    public open fun isLeaf(): Boolean =
        Native.objc_msgSend("boolean", this, "isLeaf") as Boolean

    public open fun setLeaf(leaf: Boolean): Unit {
        Native.objc_msgSend("void", this, "setLeaf:", leaf)
    }

    public open fun isLoaded(): Boolean =
        Native.objc_msgSend("boolean", this, "isLoaded") as Boolean

    public open fun setLoaded(loaded: Boolean): Unit {
        Native.objc_msgSend("void", this, "setLoaded:", loaded)
    }

    public open fun reset(): Unit {
        Native.objc_msgSend("void", this, "reset")
    }

    public open fun set(): Unit {
        Native.objc_msgSend("void", this, "set")
    }

    override fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    override fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun alternateImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "alternateImage") as NSImage

    public open fun setAlternateImage(alternateImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setAlternateImage:", alternateImage)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCell.metaclass {
        public open fun branchImage(): NSImage =
            Native.objc_msgSend("class objc.NSImage", this, "branchImage") as NSImage

        public open fun highlightedBranchImage(): NSImage =
            Native.objc_msgSend("class objc.NSImage", this, "highlightedBranchImage") as NSImage

    }

    companion object : NSObject(Native.objc_getClass("NSBrowserCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCachedImageRep(pointer: Long) : NSImageRep(pointer) {
    public open fun initWithWindow_rect(win: NSWindow, rect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithWindow:rect:", win, rect) as ObjCObject

    public open fun initWithSize_depth_separate_alpha(size: Any, depth: Int, flag: Boolean, alpha: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSize:depth:separate:alpha:", size, depth, flag, alpha) as ObjCObject

    public open fun window(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "window") as NSWindow

    public open fun rect(): Any =
        Native.objc_msgSend("class objc.Any", this, "rect")

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSImageRep.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCachedImageRep")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CIImage(pointer: Long) : NSObject(pointer), NSCoding, NSCopying, CIImage_AutoAdjustment, CIImage_NSAppKitAdditions {
    public open fun initWithCGImage(image: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGImage:", image) as ObjCObject

    public open fun initWithCGImage_options(image: Pointer<Any>, d: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGImage:options:", image, d) as ObjCObject

    public open fun initWithCGLayer(layer: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGLayer:", layer) as ObjCObject

    public open fun initWithCGLayer_options(layer: Pointer<Any>, d: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGLayer:options:", layer, d) as ObjCObject

    public open fun initWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", data) as ObjCObject

    public open fun initWithData_options(data: NSData, d: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:options:", data, d) as ObjCObject

    public open fun initWithBitmapData_bytesPerRow_size_format_colorSpace(d: NSData, bpr: Int, size: Any, f: Int, c: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBitmapData:bytesPerRow:size:format:colorSpace:", d, bpr, size, f, c) as ObjCObject

    public open fun initWithTexture_size_flipped_colorSpace(name: Int, size: Any, flag: Boolean, cs: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTexture:size:flipped:colorSpace:", name, size, flag, cs) as ObjCObject

    public open fun initWithTexture_size_flipped_options(name: Int, size: Any, flag: Boolean, options: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTexture:size:flipped:options:", name, size, flag, options) as ObjCObject

    public open fun initWithContentsOfURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:", url) as ObjCObject

    public open fun initWithContentsOfURL_options(url: NSURL, d: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:options:", url, d) as ObjCObject

    public open fun initWithIOSurface(surface: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIOSurface:", surface) as ObjCObject

    public open fun initWithIOSurface_options(surface: Pointer<Any>, d: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIOSurface:options:", surface, d) as ObjCObject

    public open fun initWithIOSurface_plane_format_options(surface: Pointer<Any>, plane: Int, format: Int, d: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIOSurface:plane:format:options:", surface, plane, format, d) as ObjCObject

    public open fun initWithCVImageBuffer(imageBuffer: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCVImageBuffer:", imageBuffer) as ObjCObject

    public open fun initWithCVImageBuffer_options(imageBuffer: Pointer<Any>, dict: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCVImageBuffer:options:", imageBuffer, dict) as ObjCObject

    public open fun initWithCVPixelBuffer(buffer: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCVPixelBuffer:", buffer) as ObjCObject

    public open fun initWithCVPixelBuffer_options(buffer: Pointer<Any>, dict: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCVPixelBuffer:options:", buffer, dict) as ObjCObject

    public open fun initWithColor(color: CIColor): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithColor:", color) as ObjCObject

    public open fun imageByApplyingTransform(matrix: Any): CIImage =
        Native.objc_msgSend("class objc.CIImage", this, "imageByApplyingTransform:", matrix) as CIImage

    public open fun imageByApplyingOrientation(orientation: Int): CIImage =
        Native.objc_msgSend("class objc.CIImage", this, "imageByApplyingOrientation:", orientation) as CIImage

    public open fun imageTransformForOrientation(orientation: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "imageTransformForOrientation:", orientation)

    public open fun imageByCompositingOverImage(dest: CIImage): CIImage =
        Native.objc_msgSend("class objc.CIImage", this, "imageByCompositingOverImage:", dest) as CIImage

    public open fun imageByCroppingToRect(r: Any): CIImage =
        Native.objc_msgSend("class objc.CIImage", this, "imageByCroppingToRect:", r) as CIImage

    public open fun imageByClampingToExtent(): CIImage =
        Native.objc_msgSend("class objc.CIImage", this, "imageByClampingToExtent") as CIImage

    public open fun extent(): Any =
        Native.objc_msgSend("class objc.Any", this, "extent")

    public open fun imageByApplyingFilter_withInputParameters(filterName: NSString, params: NSDictionary): CIImage =
        Native.objc_msgSend("class objc.CIImage", this, "imageByApplyingFilter:withInputParameters:", filterName, params) as CIImage

    public open fun properties(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "properties") as NSDictionary

    public open fun definition(): CIFilterShape =
        Native.objc_msgSend("class objc.CIFilterShape", this, "definition") as CIFilterShape

    public open fun url(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "url") as NSURL

    public open fun colorSpace(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "colorSpace") as Pointer<Any>

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSCopying.metaclass, CIImage_AutoAdjustment.metaclass, CIImage_NSAppKitAdditions.metaclass {
        public open fun imageWithCGImage(image: Pointer<Any>): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithCGImage:", image) as CIImage

        public open fun imageWithCGImage_options(image: Pointer<Any>, d: NSDictionary): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithCGImage:options:", image, d) as CIImage

        public open fun imageWithCGLayer(layer: Pointer<Any>): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithCGLayer:", layer) as CIImage

        public open fun imageWithCGLayer_options(layer: Pointer<Any>, d: NSDictionary): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithCGLayer:options:", layer, d) as CIImage

        public open fun imageWithBitmapData_bytesPerRow_size_format_colorSpace(d: NSData, bpr: Int, size: Any, f: Int, cs: Pointer<Any>): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithBitmapData:bytesPerRow:size:format:colorSpace:", d, bpr, size, f, cs) as CIImage

        public open fun imageWithTexture_size_flipped_colorSpace(name: Int, size: Any, flag: Boolean, cs: Pointer<Any>): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithTexture:size:flipped:colorSpace:", name, size, flag, cs) as CIImage

        public open fun imageWithTexture_size_flipped_options(name: Int, size: Any, flag: Boolean, options: NSDictionary): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithTexture:size:flipped:options:", name, size, flag, options) as CIImage

        public open fun imageWithContentsOfURL(url: NSURL): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithContentsOfURL:", url) as CIImage

        public open fun imageWithContentsOfURL_options(url: NSURL, d: NSDictionary): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithContentsOfURL:options:", url, d) as CIImage

        public open fun imageWithData(data: NSData): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithData:", data) as CIImage

        public open fun imageWithData_options(data: NSData, d: NSDictionary): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithData:options:", data, d) as CIImage

        public open fun imageWithCVImageBuffer(imageBuffer: Pointer<Any>): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithCVImageBuffer:", imageBuffer) as CIImage

        public open fun imageWithCVImageBuffer_options(imageBuffer: Pointer<Any>, dict: NSDictionary): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithCVImageBuffer:options:", imageBuffer, dict) as CIImage

        public open fun imageWithCVPixelBuffer(buffer: Pointer<Any>): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithCVPixelBuffer:", buffer) as CIImage

        public open fun imageWithCVPixelBuffer_options(buffer: Pointer<Any>, dict: NSDictionary): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithCVPixelBuffer:options:", buffer, dict) as CIImage

        public open fun imageWithIOSurface(surface: Pointer<Any>): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithIOSurface:", surface) as CIImage

        public open fun imageWithIOSurface_options(surface: Pointer<Any>, d: NSDictionary): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithIOSurface:options:", surface, d) as CIImage

        public open fun imageWithColor(color: CIColor): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "imageWithColor:", color) as CIImage

        public open fun emptyImage(): CIImage =
            Native.objc_msgSend("class objc.CIImage", this, "emptyImage") as CIImage

    }

    companion object : NSObject(Native.objc_getClass("CIImage")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCIImageRep(pointer: Long) : NSImageRep(pointer) {
    public open fun initWithCIImage(image: CIImage): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCIImage:", image) as ObjCObject

    public open fun CIImage(): CIImage =
        Native.objc_msgSend("class objc.CIImage", this, "CIImage") as CIImage

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSImageRep.metaclass {
        public open fun imageRepWithCIImage(image: CIImage): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "imageRepWithCIImage:", image) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSCIImageRep")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSColorList(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun initWithName(name: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:", name) as ObjCObject

    public open fun initWithName_fromFile(name: NSString, path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:fromFile:", name, path) as ObjCObject

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setColor_forKey(color: NSColor, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setColor:forKey:", color, key)
    }

    public open fun insertColor_key_atIndex(color: NSColor, key: NSString, loc: Int): Unit {
        Native.objc_msgSend("void", this, "insertColor:key:atIndex:", color, key, loc)
    }

    public open fun removeColorWithKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "removeColorWithKey:", key)
    }

    public open fun colorWithKey(key: NSString): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "colorWithKey:", key) as NSColor

    public open fun allKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allKeys") as NSArray

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun writeToFile(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:", path) as Boolean

    public open fun removeFile(): Unit {
        Native.objc_msgSend("void", this, "removeFile")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
        public open fun availableColorLists(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "availableColorLists") as NSArray

        public open fun colorListNamed(name: NSString): NSColorList =
            Native.objc_msgSend("class objc.NSColorList", this, "colorListNamed:", name) as NSColorList

    }

    companion object : NSObject(Native.objc_getClass("NSColorList")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSColorPanel(pointer: Long) : NSPanel(pointer) {
    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun setAccessoryView(accessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", accessoryView)
    }

    public open fun isContinuous(): Boolean =
        Native.objc_msgSend("boolean", this, "isContinuous") as Boolean

    public open fun setContinuous(continuous: Boolean): Unit {
        Native.objc_msgSend("void", this, "setContinuous:", continuous)
    }

    public open fun showsAlpha(): Boolean =
        Native.objc_msgSend("boolean", this, "showsAlpha") as Boolean

    public open fun setShowsAlpha(showsAlpha: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsAlpha:", showsAlpha)
    }

    public open fun mode(): Any =
        Native.objc_msgSend("class objc.Any", this, "mode")

    public open fun setMode(mode: Any): Unit {
        Native.objc_msgSend("void", this, "setMode:", mode)
    }

    public open fun color(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "color") as NSColor

    public open fun setColor(color: NSColor): Unit {
        Native.objc_msgSend("void", this, "setColor:", color)
    }

    public open fun alpha(): Double =
        Native.objc_msgSend("double", this, "alpha") as Double

    public open fun setAction(aSelector: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", aSelector)
    }

    public open fun setTarget(anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", anObject)
    }

    public open fun attachColorList(colorList: NSColorList): Unit {
        Native.objc_msgSend("void", this, "attachColorList:", colorList)
    }

    public open fun detachColorList(colorList: NSColorList): Unit {
        Native.objc_msgSend("void", this, "detachColorList:", colorList)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun isFloatingPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "isFloatingPanel") as Boolean

    override fun keyDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyDown:", theEvent)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun tryToPerform_with(anAction: ObjCSelector, anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "tryToPerform:with:", anAction, anObject) as Boolean

    override fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    override fun worksWhenModal(): Boolean =
        Native.objc_msgSend("boolean", this, "worksWhenModal") as Boolean

    trait metaclass : NSPanel.metaclass {
        public open fun sharedColorPanel(): NSColorPanel =
            Native.objc_msgSend("class objc.NSColorPanel", this, "sharedColorPanel") as NSColorPanel

        public open fun sharedColorPanelExists(): Boolean =
            Native.objc_msgSend("boolean", this, "sharedColorPanelExists") as Boolean

        public open fun dragColor_withEvent_fromView(color: NSColor, theEvent: NSEvent, sourceView: NSView): Boolean =
            Native.objc_msgSend("boolean", this, "dragColor:withEvent:fromView:", color, theEvent, sourceView) as Boolean

        public open fun setPickerMask(mask: Any): Unit {
            Native.objc_msgSend("void", this, "setPickerMask:", mask)
        }

        public open fun setPickerMode(mode: Any): Unit {
            Native.objc_msgSend("void", this, "setPickerMode:", mode)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSColorPanel")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSColorPicker(pointer: Long) : NSObject(pointer), NSColorPickingDefault {
    public open fun initWithPickerMask_colorPanel(mask: Int, owningColorPanel: NSColorPanel): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPickerMask:colorPanel:", mask, owningColorPanel) as ObjCObject

    public open fun colorPanel(): NSColorPanel =
        Native.objc_msgSend("class objc.NSColorPanel", this, "colorPanel") as NSColorPanel

    public open fun provideNewButtonImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "provideNewButtonImage") as NSImage

    public open fun insertNewButtonImage_in(newButtonImage: NSImage, buttonCell: NSButtonCell): Unit {
        Native.objc_msgSend("void", this, "insertNewButtonImage:in:", newButtonImage, buttonCell)
    }

    public open fun viewSizeChanged(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "viewSizeChanged:", sender)
    }

    public open fun attachColorList(colorList: NSColorList): Unit {
        Native.objc_msgSend("void", this, "attachColorList:", colorList)
    }

    public open fun detachColorList(colorList: NSColorList): Unit {
        Native.objc_msgSend("void", this, "detachColorList:", colorList)
    }

    public open fun setMode(mode: Any): Unit {
        Native.objc_msgSend("void", this, "setMode:", mode)
    }

    public open fun buttonToolTip(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "buttonToolTip") as NSString

    public open fun minContentSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "minContentSize")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSColorPickingDefault.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSColorPicker")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSColorWell(pointer: Long) : NSControl(pointer) {
    public open fun deactivate(): Unit {
        Native.objc_msgSend("void", this, "deactivate")
    }

    public open fun activate(exclusive: Boolean): Unit {
        Native.objc_msgSend("void", this, "activate:", exclusive)
    }

    public open fun isActive(): Boolean =
        Native.objc_msgSend("boolean", this, "isActive") as Boolean

    public open fun drawWellInside(insideRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawWellInside:", insideRect)
    }

    public open fun isBordered(): Boolean =
        Native.objc_msgSend("boolean", this, "isBordered") as Boolean

    public open fun setBordered(bordered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBordered:", bordered)
    }

    public open fun takeColorFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeColorFrom:", sender)
    }

    public open fun color(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "color") as NSColor

    public open fun setColor(color: NSColor): Unit {
        Native.objc_msgSend("void", this, "setColor:", color)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSColorWell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCursor(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun initWithImage_hotSpot(newImage: NSImage, aPoint: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithImage:hotSpot:", newImage, aPoint) as ObjCObject

    public open fun initWithImage_foregroundColorHint_backgroundColorHint_hotSpot(newImage: NSImage, fg: NSColor, bg: NSColor, hotSpot: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:", newImage, fg, bg, hotSpot) as ObjCObject

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun hotSpot(): Any =
        Native.objc_msgSend("class objc.Any", this, "hotSpot")

    public open fun push(): Unit {
        Native.objc_msgSend("void", this, "push")
    }

    public open fun pop(): Unit {
        Native.objc_msgSend("void", this, "pop")
    }

    public open fun set(): Unit {
        Native.objc_msgSend("void", this, "set")
    }

    public open fun setOnMouseExited(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setOnMouseExited:", flag)
    }

    public open fun setOnMouseEntered(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setOnMouseEntered:", flag)
    }

    public open fun isSetOnMouseExited(): Boolean =
        Native.objc_msgSend("boolean", this, "isSetOnMouseExited") as Boolean

    public open fun isSetOnMouseEntered(): Boolean =
        Native.objc_msgSend("boolean", this, "isSetOnMouseEntered") as Boolean

    public open fun mouseEntered(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseEntered:", theEvent)
    }

    public open fun mouseExited(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseExited:", theEvent)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
        public open fun currentCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "currentCursor") as NSCursor

        public open fun currentSystemCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "currentSystemCursor") as NSCursor

        public open fun arrowCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "arrowCursor") as NSCursor

        public open fun IBeamCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "IBeamCursor") as NSCursor

        public open fun pointingHandCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "pointingHandCursor") as NSCursor

        public open fun closedHandCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "closedHandCursor") as NSCursor

        public open fun openHandCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "openHandCursor") as NSCursor

        public open fun resizeLeftCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "resizeLeftCursor") as NSCursor

        public open fun resizeRightCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "resizeRightCursor") as NSCursor

        public open fun resizeLeftRightCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "resizeLeftRightCursor") as NSCursor

        public open fun resizeUpCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "resizeUpCursor") as NSCursor

        public open fun resizeDownCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "resizeDownCursor") as NSCursor

        public open fun resizeUpDownCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "resizeUpDownCursor") as NSCursor

        public open fun crosshairCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "crosshairCursor") as NSCursor

        public open fun disappearingItemCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "disappearingItemCursor") as NSCursor

        public open fun operationNotAllowedCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "operationNotAllowedCursor") as NSCursor

        public open fun dragLinkCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "dragLinkCursor") as NSCursor

        public open fun dragCopyCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "dragCopyCursor") as NSCursor

        public open fun contextualMenuCursor(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "contextualMenuCursor") as NSCursor

        public open fun IBeamCursorForVerticalLayout(): NSCursor =
            Native.objc_msgSend("class objc.NSCursor", this, "IBeamCursorForVerticalLayout") as NSCursor

        public open fun hide(): Unit {
            Native.objc_msgSend("void", this, "hide")
        }

        public open fun unhide(): Unit {
            Native.objc_msgSend("void", this, "unhide")
        }

        public open fun setHiddenUntilMouseMoves(flag: Boolean): Unit {
            Native.objc_msgSend("void", this, "setHiddenUntilMouseMoves:", flag)
        }

        public open fun pop(): Unit {
            Native.objc_msgSend("void", this, "pop")
        }

    }

    companion object : NSObject(Native.objc_getClass("NSCursor")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCustomImageRep(pointer: Long) : NSImageRep(pointer) {
    public open fun initWithSize_flipped_drawingHandler(size: Any, drawingHandlerShouldBeCalledWithFlippedContext: Boolean, drawingHandler: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSize:flipped:drawingHandler:", size, drawingHandlerShouldBeCalledWithFlippedContext, drawingHandler) as ObjCObject

    public open fun drawingHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "drawingHandler")

    public open fun initWithDrawSelector_delegate(aMethod: ObjCSelector, anObject: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDrawSelector:delegate:", aMethod, anObject) as ObjCObject

    public open fun drawSelector(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "drawSelector") as ObjCSelector

    public open fun delegate(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "delegate") as ObjCObject

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSImageRep.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCustomImageRep")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDocument(pointer: Long) : NSObject(pointer), NSFilePresenter, NSUserInterfaceValidations, NSDocument_NSDeprecated, NSDocument_NSUserActivity, NSDocument_NSScripting, NSDocument_NSRestorableState {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithType_error(typeName: NSString, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithType:error:", typeName, outError) as ObjCObject

    public open fun initWithContentsOfURL_ofType_error(url: NSURL, typeName: NSString, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:ofType:error:", url, typeName, outError) as ObjCObject

    public open fun initForURL_withContentsOfURL_ofType_error(urlOrNil: NSURL, contentsURL: NSURL, typeName: NSString, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initForURL:withContentsOfURL:ofType:error:", urlOrNil, contentsURL, typeName, outError) as ObjCObject

    public open fun fileType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fileType") as NSString

    public open fun setFileType(fileType: NSString): Unit {
        Native.objc_msgSend("void", this, "setFileType:", fileType)
    }

    public open fun fileURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "fileURL") as NSURL

    public open fun setFileURL(fileURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setFileURL:", fileURL)
    }

    public open fun fileModificationDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "fileModificationDate") as NSDate

    public open fun setFileModificationDate(fileModificationDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setFileModificationDate:", fileModificationDate)
    }

    public open fun isDraft(): Boolean =
        Native.objc_msgSend("boolean", this, "isDraft") as Boolean

    public open fun setDraft(draft: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDraft:", draft)
    }

    public open fun performActivityWithSynchronousWaiting_usingBlock(waitSynchronously: Boolean, block: Any): Unit {
        Native.objc_msgSend("void", this, "performActivityWithSynchronousWaiting:usingBlock:", waitSynchronously, block)
    }

    public open fun continueActivityUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "continueActivityUsingBlock:", block)
    }

    public open fun continueAsynchronousWorkOnMainThreadUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "continueAsynchronousWorkOnMainThreadUsingBlock:", block)
    }

    public open fun performSynchronousFileAccessUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "performSynchronousFileAccessUsingBlock:", block)
    }

    public open fun performAsynchronousFileAccessUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "performAsynchronousFileAccessUsingBlock:", block)
    }

    public open fun revertDocumentToSaved(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "revertDocumentToSaved:", sender)
    }

    public open fun revertToContentsOfURL_ofType_error(url: NSURL, typeName: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "revertToContentsOfURL:ofType:error:", url, typeName, outError) as Boolean

    public open fun readFromURL_ofType_error(url: NSURL, typeName: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromURL:ofType:error:", url, typeName, outError) as Boolean

    public open fun readFromFileWrapper_ofType_error(fileWrapper: NSFileWrapper, typeName: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromFileWrapper:ofType:error:", fileWrapper, typeName, outError) as Boolean

    public open fun readFromData_ofType_error(data: NSData, typeName: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromData:ofType:error:", data, typeName, outError) as Boolean

    public open fun isEntireFileLoaded(): Boolean =
        Native.objc_msgSend("boolean", this, "isEntireFileLoaded") as Boolean

    public open fun writeToURL_ofType_error(url: NSURL, typeName: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:ofType:error:", url, typeName, outError) as Boolean

    public open fun fileWrapperOfType_error(typeName: NSString, outError: Pointer<NSError>): NSFileWrapper =
        Native.objc_msgSend("class objc.NSFileWrapper", this, "fileWrapperOfType:error:", typeName, outError) as NSFileWrapper

    public open fun dataOfType_error(typeName: NSString, outError: Pointer<NSError>): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataOfType:error:", typeName, outError) as NSData

    public open fun unblockUserInteraction(): Unit {
        Native.objc_msgSend("void", this, "unblockUserInteraction")
    }

    public open fun autosavingIsImplicitlyCancellable(): Boolean =
        Native.objc_msgSend("boolean", this, "autosavingIsImplicitlyCancellable") as Boolean

    public open fun writeSafelyToURL_ofType_forSaveOperation_error(url: NSURL, typeName: NSString, saveOperation: Any, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeSafelyToURL:ofType:forSaveOperation:error:", url, typeName, saveOperation, outError) as Boolean

    public open fun writeToURL_ofType_forSaveOperation_originalContentsURL_error(url: NSURL, typeName: NSString, saveOperation: Any, absoluteOriginalContentsURL: NSURL, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:ofType:forSaveOperation:originalContentsURL:error:", url, typeName, saveOperation, absoluteOriginalContentsURL, outError) as Boolean

    public open fun fileAttributesToWriteToURL_ofType_forSaveOperation_originalContentsURL_error(url: NSURL, typeName: NSString, saveOperation: Any, absoluteOriginalContentsURL: NSURL, outError: Pointer<NSError>): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:", url, typeName, saveOperation, absoluteOriginalContentsURL, outError) as NSDictionary

    public open fun keepBackupFile(): Boolean =
        Native.objc_msgSend("boolean", this, "keepBackupFile") as Boolean

    public open fun backupFileURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "backupFileURL") as NSURL

    public open fun saveDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "saveDocument:", sender)
    }

    public open fun saveDocumentAs(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "saveDocumentAs:", sender)
    }

    public open fun saveDocumentTo(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "saveDocumentTo:", sender)
    }

    public open fun saveDocumentWithDelegate_didSaveSelector_contextInfo(delegate: ObjCObject, didSaveSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "saveDocumentWithDelegate:didSaveSelector:contextInfo:", delegate, didSaveSelector, contextInfo)
    }

    public open fun runModalSavePanelForSaveOperation_delegate_didSaveSelector_contextInfo(saveOperation: Any, delegate: ObjCObject, didSaveSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:", saveOperation, delegate, didSaveSelector, contextInfo)
    }

    public open fun shouldRunSavePanelWithAccessoryView(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldRunSavePanelWithAccessoryView") as Boolean

    public open fun prepareSavePanel(savePanel: NSSavePanel): Boolean =
        Native.objc_msgSend("boolean", this, "prepareSavePanel:", savePanel) as Boolean

    public open fun fileNameExtensionWasHiddenInLastRunSavePanel(): Boolean =
        Native.objc_msgSend("boolean", this, "fileNameExtensionWasHiddenInLastRunSavePanel") as Boolean

    public open fun fileTypeFromLastRunSavePanel(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fileTypeFromLastRunSavePanel") as NSString

    public open fun saveToURL_ofType_forSaveOperation_delegate_didSaveSelector_contextInfo(url: NSURL, typeName: NSString, saveOperation: Any, delegate: ObjCObject, didSaveSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:", url, typeName, saveOperation, delegate, didSaveSelector, contextInfo)
    }

    public open fun saveToURL_ofType_forSaveOperation_completionHandler(url: NSURL, typeName: NSString, saveOperation: Any, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "saveToURL:ofType:forSaveOperation:completionHandler:", url, typeName, saveOperation, completionHandler)
    }

    public open fun canAsynchronouslyWriteToURL_ofType_forSaveOperation(url: NSURL, typeName: NSString, saveOperation: Any): Boolean =
        Native.objc_msgSend("boolean", this, "canAsynchronouslyWriteToURL:ofType:forSaveOperation:", url, typeName, saveOperation) as Boolean

    public open fun checkAutosavingSafetyAndReturnError(outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "checkAutosavingSafetyAndReturnError:", outError) as Boolean

    public open fun scheduleAutosaving(): Unit {
        Native.objc_msgSend("void", this, "scheduleAutosaving")
    }

    public open fun hasUnautosavedChanges(): Boolean =
        Native.objc_msgSend("boolean", this, "hasUnautosavedChanges") as Boolean

    public open fun autosaveDocumentWithDelegate_didAutosaveSelector_contextInfo(delegate: ObjCObject, didAutosaveSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:", delegate, didAutosaveSelector, contextInfo)
    }

    public open fun autosaveWithImplicitCancellability_completionHandler(autosavingIsImplicitlyCancellable: Boolean, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "autosaveWithImplicitCancellability:completionHandler:", autosavingIsImplicitlyCancellable, completionHandler)
    }

    public open fun browseDocumentVersions(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "browseDocumentVersions:", sender)
    }

    public open fun autosavingFileType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "autosavingFileType") as NSString

    public open fun autosavedContentsFileURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "autosavedContentsFileURL") as NSURL

    public open fun setAutosavedContentsFileURL(autosavedContentsFileURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setAutosavedContentsFileURL:", autosavedContentsFileURL)
    }

    public open fun canCloseDocumentWithDelegate_shouldCloseSelector_contextInfo(delegate: ObjCObject, shouldCloseSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:", delegate, shouldCloseSelector, contextInfo)
    }

    public open fun close(): Unit {
        Native.objc_msgSend("void", this, "close")
    }

    public open fun duplicateDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "duplicateDocument:", sender)
    }

    public open fun duplicateDocumentWithDelegate_didDuplicateSelector_contextInfo(delegate: ObjCObject, didDuplicateSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "duplicateDocumentWithDelegate:didDuplicateSelector:contextInfo:", delegate, didDuplicateSelector, contextInfo)
    }

    public open fun duplicateAndReturnError(outError: Pointer<NSError>): NSDocument =
        Native.objc_msgSend("class objc.NSDocument", this, "duplicateAndReturnError:", outError) as NSDocument

    public open fun renameDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "renameDocument:", sender)
    }

    public open fun moveDocumentToUbiquityContainer(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveDocumentToUbiquityContainer:", sender)
    }

    public open fun moveDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveDocument:", sender)
    }

    public open fun moveDocumentWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "moveDocumentWithCompletionHandler:", completionHandler)
    }

    public open fun moveToURL_completionHandler(url: NSURL, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "moveToURL:completionHandler:", url, completionHandler)
    }

    public open fun lockDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "lockDocument:", sender)
    }

    public open fun unlockDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "unlockDocument:", sender)
    }

    public open fun lockDocumentWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "lockDocumentWithCompletionHandler:", completionHandler)
    }

    public open fun lockWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "lockWithCompletionHandler:", completionHandler)
    }

    public open fun unlockDocumentWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "unlockDocumentWithCompletionHandler:", completionHandler)
    }

    public open fun unlockWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "unlockWithCompletionHandler:", completionHandler)
    }

    public open fun isLocked(): Boolean =
        Native.objc_msgSend("boolean", this, "isLocked") as Boolean

    public open fun runPageLayout(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "runPageLayout:", sender)
    }

    public open fun runModalPageLayoutWithPrintInfo_delegate_didRunSelector_contextInfo(printInfo: NSPrintInfo, delegate: ObjCObject, didRunSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:", printInfo, delegate, didRunSelector, contextInfo)
    }

    public open fun preparePageLayout(pageLayout: NSPageLayout): Boolean =
        Native.objc_msgSend("boolean", this, "preparePageLayout:", pageLayout) as Boolean

    public open fun shouldChangePrintInfo(newPrintInfo: NSPrintInfo): Boolean =
        Native.objc_msgSend("boolean", this, "shouldChangePrintInfo:", newPrintInfo) as Boolean

    public open fun printInfo(): NSPrintInfo =
        Native.objc_msgSend("class objc.NSPrintInfo", this, "printInfo") as NSPrintInfo

    public open fun setPrintInfo(printInfo: NSPrintInfo): Unit {
        Native.objc_msgSend("void", this, "setPrintInfo:", printInfo)
    }

    public open fun printDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "printDocument:", sender)
    }

    public open fun printDocumentWithSettings_showPrintPanel_delegate_didPrintSelector_contextInfo(printSettings: NSDictionary, showPrintPanel: Boolean, delegate: ObjCObject, didPrintSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:", printSettings, showPrintPanel, delegate, didPrintSelector, contextInfo)
    }

    public open fun printOperationWithSettings_error(printSettings: NSDictionary, outError: Pointer<NSError>): NSPrintOperation =
        Native.objc_msgSend("class objc.NSPrintOperation", this, "printOperationWithSettings:error:", printSettings, outError) as NSPrintOperation

    public open fun runModalPrintOperation_delegate_didRunSelector_contextInfo(printOperation: NSPrintOperation, delegate: ObjCObject, didRunSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "runModalPrintOperation:delegate:didRunSelector:contextInfo:", printOperation, delegate, didRunSelector, contextInfo)
    }

    public open fun saveDocumentToPDF(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "saveDocumentToPDF:", sender)
    }

    public open fun PDFPrintOperation(): NSPrintOperation =
        Native.objc_msgSend("class objc.NSPrintOperation", this, "PDFPrintOperation") as NSPrintOperation

    public open fun isDocumentEdited(): Boolean =
        Native.objc_msgSend("boolean", this, "isDocumentEdited") as Boolean

    public open fun isInViewingMode(): Boolean =
        Native.objc_msgSend("boolean", this, "isInViewingMode") as Boolean

    public open fun updateChangeCount(change: Any): Unit {
        Native.objc_msgSend("void", this, "updateChangeCount:", change)
    }

    public open fun changeCountTokenForSaveOperation(saveOperation: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "changeCountTokenForSaveOperation:", saveOperation) as ObjCObject

    public open fun updateChangeCountWithToken_forSaveOperation(changeCountToken: ObjCObject, saveOperation: Any): Unit {
        Native.objc_msgSend("void", this, "updateChangeCountWithToken:forSaveOperation:", changeCountToken, saveOperation)
    }

    public open fun undoManager(): NSUndoManager =
        Native.objc_msgSend("class objc.NSUndoManager", this, "undoManager") as NSUndoManager

    public open fun setUndoManager(undoManager: NSUndoManager): Unit {
        Native.objc_msgSend("void", this, "setUndoManager:", undoManager)
    }

    public open fun hasUndoManager(): Boolean =
        Native.objc_msgSend("boolean", this, "hasUndoManager") as Boolean

    public open fun setHasUndoManager(hasUndoManager: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasUndoManager:", hasUndoManager)
    }

    public open fun presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: ObjCObject, didPresentSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:", error, window, delegate, didPresentSelector, contextInfo)
    }

    public open fun presentError(error: NSError): Boolean =
        Native.objc_msgSend("boolean", this, "presentError:", error) as Boolean

    public open fun willPresentError(error: NSError): NSError =
        Native.objc_msgSend("class objc.NSError", this, "willPresentError:", error) as NSError

    public open fun willNotPresentError(error: NSError): Unit {
        Native.objc_msgSend("void", this, "willNotPresentError:", error)
    }

    public open fun makeWindowControllers(): Unit {
        Native.objc_msgSend("void", this, "makeWindowControllers")
    }

    public open fun windowNibName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "windowNibName") as NSString

    public open fun windowControllerWillLoadNib(windowController: NSWindowController): Unit {
        Native.objc_msgSend("void", this, "windowControllerWillLoadNib:", windowController)
    }

    public open fun windowControllerDidLoadNib(windowController: NSWindowController): Unit {
        Native.objc_msgSend("void", this, "windowControllerDidLoadNib:", windowController)
    }

    public open fun setWindow(window: NSWindow): Unit {
        Native.objc_msgSend("void", this, "setWindow:", window)
    }

    public open fun addWindowController(windowController: NSWindowController): Unit {
        Native.objc_msgSend("void", this, "addWindowController:", windowController)
    }

    public open fun removeWindowController(windowController: NSWindowController): Unit {
        Native.objc_msgSend("void", this, "removeWindowController:", windowController)
    }

    public open fun showWindows(): Unit {
        Native.objc_msgSend("void", this, "showWindows")
    }

    public open fun windowControllers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "windowControllers") as NSArray

    public open fun shouldCloseWindowController_delegate_shouldCloseSelector_contextInfo(windowController: NSWindowController, delegate: ObjCObject, shouldCloseSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:", windowController, delegate, shouldCloseSelector, contextInfo)
    }

    public open fun setDisplayName(displayNameOrNil: NSString): Unit {
        Native.objc_msgSend("void", this, "setDisplayName:", displayNameOrNil)
    }

    public open fun displayName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "displayName") as NSString

    public open fun defaultDraftName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "defaultDraftName") as NSString

    public open fun windowForSheet(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "windowForSheet") as NSWindow

    public open fun writableTypesForSaveOperation(saveOperation: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "writableTypesForSaveOperation:", saveOperation) as NSArray

    public open fun fileNameExtensionForType_saveOperation(typeName: NSString, saveOperation: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fileNameExtensionForType:saveOperation:", typeName, saveOperation) as NSString

    public open fun validateUserInterfaceItem(anItem: Any): Boolean =
        Native.objc_msgSend("boolean", this, "validateUserInterfaceItem:", anItem) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun objectSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "objectSpecifier") as NSScriptObjectSpecifier

    trait metaclass : NSObject.metaclass, NSFilePresenter.metaclass, NSUserInterfaceValidations.metaclass, NSDocument_NSDeprecated.metaclass, NSDocument_NSUserActivity.metaclass, NSDocument_NSScripting.metaclass, NSDocument_NSRestorableState.metaclass {
        public open fun canConcurrentlyReadDocumentsOfType(typeName: NSString): Boolean =
            Native.objc_msgSend("boolean", this, "canConcurrentlyReadDocumentsOfType:", typeName) as Boolean

        public open fun autosavesInPlace(): Boolean =
            Native.objc_msgSend("boolean", this, "autosavesInPlace") as Boolean

        public open fun preservesVersions(): Boolean =
            Native.objc_msgSend("boolean", this, "preservesVersions") as Boolean

        public open fun autosavesDrafts(): Boolean =
            Native.objc_msgSend("boolean", this, "autosavesDrafts") as Boolean

        public open fun readableTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "readableTypes") as NSArray

        public open fun writableTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "writableTypes") as NSArray

        public open fun isNativeType(type: NSString): Boolean =
            Native.objc_msgSend("boolean", this, "isNativeType:", type) as Boolean

        public open fun usesUbiquitousStorage(): Boolean =
            Native.objc_msgSend("boolean", this, "usesUbiquitousStorage") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSDocument")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDocumentController(pointer: Long) : NSObject(pointer), NSCoding, NSUserInterfaceValidations, NSDocumentController_NSDeprecated, NSDocumentController_NSWindowRestoration {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun documents(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "documents") as NSArray

    public open fun currentDocument(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "currentDocument") as ObjCObject

    public open fun currentDirectory(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "currentDirectory") as NSString

    public open fun documentForURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "documentForURL:", url) as ObjCObject

    public open fun documentForWindow(window: NSWindow): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "documentForWindow:", window) as ObjCObject

    public open fun addDocument(document: NSDocument): Unit {
        Native.objc_msgSend("void", this, "addDocument:", document)
    }

    public open fun removeDocument(document: NSDocument): Unit {
        Native.objc_msgSend("void", this, "removeDocument:", document)
    }

    public open fun newDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "newDocument:", sender)
    }

    public open fun openUntitledDocumentAndDisplay_error(displayDocument: Boolean, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "openUntitledDocumentAndDisplay:error:", displayDocument, outError) as ObjCObject

    public open fun makeUntitledDocumentOfType_error(typeName: NSString, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "makeUntitledDocumentOfType:error:", typeName, outError) as ObjCObject

    public open fun openDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "openDocument:", sender)
    }

    public open fun URLsFromRunningOpenPanel(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "URLsFromRunningOpenPanel") as NSArray

    public open fun runModalOpenPanel_forTypes(openPanel: NSOpenPanel, types: NSArray): Int =
        Native.objc_msgSend("int", this, "runModalOpenPanel:forTypes:", openPanel, types) as Int

    public open fun beginOpenPanelWithCompletionHandler(completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "beginOpenPanelWithCompletionHandler:", completionHandler)
    }

    public open fun beginOpenPanel_forTypes_completionHandler(openPanel: NSOpenPanel, inTypes: NSArray, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "beginOpenPanel:forTypes:completionHandler:", openPanel, inTypes, completionHandler)
    }

    public open fun openDocumentWithContentsOfURL_display_completionHandler(url: NSURL, displayDocument: Boolean, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "openDocumentWithContentsOfURL:display:completionHandler:", url, displayDocument, completionHandler)
    }

    public open fun makeDocumentWithContentsOfURL_ofType_error(url: NSURL, typeName: NSString, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "makeDocumentWithContentsOfURL:ofType:error:", url, typeName, outError) as ObjCObject

    public open fun reopenDocumentForURL_withContentsOfURL_display_completionHandler(urlOrNil: NSURL, contentsURL: NSURL, displayDocument: Boolean, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "reopenDocumentForURL:withContentsOfURL:display:completionHandler:", urlOrNil, contentsURL, displayDocument, completionHandler)
    }

    public open fun makeDocumentForURL_withContentsOfURL_ofType_error(urlOrNil: NSURL, contentsURL: NSURL, typeName: NSString, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "makeDocumentForURL:withContentsOfURL:ofType:error:", urlOrNil, contentsURL, typeName, outError) as ObjCObject

    public open fun autosavingDelay(): Double =
        Native.objc_msgSend("double", this, "autosavingDelay") as Double

    public open fun setAutosavingDelay(autosavingDelay: Double): Unit {
        Native.objc_msgSend("void", this, "setAutosavingDelay:", autosavingDelay)
    }

    public open fun saveAllDocuments(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "saveAllDocuments:", sender)
    }

    public open fun hasEditedDocuments(): Boolean =
        Native.objc_msgSend("boolean", this, "hasEditedDocuments") as Boolean

    public open fun reviewUnsavedDocumentsWithAlertTitle_cancellable_delegate_didReviewAllSelector_contextInfo(title: NSString, cancellable: Boolean, delegate: ObjCObject, didReviewAllSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:", title, cancellable, delegate, didReviewAllSelector, contextInfo)
    }

    public open fun closeAllDocumentsWithDelegate_didCloseAllSelector_contextInfo(delegate: ObjCObject, didCloseAllSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:", delegate, didCloseAllSelector, contextInfo)
    }

    public open fun duplicateDocumentWithContentsOfURL_copying_displayName_error(url: NSURL, duplicateByCopying: Boolean, displayNameOrNil: NSString, outError: Pointer<NSError>): NSDocument =
        Native.objc_msgSend("class objc.NSDocument", this, "duplicateDocumentWithContentsOfURL:copying:displayName:error:", url, duplicateByCopying, displayNameOrNil, outError) as NSDocument

    public open fun presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: ObjCObject, didPresentSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:", error, window, delegate, didPresentSelector, contextInfo)
    }

    public open fun presentError(error: NSError): Boolean =
        Native.objc_msgSend("boolean", this, "presentError:", error) as Boolean

    public open fun willPresentError(error: NSError): NSError =
        Native.objc_msgSend("class objc.NSError", this, "willPresentError:", error) as NSError

    public open fun maximumRecentDocumentCount(): Int =
        Native.objc_msgSend("int", this, "maximumRecentDocumentCount") as Int

    public open fun clearRecentDocuments(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "clearRecentDocuments:", sender)
    }

    public open fun noteNewRecentDocument(document: NSDocument): Unit {
        Native.objc_msgSend("void", this, "noteNewRecentDocument:", document)
    }

    public open fun noteNewRecentDocumentURL(url: NSURL): Unit {
        Native.objc_msgSend("void", this, "noteNewRecentDocumentURL:", url)
    }

    public open fun recentDocumentURLs(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "recentDocumentURLs") as NSArray

    public open fun defaultType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "defaultType") as NSString

    public open fun typeForContentsOfURL_error(url: NSURL, outError: Pointer<NSError>): NSString =
        Native.objc_msgSend("class objc.NSString", this, "typeForContentsOfURL:error:", url, outError) as NSString

    public open fun documentClassNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "documentClassNames") as NSArray

    public open fun documentClassForType(typeName: NSString): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "documentClassForType:", typeName) as ObjCClass

    public open fun displayNameForType(typeName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "displayNameForType:", typeName) as NSString

    public open fun validateUserInterfaceItem(anItem: Any): Boolean =
        Native.objc_msgSend("boolean", this, "validateUserInterfaceItem:", anItem) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSUserInterfaceValidations.metaclass, NSDocumentController_NSDeprecated.metaclass, NSDocumentController_NSWindowRestoration.metaclass {
        public open fun sharedDocumentController(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sharedDocumentController") as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSDocumentController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDraggingImageComponent(pointer: Long) : NSObject(pointer) {
    public open fun initWithKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithKey:", key) as ObjCObject

    override fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    override fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    public open fun contents(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "contents") as ObjCObject

    public open fun setContents(contents: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setContents:", contents)
    }

    public open fun frame(): Any =
        Native.objc_msgSend("class objc.Any", this, "frame")

    public open fun setFrame(frame: Any): Unit {
        Native.objc_msgSend("void", this, "setFrame:", frame)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun draggingImageComponentWithKey(key: NSString): NSDraggingImageComponent =
            Native.objc_msgSend("class objc.NSDraggingImageComponent", this, "draggingImageComponentWithKey:", key) as NSDraggingImageComponent

    }

    companion object : NSObject(Native.objc_getClass("NSDraggingImageComponent")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDraggingItem(pointer: Long) : NSObject(pointer) {
    public open fun initWithPasteboardWriter(pasteboardWriter: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPasteboardWriter:", pasteboardWriter) as ObjCObject

    public open fun item(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "item") as ObjCObject

    public open fun draggingFrame(): Any =
        Native.objc_msgSend("class objc.Any", this, "draggingFrame")

    public open fun setDraggingFrame(draggingFrame: Any): Unit {
        Native.objc_msgSend("void", this, "setDraggingFrame:", draggingFrame)
    }

    public open fun imageComponentsProvider(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageComponentsProvider")

    public open fun setImageComponentsProvider(imageComponentsProvider: Any): Unit {
        Native.objc_msgSend("void", this, "setImageComponentsProvider:", imageComponentsProvider)
    }

    public open fun setDraggingFrame_contents(frame: Any, contents: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDraggingFrame:contents:", frame, contents)
    }

    public open fun imageComponents(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "imageComponents") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDraggingItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDraggingSession(pointer: Long) : NSObject(pointer) {
    public open fun draggingFormation(): Any =
        Native.objc_msgSend("class objc.Any", this, "draggingFormation")

    public open fun setDraggingFormation(draggingFormation: Any): Unit {
        Native.objc_msgSend("void", this, "setDraggingFormation:", draggingFormation)
    }

    public open fun animatesToStartingPositionsOnCancelOrFail(): Boolean =
        Native.objc_msgSend("boolean", this, "animatesToStartingPositionsOnCancelOrFail") as Boolean

    public open fun setAnimatesToStartingPositionsOnCancelOrFail(animatesToStartingPositionsOnCancelOrFail: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAnimatesToStartingPositionsOnCancelOrFail:", animatesToStartingPositionsOnCancelOrFail)
    }

    public open fun draggingLeaderIndex(): Int =
        Native.objc_msgSend("int", this, "draggingLeaderIndex") as Int

    public open fun setDraggingLeaderIndex(draggingLeaderIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setDraggingLeaderIndex:", draggingLeaderIndex)
    }

    public open fun draggingPasteboard(): NSPasteboard =
        Native.objc_msgSend("class objc.NSPasteboard", this, "draggingPasteboard") as NSPasteboard

    public open fun draggingSequenceNumber(): Int =
        Native.objc_msgSend("int", this, "draggingSequenceNumber") as Int

    public open fun draggingLocation(): Any =
        Native.objc_msgSend("class objc.Any", this, "draggingLocation")

    public open fun enumerateDraggingItemsWithOptions_forView_classes_searchOptions_usingBlock(enumOpts: Any, view: NSView, classArray: NSArray, searchOptions: NSDictionary, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:", enumOpts, view, classArray, searchOptions, block)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDraggingSession")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSEPSImageRep(pointer: Long) : NSImageRep(pointer) {
    public open fun initWithData(epsData: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", epsData) as ObjCObject

    public open fun prepareGState(): Unit {
        Native.objc_msgSend("void", this, "prepareGState")
    }

    public open fun EPSRepresentation(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "EPSRepresentation") as NSData

    public open fun boundingBox(): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingBox")

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSImageRep.metaclass {
        public open fun imageRepWithData(epsData: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "imageRepWithData:", epsData) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSEPSImageRep")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHelpManager(pointer: Long) : NSObject(pointer) {
    public open fun setContextHelp_forObject(attrString: NSAttributedString, `object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setContextHelp:forObject:", attrString, `object`)
    }

    public open fun removeContextHelpForObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeContextHelpForObject:", `object`)
    }

    public open fun contextHelpForObject(`object`: ObjCObject): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "contextHelpForObject:", `object`) as NSAttributedString

    public open fun showContextHelpForObject_locationHint(`object`: ObjCObject, pt: Any): Boolean =
        Native.objc_msgSend("boolean", this, "showContextHelpForObject:locationHint:", `object`, pt) as Boolean

    public open fun openHelpAnchor_inBook(anchor: NSString, book: NSString): Unit {
        Native.objc_msgSend("void", this, "openHelpAnchor:inBook:", anchor, book)
    }

    public open fun findString_inBook(query: NSString, book: NSString): Unit {
        Native.objc_msgSend("void", this, "findString:inBook:", query, book)
    }

    public open fun registerBooksInBundle(bundle: NSBundle): Boolean =
        Native.objc_msgSend("boolean", this, "registerBooksInBundle:", bundle) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun sharedHelpManager(): NSHelpManager =
            Native.objc_msgSend("class objc.NSHelpManager", this, "sharedHelpManager") as NSHelpManager

        public open fun setContextHelpModeActive(active: Boolean): Unit {
            Native.objc_msgSend("void", this, "setContextHelpModeActive:", active)
        }

        public open fun isContextHelpModeActive(): Boolean =
            Native.objc_msgSend("boolean", this, "isContextHelpModeActive") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSHelpManager")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSGradient(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun initWithStartingColor_endingColor(startingColor: NSColor, endingColor: NSColor): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithStartingColor:endingColor:", startingColor, endingColor) as ObjCObject

    public open fun initWithColors(colorArray: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithColors:", colorArray) as ObjCObject

    public open fun initWithColorsAndLocations(firstColor: NSColor): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithColorsAndLocations:", firstColor) as ObjCObject

    public open fun initWithColors_atLocations_colorSpace(colorArray: NSArray, locations: Pointer<Double>, colorSpace: NSColorSpace): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithColors:atLocations:colorSpace:", colorArray, locations, colorSpace) as ObjCObject

    public open fun drawFromPoint_toPoint_options(startingPoint: Any, endingPoint: Any, options: Int): Unit {
        Native.objc_msgSend("void", this, "drawFromPoint:toPoint:options:", startingPoint, endingPoint, options)
    }

    public open fun drawInRect_angle(rect: Any, angle: Double): Unit {
        Native.objc_msgSend("void", this, "drawInRect:angle:", rect, angle)
    }

    public open fun drawInBezierPath_angle(path: NSBezierPath, angle: Double): Unit {
        Native.objc_msgSend("void", this, "drawInBezierPath:angle:", path, angle)
    }

    public open fun drawFromCenter_radius_toCenter_radius_options(startCenter: Any, startRadius: Double, endCenter: Any, endRadius: Double, options: Int): Unit {
        Native.objc_msgSend("void", this, "drawFromCenter:radius:toCenter:radius:options:", startCenter, startRadius, endCenter, endRadius, options)
    }

    public open fun drawInRect_relativeCenterPosition(rect: Any, relativeCenterPosition: Any): Unit {
        Native.objc_msgSend("void", this, "drawInRect:relativeCenterPosition:", rect, relativeCenterPosition)
    }

    public open fun drawInBezierPath_relativeCenterPosition(path: NSBezierPath, relativeCenterPosition: Any): Unit {
        Native.objc_msgSend("void", this, "drawInBezierPath:relativeCenterPosition:", path, relativeCenterPosition)
    }

    public open fun colorSpace(): NSColorSpace =
        Native.objc_msgSend("class objc.NSColorSpace", this, "colorSpace") as NSColorSpace

    public open fun numberOfColorStops(): Int =
        Native.objc_msgSend("int", this, "numberOfColorStops") as Int

    public open fun getColor_location_atIndex(color: Pointer<NSColor>, location: Pointer<Double>, index: Int): Unit {
        Native.objc_msgSend("void", this, "getColor:location:atIndex:", color, location, index)
    }

    public open fun interpolatedColorAtLocation(location: Double): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "interpolatedColorAtLocation:", location) as NSColor

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSGradient")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSGestureRecognizer(pointer: Long) : NSObject(pointer), NSCoding, NSGestureRecognizer_NSSubclassUse {
    public open fun initWithTarget_action(target: ObjCObject, action: ObjCSelector): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTarget:action:", target, action) as ObjCObject

    public open fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    public open fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    public open fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    public open fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun setEnabled(enabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEnabled:", enabled)
    }

    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun delaysPrimaryMouseButtonEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "delaysPrimaryMouseButtonEvents") as Boolean

    public open fun setDelaysPrimaryMouseButtonEvents(delaysPrimaryMouseButtonEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDelaysPrimaryMouseButtonEvents:", delaysPrimaryMouseButtonEvents)
    }

    public open fun delaysSecondaryMouseButtonEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "delaysSecondaryMouseButtonEvents") as Boolean

    public open fun setDelaysSecondaryMouseButtonEvents(delaysSecondaryMouseButtonEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDelaysSecondaryMouseButtonEvents:", delaysSecondaryMouseButtonEvents)
    }

    public open fun delaysOtherMouseButtonEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "delaysOtherMouseButtonEvents") as Boolean

    public open fun setDelaysOtherMouseButtonEvents(delaysOtherMouseButtonEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDelaysOtherMouseButtonEvents:", delaysOtherMouseButtonEvents)
    }

    public open fun delaysKeyEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "delaysKeyEvents") as Boolean

    public open fun setDelaysKeyEvents(delaysKeyEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDelaysKeyEvents:", delaysKeyEvents)
    }

    public open fun delaysMagnificationEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "delaysMagnificationEvents") as Boolean

    public open fun setDelaysMagnificationEvents(delaysMagnificationEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDelaysMagnificationEvents:", delaysMagnificationEvents)
    }

    public open fun delaysRotationEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "delaysRotationEvents") as Boolean

    public open fun setDelaysRotationEvents(delaysRotationEvents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDelaysRotationEvents:", delaysRotationEvents)
    }

    public open fun locationInView(view: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "locationInView:", view)

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSGestureRecognizer_NSSubclassUse.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSGestureRecognizer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSClickGestureRecognizer(pointer: Long) : NSGestureRecognizer(pointer), NSCoding {
    public open fun buttonMask(): Int =
        Native.objc_msgSend("int", this, "buttonMask") as Int

    public open fun setButtonMask(buttonMask: Int): Unit {
        Native.objc_msgSend("void", this, "setButtonMask:", buttonMask)
    }

    public open fun numberOfClicksRequired(): Int =
        Native.objc_msgSend("int", this, "numberOfClicksRequired") as Int

    public open fun setNumberOfClicksRequired(numberOfClicksRequired: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfClicksRequired:", numberOfClicksRequired)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    trait metaclass : NSGestureRecognizer.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSClickGestureRecognizer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPanGestureRecognizer(pointer: Long) : NSGestureRecognizer(pointer), NSCoding {
    public open fun buttonMask(): Int =
        Native.objc_msgSend("int", this, "buttonMask") as Int

    public open fun setButtonMask(buttonMask: Int): Unit {
        Native.objc_msgSend("void", this, "setButtonMask:", buttonMask)
    }

    public open fun translationInView(view: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "translationInView:", view)

    public open fun setTranslation_inView(translation: Any, view: NSView): Unit {
        Native.objc_msgSend("void", this, "setTranslation:inView:", translation, view)
    }

    public open fun velocityInView(view: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "velocityInView:", view)

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    trait metaclass : NSGestureRecognizer.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPanGestureRecognizer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPressGestureRecognizer(pointer: Long) : NSGestureRecognizer(pointer), NSCoding {
    public open fun buttonMask(): Int =
        Native.objc_msgSend("int", this, "buttonMask") as Int

    public open fun setButtonMask(buttonMask: Int): Unit {
        Native.objc_msgSend("void", this, "setButtonMask:", buttonMask)
    }

    public open fun minimumPressDuration(): Double =
        Native.objc_msgSend("double", this, "minimumPressDuration") as Double

    public open fun setMinimumPressDuration(minimumPressDuration: Double): Unit {
        Native.objc_msgSend("void", this, "setMinimumPressDuration:", minimumPressDuration)
    }

    public open fun allowableMovement(): Double =
        Native.objc_msgSend("double", this, "allowableMovement") as Double

    public open fun setAllowableMovement(allowableMovement: Double): Unit {
        Native.objc_msgSend("void", this, "setAllowableMovement:", allowableMovement)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    trait metaclass : NSGestureRecognizer.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPressGestureRecognizer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMagnificationGestureRecognizer(pointer: Long) : NSGestureRecognizer(pointer) {
    public open fun magnification(): Double =
        Native.objc_msgSend("double", this, "magnification") as Double

    public open fun setMagnification(magnification: Double): Unit {
        Native.objc_msgSend("void", this, "setMagnification:", magnification)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    trait metaclass : NSGestureRecognizer.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMagnificationGestureRecognizer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRotationGestureRecognizer(pointer: Long) : NSGestureRecognizer(pointer) {
    public open fun rotation(): Double =
        Native.objc_msgSend("double", this, "rotation") as Double

    public open fun setRotation(rotation: Double): Unit {
        Native.objc_msgSend("void", this, "setRotation:", rotation)
    }

    public open fun rotationInDegrees(): Double =
        Native.objc_msgSend("double", this, "rotationInDegrees") as Double

    public open fun setRotationInDegrees(rotationInDegrees: Double): Unit {
        Native.objc_msgSend("void", this, "setRotationInDegrees:", rotationInDegrees)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    trait metaclass : NSGestureRecognizer.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSRotationGestureRecognizer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLayoutConstraint(pointer: Long) : NSObject(pointer), NSAnimatablePropertyContainer, NSLayoutConstraint_NSIdentifier {
    public open fun priority(): Float =
        Native.objc_msgSend("float", this, "priority") as Float

    public open fun setPriority(priority: Float): Unit {
        Native.objc_msgSend("void", this, "setPriority:", priority)
    }

    public open fun shouldBeArchived(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBeArchived") as Boolean

    public open fun setShouldBeArchived(shouldBeArchived: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldBeArchived:", shouldBeArchived)
    }

    public open fun firstItem(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "firstItem") as ObjCObject

    public open fun firstAttribute(): Any =
        Native.objc_msgSend("class objc.Any", this, "firstAttribute")

    public open fun relation(): Any =
        Native.objc_msgSend("class objc.Any", this, "relation")

    public open fun secondItem(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "secondItem") as ObjCObject

    public open fun secondAttribute(): Any =
        Native.objc_msgSend("class objc.Any", this, "secondAttribute")

    public open fun multiplier(): Double =
        Native.objc_msgSend("double", this, "multiplier") as Double

    public open fun constant(): Double =
        Native.objc_msgSend("double", this, "constant") as Double

    public open fun setConstant(constant: Double): Unit {
        Native.objc_msgSend("void", this, "setConstant:", constant)
    }

    public open fun isActive(): Boolean =
        Native.objc_msgSend("boolean", this, "isActive") as Boolean

    public open fun setActive(active: Boolean): Unit {
        Native.objc_msgSend("void", this, "setActive:", active)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSAnimatablePropertyContainer.metaclass, NSLayoutConstraint_NSIdentifier.metaclass {
        public open fun constraintsWithVisualFormat_options_metrics_views(format: NSString, opts: Any, metrics: NSDictionary, views: NSDictionary): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "constraintsWithVisualFormat:options:metrics:views:", format, opts, metrics, views) as NSArray

        public open fun constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant(view1: ObjCObject, attr1: Any, relation: Any, view2: ObjCObject, attr2: Any, multiplier: Double, c: Double): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:", view1, attr1, relation, view2, attr2, multiplier, c) as ObjCObject

        public open fun activateConstraints(constraints: NSArray): Unit {
            Native.objc_msgSend("void", this, "activateConstraints:", constraints)
        }

        public open fun deactivateConstraints(constraints: NSArray): Unit {
            Native.objc_msgSend("void", this, "deactivateConstraints:", constraints)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSLayoutConstraint")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSImage(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSSecureCoding, NSPasteboardReading, NSPasteboardWriting, NSImage_NSDeprecated {
    public open fun initWithSize(aSize: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSize:", aSize) as ObjCObject

    public open fun initWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", data) as ObjCObject

    public open fun initWithContentsOfFile(fileName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfFile:", fileName) as ObjCObject

    public open fun initWithContentsOfURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:", url) as ObjCObject

    public open fun initByReferencingFile(fileName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initByReferencingFile:", fileName) as ObjCObject

    public open fun initByReferencingURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initByReferencingURL:", url) as ObjCObject

    public open fun initWithIconRef(iconRef: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIconRef:", iconRef) as ObjCObject

    public open fun initWithPasteboard(pasteboard: NSPasteboard): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPasteboard:", pasteboard) as ObjCObject

    public open fun initWithDataIgnoringOrientation(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDataIgnoringOrientation:", data) as ObjCObject

    public open fun size(): Any =
        Native.objc_msgSend("class objc.Any", this, "size")

    public open fun setSize(size: Any): Unit {
        Native.objc_msgSend("void", this, "setSize:", size)
    }

    public open fun setName(string: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setName:", string) as Boolean

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun usesEPSOnResolutionMismatch(): Boolean =
        Native.objc_msgSend("boolean", this, "usesEPSOnResolutionMismatch") as Boolean

    public open fun setUsesEPSOnResolutionMismatch(usesEPSOnResolutionMismatch: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesEPSOnResolutionMismatch:", usesEPSOnResolutionMismatch)
    }

    public open fun prefersColorMatch(): Boolean =
        Native.objc_msgSend("boolean", this, "prefersColorMatch") as Boolean

    public open fun setPrefersColorMatch(prefersColorMatch: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPrefersColorMatch:", prefersColorMatch)
    }

    public open fun matchesOnMultipleResolution(): Boolean =
        Native.objc_msgSend("boolean", this, "matchesOnMultipleResolution") as Boolean

    public open fun setMatchesOnMultipleResolution(matchesOnMultipleResolution: Boolean): Unit {
        Native.objc_msgSend("void", this, "setMatchesOnMultipleResolution:", matchesOnMultipleResolution)
    }

    public open fun matchesOnlyOnBestFittingAxis(): Boolean =
        Native.objc_msgSend("boolean", this, "matchesOnlyOnBestFittingAxis") as Boolean

    public open fun setMatchesOnlyOnBestFittingAxis(matchesOnlyOnBestFittingAxis: Boolean): Unit {
        Native.objc_msgSend("void", this, "setMatchesOnlyOnBestFittingAxis:", matchesOnlyOnBestFittingAxis)
    }

    public open fun drawAtPoint_fromRect_operation_fraction(point: Any, fromRect: Any, op: Any, delta: Double): Unit {
        Native.objc_msgSend("void", this, "drawAtPoint:fromRect:operation:fraction:", point, fromRect, op, delta)
    }

    public open fun drawInRect_fromRect_operation_fraction(rect: Any, fromRect: Any, op: Any, delta: Double): Unit {
        Native.objc_msgSend("void", this, "drawInRect:fromRect:operation:fraction:", rect, fromRect, op, delta)
    }

    public open fun drawInRect_fromRect_operation_fraction_respectFlipped_hints(dstSpacePortionRect: Any, srcSpacePortionRect: Any, op: Any, requestedAlpha: Double, respectContextIsFlipped: Boolean, hints: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "drawInRect:fromRect:operation:fraction:respectFlipped:hints:", dstSpacePortionRect, srcSpacePortionRect, op, requestedAlpha, respectContextIsFlipped, hints)
    }

    public open fun drawRepresentation_inRect(imageRep: NSImageRep, rect: Any): Boolean =
        Native.objc_msgSend("boolean", this, "drawRepresentation:inRect:", imageRep, rect) as Boolean

    public open fun drawInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "drawInRect:", rect)
    }

    public open fun recache(): Unit {
        Native.objc_msgSend("void", this, "recache")
    }

    public open fun TIFFRepresentation(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "TIFFRepresentation") as NSData

    public open fun TIFFRepresentationUsingCompression_factor(comp: Any, aFloat: Float): NSData =
        Native.objc_msgSend("class objc.NSData", this, "TIFFRepresentationUsingCompression:factor:", comp, aFloat) as NSData

    public open fun representations(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "representations") as NSArray

    public open fun addRepresentations(imageReps: NSArray): Unit {
        Native.objc_msgSend("void", this, "addRepresentations:", imageReps)
    }

    public open fun addRepresentation(imageRep: NSImageRep): Unit {
        Native.objc_msgSend("void", this, "addRepresentation:", imageRep)
    }

    public open fun removeRepresentation(imageRep: NSImageRep): Unit {
        Native.objc_msgSend("void", this, "removeRepresentation:", imageRep)
    }

    public open fun isValid(): Boolean =
        Native.objc_msgSend("boolean", this, "isValid") as Boolean

    public open fun lockFocus(): Unit {
        Native.objc_msgSend("void", this, "lockFocus")
    }

    public open fun lockFocusFlipped(flipped: Boolean): Unit {
        Native.objc_msgSend("void", this, "lockFocusFlipped:", flipped)
    }

    public open fun unlockFocus(): Unit {
        Native.objc_msgSend("void", this, "unlockFocus")
    }

    public open fun bestRepresentationForDevice(deviceDescription: NSDictionary): NSImageRep =
        Native.objc_msgSend("class objc.NSImageRep", this, "bestRepresentationForDevice:", deviceDescription) as NSImageRep

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun cancelIncrementalLoad(): Unit {
        Native.objc_msgSend("void", this, "cancelIncrementalLoad")
    }

    public open fun cacheMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "cacheMode")

    public open fun setCacheMode(cacheMode: Any): Unit {
        Native.objc_msgSend("void", this, "setCacheMode:", cacheMode)
    }

    public open fun alignmentRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignmentRect")

    public open fun setAlignmentRect(alignmentRect: Any): Unit {
        Native.objc_msgSend("void", this, "setAlignmentRect:", alignmentRect)
    }

    public open fun isTemplate(): Boolean =
        Native.objc_msgSend("boolean", this, "isTemplate") as Boolean

    public open fun setTemplate(isTemplate: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTemplate:", isTemplate)
    }

    public open fun accessibilityDescription(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "accessibilityDescription") as NSString

    public open fun setAccessibilityDescription(accessibilityDescription: NSString): Unit {
        Native.objc_msgSend("void", this, "setAccessibilityDescription:", accessibilityDescription)
    }

    public open fun initWithCGImage_size(cgImage: Pointer<Any>, size: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCGImage:size:", cgImage, size) as ObjCObject

    public open fun CGImageForProposedRect_context_hints(proposedDestRect: Pointer<Any>, referenceContext: NSGraphicsContext, hints: NSDictionary): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGImageForProposedRect:context:hints:", proposedDestRect, referenceContext, hints) as Pointer<Any>

    public open fun bestRepresentationForRect_context_hints(rect: Any, referenceContext: NSGraphicsContext, hints: NSDictionary): NSImageRep =
        Native.objc_msgSend("class objc.NSImageRep", this, "bestRepresentationForRect:context:hints:", rect, referenceContext, hints) as NSImageRep

    public open fun hitTestRect_withImageDestinationRect_context_hints_flipped(testRectDestSpace: Any, imageRectDestSpace: Any, context: NSGraphicsContext, hints: NSDictionary, flipped: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "hitTestRect:withImageDestinationRect:context:hints:flipped:", testRectDestSpace, imageRectDestSpace, context, hints, flipped) as Boolean

    public open fun recommendedLayerContentsScale(preferredContentsScale: Double): Double =
        Native.objc_msgSend("double", this, "recommendedLayerContentsScale:", preferredContentsScale) as Double

    public open fun layerContentsForContentsScale(layerContentsScale: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "layerContentsForContentsScale:", layerContentsScale) as ObjCObject

    public open fun capInsets(): Any =
        Native.objc_msgSend("class objc.Any", this, "capInsets")

    public open fun setCapInsets(capInsets: Any): Unit {
        Native.objc_msgSend("void", this, "setCapInsets:", capInsets)
    }

    public open fun resizingMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "resizingMode")

    public open fun setResizingMode(resizingMode: Any): Unit {
        Native.objc_msgSend("void", this, "setResizingMode:", resizingMode)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSSecureCoding.metaclass, NSPasteboardReading.metaclass, NSPasteboardWriting.metaclass, NSImage_NSDeprecated.metaclass {
        public open fun imageNamed(name: NSString): NSImage =
            Native.objc_msgSend("class objc.NSImage", this, "imageNamed:", name) as NSImage

        public open fun imageWithSize_flipped_drawingHandler(size: Any, drawingHandlerShouldBeCalledWithFlippedContext: Boolean, drawingHandler: Any): NSImage =
            Native.objc_msgSend("class objc.NSImage", this, "imageWithSize:flipped:drawingHandler:", size, drawingHandlerShouldBeCalledWithFlippedContext, drawingHandler) as NSImage

        public open fun imageUnfilteredFileTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageUnfilteredFileTypes") as NSArray

        public open fun imageUnfilteredPasteboardTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageUnfilteredPasteboardTypes") as NSArray

        public open fun imageFileTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageFileTypes") as NSArray

        public open fun imagePasteboardTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imagePasteboardTypes") as NSArray

        public open fun imageTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageTypes") as NSArray

        public open fun imageUnfilteredTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "imageUnfilteredTypes") as NSArray

        public open fun canInitWithPasteboard(pasteboard: NSPasteboard): Boolean =
            Native.objc_msgSend("boolean", this, "canInitWithPasteboard:", pasteboard) as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSImage")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSImageCell(pointer: Long) : NSCell(pointer), NSCopying, NSCoding {
    public open fun imageAlignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageAlignment")

    public open fun setImageAlignment(imageAlignment: Any): Unit {
        Native.objc_msgSend("void", this, "setImageAlignment:", imageAlignment)
    }

    public open fun imageScaling(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageScaling")

    public open fun setImageScaling(imageScaling: Any): Unit {
        Native.objc_msgSend("void", this, "setImageScaling:", imageScaling)
    }

    public open fun imageFrameStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageFrameStyle")

    public open fun setImageFrameStyle(imageFrameStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setImageFrameStyle:", imageFrameStyle)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCell.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSImageCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSImageView(pointer: Long) : NSControl(pointer), NSAccessibilityImage {
    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun imageAlignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageAlignment")

    public open fun setImageAlignment(imageAlignment: Any): Unit {
        Native.objc_msgSend("void", this, "setImageAlignment:", imageAlignment)
    }

    public open fun imageScaling(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageScaling")

    public open fun setImageScaling(imageScaling: Any): Unit {
        Native.objc_msgSend("void", this, "setImageScaling:", imageScaling)
    }

    public open fun imageFrameStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageFrameStyle")

    public open fun setImageFrameStyle(imageFrameStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setImageFrameStyle:", imageFrameStyle)
    }

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun animates(): Boolean =
        Native.objc_msgSend("boolean", this, "animates") as Boolean

    public open fun setAnimates(animates: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAnimates:", animates)
    }

    public open fun allowsCutCopyPaste(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsCutCopyPaste") as Boolean

    public open fun setAllowsCutCopyPaste(allowsCutCopyPaste: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsCutCopyPaste:", allowsCutCopyPaste)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSAccessibilityImage.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSImageView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSNib(pointer: Long) : NSObject(pointer), NSCoding, NSNib_NSDeprecated {
    public open fun initWithNibNamed_bundle(nibName: NSString, bundle: NSBundle): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithNibNamed:bundle:", nibName, bundle) as ObjCObject

    public open fun initWithNibData_bundle(nibData: NSData, bundle: NSBundle): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithNibData:bundle:", nibData, bundle) as ObjCObject

    public open fun instantiateWithOwner_topLevelObjects(owner: ObjCObject, topLevelObjects: Pointer<NSArray>): Boolean =
        Native.objc_msgSend("boolean", this, "instantiateWithOwner:topLevelObjects:", owner, topLevelObjects) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSNib_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSNib")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPrinter(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSPrinter_NSDeprecated {
    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun type(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "type") as NSString

    public open fun languageLevel(): Int =
        Native.objc_msgSend("int", this, "languageLevel") as Int

    public open fun pageSizeForPaper(paperName: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "pageSizeForPaper:", paperName)

    public open fun deviceDescription(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "deviceDescription") as NSDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSPrinter_NSDeprecated.metaclass {
        public open fun printerNames(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "printerNames") as NSArray

        public open fun printerTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "printerTypes") as NSArray

        public open fun printerWithName(name: NSString): NSPrinter =
            Native.objc_msgSend("class objc.NSPrinter", this, "printerWithName:", name) as NSPrinter

        public open fun printerWithType(type: NSString): NSPrinter =
            Native.objc_msgSend("class objc.NSPrinter", this, "printerWithType:", type) as NSPrinter

    }

    companion object : NSObject(Native.objc_getClass("NSPrinter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSpeechRecognizer(pointer: Long) : NSObject(pointer) {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun startListening(): Unit {
        Native.objc_msgSend("void", this, "startListening")
    }

    public open fun stopListening(): Unit {
        Native.objc_msgSend("void", this, "stopListening")
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun commands(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "commands") as NSArray

    public open fun setCommands(commands: NSArray): Unit {
        Native.objc_msgSend("void", this, "setCommands:", commands)
    }

    public open fun displayedCommandsTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "displayedCommandsTitle") as NSString

    public open fun setDisplayedCommandsTitle(displayedCommandsTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setDisplayedCommandsTitle:", displayedCommandsTitle)
    }

    public open fun listensInForegroundOnly(): Boolean =
        Native.objc_msgSend("boolean", this, "listensInForegroundOnly") as Boolean

    public open fun setListensInForegroundOnly(listensInForegroundOnly: Boolean): Unit {
        Native.objc_msgSend("void", this, "setListensInForegroundOnly:", listensInForegroundOnly)
    }

    public open fun blocksOtherRecognizers(): Boolean =
        Native.objc_msgSend("boolean", this, "blocksOtherRecognizers") as Boolean

    public open fun setBlocksOtherRecognizers(blocksOtherRecognizers: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBlocksOtherRecognizers:", blocksOtherRecognizers)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSpeechRecognizer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSpeechSynthesizer(pointer: Long) : NSObject(pointer) {
    public open fun initWithVoice(voice: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithVoice:", voice) as ObjCObject

    public open fun startSpeakingString(string: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "startSpeakingString:", string) as Boolean

    public open fun startSpeakingString_toURL(string: NSString, url: NSURL): Boolean =
        Native.objc_msgSend("boolean", this, "startSpeakingString:toURL:", string, url) as Boolean

    public open fun isSpeaking(): Boolean =
        Native.objc_msgSend("boolean", this, "isSpeaking") as Boolean

    public open fun stopSpeaking(): Unit {
        Native.objc_msgSend("void", this, "stopSpeaking")
    }

    public open fun stopSpeakingAtBoundary(boundary: Any): Unit {
        Native.objc_msgSend("void", this, "stopSpeakingAtBoundary:", boundary)
    }

    public open fun pauseSpeakingAtBoundary(boundary: Any): Unit {
        Native.objc_msgSend("void", this, "pauseSpeakingAtBoundary:", boundary)
    }

    public open fun continueSpeaking(): Unit {
        Native.objc_msgSend("void", this, "continueSpeaking")
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun voice(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "voice") as NSString

    public open fun setVoice(voice: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setVoice:", voice) as Boolean

    public open fun rate(): Float =
        Native.objc_msgSend("float", this, "rate") as Float

    public open fun setRate(rate: Float): Unit {
        Native.objc_msgSend("void", this, "setRate:", rate)
    }

    public open fun volume(): Float =
        Native.objc_msgSend("float", this, "volume") as Float

    public open fun setVolume(volume: Float): Unit {
        Native.objc_msgSend("void", this, "setVolume:", volume)
    }

    public open fun usesFeedbackWindow(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFeedbackWindow") as Boolean

    public open fun setUsesFeedbackWindow(usesFeedbackWindow: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFeedbackWindow:", usesFeedbackWindow)
    }

    public open fun addSpeechDictionary(speechDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "addSpeechDictionary:", speechDictionary)
    }

    public open fun phonemesFromText(text: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "phonemesFromText:", text) as NSString

    public open fun objectForProperty_error(property: NSString, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForProperty:error:", property, outError) as ObjCObject

    public open fun setObject_forProperty_error(`object`: ObjCObject, property: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "setObject:forProperty:error:", `object`, property, outError) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun isAnyApplicationSpeaking(): Boolean =
            Native.objc_msgSend("boolean", this, "isAnyApplicationSpeaking") as Boolean

        public open fun defaultVoice(): NSString =
            Native.objc_msgSend("class objc.NSString", this, "defaultVoice") as NSString

        public open fun availableVoices(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "availableVoices") as NSArray

        public open fun attributesForVoice(voice: NSString): NSDictionary =
            Native.objc_msgSend("class objc.NSDictionary", this, "attributesForVoice:", voice) as NSDictionary

    }

    companion object : NSObject(Native.objc_getClass("NSSpeechSynthesizer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSpellChecker(pointer: Long) : NSObject(pointer), NSSpellChecker_NSDeprecated {
    public open fun checkSpellingOfString_startingAt_language_wrap_inSpellDocumentWithTag_wordCount(stringToCheck: NSString, startingOffset: Int, language: NSString, wrapFlag: Boolean, tag: Int, wordCount: Pointer<Int>): Any =
        Native.objc_msgSend("class objc.Any", this, "checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:", stringToCheck, startingOffset, language, wrapFlag, tag, wordCount)

    public open fun checkSpellingOfString_startingAt(stringToCheck: NSString, startingOffset: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "checkSpellingOfString:startingAt:", stringToCheck, startingOffset)

    public open fun countWordsInString_language(stringToCount: NSString, language: NSString): Int =
        Native.objc_msgSend("int", this, "countWordsInString:language:", stringToCount, language) as Int

    public open fun checkGrammarOfString_startingAt_language_wrap_inSpellDocumentWithTag_details(stringToCheck: NSString, startingOffset: Int, language: NSString, wrapFlag: Boolean, tag: Int, details: Pointer<NSArray>): Any =
        Native.objc_msgSend("class objc.Any", this, "checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:", stringToCheck, startingOffset, language, wrapFlag, tag, details)

    public open fun checkString_range_types_options_inSpellDocumentWithTag_orthography_wordCount(stringToCheck: NSString, range: Any, checkingTypes: Long, options: NSDictionary, tag: Int, orthography: Pointer<NSOrthography>, wordCount: Pointer<Int>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:", stringToCheck, range, checkingTypes, options, tag, orthography, wordCount) as NSArray

    public open fun requestCheckingOfString_range_types_options_inSpellDocumentWithTag_completionHandler(stringToCheck: NSString, range: Any, checkingTypes: Long, options: NSDictionary, tag: Int, completionHandler: Any): Int =
        Native.objc_msgSend("int", this, "requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:", stringToCheck, range, checkingTypes, options, tag, completionHandler) as Int

    public open fun menuForResult_string_options_atLocation_inView(result: NSTextCheckingResult, checkedString: NSString, options: NSDictionary, location: Any, view: NSView): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menuForResult:string:options:atLocation:inView:", result, checkedString, options, location, view) as NSMenu

    public open fun userQuotesArrayForLanguage(language: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "userQuotesArrayForLanguage:", language) as NSArray

    public open fun userReplacementsDictionary(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userReplacementsDictionary") as NSDictionary

    public open fun updateSpellingPanelWithMisspelledWord(word: NSString): Unit {
        Native.objc_msgSend("void", this, "updateSpellingPanelWithMisspelledWord:", word)
    }

    public open fun updateSpellingPanelWithGrammarString_detail(string: NSString, detail: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "updateSpellingPanelWithGrammarString:detail:", string, detail)
    }

    public open fun spellingPanel(): NSPanel =
        Native.objc_msgSend("class objc.NSPanel", this, "spellingPanel") as NSPanel

    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun setAccessoryView(accessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", accessoryView)
    }

    public open fun substitutionsPanel(): NSPanel =
        Native.objc_msgSend("class objc.NSPanel", this, "substitutionsPanel") as NSPanel

    public open fun substitutionsPanelAccessoryViewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "substitutionsPanelAccessoryViewController") as NSViewController

    public open fun setSubstitutionsPanelAccessoryViewController(substitutionsPanelAccessoryViewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "setSubstitutionsPanelAccessoryViewController:", substitutionsPanelAccessoryViewController)
    }

    public open fun updatePanels(): Unit {
        Native.objc_msgSend("void", this, "updatePanels")
    }

    public open fun ignoreWord_inSpellDocumentWithTag(wordToIgnore: NSString, tag: Int): Unit {
        Native.objc_msgSend("void", this, "ignoreWord:inSpellDocumentWithTag:", wordToIgnore, tag)
    }

    public open fun ignoredWordsInSpellDocumentWithTag(tag: Int): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "ignoredWordsInSpellDocumentWithTag:", tag) as NSArray

    public open fun setIgnoredWords_inSpellDocumentWithTag(words: NSArray, tag: Int): Unit {
        Native.objc_msgSend("void", this, "setIgnoredWords:inSpellDocumentWithTag:", words, tag)
    }

    public open fun guessesForWordRange_inString_language_inSpellDocumentWithTag(range: Any, string: NSString, language: NSString, tag: Int): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "guessesForWordRange:inString:language:inSpellDocumentWithTag:", range, string, language, tag) as NSArray

    public open fun correctionForWordRange_inString_language_inSpellDocumentWithTag(range: Any, string: NSString, language: NSString, tag: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "correctionForWordRange:inString:language:inSpellDocumentWithTag:", range, string, language, tag) as NSString

    public open fun completionsForPartialWordRange_inString_language_inSpellDocumentWithTag(range: Any, string: NSString, language: NSString, tag: Int): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:", range, string, language, tag) as NSArray

    public open fun languageForWordRange_inString_orthography(range: Any, string: NSString, orthography: NSOrthography): NSString =
        Native.objc_msgSend("class objc.NSString", this, "languageForWordRange:inString:orthography:", range, string, orthography) as NSString

    public open fun closeSpellDocumentWithTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "closeSpellDocumentWithTag:", tag)
    }

    public open fun recordResponse_toCorrection_forWord_language_inSpellDocumentWithTag(response: Any, correction: NSString, word: NSString, language: NSString, tag: Int): Unit {
        Native.objc_msgSend("void", this, "recordResponse:toCorrection:forWord:language:inSpellDocumentWithTag:", response, correction, word, language, tag)
    }

    public open fun showCorrectionIndicatorOfType_primaryString_alternativeStrings_forStringInRect_view_completionHandler(type: Any, primaryString: NSString, alternativeStrings: NSArray, rectOfTypedString: Any, view: NSView, completionBlock: Any): Unit {
        Native.objc_msgSend("void", this, "showCorrectionIndicatorOfType:primaryString:alternativeStrings:forStringInRect:view:completionHandler:", type, primaryString, alternativeStrings, rectOfTypedString, view, completionBlock)
    }

    public open fun dismissCorrectionIndicatorForView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "dismissCorrectionIndicatorForView:", view)
    }

    public open fun availableLanguages(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "availableLanguages") as NSArray

    public open fun userPreferredLanguages(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "userPreferredLanguages") as NSArray

    public open fun automaticallyIdentifiesLanguages(): Boolean =
        Native.objc_msgSend("boolean", this, "automaticallyIdentifiesLanguages") as Boolean

    public open fun setAutomaticallyIdentifiesLanguages(automaticallyIdentifiesLanguages: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticallyIdentifiesLanguages:", automaticallyIdentifiesLanguages)
    }

    public open fun setWordFieldStringValue(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "setWordFieldStringValue:", aString)
    }

    public open fun learnWord(word: NSString): Unit {
        Native.objc_msgSend("void", this, "learnWord:", word)
    }

    public open fun hasLearnedWord(word: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "hasLearnedWord:", word) as Boolean

    public open fun unlearnWord(word: NSString): Unit {
        Native.objc_msgSend("void", this, "unlearnWord:", word)
    }

    public open fun language(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "language") as NSString

    public open fun setLanguage(language: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setLanguage:", language) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSSpellChecker_NSDeprecated.metaclass {
        public open fun sharedSpellChecker(): NSSpellChecker =
            Native.objc_msgSend("class objc.NSSpellChecker", this, "sharedSpellChecker") as NSSpellChecker

        public open fun sharedSpellCheckerExists(): Boolean =
            Native.objc_msgSend("boolean", this, "sharedSpellCheckerExists") as Boolean

        public open fun uniqueSpellDocumentTag(): Int =
            Native.objc_msgSend("int", this, "uniqueSpellDocumentTag") as Int

        public open fun isAutomaticTextReplacementEnabled(): Boolean =
            Native.objc_msgSend("boolean", this, "isAutomaticTextReplacementEnabled") as Boolean

        public open fun isAutomaticSpellingCorrectionEnabled(): Boolean =
            Native.objc_msgSend("boolean", this, "isAutomaticSpellingCorrectionEnabled") as Boolean

        public open fun isAutomaticQuoteSubstitutionEnabled(): Boolean =
            Native.objc_msgSend("boolean", this, "isAutomaticQuoteSubstitutionEnabled") as Boolean

        public open fun isAutomaticDashSubstitutionEnabled(): Boolean =
            Native.objc_msgSend("boolean", this, "isAutomaticDashSubstitutionEnabled") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSSpellChecker")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSplitView(pointer: Long) : NSView(pointer), NSSplitView_NSDeprecated {
    public open fun isVertical(): Boolean =
        Native.objc_msgSend("boolean", this, "isVertical") as Boolean

    public open fun setVertical(vertical: Boolean): Unit {
        Native.objc_msgSend("void", this, "setVertical:", vertical)
    }

    public open fun dividerStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "dividerStyle")

    public open fun setDividerStyle(dividerStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setDividerStyle:", dividerStyle)
    }

    public open fun autosaveName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "autosaveName") as NSString

    public open fun setAutosaveName(autosaveName: NSString): Unit {
        Native.objc_msgSend("void", this, "setAutosaveName:", autosaveName)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun drawDividerInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "drawDividerInRect:", rect)
    }

    public open fun dividerColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "dividerColor") as NSColor

    public open fun dividerThickness(): Double =
        Native.objc_msgSend("double", this, "dividerThickness") as Double

    public open fun adjustSubviews(): Unit {
        Native.objc_msgSend("void", this, "adjustSubviews")
    }

    public open fun isSubviewCollapsed(subview: NSView): Boolean =
        Native.objc_msgSend("boolean", this, "isSubviewCollapsed:", subview) as Boolean

    public open fun minPossiblePositionOfDividerAtIndex(dividerIndex: Int): Double =
        Native.objc_msgSend("double", this, "minPossiblePositionOfDividerAtIndex:", dividerIndex) as Double

    public open fun maxPossiblePositionOfDividerAtIndex(dividerIndex: Int): Double =
        Native.objc_msgSend("double", this, "maxPossiblePositionOfDividerAtIndex:", dividerIndex) as Double

    public open fun setPosition_ofDividerAtIndex(position: Double, dividerIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setPosition:ofDividerAtIndex:", position, dividerIndex)
    }

    public open fun holdingPriorityForSubviewAtIndex(subviewIndex: Int): Float =
        Native.objc_msgSend("float", this, "holdingPriorityForSubviewAtIndex:", subviewIndex) as Float

    public open fun setHoldingPriority_forSubviewAtIndex(priority: Float, subviewIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setHoldingPriority:forSubviewAtIndex:", priority, subviewIndex)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSSplitView_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSplitView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSplitViewController(pointer: Long) : NSViewController(pointer), NSSplitViewDelegate {
    public open fun splitView(): NSSplitView =
        Native.objc_msgSend("class objc.NSSplitView", this, "splitView") as NSSplitView

    public open fun setSplitView(splitView: NSSplitView): Unit {
        Native.objc_msgSend("void", this, "setSplitView:", splitView)
    }

    public open fun splitViewItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "splitViewItems") as NSArray

    public open fun setSplitViewItems(splitViewItems: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSplitViewItems:", splitViewItems)
    }

    public open fun addSplitViewItem(splitViewItem: NSSplitViewItem): Unit {
        Native.objc_msgSend("void", this, "addSplitViewItem:", splitViewItem)
    }

    public open fun insertSplitViewItem_atIndex(splitViewItem: NSSplitViewItem, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertSplitViewItem:atIndex:", splitViewItem, index)
    }

    public open fun removeSplitViewItem(splitViewItem: NSSplitViewItem): Unit {
        Native.objc_msgSend("void", this, "removeSplitViewItem:", splitViewItem)
    }

    public open fun splitViewItemForViewController(viewController: NSViewController): NSSplitViewItem =
        Native.objc_msgSend("class objc.NSSplitViewItem", this, "splitViewItemForViewController:", viewController) as NSSplitViewItem

    override fun viewDidLoad(): Unit {
        Native.objc_msgSend("void", this, "viewDidLoad")
    }

    public open fun splitView_canCollapseSubview(splitView: NSSplitView, subview: NSView): Boolean =
        Native.objc_msgSend("boolean", this, "splitView:canCollapseSubview:", splitView, subview) as Boolean

    public open fun splitView_shouldCollapseSubview_forDoubleClickOnDividerAtIndex(splitView: NSSplitView, subview: NSView, dividerIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:", splitView, subview, dividerIndex) as Boolean

    public open fun splitView_shouldHideDividerAtIndex(splitView: NSSplitView, dividerIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "splitView:shouldHideDividerAtIndex:", splitView, dividerIndex) as Boolean

    public open fun splitView_effectiveRect_forDrawnRect_ofDividerAtIndex(splitView: NSSplitView, proposedEffectiveRect: Any, drawnRect: Any, dividerIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:", splitView, proposedEffectiveRect, drawnRect, dividerIndex)

    public open fun splitView_additionalEffectiveRectOfDividerAtIndex(splitView: NSSplitView, dividerIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "splitView:additionalEffectiveRectOfDividerAtIndex:", splitView, dividerIndex)

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSViewController.metaclass, NSSplitViewDelegate.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSplitViewController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSplitViewItem(pointer: Long) : NSObject(pointer), NSAnimatablePropertyContainer, NSCoding {
    public open fun viewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "viewController") as NSViewController

    public open fun setViewController(viewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "setViewController:", viewController)
    }

    public open fun isCollapsed(): Boolean =
        Native.objc_msgSend("boolean", this, "isCollapsed") as Boolean

    public open fun setCollapsed(collapsed: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCollapsed:", collapsed)
    }

    public open fun canCollapse(): Boolean =
        Native.objc_msgSend("boolean", this, "canCollapse") as Boolean

    public open fun setCanCollapse(canCollapse: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanCollapse:", canCollapse)
    }

    public open fun holdingPriority(): Float =
        Native.objc_msgSend("float", this, "holdingPriority") as Float

    public open fun setHoldingPriority(holdingPriority: Float): Unit {
        Native.objc_msgSend("void", this, "setHoldingPriority:", holdingPriority)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSAnimatablePropertyContainer.metaclass, NSCoding.metaclass {
        public open fun splitViewItemWithViewController(viewController: NSViewController): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "splitViewItemWithViewController:", viewController) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSSplitViewItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSavePanel(pointer: Long) : NSPanel(pointer), NSSavePanel_NSDeprecated {
    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun directoryURL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "directoryURL") as NSURL

    public open fun setDirectoryURL(directoryURL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setDirectoryURL:", directoryURL)
    }

    public open fun allowedFileTypes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allowedFileTypes") as NSArray

    public open fun setAllowedFileTypes(allowedFileTypes: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAllowedFileTypes:", allowedFileTypes)
    }

    public open fun allowsOtherFileTypes(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsOtherFileTypes") as Boolean

    public open fun setAllowsOtherFileTypes(allowsOtherFileTypes: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsOtherFileTypes:", allowsOtherFileTypes)
    }

    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun setAccessoryView(accessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", accessoryView)
    }

    override fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    override fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun isExpanded(): Boolean =
        Native.objc_msgSend("boolean", this, "isExpanded") as Boolean

    public open fun canCreateDirectories(): Boolean =
        Native.objc_msgSend("boolean", this, "canCreateDirectories") as Boolean

    public open fun setCanCreateDirectories(canCreateDirectories: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanCreateDirectories:", canCreateDirectories)
    }

    public open fun canSelectHiddenExtension(): Boolean =
        Native.objc_msgSend("boolean", this, "canSelectHiddenExtension") as Boolean

    public open fun setCanSelectHiddenExtension(canSelectHiddenExtension: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanSelectHiddenExtension:", canSelectHiddenExtension)
    }

    public open fun isExtensionHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "isExtensionHidden") as Boolean

    public open fun setExtensionHidden(extensionHidden: Boolean): Unit {
        Native.objc_msgSend("void", this, "setExtensionHidden:", extensionHidden)
    }

    public open fun treatsFilePackagesAsDirectories(): Boolean =
        Native.objc_msgSend("boolean", this, "treatsFilePackagesAsDirectories") as Boolean

    public open fun setTreatsFilePackagesAsDirectories(treatsFilePackagesAsDirectories: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTreatsFilePackagesAsDirectories:", treatsFilePackagesAsDirectories)
    }

    public open fun prompt(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "prompt") as NSString

    public open fun setPrompt(prompt: NSString): Unit {
        Native.objc_msgSend("void", this, "setPrompt:", prompt)
    }

    override fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    override fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun nameFieldLabel(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "nameFieldLabel") as NSString

    public open fun setNameFieldLabel(nameFieldLabel: NSString): Unit {
        Native.objc_msgSend("void", this, "setNameFieldLabel:", nameFieldLabel)
    }

    public open fun nameFieldStringValue(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "nameFieldStringValue") as NSString

    public open fun setNameFieldStringValue(nameFieldStringValue: NSString): Unit {
        Native.objc_msgSend("void", this, "setNameFieldStringValue:", nameFieldStringValue)
    }

    public open fun message(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "message") as NSString

    public open fun setMessage(message: NSString): Unit {
        Native.objc_msgSend("void", this, "setMessage:", message)
    }

    public open fun validateVisibleColumns(): Unit {
        Native.objc_msgSend("void", this, "validateVisibleColumns")
    }

    public open fun showsHiddenFiles(): Boolean =
        Native.objc_msgSend("boolean", this, "showsHiddenFiles") as Boolean

    public open fun setShowsHiddenFiles(showsHiddenFiles: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsHiddenFiles:", showsHiddenFiles)
    }

    public open fun showsTagField(): Boolean =
        Native.objc_msgSend("boolean", this, "showsTagField") as Boolean

    public open fun setShowsTagField(showsTagField: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsTagField:", showsTagField)
    }

    public open fun tagNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tagNames") as NSArray

    public open fun setTagNames(tagNames: NSArray): Unit {
        Native.objc_msgSend("void", this, "setTagNames:", tagNames)
    }

    public open fun ok(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "ok:", sender)
    }

    public open fun cancel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "cancel:", sender)
    }

    public open fun beginSheetModalForWindow_completionHandler(window: NSWindow, handler: Any): Unit {
        Native.objc_msgSend("void", this, "beginSheetModalForWindow:completionHandler:", window, handler)
    }

    public open fun beginWithCompletionHandler(handler: Any): Unit {
        Native.objc_msgSend("void", this, "beginWithCompletionHandler:", handler)
    }

    public open fun runModal(): Int =
        Native.objc_msgSend("int", this, "runModal") as Int

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun isFloatingPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "isFloatingPanel") as Boolean

    override fun keyDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyDown:", theEvent)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun tryToPerform_with(anAction: ObjCSelector, anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "tryToPerform:with:", anAction, anObject) as Boolean

    override fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    override fun worksWhenModal(): Boolean =
        Native.objc_msgSend("boolean", this, "worksWhenModal") as Boolean

    trait metaclass : NSPanel.metaclass, NSSavePanel_NSDeprecated.metaclass {
        public open fun savePanel(): NSSavePanel =
            Native.objc_msgSend("class objc.NSSavePanel", this, "savePanel") as NSSavePanel

    }

    companion object : NSObject(Native.objc_getClass("NSSavePanel")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOpenPanel(pointer: Long) : NSSavePanel(pointer), NSOpenPanel_NSDeprecated {
    public open fun URLs(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "URLs") as NSArray

    public open fun resolvesAliases(): Boolean =
        Native.objc_msgSend("boolean", this, "resolvesAliases") as Boolean

    public open fun setResolvesAliases(resolvesAliases: Boolean): Unit {
        Native.objc_msgSend("void", this, "setResolvesAliases:", resolvesAliases)
    }

    public open fun canChooseDirectories(): Boolean =
        Native.objc_msgSend("boolean", this, "canChooseDirectories") as Boolean

    public open fun setCanChooseDirectories(canChooseDirectories: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanChooseDirectories:", canChooseDirectories)
    }

    public open fun allowsMultipleSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsMultipleSelection") as Boolean

    public open fun setAllowsMultipleSelection(allowsMultipleSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsMultipleSelection:", allowsMultipleSelection)
    }

    public open fun canChooseFiles(): Boolean =
        Native.objc_msgSend("boolean", this, "canChooseFiles") as Boolean

    public open fun setCanChooseFiles(canChooseFiles: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanChooseFiles:", canChooseFiles)
    }

    public open fun canResolveUbiquitousConflicts(): Boolean =
        Native.objc_msgSend("boolean", this, "canResolveUbiquitousConflicts") as Boolean

    public open fun setCanResolveUbiquitousConflicts(canResolveUbiquitousConflicts: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanResolveUbiquitousConflicts:", canResolveUbiquitousConflicts)
    }

    public open fun canDownloadUbiquitousContents(): Boolean =
        Native.objc_msgSend("boolean", this, "canDownloadUbiquitousContents") as Boolean

    public open fun setCanDownloadUbiquitousContents(canDownloadUbiquitousContents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanDownloadUbiquitousContents:", canDownloadUbiquitousContents)
    }

    override fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun isFloatingPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "isFloatingPanel") as Boolean

    override fun keyDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyDown:", theEvent)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    override fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    override fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    override fun tryToPerform_with(anAction: ObjCSelector, anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "tryToPerform:with:", anAction, anObject) as Boolean

    override fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    override fun worksWhenModal(): Boolean =
        Native.objc_msgSend("boolean", this, "worksWhenModal") as Boolean

    trait metaclass : NSSavePanel.metaclass, NSOpenPanel_NSDeprecated.metaclass {
        public open fun openPanel(): NSOpenPanel =
            Native.objc_msgSend("class objc.NSOpenPanel", this, "openPanel") as NSOpenPanel

    }

    companion object : NSObject(Native.objc_getClass("NSOpenPanel")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPageLayout(pointer: Long) : NSObject(pointer), NSPageLayout_NSDeprecated {
    public open fun addAccessoryController(accessoryController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "addAccessoryController:", accessoryController)
    }

    public open fun removeAccessoryController(accessoryController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "removeAccessoryController:", accessoryController)
    }

    public open fun accessoryControllers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "accessoryControllers") as NSArray

    public open fun beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo(printInfo: NSPrintInfo, docWindow: NSWindow, delegate: ObjCObject, didEndSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:", printInfo, docWindow, delegate, didEndSelector, contextInfo)
    }

    public open fun runModalWithPrintInfo(printInfo: NSPrintInfo): Int =
        Native.objc_msgSend("int", this, "runModalWithPrintInfo:", printInfo) as Int

    public open fun runModal(): Int =
        Native.objc_msgSend("int", this, "runModal") as Int

    public open fun printInfo(): NSPrintInfo =
        Native.objc_msgSend("class objc.NSPrintInfo", this, "printInfo") as NSPrintInfo

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSPageLayout_NSDeprecated.metaclass {
        public open fun pageLayout(): NSPageLayout =
            Native.objc_msgSend("class objc.NSPageLayout", this, "pageLayout") as NSPageLayout

    }

    companion object : NSObject(Native.objc_getClass("NSPageLayout")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPasteboardItem(pointer: Long) : NSObject(pointer), NSPasteboardWriting, NSPasteboardReading {
    public open fun types(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "types") as NSArray

    public open fun availableTypeFromArray(types: NSArray): NSString =
        Native.objc_msgSend("class objc.NSString", this, "availableTypeFromArray:", types) as NSString

    public open fun setDataProvider_forTypes(dataProvider: Any, types: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "setDataProvider:forTypes:", dataProvider, types) as Boolean

    public open fun setData_forType(data: NSData, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setData:forType:", data, type) as Boolean

    public open fun setString_forType(string: NSString, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setString:forType:", string, type) as Boolean

    public open fun setPropertyList_forType(propertyList: ObjCObject, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setPropertyList:forType:", propertyList, type) as Boolean

    public open fun dataForType(type: NSString): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataForType:", type) as NSData

    public open fun stringForType(type: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringForType:", type) as NSString

    public open fun propertyListForType(type: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyListForType:", type) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSPasteboardWriting.metaclass, NSPasteboardReading.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPasteboardItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMenuItemCell(pointer: Long) : NSButtonCell(pointer) {
    public open fun menuItem(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "menuItem") as NSMenuItem

    public open fun setMenuItem(menuItem: NSMenuItem): Unit {
        Native.objc_msgSend("void", this, "setMenuItem:", menuItem)
    }

    public open fun needsSizing(): Boolean =
        Native.objc_msgSend("boolean", this, "needsSizing") as Boolean

    public open fun setNeedsSizing(needsSizing: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNeedsSizing:", needsSizing)
    }

    public open fun calcSize(): Unit {
        Native.objc_msgSend("void", this, "calcSize")
    }

    public open fun needsDisplay(): Boolean =
        Native.objc_msgSend("boolean", this, "needsDisplay") as Boolean

    public open fun setNeedsDisplay(needsDisplay: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNeedsDisplay:", needsDisplay)
    }

    public open fun stateImageWidth(): Double =
        Native.objc_msgSend("double", this, "stateImageWidth") as Double

    public open fun imageWidth(): Double =
        Native.objc_msgSend("double", this, "imageWidth") as Double

    public open fun titleWidth(): Double =
        Native.objc_msgSend("double", this, "titleWidth") as Double

    public open fun keyEquivalentWidth(): Double =
        Native.objc_msgSend("double", this, "keyEquivalentWidth") as Double

    public open fun stateImageRectForBounds(cellFrame: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "stateImageRectForBounds:", cellFrame)

    override fun titleRectForBounds(cellFrame: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "titleRectForBounds:", cellFrame)

    public open fun keyEquivalentRectForBounds(cellFrame: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "keyEquivalentRectForBounds:", cellFrame)

    public open fun drawSeparatorItemWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawSeparatorItemWithFrame:inView:", cellFrame, controlView)
    }

    public open fun drawStateImageWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawStateImageWithFrame:inView:", cellFrame, controlView)
    }

    public open fun drawImageWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawImageWithFrame:inView:", cellFrame, controlView)
    }

    public open fun drawTitleWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawTitleWithFrame:inView:", cellFrame, controlView)
    }

    public open fun drawKeyEquivalentWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawKeyEquivalentWithFrame:inView:", cellFrame, controlView)
    }

    public open fun drawBorderAndBackgroundWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawBorderAndBackgroundWithFrame:inView:", cellFrame, controlView)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun getPeriodicDelay_interval(delay: Pointer<Float>, interval: Pointer<Float>): Unit {
        Native.objc_msgSend("void", this, "getPeriodicDelay:interval:", delay, interval)
    }

    override fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    override fun keyEquivalent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyEquivalent") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performClick(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performClick:", sender)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    override fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    override fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    trait metaclass : NSButtonCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMenuItemCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPopUpButton(pointer: Long) : NSButton(pointer) {
    public open fun initWithFrame_pullsDown(buttonFrame: Any, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:pullsDown:", buttonFrame, flag) as ObjCObject

    override fun menu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menu") as NSMenu

    override fun setMenu(menu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setMenu:", menu)
    }

    public open fun pullsDown(): Boolean =
        Native.objc_msgSend("boolean", this, "pullsDown") as Boolean

    public open fun setPullsDown(pullsDown: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPullsDown:", pullsDown)
    }

    public open fun autoenablesItems(): Boolean =
        Native.objc_msgSend("boolean", this, "autoenablesItems") as Boolean

    public open fun setAutoenablesItems(autoenablesItems: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutoenablesItems:", autoenablesItems)
    }

    public open fun preferredEdge(): Int =
        Native.objc_msgSend("int", this, "preferredEdge") as Int

    public open fun setPreferredEdge(preferredEdge: Int): Unit {
        Native.objc_msgSend("void", this, "setPreferredEdge:", preferredEdge)
    }

    public open fun addItemWithTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "addItemWithTitle:", title)
    }

    public open fun addItemsWithTitles(itemTitles: NSArray): Unit {
        Native.objc_msgSend("void", this, "addItemsWithTitles:", itemTitles)
    }

    public open fun insertItemWithTitle_atIndex(title: NSString, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertItemWithTitle:atIndex:", title, index)
    }

    public open fun removeItemWithTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "removeItemWithTitle:", title)
    }

    public open fun removeItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeItemAtIndex:", index)
    }

    public open fun removeAllItems(): Unit {
        Native.objc_msgSend("void", this, "removeAllItems")
    }

    public open fun itemArray(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "itemArray") as NSArray

    public open fun numberOfItems(): Int =
        Native.objc_msgSend("int", this, "numberOfItems") as Int

    public open fun indexOfItem(item: NSMenuItem): Int =
        Native.objc_msgSend("int", this, "indexOfItem:", item) as Int

    public open fun indexOfItemWithTitle(title: NSString): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTitle:", title) as Int

    public open fun indexOfItemWithTag(tag: Int): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTag:", tag) as Int

    public open fun indexOfItemWithRepresentedObject(obj: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithRepresentedObject:", obj) as Int

    public open fun indexOfItemWithTarget_andAction(target: ObjCObject, actionSelector: ObjCSelector): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTarget:andAction:", target, actionSelector) as Int

    public open fun itemAtIndex(index: Int): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "itemAtIndex:", index) as NSMenuItem

    public open fun itemWithTitle(title: NSString): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "itemWithTitle:", title) as NSMenuItem

    public open fun lastItem(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "lastItem") as NSMenuItem

    public open fun selectItem(item: NSMenuItem): Unit {
        Native.objc_msgSend("void", this, "selectItem:", item)
    }

    public open fun selectItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "selectItemAtIndex:", index)
    }

    public open fun selectItemWithTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "selectItemWithTitle:", title)
    }

    public open fun selectItemWithTag(tag: Int): Boolean =
        Native.objc_msgSend("boolean", this, "selectItemWithTag:", tag) as Boolean

    override fun setTitle(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", aString)
    }

    public open fun selectedItem(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "selectedItem") as NSMenuItem

    public open fun indexOfSelectedItem(): Int =
        Native.objc_msgSend("int", this, "indexOfSelectedItem") as Int

    override fun selectedTag(): Int =
        Native.objc_msgSend("int", this, "selectedTag") as Int

    public open fun synchronizeTitleAndSelectedItem(): Unit {
        Native.objc_msgSend("void", this, "synchronizeTitleAndSelectedItem")
    }

    public open fun itemTitleAtIndex(index: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "itemTitleAtIndex:", index) as NSString

    public open fun itemTitles(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "itemTitles") as NSArray

    public open fun titleOfSelectedItem(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "titleOfSelectedItem") as NSString

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSButton.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPopUpButton")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPrintInfo(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSPrintInfo_NSDeprecated {
    public open fun initWithDictionary(attributes: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDictionary:", attributes) as ObjCObject

    public open fun dictionary(): NSMutableDictionary =
        Native.objc_msgSend("class objc.NSMutableDictionary", this, "dictionary") as NSMutableDictionary

    public open fun paperName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "paperName") as NSString

    public open fun setPaperName(paperName: NSString): Unit {
        Native.objc_msgSend("void", this, "setPaperName:", paperName)
    }

    public open fun paperSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "paperSize")

    public open fun setPaperSize(paperSize: Any): Unit {
        Native.objc_msgSend("void", this, "setPaperSize:", paperSize)
    }

    public open fun orientation(): Any =
        Native.objc_msgSend("class objc.Any", this, "orientation")

    public open fun setOrientation(orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setOrientation:", orientation)
    }

    public open fun scalingFactor(): Double =
        Native.objc_msgSend("double", this, "scalingFactor") as Double

    public open fun setScalingFactor(scalingFactor: Double): Unit {
        Native.objc_msgSend("void", this, "setScalingFactor:", scalingFactor)
    }

    public open fun leftMargin(): Double =
        Native.objc_msgSend("double", this, "leftMargin") as Double

    public open fun setLeftMargin(leftMargin: Double): Unit {
        Native.objc_msgSend("void", this, "setLeftMargin:", leftMargin)
    }

    public open fun rightMargin(): Double =
        Native.objc_msgSend("double", this, "rightMargin") as Double

    public open fun setRightMargin(rightMargin: Double): Unit {
        Native.objc_msgSend("void", this, "setRightMargin:", rightMargin)
    }

    public open fun topMargin(): Double =
        Native.objc_msgSend("double", this, "topMargin") as Double

    public open fun setTopMargin(topMargin: Double): Unit {
        Native.objc_msgSend("void", this, "setTopMargin:", topMargin)
    }

    public open fun bottomMargin(): Double =
        Native.objc_msgSend("double", this, "bottomMargin") as Double

    public open fun setBottomMargin(bottomMargin: Double): Unit {
        Native.objc_msgSend("void", this, "setBottomMargin:", bottomMargin)
    }

    public open fun isHorizontallyCentered(): Boolean =
        Native.objc_msgSend("boolean", this, "isHorizontallyCentered") as Boolean

    public open fun setHorizontallyCentered(horizontallyCentered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHorizontallyCentered:", horizontallyCentered)
    }

    public open fun isVerticallyCentered(): Boolean =
        Native.objc_msgSend("boolean", this, "isVerticallyCentered") as Boolean

    public open fun setVerticallyCentered(verticallyCentered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setVerticallyCentered:", verticallyCentered)
    }

    public open fun horizontalPagination(): Any =
        Native.objc_msgSend("class objc.Any", this, "horizontalPagination")

    public open fun setHorizontalPagination(horizontalPagination: Any): Unit {
        Native.objc_msgSend("void", this, "setHorizontalPagination:", horizontalPagination)
    }

    public open fun verticalPagination(): Any =
        Native.objc_msgSend("class objc.Any", this, "verticalPagination")

    public open fun setVerticalPagination(verticalPagination: Any): Unit {
        Native.objc_msgSend("void", this, "setVerticalPagination:", verticalPagination)
    }

    public open fun jobDisposition(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "jobDisposition") as NSString

    public open fun setJobDisposition(jobDisposition: NSString): Unit {
        Native.objc_msgSend("void", this, "setJobDisposition:", jobDisposition)
    }

    public open fun printer(): NSPrinter =
        Native.objc_msgSend("class objc.NSPrinter", this, "printer") as NSPrinter

    public open fun setPrinter(printer: NSPrinter): Unit {
        Native.objc_msgSend("void", this, "setPrinter:", printer)
    }

    public open fun setUpPrintOperationDefaultValues(): Unit {
        Native.objc_msgSend("void", this, "setUpPrintOperationDefaultValues")
    }

    public open fun imageablePageBounds(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageablePageBounds")

    public open fun localizedPaperName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedPaperName") as NSString

    public open fun printSettings(): NSMutableDictionary =
        Native.objc_msgSend("class objc.NSMutableDictionary", this, "printSettings") as NSMutableDictionary

    public open fun PMPrintSession(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "PMPrintSession") as Pointer<*>

    public open fun PMPageFormat(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "PMPageFormat") as Pointer<*>

    public open fun PMPrintSettings(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "PMPrintSettings") as Pointer<*>

    public open fun updateFromPMPageFormat(): Unit {
        Native.objc_msgSend("void", this, "updateFromPMPageFormat")
    }

    public open fun updateFromPMPrintSettings(): Unit {
        Native.objc_msgSend("void", this, "updateFromPMPrintSettings")
    }

    public open fun isSelectionOnly(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectionOnly") as Boolean

    public open fun setSelectionOnly(selectionOnly: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectionOnly:", selectionOnly)
    }

    public open fun takeSettingsFromPDFInfo(inPDFInfo: NSPDFInfo): Unit {
        Native.objc_msgSend("void", this, "takeSettingsFromPDFInfo:", inPDFInfo)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSPrintInfo_NSDeprecated.metaclass {
        public open fun setSharedPrintInfo(printInfo: NSPrintInfo): Unit {
            Native.objc_msgSend("void", this, "setSharedPrintInfo:", printInfo)
        }

        public open fun sharedPrintInfo(): NSPrintInfo =
            Native.objc_msgSend("class objc.NSPrintInfo", this, "sharedPrintInfo") as NSPrintInfo

        public open fun defaultPrinter(): NSPrinter =
            Native.objc_msgSend("class objc.NSPrinter", this, "defaultPrinter") as NSPrinter

    }

    companion object : NSObject(Native.objc_getClass("NSPrintInfo")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPrintOperation(pointer: Long) : NSObject(pointer), NSPrintOperation_NSDeprecated {
    public open fun isCopyingOperation(): Boolean =
        Native.objc_msgSend("boolean", this, "isCopyingOperation") as Boolean

    public open fun preferredRenderingQuality(): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredRenderingQuality")

    public open fun jobTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "jobTitle") as NSString

    public open fun setJobTitle(jobTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setJobTitle:", jobTitle)
    }

    public open fun showsPrintPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "showsPrintPanel") as Boolean

    public open fun setShowsPrintPanel(showsPrintPanel: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsPrintPanel:", showsPrintPanel)
    }

    public open fun showsProgressPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "showsProgressPanel") as Boolean

    public open fun setShowsProgressPanel(showsProgressPanel: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsProgressPanel:", showsProgressPanel)
    }

    public open fun printPanel(): NSPrintPanel =
        Native.objc_msgSend("class objc.NSPrintPanel", this, "printPanel") as NSPrintPanel

    public open fun setPrintPanel(printPanel: NSPrintPanel): Unit {
        Native.objc_msgSend("void", this, "setPrintPanel:", printPanel)
    }

    public open fun PDFPanel(): NSPDFPanel =
        Native.objc_msgSend("class objc.NSPDFPanel", this, "PDFPanel") as NSPDFPanel

    public open fun setPDFPanel(PDFPanel: NSPDFPanel): Unit {
        Native.objc_msgSend("void", this, "setPDFPanel:", PDFPanel)
    }

    public open fun canSpawnSeparateThread(): Boolean =
        Native.objc_msgSend("boolean", this, "canSpawnSeparateThread") as Boolean

    public open fun setCanSpawnSeparateThread(canSpawnSeparateThread: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanSpawnSeparateThread:", canSpawnSeparateThread)
    }

    public open fun pageOrder(): Any =
        Native.objc_msgSend("class objc.Any", this, "pageOrder")

    public open fun setPageOrder(pageOrder: Any): Unit {
        Native.objc_msgSend("void", this, "setPageOrder:", pageOrder)
    }

    public open fun runOperationModalForWindow_delegate_didRunSelector_contextInfo(docWindow: NSWindow, delegate: ObjCObject, didRunSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "runOperationModalForWindow:delegate:didRunSelector:contextInfo:", docWindow, delegate, didRunSelector, contextInfo)
    }

    public open fun runOperation(): Boolean =
        Native.objc_msgSend("boolean", this, "runOperation") as Boolean

    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun printInfo(): NSPrintInfo =
        Native.objc_msgSend("class objc.NSPrintInfo", this, "printInfo") as NSPrintInfo

    public open fun setPrintInfo(printInfo: NSPrintInfo): Unit {
        Native.objc_msgSend("void", this, "setPrintInfo:", printInfo)
    }

    public open fun context(): NSGraphicsContext =
        Native.objc_msgSend("class objc.NSGraphicsContext", this, "context") as NSGraphicsContext

    public open fun pageRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "pageRange")

    public open fun currentPage(): Int =
        Native.objc_msgSend("int", this, "currentPage") as Int

    public open fun createContext(): NSGraphicsContext =
        Native.objc_msgSend("class objc.NSGraphicsContext", this, "createContext") as NSGraphicsContext

    public open fun destroyContext(): Unit {
        Native.objc_msgSend("void", this, "destroyContext")
    }

    public open fun deliverResult(): Boolean =
        Native.objc_msgSend("boolean", this, "deliverResult") as Boolean

    public open fun cleanUpOperation(): Unit {
        Native.objc_msgSend("void", this, "cleanUpOperation")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSPrintOperation_NSDeprecated.metaclass {
        public open fun printOperationWithView_printInfo(view: NSView, printInfo: NSPrintInfo): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "printOperationWithView:printInfo:", view, printInfo) as NSPrintOperation

        public open fun PDFOperationWithView_insideRect_toData_printInfo(view: NSView, rect: Any, data: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "PDFOperationWithView:insideRect:toData:printInfo:", view, rect, data, printInfo) as NSPrintOperation

        public open fun PDFOperationWithView_insideRect_toPath_printInfo(view: NSView, rect: Any, path: NSString, printInfo: NSPrintInfo): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "PDFOperationWithView:insideRect:toPath:printInfo:", view, rect, path, printInfo) as NSPrintOperation

        public open fun EPSOperationWithView_insideRect_toData_printInfo(view: NSView, rect: Any, data: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "EPSOperationWithView:insideRect:toData:printInfo:", view, rect, data, printInfo) as NSPrintOperation

        public open fun EPSOperationWithView_insideRect_toPath_printInfo(view: NSView, rect: Any, path: NSString, printInfo: NSPrintInfo): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "EPSOperationWithView:insideRect:toPath:printInfo:", view, rect, path, printInfo) as NSPrintOperation

        public open fun printOperationWithView(view: NSView): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "printOperationWithView:", view) as NSPrintOperation

        public open fun PDFOperationWithView_insideRect_toData(view: NSView, rect: Any, data: NSMutableData): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "PDFOperationWithView:insideRect:toData:", view, rect, data) as NSPrintOperation

        public open fun EPSOperationWithView_insideRect_toData(view: NSView, rect: Any, data: NSMutableData): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "EPSOperationWithView:insideRect:toData:", view, rect, data) as NSPrintOperation

        public open fun currentOperation(): NSPrintOperation =
            Native.objc_msgSend("class objc.NSPrintOperation", this, "currentOperation") as NSPrintOperation

        public open fun setCurrentOperation(operation: NSPrintOperation): Unit {
            Native.objc_msgSend("void", this, "setCurrentOperation:", operation)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSPrintOperation")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPrintPanel(pointer: Long) : NSObject(pointer), NSPrintPanel_NSDeprecated {
    public open fun addAccessoryController(accessoryController: Any): Unit {
        Native.objc_msgSend("void", this, "addAccessoryController:", accessoryController)
    }

    public open fun removeAccessoryController(accessoryController: Any): Unit {
        Native.objc_msgSend("void", this, "removeAccessoryController:", accessoryController)
    }

    public open fun accessoryControllers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "accessoryControllers") as NSArray

    public open fun options(): Any =
        Native.objc_msgSend("class objc.Any", this, "options")

    public open fun setOptions(options: Any): Unit {
        Native.objc_msgSend("void", this, "setOptions:", options)
    }

    public open fun setDefaultButtonTitle(defaultButtonTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setDefaultButtonTitle:", defaultButtonTitle)
    }

    public open fun defaultButtonTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "defaultButtonTitle") as NSString

    public open fun helpAnchor(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "helpAnchor") as NSString

    public open fun setHelpAnchor(helpAnchor: NSString): Unit {
        Native.objc_msgSend("void", this, "setHelpAnchor:", helpAnchor)
    }

    public open fun jobStyleHint(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "jobStyleHint") as NSString

    public open fun setJobStyleHint(jobStyleHint: NSString): Unit {
        Native.objc_msgSend("void", this, "setJobStyleHint:", jobStyleHint)
    }

    public open fun beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo(printInfo: NSPrintInfo, docWindow: NSWindow, delegate: ObjCObject, didEndSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:", printInfo, docWindow, delegate, didEndSelector, contextInfo)
    }

    public open fun runModalWithPrintInfo(printInfo: NSPrintInfo): Int =
        Native.objc_msgSend("int", this, "runModalWithPrintInfo:", printInfo) as Int

    public open fun runModal(): Int =
        Native.objc_msgSend("int", this, "runModal") as Int

    public open fun printInfo(): NSPrintInfo =
        Native.objc_msgSend("class objc.NSPrintInfo", this, "printInfo") as NSPrintInfo

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSPrintPanel_NSDeprecated.metaclass {
        public open fun printPanel(): NSPrintPanel =
            Native.objc_msgSend("class objc.NSPrintPanel", this, "printPanel") as NSPrintPanel

    }

    companion object : NSObject(Native.objc_getClass("NSPrintPanel")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPDFInfo(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun setURL(URL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setURL:", URL)
    }

    public open fun isFileExtensionHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "isFileExtensionHidden") as Boolean

    public open fun setFileExtensionHidden(fileExtensionHidden: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFileExtensionHidden:", fileExtensionHidden)
    }

    public open fun tagNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tagNames") as NSArray

    public open fun setTagNames(tagNames: NSArray): Unit {
        Native.objc_msgSend("void", this, "setTagNames:", tagNames)
    }

    public open fun orientation(): Any =
        Native.objc_msgSend("class objc.Any", this, "orientation")

    public open fun setOrientation(orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setOrientation:", orientation)
    }

    public open fun paperSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "paperSize")

    public open fun setPaperSize(paperSize: Any): Unit {
        Native.objc_msgSend("void", this, "setPaperSize:", paperSize)
    }

    public open fun attributes(): NSMutableDictionary =
        Native.objc_msgSend("class objc.NSMutableDictionary", this, "attributes") as NSMutableDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPDFInfo")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPDFPanel(pointer: Long) : NSObject(pointer) {
    public open fun accessoryController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "accessoryController") as NSViewController

    public open fun setAccessoryController(accessoryController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "setAccessoryController:", accessoryController)
    }

    public open fun options(): Any =
        Native.objc_msgSend("class objc.Any", this, "options")

    public open fun setOptions(options: Any): Unit {
        Native.objc_msgSend("void", this, "setOptions:", options)
    }

    public open fun defaultFileName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "defaultFileName") as NSString

    public open fun setDefaultFileName(defaultFileName: NSString): Unit {
        Native.objc_msgSend("void", this, "setDefaultFileName:", defaultFileName)
    }

    public open fun beginSheetWithPDFInfo_modalForWindow_completionHandler(pdfInfo: NSPDFInfo, docWindow: NSWindow, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "beginSheetWithPDFInfo:modalForWindow:completionHandler:", pdfInfo, docWindow, completionHandler)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun panel(): NSPDFPanel =
            Native.objc_msgSend("class objc.NSPDFPanel", this, "panel") as NSPDFPanel

    }

    companion object : NSObject(Native.objc_getClass("NSPDFPanel")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMediaLibraryBrowserController(pointer: Long) : NSObject(pointer) {
    public open fun isVisible(): Boolean =
        Native.objc_msgSend("boolean", this, "isVisible") as Boolean

    public open fun setVisible(visible: Boolean): Unit {
        Native.objc_msgSend("void", this, "setVisible:", visible)
    }

    public open fun frame(): Any =
        Native.objc_msgSend("class objc.Any", this, "frame")

    public open fun setFrame(frame: Any): Unit {
        Native.objc_msgSend("void", this, "setFrame:", frame)
    }

    public open fun mediaLibraries(): Any =
        Native.objc_msgSend("class objc.Any", this, "mediaLibraries")

    public open fun setMediaLibraries(mediaLibraries: Any): Unit {
        Native.objc_msgSend("void", this, "setMediaLibraries:", mediaLibraries)
    }

    public open fun togglePanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "togglePanel:", sender)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun sharedMediaLibraryBrowserController(): NSMediaLibraryBrowserController =
            Native.objc_msgSend("class objc.NSMediaLibraryBrowserController", this, "sharedMediaLibraryBrowserController") as NSMediaLibraryBrowserController

    }

    companion object : NSObject(Native.objc_getClass("NSMediaLibraryBrowserController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScreen(pointer: Long) : NSObject(pointer), NSScreen_NSDeprecated {
    public open fun depth(): Int =
        Native.objc_msgSend("int", this, "depth") as Int

    public open fun frame(): Any =
        Native.objc_msgSend("class objc.Any", this, "frame")

    public open fun visibleFrame(): Any =
        Native.objc_msgSend("class objc.Any", this, "visibleFrame")

    public open fun deviceDescription(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "deviceDescription") as NSDictionary

    public open fun colorSpace(): NSColorSpace =
        Native.objc_msgSend("class objc.NSColorSpace", this, "colorSpace") as NSColorSpace

    public open fun supportedWindowDepths(): Pointer<Int> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "supportedWindowDepths") as Pointer<Int>

    public open fun convertRectToBacking(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectToBacking:", aRect)

    public open fun convertRectFromBacking(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRectFromBacking:", aRect)

    public open fun backingAlignedRect_options(aRect: Any, options: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "backingAlignedRect:options:", aRect, options)

    public open fun backingScaleFactor(): Double =
        Native.objc_msgSend("double", this, "backingScaleFactor") as Double

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSScreen_NSDeprecated.metaclass {
        public open fun screens(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "screens") as NSArray

        public open fun mainScreen(): NSScreen =
            Native.objc_msgSend("class objc.NSScreen", this, "mainScreen") as NSScreen

        public open fun deepestScreen(): NSScreen =
            Native.objc_msgSend("class objc.NSScreen", this, "deepestScreen") as NSScreen

        public open fun screensHaveSeparateSpaces(): Boolean =
            Native.objc_msgSend("boolean", this, "screensHaveSeparateSpaces") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSScreen")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScroller(pointer: Long) : NSControl(pointer), NSScroller_NSDeprecated {
    public open fun scrollerStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "scrollerStyle")

    public open fun setScrollerStyle(scrollerStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setScrollerStyle:", scrollerStyle)
    }

    public open fun knobStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "knobStyle")

    public open fun setKnobStyle(knobStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setKnobStyle:", knobStyle)
    }

    public open fun drawParts(): Unit {
        Native.objc_msgSend("void", this, "drawParts")
    }

    public open fun rectForPart(partCode: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rectForPart:", partCode)

    public open fun checkSpaceForParts(): Unit {
        Native.objc_msgSend("void", this, "checkSpaceForParts")
    }

    public open fun usableParts(): Any =
        Native.objc_msgSend("class objc.Any", this, "usableParts")

    public open fun arrowsPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "arrowsPosition")

    public open fun setArrowsPosition(arrowsPosition: Any): Unit {
        Native.objc_msgSend("void", this, "setArrowsPosition:", arrowsPosition)
    }

    public open fun controlTint(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlTint")

    public open fun setControlTint(controlTint: Any): Unit {
        Native.objc_msgSend("void", this, "setControlTint:", controlTint)
    }

    override fun controlSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlSize")

    override fun setControlSize(controlSize: Any): Unit {
        Native.objc_msgSend("void", this, "setControlSize:", controlSize)
    }

    public open fun drawArrow_highlight(whichArrow: Any, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "drawArrow:highlight:", whichArrow, flag)
    }

    public open fun drawKnob(): Unit {
        Native.objc_msgSend("void", this, "drawKnob")
    }

    public open fun drawKnobSlotInRect_highlight(slotRect: Any, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "drawKnobSlotInRect:highlight:", slotRect, flag)
    }

    public open fun highlight(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "highlight:", flag)
    }

    public open fun testPart(thePoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "testPart:", thePoint)

    public open fun trackKnob(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "trackKnob:", theEvent)
    }

    public open fun trackScrollButtons(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "trackScrollButtons:", theEvent)
    }

    public open fun hitPart(): Any =
        Native.objc_msgSend("class objc.Any", this, "hitPart")

    public open fun knobProportion(): Double =
        Native.objc_msgSend("double", this, "knobProportion") as Double

    public open fun setKnobProportion(proportion: Double): Unit {
        Native.objc_msgSend("void", this, "setKnobProportion:", proportion)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSScroller_NSDeprecated.metaclass {
        public open fun isCompatibleWithOverlayScrollers(): Boolean =
            Native.objc_msgSend("boolean", this, "isCompatibleWithOverlayScrollers") as Boolean

        public open fun scrollerWidthForControlSize_scrollerStyle(controlSize: Any, scrollerStyle: Any): Double =
            Native.objc_msgSend("double", this, "scrollerWidthForControlSize:scrollerStyle:", controlSize, scrollerStyle) as Double

        public open fun scrollerWidthForControlSize(controlSize: Any): Double =
            Native.objc_msgSend("double", this, "scrollerWidthForControlSize:", controlSize) as Double

        public open fun scrollerWidth(): Double =
            Native.objc_msgSend("double", this, "scrollerWidth") as Double

        public open fun preferredScrollerStyle(): Any =
            Native.objc_msgSend("class objc.Any", this, "preferredScrollerStyle")

    }

    companion object : NSObject(Native.objc_getClass("NSScroller")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextFinder(pointer: Long) : NSObject(pointer), NSCoding {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun client(): Any =
        Native.objc_msgSend("class objc.Any", this, "client")

    public open fun setClient(client: Any): Unit {
        Native.objc_msgSend("void", this, "setClient:", client)
    }

    public open fun performAction(op: Any): Unit {
        Native.objc_msgSend("void", this, "performAction:", op)
    }

    public open fun validateAction(op: Any): Boolean =
        Native.objc_msgSend("boolean", this, "validateAction:", op) as Boolean

    public open fun findBarContainer(): Any =
        Native.objc_msgSend("class objc.Any", this, "findBarContainer")

    public open fun setFindBarContainer(findBarContainer: Any): Unit {
        Native.objc_msgSend("void", this, "setFindBarContainer:", findBarContainer)
    }

    public open fun cancelFindIndicator(): Unit {
        Native.objc_msgSend("void", this, "cancelFindIndicator")
    }

    public open fun findIndicatorNeedsUpdate(): Boolean =
        Native.objc_msgSend("boolean", this, "findIndicatorNeedsUpdate") as Boolean

    public open fun setFindIndicatorNeedsUpdate(findIndicatorNeedsUpdate: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFindIndicatorNeedsUpdate:", findIndicatorNeedsUpdate)
    }

    public open fun isIncrementalSearchingEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isIncrementalSearchingEnabled") as Boolean

    public open fun setIncrementalSearchingEnabled(incrementalSearchingEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncrementalSearchingEnabled:", incrementalSearchingEnabled)
    }

    public open fun incrementalSearchingShouldDimContentView(): Boolean =
        Native.objc_msgSend("boolean", this, "incrementalSearchingShouldDimContentView") as Boolean

    public open fun setIncrementalSearchingShouldDimContentView(incrementalSearchingShouldDimContentView: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncrementalSearchingShouldDimContentView:", incrementalSearchingShouldDimContentView)
    }

    public open fun incrementalMatchRanges(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "incrementalMatchRanges") as NSArray

    public open fun noteClientStringWillChange(): Unit {
        Native.objc_msgSend("void", this, "noteClientStringWillChange")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
        public open fun drawIncrementalMatchHighlightInRect(rect: Any): Unit {
            Native.objc_msgSend("void", this, "drawIncrementalMatchHighlightInRect:", rect)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSTextFinder")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSScrollView(pointer: Long) : NSView(pointer), NSTextFinderBarContainer, NSScrollView_NSRulerSupport, NSScrollView_NSFindBarSupport {
    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun documentVisibleRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "documentVisibleRect")

    public open fun contentSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentSize")

    public open fun documentView(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "documentView") as ObjCObject

    public open fun setDocumentView(documentView: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDocumentView:", documentView)
    }

    public open fun contentView(): NSClipView =
        Native.objc_msgSend("class objc.NSClipView", this, "contentView") as NSClipView

    public open fun setContentView(contentView: NSClipView): Unit {
        Native.objc_msgSend("void", this, "setContentView:", contentView)
    }

    public open fun documentCursor(): NSCursor =
        Native.objc_msgSend("class objc.NSCursor", this, "documentCursor") as NSCursor

    public open fun setDocumentCursor(documentCursor: NSCursor): Unit {
        Native.objc_msgSend("void", this, "setDocumentCursor:", documentCursor)
    }

    public open fun borderType(): Any =
        Native.objc_msgSend("class objc.Any", this, "borderType")

    public open fun setBorderType(borderType: Any): Unit {
        Native.objc_msgSend("void", this, "setBorderType:", borderType)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun hasVerticalScroller(): Boolean =
        Native.objc_msgSend("boolean", this, "hasVerticalScroller") as Boolean

    public open fun setHasVerticalScroller(hasVerticalScroller: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasVerticalScroller:", hasVerticalScroller)
    }

    public open fun hasHorizontalScroller(): Boolean =
        Native.objc_msgSend("boolean", this, "hasHorizontalScroller") as Boolean

    public open fun setHasHorizontalScroller(hasHorizontalScroller: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasHorizontalScroller:", hasHorizontalScroller)
    }

    public open fun verticalScroller(): NSScroller =
        Native.objc_msgSend("class objc.NSScroller", this, "verticalScroller") as NSScroller

    public open fun setVerticalScroller(verticalScroller: NSScroller): Unit {
        Native.objc_msgSend("void", this, "setVerticalScroller:", verticalScroller)
    }

    public open fun horizontalScroller(): NSScroller =
        Native.objc_msgSend("class objc.NSScroller", this, "horizontalScroller") as NSScroller

    public open fun setHorizontalScroller(horizontalScroller: NSScroller): Unit {
        Native.objc_msgSend("void", this, "setHorizontalScroller:", horizontalScroller)
    }

    public open fun autohidesScrollers(): Boolean =
        Native.objc_msgSend("boolean", this, "autohidesScrollers") as Boolean

    public open fun setAutohidesScrollers(autohidesScrollers: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutohidesScrollers:", autohidesScrollers)
    }

    public open fun horizontalLineScroll(): Double =
        Native.objc_msgSend("double", this, "horizontalLineScroll") as Double

    public open fun setHorizontalLineScroll(horizontalLineScroll: Double): Unit {
        Native.objc_msgSend("void", this, "setHorizontalLineScroll:", horizontalLineScroll)
    }

    public open fun verticalLineScroll(): Double =
        Native.objc_msgSend("double", this, "verticalLineScroll") as Double

    public open fun setVerticalLineScroll(verticalLineScroll: Double): Unit {
        Native.objc_msgSend("void", this, "setVerticalLineScroll:", verticalLineScroll)
    }

    public open fun lineScroll(): Double =
        Native.objc_msgSend("double", this, "lineScroll") as Double

    public open fun setLineScroll(lineScroll: Double): Unit {
        Native.objc_msgSend("void", this, "setLineScroll:", lineScroll)
    }

    public open fun horizontalPageScroll(): Double =
        Native.objc_msgSend("double", this, "horizontalPageScroll") as Double

    public open fun setHorizontalPageScroll(horizontalPageScroll: Double): Unit {
        Native.objc_msgSend("void", this, "setHorizontalPageScroll:", horizontalPageScroll)
    }

    public open fun verticalPageScroll(): Double =
        Native.objc_msgSend("double", this, "verticalPageScroll") as Double

    public open fun setVerticalPageScroll(verticalPageScroll: Double): Unit {
        Native.objc_msgSend("void", this, "setVerticalPageScroll:", verticalPageScroll)
    }

    public open fun pageScroll(): Double =
        Native.objc_msgSend("double", this, "pageScroll") as Double

    public open fun setPageScroll(pageScroll: Double): Unit {
        Native.objc_msgSend("void", this, "setPageScroll:", pageScroll)
    }

    public open fun scrollsDynamically(): Boolean =
        Native.objc_msgSend("boolean", this, "scrollsDynamically") as Boolean

    public open fun setScrollsDynamically(scrollsDynamically: Boolean): Unit {
        Native.objc_msgSend("void", this, "setScrollsDynamically:", scrollsDynamically)
    }

    public open fun tile(): Unit {
        Native.objc_msgSend("void", this, "tile")
    }

    override fun reflectScrolledClipView(cView: NSClipView): Unit {
        Native.objc_msgSend("void", this, "reflectScrolledClipView:", cView)
    }

    override fun scrollWheel(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "scrollWheel:", theEvent)
    }

    public open fun scrollerStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "scrollerStyle")

    public open fun setScrollerStyle(scrollerStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setScrollerStyle:", scrollerStyle)
    }

    public open fun scrollerKnobStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "scrollerKnobStyle")

    public open fun setScrollerKnobStyle(scrollerKnobStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setScrollerKnobStyle:", scrollerKnobStyle)
    }

    public open fun flashScrollers(): Unit {
        Native.objc_msgSend("void", this, "flashScrollers")
    }

    public open fun horizontalScrollElasticity(): Any =
        Native.objc_msgSend("class objc.Any", this, "horizontalScrollElasticity")

    public open fun setHorizontalScrollElasticity(horizontalScrollElasticity: Any): Unit {
        Native.objc_msgSend("void", this, "setHorizontalScrollElasticity:", horizontalScrollElasticity)
    }

    public open fun verticalScrollElasticity(): Any =
        Native.objc_msgSend("class objc.Any", this, "verticalScrollElasticity")

    public open fun setVerticalScrollElasticity(verticalScrollElasticity: Any): Unit {
        Native.objc_msgSend("void", this, "setVerticalScrollElasticity:", verticalScrollElasticity)
    }

    public open fun usesPredominantAxisScrolling(): Boolean =
        Native.objc_msgSend("boolean", this, "usesPredominantAxisScrolling") as Boolean

    public open fun setUsesPredominantAxisScrolling(usesPredominantAxisScrolling: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesPredominantAxisScrolling:", usesPredominantAxisScrolling)
    }

    public open fun allowsMagnification(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsMagnification") as Boolean

    public open fun setAllowsMagnification(allowsMagnification: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsMagnification:", allowsMagnification)
    }

    public open fun magnification(): Double =
        Native.objc_msgSend("double", this, "magnification") as Double

    public open fun setMagnification(magnification: Double): Unit {
        Native.objc_msgSend("void", this, "setMagnification:", magnification)
    }

    public open fun maxMagnification(): Double =
        Native.objc_msgSend("double", this, "maxMagnification") as Double

    public open fun setMaxMagnification(maxMagnification: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxMagnification:", maxMagnification)
    }

    public open fun minMagnification(): Double =
        Native.objc_msgSend("double", this, "minMagnification") as Double

    public open fun setMinMagnification(minMagnification: Double): Unit {
        Native.objc_msgSend("void", this, "setMinMagnification:", minMagnification)
    }

    public open fun magnifyToFitRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "magnifyToFitRect:", rect)
    }

    public open fun setMagnification_centeredAtPoint(magnification: Double, point: Any): Unit {
        Native.objc_msgSend("void", this, "setMagnification:centeredAtPoint:", magnification, point)
    }

    public open fun addFloatingSubview_forAxis(view: NSView, axis: Any): Unit {
        Native.objc_msgSend("void", this, "addFloatingSubview:forAxis:", view, axis)
    }

    public open fun automaticallyAdjustsContentInsets(): Boolean =
        Native.objc_msgSend("boolean", this, "automaticallyAdjustsContentInsets") as Boolean

    public open fun setAutomaticallyAdjustsContentInsets(automaticallyAdjustsContentInsets: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticallyAdjustsContentInsets:", automaticallyAdjustsContentInsets)
    }

    public open fun contentInsets(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentInsets")

    public open fun setContentInsets(contentInsets: Any): Unit {
        Native.objc_msgSend("void", this, "setContentInsets:", contentInsets)
    }

    public open fun scrollerInsets(): Any =
        Native.objc_msgSend("class objc.Any", this, "scrollerInsets")

    public open fun setScrollerInsets(scrollerInsets: Any): Unit {
        Native.objc_msgSend("void", this, "setScrollerInsets:", scrollerInsets)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSTextFinderBarContainer.metaclass, NSScrollView_NSRulerSupport.metaclass, NSScrollView_NSFindBarSupport.metaclass {
        public open fun frameSizeForContentSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(cSize: Any, horizontalScrollerClass: ObjCClass, verticalScrollerClass: ObjCClass, aType: Any, controlSize: Any, scrollerStyle: Any): Any =
            Native.objc_msgSend("class objc.Any", this, "frameSizeForContentSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:", cSize, horizontalScrollerClass, verticalScrollerClass, aType, controlSize, scrollerStyle)

        public open fun contentSizeForFrameSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(fSize: Any, horizontalScrollerClass: ObjCClass, verticalScrollerClass: ObjCClass, aType: Any, controlSize: Any, scrollerStyle: Any): Any =
            Native.objc_msgSend("class objc.Any", this, "contentSizeForFrameSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:", fSize, horizontalScrollerClass, verticalScrollerClass, aType, controlSize, scrollerStyle)

        public open fun frameSizeForContentSize_hasHorizontalScroller_hasVerticalScroller_borderType(cSize: Any, hFlag: Boolean, vFlag: Boolean, aType: Any): Any =
            Native.objc_msgSend("class objc.Any", this, "frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:", cSize, hFlag, vFlag, aType)

        public open fun contentSizeForFrameSize_hasHorizontalScroller_hasVerticalScroller_borderType(fSize: Any, hFlag: Boolean, vFlag: Boolean, aType: Any): Any =
            Native.objc_msgSend("class objc.Any", this, "contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:", fSize, hFlag, vFlag, aType)

    }

    companion object : NSObject(Native.objc_getClass("NSScrollView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSegmentedControl(pointer: Long) : NSControl(pointer) {
    public open fun segmentCount(): Int =
        Native.objc_msgSend("int", this, "segmentCount") as Int

    public open fun setSegmentCount(segmentCount: Int): Unit {
        Native.objc_msgSend("void", this, "setSegmentCount:", segmentCount)
    }

    public open fun selectedSegment(): Int =
        Native.objc_msgSend("int", this, "selectedSegment") as Int

    public open fun setSelectedSegment(selectedSegment: Int): Unit {
        Native.objc_msgSend("void", this, "setSelectedSegment:", selectedSegment)
    }

    public open fun selectSegmentWithTag(tag: Int): Boolean =
        Native.objc_msgSend("boolean", this, "selectSegmentWithTag:", tag) as Boolean

    public open fun setWidth_forSegment(width: Double, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setWidth:forSegment:", width, segment)
    }

    public open fun widthForSegment(segment: Int): Double =
        Native.objc_msgSend("double", this, "widthForSegment:", segment) as Double

    public open fun setImage_forSegment(image: NSImage, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setImage:forSegment:", image, segment)
    }

    public open fun imageForSegment(segment: Int): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "imageForSegment:", segment) as NSImage

    public open fun setImageScaling_forSegment(scaling: Any, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setImageScaling:forSegment:", scaling, segment)
    }

    public open fun imageScalingForSegment(segment: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "imageScalingForSegment:", segment)

    public open fun setLabel_forSegment(label: NSString, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setLabel:forSegment:", label, segment)
    }

    public open fun labelForSegment(segment: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "labelForSegment:", segment) as NSString

    public open fun setMenu_forSegment(menu: NSMenu, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setMenu:forSegment:", menu, segment)
    }

    public open fun menuForSegment(segment: Int): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menuForSegment:", segment) as NSMenu

    public open fun setSelected_forSegment(selected: Boolean, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setSelected:forSegment:", selected, segment)
    }

    public open fun isSelectedForSegment(segment: Int): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectedForSegment:", segment) as Boolean

    public open fun setEnabled_forSegment(enabled: Boolean, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setEnabled:forSegment:", enabled, segment)
    }

    public open fun isEnabledForSegment(segment: Int): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabledForSegment:", segment) as Boolean

    public open fun segmentStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "segmentStyle")

    public open fun setSegmentStyle(segmentStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setSegmentStyle:", segmentStyle)
    }

    public open fun isSpringLoaded(): Boolean =
        Native.objc_msgSend("boolean", this, "isSpringLoaded") as Boolean

    public open fun setSpringLoaded(springLoaded: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSpringLoaded:", springLoaded)
    }

    public open fun trackingMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "trackingMode")

    public open fun setTrackingMode(trackingMode: Any): Unit {
        Native.objc_msgSend("void", this, "setTrackingMode:", trackingMode)
    }

    public open fun doubleValueForSelectedSegment(): Double =
        Native.objc_msgSend("double", this, "doubleValueForSelectedSegment") as Double

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSegmentedControl")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSegmentedCell(pointer: Long) : NSActionCell(pointer), NSSegmentedCell_NSSegmentBackgroundStyle {
    public open fun segmentCount(): Int =
        Native.objc_msgSend("int", this, "segmentCount") as Int

    public open fun setSegmentCount(segmentCount: Int): Unit {
        Native.objc_msgSend("void", this, "setSegmentCount:", segmentCount)
    }

    public open fun selectedSegment(): Int =
        Native.objc_msgSend("int", this, "selectedSegment") as Int

    public open fun setSelectedSegment(selectedSegment: Int): Unit {
        Native.objc_msgSend("void", this, "setSelectedSegment:", selectedSegment)
    }

    public open fun selectSegmentWithTag(tag: Int): Boolean =
        Native.objc_msgSend("boolean", this, "selectSegmentWithTag:", tag) as Boolean

    public open fun makeNextSegmentKey(): Unit {
        Native.objc_msgSend("void", this, "makeNextSegmentKey")
    }

    public open fun makePreviousSegmentKey(): Unit {
        Native.objc_msgSend("void", this, "makePreviousSegmentKey")
    }

    public open fun trackingMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "trackingMode")

    public open fun setTrackingMode(trackingMode: Any): Unit {
        Native.objc_msgSend("void", this, "setTrackingMode:", trackingMode)
    }

    public open fun setWidth_forSegment(width: Double, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setWidth:forSegment:", width, segment)
    }

    public open fun widthForSegment(segment: Int): Double =
        Native.objc_msgSend("double", this, "widthForSegment:", segment) as Double

    public open fun setImage_forSegment(image: NSImage, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setImage:forSegment:", image, segment)
    }

    public open fun imageForSegment(segment: Int): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "imageForSegment:", segment) as NSImage

    public open fun setImageScaling_forSegment(scaling: Any, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setImageScaling:forSegment:", scaling, segment)
    }

    public open fun imageScalingForSegment(segment: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "imageScalingForSegment:", segment)

    public open fun setLabel_forSegment(label: NSString, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setLabel:forSegment:", label, segment)
    }

    public open fun labelForSegment(segment: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "labelForSegment:", segment) as NSString

    public open fun setSelected_forSegment(selected: Boolean, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setSelected:forSegment:", selected, segment)
    }

    public open fun isSelectedForSegment(segment: Int): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectedForSegment:", segment) as Boolean

    public open fun setEnabled_forSegment(enabled: Boolean, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setEnabled:forSegment:", enabled, segment)
    }

    public open fun isEnabledForSegment(segment: Int): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabledForSegment:", segment) as Boolean

    public open fun setMenu_forSegment(menu: NSMenu, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setMenu:forSegment:", menu, segment)
    }

    public open fun menuForSegment(segment: Int): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menuForSegment:", segment) as NSMenu

    public open fun setToolTip_forSegment(toolTip: NSString, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setToolTip:forSegment:", toolTip, segment)
    }

    public open fun toolTipForSegment(segment: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "toolTipForSegment:", segment) as NSString

    public open fun setTag_forSegment(tag: Int, segment: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:forSegment:", tag, segment)
    }

    public open fun tagForSegment(segment: Int): Int =
        Native.objc_msgSend("int", this, "tagForSegment:", segment) as Int

    public open fun segmentStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "segmentStyle")

    public open fun setSegmentStyle(segmentStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setSegmentStyle:", segmentStyle)
    }

    public open fun drawSegment_inFrame_withView(segment: Int, frame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawSegment:inFrame:withView:", segment, frame, controlView)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass, NSSegmentedCell_NSSegmentBackgroundStyle.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSegmentedCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSharingService(pointer: Long) : NSObject(pointer) {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun alternateImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "alternateImage") as NSImage

    public open fun menuItemTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "menuItemTitle") as NSString

    public open fun setMenuItemTitle(menuItemTitle: NSString): Unit {
        Native.objc_msgSend("void", this, "setMenuItemTitle:", menuItemTitle)
    }

    public open fun recipients(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "recipients") as NSArray

    public open fun setRecipients(recipients: NSArray): Unit {
        Native.objc_msgSend("void", this, "setRecipients:", recipients)
    }

    public open fun subject(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "subject") as NSString

    public open fun setSubject(subject: NSString): Unit {
        Native.objc_msgSend("void", this, "setSubject:", subject)
    }

    public open fun messageBody(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "messageBody") as NSString

    public open fun permanentLink(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "permanentLink") as NSURL

    public open fun accountName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "accountName") as NSString

    public open fun attachmentFileURLs(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "attachmentFileURLs") as NSArray

    public open fun initWithTitle_image_alternateImage_handler(title: NSString, image: NSImage, alternateImage: NSImage, block: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTitle:image:alternateImage:handler:", title, image, alternateImage, block) as ObjCObject

    public open fun canPerformWithItems(items: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "canPerformWithItems:", items) as Boolean

    public open fun performWithItems(items: NSArray): Unit {
        Native.objc_msgSend("void", this, "performWithItems:", items)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun sharingServicesForItems(items: NSArray): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "sharingServicesForItems:", items) as NSArray

        public open fun sharingServiceNamed(serviceName: NSString): NSSharingService =
            Native.objc_msgSend("class objc.NSSharingService", this, "sharingServiceNamed:", serviceName) as NSSharingService

    }

    companion object : NSObject(Native.objc_getClass("NSSharingService")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSharingServicePicker(pointer: Long) : NSObject(pointer) {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun initWithItems(items: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithItems:", items) as ObjCObject

    public open fun showRelativeToRect_ofView_preferredEdge(rect: Any, view: NSView, preferredEdge: Int): Unit {
        Native.objc_msgSend("void", this, "showRelativeToRect:ofView:preferredEdge:", rect, view, preferredEdge)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSharingServicePicker")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSliderCell(pointer: Long) : NSActionCell(pointer), NSSliderCell_NSTickMarkSupport {
    public open fun minValue(): Double =
        Native.objc_msgSend("double", this, "minValue") as Double

    public open fun setMinValue(minValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMinValue:", minValue)
    }

    public open fun maxValue(): Double =
        Native.objc_msgSend("double", this, "maxValue") as Double

    public open fun setMaxValue(maxValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxValue:", maxValue)
    }

    public open fun altIncrementValue(): Double =
        Native.objc_msgSend("double", this, "altIncrementValue") as Double

    public open fun setAltIncrementValue(altIncrementValue: Double): Unit {
        Native.objc_msgSend("void", this, "setAltIncrementValue:", altIncrementValue)
    }

    public open fun sliderType(): Any =
        Native.objc_msgSend("class objc.Any", this, "sliderType")

    public open fun setSliderType(sliderType: Any): Unit {
        Native.objc_msgSend("void", this, "setSliderType:", sliderType)
    }

    public open fun isVertical(): Int =
        Native.objc_msgSend("int", this, "isVertical") as Int

    public open fun trackRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "trackRect")

    public open fun knobThickness(): Double =
        Native.objc_msgSend("double", this, "knobThickness") as Double

    public open fun knobRectFlipped(flipped: Boolean): Any =
        Native.objc_msgSend("class objc.Any", this, "knobRectFlipped:", flipped)

    public open fun drawKnob(knobRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawKnob:", knobRect)
    }

    public open fun drawKnob(): Unit {
        Native.objc_msgSend("void", this, "drawKnob")
    }

    public open fun barRectFlipped(flipped: Boolean): Any =
        Native.objc_msgSend("class objc.Any", this, "barRectFlipped:", flipped)

    public open fun drawBarInside_flipped(aRect: Any, flipped: Boolean): Unit {
        Native.objc_msgSend("void", this, "drawBarInside:flipped:", aRect, flipped)
    }

    public open fun setTitleColor(newColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setTitleColor:", newColor)
    }

    public open fun titleColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "titleColor") as NSColor

    public open fun setTitleFont(fontObj: NSFont): Unit {
        Native.objc_msgSend("void", this, "setTitleFont:", fontObj)
    }

    public open fun titleFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "titleFont") as NSFont

    override fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    override fun setTitle(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", aString)
    }

    public open fun setTitleCell(aCell: NSCell): Unit {
        Native.objc_msgSend("void", this, "setTitleCell:", aCell)
    }

    public open fun titleCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "titleCell") as ObjCObject

    public open fun setKnobThickness(aFloat: Double): Unit {
        Native.objc_msgSend("void", this, "setKnobThickness:", aFloat)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass, NSSliderCell_NSTickMarkSupport.metaclass {
        override fun prefersTrackingUntilMouseUp(): Boolean =
            Native.objc_msgSend("boolean", this, "prefersTrackingUntilMouseUp") as Boolean

    }

    companion object : NSObject(Native.objc_getClass("NSSliderCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSlider(pointer: Long) : NSControl(pointer), NSAccessibilitySlider, NSSlider_NSTickMarkSupport {
    public open fun sliderType(): Any =
        Native.objc_msgSend("class objc.Any", this, "sliderType")

    public open fun setSliderType(sliderType: Any): Unit {
        Native.objc_msgSend("void", this, "setSliderType:", sliderType)
    }

    public open fun minValue(): Double =
        Native.objc_msgSend("double", this, "minValue") as Double

    public open fun setMinValue(minValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMinValue:", minValue)
    }

    public open fun maxValue(): Double =
        Native.objc_msgSend("double", this, "maxValue") as Double

    public open fun setMaxValue(maxValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxValue:", maxValue)
    }

    public open fun altIncrementValue(): Double =
        Native.objc_msgSend("double", this, "altIncrementValue") as Double

    public open fun setAltIncrementValue(altIncrementValue: Double): Unit {
        Native.objc_msgSend("void", this, "setAltIncrementValue:", altIncrementValue)
    }

    public open fun knobThickness(): Double =
        Native.objc_msgSend("double", this, "knobThickness") as Double

    public open fun isVertical(): Int =
        Native.objc_msgSend("int", this, "isVertical") as Int

    override fun acceptsFirstMouse(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstMouse:", theEvent) as Boolean

    public open fun setTitleCell(aCell: NSCell): Unit {
        Native.objc_msgSend("void", this, "setTitleCell:", aCell)
    }

    public open fun titleCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "titleCell") as ObjCObject

    public open fun setTitleColor(newColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setTitleColor:", newColor)
    }

    public open fun titleColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "titleColor") as NSColor

    public open fun setTitleFont(fontObj: NSFont): Unit {
        Native.objc_msgSend("void", this, "setTitleFont:", fontObj)
    }

    public open fun titleFont(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "titleFont") as NSFont

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", aString)
    }

    public open fun setKnobThickness(aFloat: Double): Unit {
        Native.objc_msgSend("void", this, "setKnobThickness:", aFloat)
    }

    public open fun setImage(backgroundImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", backgroundImage)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSAccessibilitySlider.metaclass, NSSlider_NSTickMarkSupport.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSlider")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStackView(pointer: Long) : NSView(pointer) {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun orientation(): Any =
        Native.objc_msgSend("class objc.Any", this, "orientation")

    public open fun setOrientation(orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setOrientation:", orientation)
    }

    public open fun alignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignment")

    public open fun setAlignment(alignment: Any): Unit {
        Native.objc_msgSend("void", this, "setAlignment:", alignment)
    }

    public open fun edgeInsets(): Any =
        Native.objc_msgSend("class objc.Any", this, "edgeInsets")

    public open fun setEdgeInsets(edgeInsets: Any): Unit {
        Native.objc_msgSend("void", this, "setEdgeInsets:", edgeInsets)
    }

    public open fun addView_inGravity(aView: NSView, gravity: Any): Unit {
        Native.objc_msgSend("void", this, "addView:inGravity:", aView, gravity)
    }

    public open fun insertView_atIndex_inGravity(aView: NSView, index: Int, gravity: Any): Unit {
        Native.objc_msgSend("void", this, "insertView:atIndex:inGravity:", aView, index, gravity)
    }

    public open fun removeView(aView: NSView): Unit {
        Native.objc_msgSend("void", this, "removeView:", aView)
    }

    public open fun viewsInGravity(gravity: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "viewsInGravity:", gravity) as NSArray

    public open fun setViews_inGravity(views: NSArray, gravity: Any): Unit {
        Native.objc_msgSend("void", this, "setViews:inGravity:", views, gravity)
    }

    public open fun views(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "views") as NSArray

    public open fun detachedViews(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "detachedViews") as NSArray

    public open fun setVisibilityPriority_forView(priority: Float, aView: NSView): Unit {
        Native.objc_msgSend("void", this, "setVisibilityPriority:forView:", priority, aView)
    }

    public open fun visibilityPriorityForView(aView: NSView): Float =
        Native.objc_msgSend("float", this, "visibilityPriorityForView:", aView) as Float

    public open fun spacing(): Double =
        Native.objc_msgSend("double", this, "spacing") as Double

    public open fun setSpacing(spacing: Double): Unit {
        Native.objc_msgSend("void", this, "setSpacing:", spacing)
    }

    public open fun setCustomSpacing_afterView(spacing: Double, aView: NSView): Unit {
        Native.objc_msgSend("void", this, "setCustomSpacing:afterView:", spacing, aView)
    }

    public open fun customSpacingAfterView(aView: NSView): Double =
        Native.objc_msgSend("double", this, "customSpacingAfterView:", aView) as Double

    public open fun hasEqualSpacing(): Boolean =
        Native.objc_msgSend("boolean", this, "hasEqualSpacing") as Boolean

    public open fun setHasEqualSpacing(hasEqualSpacing: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasEqualSpacing:", hasEqualSpacing)
    }

    public open fun clippingResistancePriorityForOrientation(orientation: Any): Float =
        Native.objc_msgSend("float", this, "clippingResistancePriorityForOrientation:", orientation) as Float

    public open fun setClippingResistancePriority_forOrientation(clippingResistancePriority: Float, orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setClippingResistancePriority:forOrientation:", clippingResistancePriority, orientation)
    }

    public open fun huggingPriorityForOrientation(orientation: Any): Float =
        Native.objc_msgSend("float", this, "huggingPriorityForOrientation:", orientation) as Float

    public open fun setHuggingPriority_forOrientation(huggingPriority: Float, orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setHuggingPriority:forOrientation:", huggingPriority, orientation)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass {
        public open fun stackViewWithViews(views: NSArray): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stackViewWithViews:", views) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSStackView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextFieldCell(pointer: Long) : NSActionCell(pointer) {
    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun textColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "textColor") as NSColor

    public open fun setTextColor(textColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setTextColor:", textColor)
    }

    override fun setUpFieldEditorAttributes(textObj: NSText): NSText =
        Native.objc_msgSend("class objc.NSText", this, "setUpFieldEditorAttributes:", textObj) as NSText

    public open fun bezelStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "bezelStyle")

    public open fun setBezelStyle(bezelStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setBezelStyle:", bezelStyle)
    }

    public open fun placeholderString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "placeholderString") as NSString

    public open fun setPlaceholderString(placeholderString: NSString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderString:", placeholderString)
    }

    public open fun placeholderAttributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "placeholderAttributedString") as NSAttributedString

    public open fun setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderAttributedString:", placeholderAttributedString)
    }

    public open fun setWantsNotificationForMarkedText(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWantsNotificationForMarkedText:", flag)
    }

    public open fun allowedInputSourceLocales(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allowedInputSourceLocales") as NSArray

    public open fun setAllowedInputSourceLocales(allowedInputSourceLocales: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAllowedInputSourceLocales:", allowedInputSourceLocales)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextFieldCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextField(pointer: Long) : NSControl(pointer), NSUserInterfaceValidations, NSAccessibilityNavigableStaticText, NSTextField_NSTextFieldAttributedStringMethods, NSTextField_NSDeprecated {
    public open fun placeholderString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "placeholderString") as NSString

    public open fun setPlaceholderString(placeholderString: NSString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderString:", placeholderString)
    }

    public open fun placeholderAttributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "placeholderAttributedString") as NSAttributedString

    public open fun setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderAttributedString:", placeholderAttributedString)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun textColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "textColor") as NSColor

    public open fun setTextColor(textColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setTextColor:", textColor)
    }

    public open fun isBordered(): Boolean =
        Native.objc_msgSend("boolean", this, "isBordered") as Boolean

    public open fun setBordered(bordered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBordered:", bordered)
    }

    public open fun isBezeled(): Boolean =
        Native.objc_msgSend("boolean", this, "isBezeled") as Boolean

    public open fun setBezeled(bezeled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBezeled:", bezeled)
    }

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun isSelectable(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectable") as Boolean

    public open fun setSelectable(selectable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectable:", selectable)
    }

    public open fun selectText(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectText:", sender)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun textShouldBeginEditing(textObject: NSText): Boolean =
        Native.objc_msgSend("boolean", this, "textShouldBeginEditing:", textObject) as Boolean

    public open fun textShouldEndEditing(textObject: NSText): Boolean =
        Native.objc_msgSend("boolean", this, "textShouldEndEditing:", textObject) as Boolean

    public open fun textDidBeginEditing(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidBeginEditing:", notification)
    }

    public open fun textDidEndEditing(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidEndEditing:", notification)
    }

    public open fun textDidChange(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidChange:", notification)
    }

    override fun acceptsFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstResponder") as Boolean

    public open fun bezelStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "bezelStyle")

    public open fun setBezelStyle(bezelStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setBezelStyle:", bezelStyle)
    }

    public open fun preferredMaxLayoutWidth(): Double =
        Native.objc_msgSend("double", this, "preferredMaxLayoutWidth") as Double

    public open fun setPreferredMaxLayoutWidth(preferredMaxLayoutWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setPreferredMaxLayoutWidth:", preferredMaxLayoutWidth)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSUserInterfaceValidations.metaclass, NSAccessibilityNavigableStaticText.metaclass, NSTextField_NSTextFieldAttributedStringMethods.metaclass, NSTextField_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextField")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSGlyphGenerator(pointer: Long) : NSObject(pointer) {
    public open fun generateGlyphsForGlyphStorage_desiredNumberOfCharacters_glyphIndex_characterIndex(glyphStorage: Any, nChars: Int, glyphIndex: Pointer<Int>, charIndex: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:", glyphStorage, nChars, glyphIndex, charIndex)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun sharedGlyphGenerator(): NSGlyphGenerator =
            Native.objc_msgSend("class objc.NSGlyphGenerator", this, "sharedGlyphGenerator") as NSGlyphGenerator

    }

    companion object : NSObject(Native.objc_getClass("NSGlyphGenerator")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextStorage(pointer: Long) : NSMutableAttributedString(pointer), NSTextStorage_Scripting {
    public open fun addLayoutManager(obj: NSLayoutManager): Unit {
        Native.objc_msgSend("void", this, "addLayoutManager:", obj)
    }

    public open fun removeLayoutManager(obj: NSLayoutManager): Unit {
        Native.objc_msgSend("void", this, "removeLayoutManager:", obj)
    }

    public open fun layoutManagers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "layoutManagers") as NSArray

    public open fun edited_range_changeInLength(editedMask: Int, range: Any, delta: Int): Unit {
        Native.objc_msgSend("void", this, "edited:range:changeInLength:", editedMask, range, delta)
    }

    public open fun processEditing(): Unit {
        Native.objc_msgSend("void", this, "processEditing")
    }

    public open fun invalidateAttributesInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "invalidateAttributesInRange:", range)
    }

    public open fun ensureAttributesAreFixedInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "ensureAttributesAreFixedInRange:", range)
    }

    public open fun fixesAttributesLazily(): Boolean =
        Native.objc_msgSend("boolean", this, "fixesAttributesLazily") as Boolean

    public open fun editedMask(): Int =
        Native.objc_msgSend("int", this, "editedMask") as Int

    public open fun editedRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "editedRange")

    public open fun changeInLength(): Int =
        Native.objc_msgSend("int", this, "changeInLength") as Int

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSMutableAttributedString.metaclass, NSTextStorage_Scripting.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextStorage")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLayoutManager(pointer: Long) : NSObject(pointer), NSCoding, NSGlyphStorage, NSLayoutManager_NSTextViewSupport {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun textStorage(): NSTextStorage =
        Native.objc_msgSend("class objc.NSTextStorage", this, "textStorage") as NSTextStorage

    public open fun setTextStorage(textStorage: NSTextStorage): Unit {
        Native.objc_msgSend("void", this, "setTextStorage:", textStorage)
    }

    public open fun attributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedString") as NSAttributedString

    public open fun replaceTextStorage(newTextStorage: NSTextStorage): Unit {
        Native.objc_msgSend("void", this, "replaceTextStorage:", newTextStorage)
    }

    public open fun glyphGenerator(): NSGlyphGenerator =
        Native.objc_msgSend("class objc.NSGlyphGenerator", this, "glyphGenerator") as NSGlyphGenerator

    public open fun setGlyphGenerator(glyphGenerator: NSGlyphGenerator): Unit {
        Native.objc_msgSend("void", this, "setGlyphGenerator:", glyphGenerator)
    }

    public open fun typesetter(): NSTypesetter =
        Native.objc_msgSend("class objc.NSTypesetter", this, "typesetter") as NSTypesetter

    public open fun setTypesetter(typesetter: NSTypesetter): Unit {
        Native.objc_msgSend("void", this, "setTypesetter:", typesetter)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun textContainers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "textContainers") as NSArray

    public open fun addTextContainer(container: NSTextContainer): Unit {
        Native.objc_msgSend("void", this, "addTextContainer:", container)
    }

    public open fun insertTextContainer_atIndex(container: NSTextContainer, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertTextContainer:atIndex:", container, index)
    }

    public open fun removeTextContainerAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeTextContainerAtIndex:", index)
    }

    public open fun textContainerChangedGeometry(container: NSTextContainer): Unit {
        Native.objc_msgSend("void", this, "textContainerChangedGeometry:", container)
    }

    public open fun textContainerChangedTextView(container: NSTextContainer): Unit {
        Native.objc_msgSend("void", this, "textContainerChangedTextView:", container)
    }

    public open fun backgroundLayoutEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "backgroundLayoutEnabled") as Boolean

    public open fun setBackgroundLayoutEnabled(backgroundLayoutEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBackgroundLayoutEnabled:", backgroundLayoutEnabled)
    }

    public open fun usesScreenFonts(): Boolean =
        Native.objc_msgSend("boolean", this, "usesScreenFonts") as Boolean

    public open fun setUsesScreenFonts(usesScreenFonts: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesScreenFonts:", usesScreenFonts)
    }

    public open fun showsInvisibleCharacters(): Boolean =
        Native.objc_msgSend("boolean", this, "showsInvisibleCharacters") as Boolean

    public open fun setShowsInvisibleCharacters(showsInvisibleCharacters: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsInvisibleCharacters:", showsInvisibleCharacters)
    }

    public open fun showsControlCharacters(): Boolean =
        Native.objc_msgSend("boolean", this, "showsControlCharacters") as Boolean

    public open fun setShowsControlCharacters(showsControlCharacters: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsControlCharacters:", showsControlCharacters)
    }

    public open fun hyphenationFactor(): Float =
        Native.objc_msgSend("float", this, "hyphenationFactor") as Float

    public open fun setHyphenationFactor(hyphenationFactor: Float): Unit {
        Native.objc_msgSend("void", this, "setHyphenationFactor:", hyphenationFactor)
    }

    public open fun defaultAttachmentScaling(): Any =
        Native.objc_msgSend("class objc.Any", this, "defaultAttachmentScaling")

    public open fun setDefaultAttachmentScaling(defaultAttachmentScaling: Any): Unit {
        Native.objc_msgSend("void", this, "setDefaultAttachmentScaling:", defaultAttachmentScaling)
    }

    public open fun typesetterBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "typesetterBehavior")

    public open fun setTypesetterBehavior(typesetterBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setTypesetterBehavior:", typesetterBehavior)
    }

    public open fun layoutOptions(): Int =
        Native.objc_msgSend("int", this, "layoutOptions") as Int

    public open fun allowsNonContiguousLayout(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsNonContiguousLayout") as Boolean

    public open fun setAllowsNonContiguousLayout(allowsNonContiguousLayout: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsNonContiguousLayout:", allowsNonContiguousLayout)
    }

    public open fun hasNonContiguousLayout(): Boolean =
        Native.objc_msgSend("boolean", this, "hasNonContiguousLayout") as Boolean

    public open fun invalidateGlyphsForCharacterRange_changeInLength_actualCharacterRange(charRange: Any, delta: Int, actualCharRange: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:", charRange, delta, actualCharRange)
    }

    public open fun invalidateLayoutForCharacterRange_actualCharacterRange(charRange: Any, actualCharRange: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "invalidateLayoutForCharacterRange:actualCharacterRange:", charRange, actualCharRange)
    }

    public open fun invalidateLayoutForCharacterRange_isSoft_actualCharacterRange(charRange: Any, flag: Boolean, actualCharRange: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:", charRange, flag, actualCharRange)
    }

    public open fun invalidateDisplayForCharacterRange(charRange: Any): Unit {
        Native.objc_msgSend("void", this, "invalidateDisplayForCharacterRange:", charRange)
    }

    public open fun invalidateDisplayForGlyphRange(glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "invalidateDisplayForGlyphRange:", glyphRange)
    }

    public open fun textStorage_edited_range_changeInLength_invalidatedRange(str: NSTextStorage, editedMask: Any, newCharRange: Any, delta: Int, invalidatedCharRange: Any): Unit {
        Native.objc_msgSend("void", this, "textStorage:edited:range:changeInLength:invalidatedRange:", str, editedMask, newCharRange, delta, invalidatedCharRange)
    }

    public open fun ensureGlyphsForCharacterRange(charRange: Any): Unit {
        Native.objc_msgSend("void", this, "ensureGlyphsForCharacterRange:", charRange)
    }

    public open fun ensureGlyphsForGlyphRange(glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "ensureGlyphsForGlyphRange:", glyphRange)
    }

    public open fun ensureLayoutForCharacterRange(charRange: Any): Unit {
        Native.objc_msgSend("void", this, "ensureLayoutForCharacterRange:", charRange)
    }

    public open fun ensureLayoutForGlyphRange(glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "ensureLayoutForGlyphRange:", glyphRange)
    }

    public open fun ensureLayoutForTextContainer(container: NSTextContainer): Unit {
        Native.objc_msgSend("void", this, "ensureLayoutForTextContainer:", container)
    }

    public open fun ensureLayoutForBoundingRect_inTextContainer(bounds: Any, container: NSTextContainer): Unit {
        Native.objc_msgSend("void", this, "ensureLayoutForBoundingRect:inTextContainer:", bounds, container)
    }

    public open fun insertGlyphs_length_forStartingGlyphAtIndex_characterIndex(glyphs: Pointer<Int>, length: Int, glyphIndex: Int, charIndex: Int): Unit {
        Native.objc_msgSend("void", this, "insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:", glyphs, length, glyphIndex, charIndex)
    }

    public open fun insertGlyph_atGlyphIndex_characterIndex(glyph: Int, glyphIndex: Int, charIndex: Int): Unit {
        Native.objc_msgSend("void", this, "insertGlyph:atGlyphIndex:characterIndex:", glyph, glyphIndex, charIndex)
    }

    public open fun replaceGlyphAtIndex_withGlyph(glyphIndex: Int, newGlyph: Int): Unit {
        Native.objc_msgSend("void", this, "replaceGlyphAtIndex:withGlyph:", glyphIndex, newGlyph)
    }

    public open fun deleteGlyphsInRange(glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "deleteGlyphsInRange:", glyphRange)
    }

    public open fun setCharacterIndex_forGlyphAtIndex(charIndex: Int, glyphIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setCharacterIndex:forGlyphAtIndex:", charIndex, glyphIndex)
    }

    public open fun setIntAttribute_value_forGlyphAtIndex(attributeTag: Int, `val`: Int, glyphIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setIntAttribute:value:forGlyphAtIndex:", attributeTag, `val`, glyphIndex)
    }

    public open fun invalidateGlyphsOnLayoutInvalidationForGlyphRange(glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "invalidateGlyphsOnLayoutInvalidationForGlyphRange:", glyphRange)
    }

    public open fun numberOfGlyphs(): Int =
        Native.objc_msgSend("int", this, "numberOfGlyphs") as Int

    public open fun glyphAtIndex_isValidIndex(glyphIndex: Int, isValidIndex: Pointer<Boolean>): Int =
        Native.objc_msgSend("int", this, "glyphAtIndex:isValidIndex:", glyphIndex, isValidIndex) as Int

    public open fun glyphAtIndex(glyphIndex: Int): Int =
        Native.objc_msgSend("int", this, "glyphAtIndex:", glyphIndex) as Int

    public open fun isValidGlyphIndex(glyphIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "isValidGlyphIndex:", glyphIndex) as Boolean

    public open fun characterIndexForGlyphAtIndex(glyphIndex: Int): Int =
        Native.objc_msgSend("int", this, "characterIndexForGlyphAtIndex:", glyphIndex) as Int

    public open fun glyphIndexForCharacterAtIndex(charIndex: Int): Int =
        Native.objc_msgSend("int", this, "glyphIndexForCharacterAtIndex:", charIndex) as Int

    public open fun intAttribute_forGlyphAtIndex(attributeTag: Int, glyphIndex: Int): Int =
        Native.objc_msgSend("int", this, "intAttribute:forGlyphAtIndex:", attributeTag, glyphIndex) as Int

    public open fun getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits(glyphRange: Any, glyphBuffer: Pointer<Int>, charIndexBuffer: Pointer<Int>, inscribeBuffer: Pointer<Any>, elasticBuffer: Pointer<Boolean>): Int =
        Native.objc_msgSend("int", this, "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:", glyphRange, glyphBuffer, charIndexBuffer, inscribeBuffer, elasticBuffer) as Int

    public open fun getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits_bidiLevels(glyphRange: Any, glyphBuffer: Pointer<Int>, charIndexBuffer: Pointer<Int>, inscribeBuffer: Pointer<Any>, elasticBuffer: Pointer<Boolean>, bidiLevelBuffer: Pointer<Byte>): Int =
        Native.objc_msgSend("int", this, "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:", glyphRange, glyphBuffer, charIndexBuffer, inscribeBuffer, elasticBuffer, bidiLevelBuffer) as Int

    public open fun getGlyphs_range(glyphArray: Pointer<Int>, glyphRange: Any): Int =
        Native.objc_msgSend("int", this, "getGlyphs:range:", glyphArray, glyphRange) as Int

    public open fun setTextContainer_forGlyphRange(container: NSTextContainer, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setTextContainer:forGlyphRange:", container, glyphRange)
    }

    public open fun setLineFragmentRect_forGlyphRange_usedRect(fragmentRect: Any, glyphRange: Any, usedRect: Any): Unit {
        Native.objc_msgSend("void", this, "setLineFragmentRect:forGlyphRange:usedRect:", fragmentRect, glyphRange, usedRect)
    }

    public open fun setExtraLineFragmentRect_usedRect_textContainer(fragmentRect: Any, usedRect: Any, container: NSTextContainer): Unit {
        Native.objc_msgSend("void", this, "setExtraLineFragmentRect:usedRect:textContainer:", fragmentRect, usedRect, container)
    }

    public open fun setLocation_forStartOfGlyphRange(location: Any, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setLocation:forStartOfGlyphRange:", location, glyphRange)
    }

    public open fun setLocations_startingGlyphIndexes_count_forGlyphRange(locations: Pointer<Any>, glyphIndexes: Pointer<Int>, count: Int, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setLocations:startingGlyphIndexes:count:forGlyphRange:", locations, glyphIndexes, count, glyphRange)
    }

    public open fun setNotShownAttribute_forGlyphAtIndex(flag: Boolean, glyphIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setNotShownAttribute:forGlyphAtIndex:", flag, glyphIndex)
    }

    public open fun setDrawsOutsideLineFragment_forGlyphAtIndex(flag: Boolean, glyphIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setDrawsOutsideLineFragment:forGlyphAtIndex:", flag, glyphIndex)
    }

    public open fun setAttachmentSize_forGlyphRange(attachmentSize: Any, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setAttachmentSize:forGlyphRange:", attachmentSize, glyphRange)
    }

    public open fun getFirstUnlaidCharacterIndex_glyphIndex(charIndex: Pointer<Int>, glyphIndex: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "getFirstUnlaidCharacterIndex:glyphIndex:", charIndex, glyphIndex)
    }

    public open fun firstUnlaidCharacterIndex(): Int =
        Native.objc_msgSend("int", this, "firstUnlaidCharacterIndex") as Int

    public open fun firstUnlaidGlyphIndex(): Int =
        Native.objc_msgSend("int", this, "firstUnlaidGlyphIndex") as Int

    public open fun textContainerForGlyphAtIndex_effectiveRange(glyphIndex: Int, effectiveGlyphRange: Pointer<Any>): NSTextContainer =
        Native.objc_msgSend("class objc.NSTextContainer", this, "textContainerForGlyphAtIndex:effectiveRange:", glyphIndex, effectiveGlyphRange) as NSTextContainer

    public open fun usedRectForTextContainer(container: NSTextContainer): Any =
        Native.objc_msgSend("class objc.Any", this, "usedRectForTextContainer:", container)

    public open fun lineFragmentRectForGlyphAtIndex_effectiveRange(glyphIndex: Int, effectiveGlyphRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "lineFragmentRectForGlyphAtIndex:effectiveRange:", glyphIndex, effectiveGlyphRange)

    public open fun lineFragmentUsedRectForGlyphAtIndex_effectiveRange(glyphIndex: Int, effectiveGlyphRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:", glyphIndex, effectiveGlyphRange)

    public open fun lineFragmentRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: Int, effectiveGlyphRange: Pointer<Any>, flag: Boolean): Any =
        Native.objc_msgSend("class objc.Any", this, "lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:", glyphIndex, effectiveGlyphRange, flag)

    public open fun lineFragmentUsedRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: Int, effectiveGlyphRange: Pointer<Any>, flag: Boolean): Any =
        Native.objc_msgSend("class objc.Any", this, "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:", glyphIndex, effectiveGlyphRange, flag)

    public open fun textContainerForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: Int, effectiveGlyphRange: Pointer<Any>, flag: Boolean): NSTextContainer =
        Native.objc_msgSend("class objc.NSTextContainer", this, "textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:", glyphIndex, effectiveGlyphRange, flag) as NSTextContainer

    public open fun extraLineFragmentRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "extraLineFragmentRect")

    public open fun extraLineFragmentUsedRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "extraLineFragmentUsedRect")

    public open fun extraLineFragmentTextContainer(): NSTextContainer =
        Native.objc_msgSend("class objc.NSTextContainer", this, "extraLineFragmentTextContainer") as NSTextContainer

    public open fun locationForGlyphAtIndex(glyphIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "locationForGlyphAtIndex:", glyphIndex)

    public open fun notShownAttributeForGlyphAtIndex(glyphIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "notShownAttributeForGlyphAtIndex:", glyphIndex) as Boolean

    public open fun drawsOutsideLineFragmentForGlyphAtIndex(glyphIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "drawsOutsideLineFragmentForGlyphAtIndex:", glyphIndex) as Boolean

    public open fun attachmentSizeForGlyphAtIndex(glyphIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "attachmentSizeForGlyphAtIndex:", glyphIndex)

    public open fun setLayoutRect_forTextBlock_glyphRange(rect: Any, block: NSTextBlock, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setLayoutRect:forTextBlock:glyphRange:", rect, block, glyphRange)
    }

    public open fun setBoundsRect_forTextBlock_glyphRange(rect: Any, block: NSTextBlock, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setBoundsRect:forTextBlock:glyphRange:", rect, block, glyphRange)
    }

    public open fun layoutRectForTextBlock_glyphRange(block: NSTextBlock, glyphRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "layoutRectForTextBlock:glyphRange:", block, glyphRange)

    public open fun boundsRectForTextBlock_glyphRange(block: NSTextBlock, glyphRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "boundsRectForTextBlock:glyphRange:", block, glyphRange)

    public open fun layoutRectForTextBlock_atIndex_effectiveRange(block: NSTextBlock, glyphIndex: Int, effectiveGlyphRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "layoutRectForTextBlock:atIndex:effectiveRange:", block, glyphIndex, effectiveGlyphRange)

    public open fun boundsRectForTextBlock_atIndex_effectiveRange(block: NSTextBlock, glyphIndex: Int, effectiveGlyphRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "boundsRectForTextBlock:atIndex:effectiveRange:", block, glyphIndex, effectiveGlyphRange)

    public open fun glyphRangeForCharacterRange_actualCharacterRange(charRange: Any, actualCharRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "glyphRangeForCharacterRange:actualCharacterRange:", charRange, actualCharRange)

    public open fun characterRangeForGlyphRange_actualGlyphRange(glyphRange: Any, actualGlyphRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "characterRangeForGlyphRange:actualGlyphRange:", glyphRange, actualGlyphRange)

    public open fun glyphRangeForTextContainer(container: NSTextContainer): Any =
        Native.objc_msgSend("class objc.Any", this, "glyphRangeForTextContainer:", container)

    public open fun rangeOfNominallySpacedGlyphsContainingIndex(glyphIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfNominallySpacedGlyphsContainingIndex:", glyphIndex)

    public open fun rectArrayForCharacterRange_withinSelectedCharacterRange_inTextContainer_rectCount(charRange: Any, selCharRange: Any, container: NSTextContainer, rectCount: Pointer<Int>): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:", charRange, selCharRange, container, rectCount) as Pointer<Any>

    public open fun rectArrayForGlyphRange_withinSelectedGlyphRange_inTextContainer_rectCount(glyphRange: Any, selGlyphRange: Any, container: NSTextContainer, rectCount: Pointer<Int>): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:", glyphRange, selGlyphRange, container, rectCount) as Pointer<Any>

    public open fun boundingRectForGlyphRange_inTextContainer(glyphRange: Any, container: NSTextContainer): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingRectForGlyphRange:inTextContainer:", glyphRange, container)

    public open fun glyphRangeForBoundingRect_inTextContainer(bounds: Any, container: NSTextContainer): Any =
        Native.objc_msgSend("class objc.Any", this, "glyphRangeForBoundingRect:inTextContainer:", bounds, container)

    public open fun glyphRangeForBoundingRectWithoutAdditionalLayout_inTextContainer(bounds: Any, container: NSTextContainer): Any =
        Native.objc_msgSend("class objc.Any", this, "glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:", bounds, container)

    public open fun glyphIndexForPoint_inTextContainer_fractionOfDistanceThroughGlyph(point: Any, container: NSTextContainer, partialFraction: Pointer<Double>): Int =
        Native.objc_msgSend("int", this, "glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:", point, container, partialFraction) as Int

    public open fun glyphIndexForPoint_inTextContainer(point: Any, container: NSTextContainer): Int =
        Native.objc_msgSend("int", this, "glyphIndexForPoint:inTextContainer:", point, container) as Int

    public open fun fractionOfDistanceThroughGlyphForPoint_inTextContainer(point: Any, container: NSTextContainer): Double =
        Native.objc_msgSend("double", this, "fractionOfDistanceThroughGlyphForPoint:inTextContainer:", point, container) as Double

    public open fun characterIndexForPoint_inTextContainer_fractionOfDistanceBetweenInsertionPoints(point: Any, container: NSTextContainer, partialFraction: Pointer<Double>): Int =
        Native.objc_msgSend("int", this, "characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:", point, container, partialFraction) as Int

    public open fun getLineFragmentInsertionPointsForCharacterAtIndex_alternatePositions_inDisplayOrder_positions_characterIndexes(charIndex: Int, aFlag: Boolean, dFlag: Boolean, positions: Pointer<Double>, charIndexes: Pointer<Int>): Int =
        Native.objc_msgSend("int", this, "getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:", charIndex, aFlag, dFlag, positions, charIndexes) as Int

    public open fun temporaryAttributesAtCharacterIndex_effectiveRange(charIndex: Int, effectiveCharRange: Pointer<Any>): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "temporaryAttributesAtCharacterIndex:effectiveRange:", charIndex, effectiveCharRange) as NSDictionary

    public open fun setTemporaryAttributes_forCharacterRange(attrs: NSDictionary, charRange: Any): Unit {
        Native.objc_msgSend("void", this, "setTemporaryAttributes:forCharacterRange:", attrs, charRange)
    }

    public open fun addTemporaryAttributes_forCharacterRange(attrs: NSDictionary, charRange: Any): Unit {
        Native.objc_msgSend("void", this, "addTemporaryAttributes:forCharacterRange:", attrs, charRange)
    }

    public open fun removeTemporaryAttribute_forCharacterRange(attrName: NSString, charRange: Any): Unit {
        Native.objc_msgSend("void", this, "removeTemporaryAttribute:forCharacterRange:", attrName, charRange)
    }

    public open fun temporaryAttribute_atCharacterIndex_effectiveRange(attrName: NSString, location: Int, range: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "temporaryAttribute:atCharacterIndex:effectiveRange:", attrName, location, range) as ObjCObject

    public open fun temporaryAttribute_atCharacterIndex_longestEffectiveRange_inRange(attrName: NSString, location: Int, range: Pointer<Any>, rangeLimit: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:", attrName, location, range, rangeLimit) as ObjCObject

    public open fun temporaryAttributesAtCharacterIndex_longestEffectiveRange_inRange(location: Int, range: Pointer<Any>, rangeLimit: Any): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:", location, range, rangeLimit) as NSDictionary

    public open fun addTemporaryAttribute_value_forCharacterRange(attrName: NSString, value: ObjCObject, charRange: Any): Unit {
        Native.objc_msgSend("void", this, "addTemporaryAttribute:value:forCharacterRange:", attrName, value, charRange)
    }

    public open fun substituteFontForFont(originalFont: NSFont): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "substituteFontForFont:", originalFont) as NSFont

    public open fun defaultLineHeightForFont(theFont: NSFont): Double =
        Native.objc_msgSend("double", this, "defaultLineHeightForFont:", theFont) as Double

    public open fun defaultBaselineOffsetForFont(theFont: NSFont): Double =
        Native.objc_msgSend("double", this, "defaultBaselineOffsetForFont:", theFont) as Double

    public open fun usesFontLeading(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFontLeading") as Boolean

    public open fun setUsesFontLeading(usesFontLeading: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFontLeading:", usesFontLeading)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSGlyphStorage.metaclass, NSLayoutManager_NSTextViewSupport.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSLayoutManager")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextContainer(pointer: Long) : NSObject(pointer), NSCoding, NSTextLayoutOrientationProvider {
    public open fun initWithContainerSize(size: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContainerSize:", size) as ObjCObject

    public open fun layoutManager(): NSLayoutManager =
        Native.objc_msgSend("class objc.NSLayoutManager", this, "layoutManager") as NSLayoutManager

    public open fun setLayoutManager(layoutManager: NSLayoutManager): Unit {
        Native.objc_msgSend("void", this, "setLayoutManager:", layoutManager)
    }

    public open fun replaceLayoutManager(newLayoutManager: NSLayoutManager): Unit {
        Native.objc_msgSend("void", this, "replaceLayoutManager:", newLayoutManager)
    }

    public open fun textView(): NSTextView =
        Native.objc_msgSend("class objc.NSTextView", this, "textView") as NSTextView

    public open fun setTextView(textView: NSTextView): Unit {
        Native.objc_msgSend("void", this, "setTextView:", textView)
    }

    public open fun widthTracksTextView(): Boolean =
        Native.objc_msgSend("boolean", this, "widthTracksTextView") as Boolean

    public open fun setWidthTracksTextView(widthTracksTextView: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWidthTracksTextView:", widthTracksTextView)
    }

    public open fun heightTracksTextView(): Boolean =
        Native.objc_msgSend("boolean", this, "heightTracksTextView") as Boolean

    public open fun setHeightTracksTextView(heightTracksTextView: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHeightTracksTextView:", heightTracksTextView)
    }

    public open fun containerSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "containerSize")

    public open fun setContainerSize(containerSize: Any): Unit {
        Native.objc_msgSend("void", this, "setContainerSize:", containerSize)
    }

    public open fun lineFragmentPadding(): Double =
        Native.objc_msgSend("double", this, "lineFragmentPadding") as Double

    public open fun setLineFragmentPadding(lineFragmentPadding: Double): Unit {
        Native.objc_msgSend("void", this, "setLineFragmentPadding:", lineFragmentPadding)
    }

    public open fun lineFragmentRectForProposedRect_sweepDirection_movementDirection_remainingRect(proposedRect: Any, sweepDirection: Any, movementDirection: Any, remainingRect: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:", proposedRect, sweepDirection, movementDirection, remainingRect)

    public open fun isSimpleRectangularTextContainer(): Boolean =
        Native.objc_msgSend("boolean", this, "isSimpleRectangularTextContainer") as Boolean

    public open fun containsPoint(point: Any): Boolean =
        Native.objc_msgSend("boolean", this, "containsPoint:", point) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSTextLayoutOrientationProvider.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextContainer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTokenFieldCell(pointer: Long) : NSTextFieldCell(pointer) {
    public open fun tokenStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "tokenStyle")

    public open fun setTokenStyle(tokenStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setTokenStyle:", tokenStyle)
    }

    public open fun completionDelay(): Double =
        Native.objc_msgSend("double", this, "completionDelay") as Double

    public open fun setCompletionDelay(completionDelay: Double): Unit {
        Native.objc_msgSend("void", this, "setCompletionDelay:", completionDelay)
    }

    public open fun tokenizingCharacterSet(): NSCharacterSet =
        Native.objc_msgSend("class objc.NSCharacterSet", this, "tokenizingCharacterSet") as NSCharacterSet

    public open fun setTokenizingCharacterSet(tokenizingCharacterSet: NSCharacterSet): Unit {
        Native.objc_msgSend("void", this, "setTokenizingCharacterSet:", tokenizingCharacterSet)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setUpFieldEditorAttributes(textObj: NSText): NSText =
        Native.objc_msgSend("class objc.NSText", this, "setUpFieldEditorAttributes:", textObj) as NSText

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSTextFieldCell.metaclass {
        public open fun defaultCompletionDelay(): Double =
            Native.objc_msgSend("double", this, "defaultCompletionDelay") as Double

        public open fun defaultTokenizingCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "defaultTokenizingCharacterSet") as NSCharacterSet

    }

    companion object : NSObject(Native.objc_getClass("NSTokenFieldCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTokenField(pointer: Long) : NSTextField(pointer) {
    override fun setDelegate(anObject: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", anObject)
    }

    override fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun tokenStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "tokenStyle")

    public open fun setTokenStyle(tokenStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setTokenStyle:", tokenStyle)
    }

    public open fun completionDelay(): Double =
        Native.objc_msgSend("double", this, "completionDelay") as Double

    public open fun setCompletionDelay(completionDelay: Double): Unit {
        Native.objc_msgSend("void", this, "setCompletionDelay:", completionDelay)
    }

    public open fun tokenizingCharacterSet(): NSCharacterSet =
        Native.objc_msgSend("class objc.NSCharacterSet", this, "tokenizingCharacterSet") as NSCharacterSet

    public open fun setTokenizingCharacterSet(tokenizingCharacterSet: NSCharacterSet): Unit {
        Native.objc_msgSend("void", this, "setTokenizingCharacterSet:", tokenizingCharacterSet)
    }

    override fun acceptsFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstResponder") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSTextField.metaclass {
        public open fun defaultCompletionDelay(): Double =
            Native.objc_msgSend("double", this, "defaultCompletionDelay") as Double

        public open fun defaultTokenizingCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "defaultTokenizingCharacterSet") as NSCharacterSet

    }

    companion object : NSObject(Native.objc_getClass("NSTokenField")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTrackingArea(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun initWithRect_options_owner_userInfo(rect: Any, options: Any, owner: ObjCObject, userInfo: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRect:options:owner:userInfo:", rect, options, owner, userInfo) as ObjCObject

    public open fun rect(): Any =
        Native.objc_msgSend("class objc.Any", this, "rect")

    public open fun options(): Any =
        Native.objc_msgSend("class objc.Any", this, "options")

    public open fun owner(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "owner") as ObjCObject

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTrackingArea")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSWindowController(pointer: Long) : NSResponder(pointer), NSCoding, NSSeguePerforming, NSWindowController_NSWindowControllerStoryboardingMethods, NSWindowController_NSWindowControllerDismissing {
    public open fun initWithWindow(window: NSWindow): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithWindow:", window) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun initWithWindowNibName(windowNibName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithWindowNibName:", windowNibName) as ObjCObject

    public open fun initWithWindowNibName_owner(windowNibName: NSString, owner: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithWindowNibName:owner:", windowNibName, owner) as ObjCObject

    public open fun initWithWindowNibPath_owner(windowNibPath: NSString, owner: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithWindowNibPath:owner:", windowNibPath, owner) as ObjCObject

    public open fun windowNibName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "windowNibName") as NSString

    public open fun windowNibPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "windowNibPath") as NSString

    public open fun owner(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "owner") as ObjCObject

    public open fun windowFrameAutosaveName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "windowFrameAutosaveName") as NSString

    public open fun setWindowFrameAutosaveName(windowFrameAutosaveName: NSString): Unit {
        Native.objc_msgSend("void", this, "setWindowFrameAutosaveName:", windowFrameAutosaveName)
    }

    public open fun shouldCascadeWindows(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldCascadeWindows") as Boolean

    public open fun setShouldCascadeWindows(shouldCascadeWindows: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldCascadeWindows:", shouldCascadeWindows)
    }

    public open fun document(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "document") as ObjCObject

    public open fun setDocument(document: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDocument:", document)
    }

    public open fun setDocumentEdited(dirtyFlag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDocumentEdited:", dirtyFlag)
    }

    public open fun shouldCloseDocument(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldCloseDocument") as Boolean

    public open fun setShouldCloseDocument(shouldCloseDocument: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldCloseDocument:", shouldCloseDocument)
    }

    public open fun synchronizeWindowTitleWithDocumentName(): Unit {
        Native.objc_msgSend("void", this, "synchronizeWindowTitleWithDocumentName")
    }

    public open fun windowTitleForDocumentDisplayName(displayName: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "windowTitleForDocumentDisplayName:", displayName) as NSString

    public open fun contentViewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "contentViewController") as NSViewController

    public open fun setContentViewController(contentViewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "setContentViewController:", contentViewController)
    }

    public open fun window(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "window") as NSWindow

    public open fun setWindow(window: NSWindow): Unit {
        Native.objc_msgSend("void", this, "setWindow:", window)
    }

    public open fun isWindowLoaded(): Boolean =
        Native.objc_msgSend("boolean", this, "isWindowLoaded") as Boolean

    public open fun windowWillLoad(): Unit {
        Native.objc_msgSend("void", this, "windowWillLoad")
    }

    public open fun windowDidLoad(): Unit {
        Native.objc_msgSend("void", this, "windowDidLoad")
    }

    public open fun loadWindow(): Unit {
        Native.objc_msgSend("void", this, "loadWindow")
    }

    public open fun close(): Unit {
        Native.objc_msgSend("void", this, "close")
    }

    public open fun showWindow(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "showWindow:", sender)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSResponder.metaclass, NSCoding.metaclass, NSSeguePerforming.metaclass, NSWindowController_NSWindowControllerStoryboardingMethods.metaclass, NSWindowController_NSWindowControllerDismissing.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSWindowController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSComboBox(pointer: Long) : NSTextField(pointer) {
    public open fun hasVerticalScroller(): Boolean =
        Native.objc_msgSend("boolean", this, "hasVerticalScroller") as Boolean

    public open fun setHasVerticalScroller(hasVerticalScroller: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasVerticalScroller:", hasVerticalScroller)
    }

    public open fun intercellSpacing(): Any =
        Native.objc_msgSend("class objc.Any", this, "intercellSpacing")

    public open fun setIntercellSpacing(intercellSpacing: Any): Unit {
        Native.objc_msgSend("void", this, "setIntercellSpacing:", intercellSpacing)
    }

    public open fun itemHeight(): Double =
        Native.objc_msgSend("double", this, "itemHeight") as Double

    public open fun setItemHeight(itemHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setItemHeight:", itemHeight)
    }

    public open fun numberOfVisibleItems(): Int =
        Native.objc_msgSend("int", this, "numberOfVisibleItems") as Int

    public open fun setNumberOfVisibleItems(numberOfVisibleItems: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfVisibleItems:", numberOfVisibleItems)
    }

    public open fun isButtonBordered(): Boolean =
        Native.objc_msgSend("boolean", this, "isButtonBordered") as Boolean

    public open fun setButtonBordered(buttonBordered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setButtonBordered:", buttonBordered)
    }

    public open fun reloadData(): Unit {
        Native.objc_msgSend("void", this, "reloadData")
    }

    public open fun noteNumberOfItemsChanged(): Unit {
        Native.objc_msgSend("void", this, "noteNumberOfItemsChanged")
    }

    public open fun usesDataSource(): Boolean =
        Native.objc_msgSend("boolean", this, "usesDataSource") as Boolean

    public open fun setUsesDataSource(usesDataSource: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesDataSource:", usesDataSource)
    }

    public open fun scrollItemAtIndexToTop(index: Int): Unit {
        Native.objc_msgSend("void", this, "scrollItemAtIndexToTop:", index)
    }

    public open fun scrollItemAtIndexToVisible(index: Int): Unit {
        Native.objc_msgSend("void", this, "scrollItemAtIndexToVisible:", index)
    }

    public open fun selectItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "selectItemAtIndex:", index)
    }

    public open fun deselectItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "deselectItemAtIndex:", index)
    }

    public open fun indexOfSelectedItem(): Int =
        Native.objc_msgSend("int", this, "indexOfSelectedItem") as Int

    public open fun numberOfItems(): Int =
        Native.objc_msgSend("int", this, "numberOfItems") as Int

    public open fun completes(): Boolean =
        Native.objc_msgSend("boolean", this, "completes") as Boolean

    public open fun setCompletes(completes: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCompletes:", completes)
    }

    override fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    override fun setDelegate(anObject: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", anObject)
    }

    public open fun dataSource(): Any =
        Native.objc_msgSend("class objc.Any", this, "dataSource")

    public open fun setDataSource(dataSource: Any): Unit {
        Native.objc_msgSend("void", this, "setDataSource:", dataSource)
    }

    public open fun addItemWithObjectValue(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addItemWithObjectValue:", `object`)
    }

    public open fun addItemsWithObjectValues(objects: NSArray): Unit {
        Native.objc_msgSend("void", this, "addItemsWithObjectValues:", objects)
    }

    public open fun insertItemWithObjectValue_atIndex(`object`: ObjCObject, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertItemWithObjectValue:atIndex:", `object`, index)
    }

    public open fun removeItemWithObjectValue(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeItemWithObjectValue:", `object`)
    }

    public open fun removeItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeItemAtIndex:", index)
    }

    public open fun removeAllItems(): Unit {
        Native.objc_msgSend("void", this, "removeAllItems")
    }

    public open fun selectItemWithObjectValue(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectItemWithObjectValue:", `object`)
    }

    public open fun itemObjectValueAtIndex(index: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "itemObjectValueAtIndex:", index) as ObjCObject

    public open fun objectValueOfSelectedItem(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectValueOfSelectedItem") as ObjCObject

    public open fun indexOfItemWithObjectValue(`object`: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithObjectValue:", `object`) as Int

    public open fun objectValues(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "objectValues") as NSArray

    override fun acceptsFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstResponder") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSTextField.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSComboBox")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSComboBoxCell(pointer: Long) : NSTextFieldCell(pointer) {
    public open fun hasVerticalScroller(): Boolean =
        Native.objc_msgSend("boolean", this, "hasVerticalScroller") as Boolean

    public open fun setHasVerticalScroller(hasVerticalScroller: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasVerticalScroller:", hasVerticalScroller)
    }

    public open fun intercellSpacing(): Any =
        Native.objc_msgSend("class objc.Any", this, "intercellSpacing")

    public open fun setIntercellSpacing(intercellSpacing: Any): Unit {
        Native.objc_msgSend("void", this, "setIntercellSpacing:", intercellSpacing)
    }

    public open fun itemHeight(): Double =
        Native.objc_msgSend("double", this, "itemHeight") as Double

    public open fun setItemHeight(itemHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setItemHeight:", itemHeight)
    }

    public open fun numberOfVisibleItems(): Int =
        Native.objc_msgSend("int", this, "numberOfVisibleItems") as Int

    public open fun setNumberOfVisibleItems(numberOfVisibleItems: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfVisibleItems:", numberOfVisibleItems)
    }

    public open fun isButtonBordered(): Boolean =
        Native.objc_msgSend("boolean", this, "isButtonBordered") as Boolean

    public open fun setButtonBordered(buttonBordered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setButtonBordered:", buttonBordered)
    }

    public open fun reloadData(): Unit {
        Native.objc_msgSend("void", this, "reloadData")
    }

    public open fun noteNumberOfItemsChanged(): Unit {
        Native.objc_msgSend("void", this, "noteNumberOfItemsChanged")
    }

    public open fun usesDataSource(): Boolean =
        Native.objc_msgSend("boolean", this, "usesDataSource") as Boolean

    public open fun setUsesDataSource(usesDataSource: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesDataSource:", usesDataSource)
    }

    public open fun scrollItemAtIndexToTop(index: Int): Unit {
        Native.objc_msgSend("void", this, "scrollItemAtIndexToTop:", index)
    }

    public open fun scrollItemAtIndexToVisible(index: Int): Unit {
        Native.objc_msgSend("void", this, "scrollItemAtIndexToVisible:", index)
    }

    public open fun selectItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "selectItemAtIndex:", index)
    }

    public open fun deselectItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "deselectItemAtIndex:", index)
    }

    public open fun indexOfSelectedItem(): Int =
        Native.objc_msgSend("int", this, "indexOfSelectedItem") as Int

    public open fun numberOfItems(): Int =
        Native.objc_msgSend("int", this, "numberOfItems") as Int

    public open fun completes(): Boolean =
        Native.objc_msgSend("boolean", this, "completes") as Boolean

    public open fun setCompletes(completes: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCompletes:", completes)
    }

    public open fun completedString(string: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "completedString:", string) as NSString

    public open fun dataSource(): Any =
        Native.objc_msgSend("class objc.Any", this, "dataSource")

    public open fun setDataSource(dataSource: Any): Unit {
        Native.objc_msgSend("void", this, "setDataSource:", dataSource)
    }

    public open fun addItemWithObjectValue(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addItemWithObjectValue:", `object`)
    }

    public open fun addItemsWithObjectValues(objects: NSArray): Unit {
        Native.objc_msgSend("void", this, "addItemsWithObjectValues:", objects)
    }

    public open fun insertItemWithObjectValue_atIndex(`object`: ObjCObject, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertItemWithObjectValue:atIndex:", `object`, index)
    }

    public open fun removeItemWithObjectValue(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeItemWithObjectValue:", `object`)
    }

    public open fun removeItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeItemAtIndex:", index)
    }

    public open fun removeAllItems(): Unit {
        Native.objc_msgSend("void", this, "removeAllItems")
    }

    public open fun selectItemWithObjectValue(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectItemWithObjectValue:", `object`)
    }

    public open fun itemObjectValueAtIndex(index: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "itemObjectValueAtIndex:", index) as ObjCObject

    public open fun objectValueOfSelectedItem(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectValueOfSelectedItem") as ObjCObject

    public open fun indexOfItemWithObjectValue(`object`: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithObjectValue:", `object`) as Int

    public open fun objectValues(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "objectValues") as NSArray

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setUpFieldEditorAttributes(textObj: NSText): NSText =
        Native.objc_msgSend("class objc.NSText", this, "setUpFieldEditorAttributes:", textObj) as NSText

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSTextFieldCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSComboBoxCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSInputManager(pointer: Long) : NSObject(pointer), NSTextInput {
    public open fun initWithName_host(inputServerName: NSString, hostName: NSString): NSInputManager =
        Native.objc_msgSend("class objc.NSInputManager", this, "initWithName:host:", inputServerName, hostName) as NSInputManager

    public open fun localizedInputManagerName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedInputManagerName") as NSString

    public open fun markedTextAbandoned(cli: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "markedTextAbandoned:", cli)
    }

    public open fun markedTextSelectionChanged_client(newSel: Any, cli: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "markedTextSelectionChanged:client:", newSel, cli)
    }

    public open fun wantsToInterpretAllKeystrokes(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsToInterpretAllKeystrokes") as Boolean

    public open fun language(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "language") as NSString

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun server(): NSInputServer =
        Native.objc_msgSend("class objc.NSInputServer", this, "server") as NSInputServer

    public open fun wantsToHandleMouseEvents(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsToHandleMouseEvents") as Boolean

    public open fun handleMouseEvent(theMouseEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "handleMouseEvent:", theMouseEvent) as Boolean

    public open fun wantsToDelayTextChangeNotifications(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsToDelayTextChangeNotifications") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSTextInput.metaclass {
        public open fun currentInputManager(): NSInputManager =
            Native.objc_msgSend("class objc.NSInputManager", this, "currentInputManager") as NSInputManager

        public open fun cycleToNextInputLanguage(sender: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "cycleToNextInputLanguage:", sender)
        }

        public open fun cycleToNextInputServerInLanguage(sender: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "cycleToNextInputServerInLanguage:", sender)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSInputManager")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextAttachmentCell(pointer: Long) : NSCell(pointer), NSTextAttachmentCellProtocol {
    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSCell.metaclass, NSTextAttachmentCellProtocol.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextAttachmentCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextAttachment(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun initWithFileWrapper(fileWrapper: NSFileWrapper): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFileWrapper:", fileWrapper) as ObjCObject

    public open fun fileWrapper(): NSFileWrapper =
        Native.objc_msgSend("class objc.NSFileWrapper", this, "fileWrapper") as NSFileWrapper

    public open fun setFileWrapper(fileWrapper: NSFileWrapper): Unit {
        Native.objc_msgSend("void", this, "setFileWrapper:", fileWrapper)
    }

    public open fun attachmentCell(): Any =
        Native.objc_msgSend("class objc.Any", this, "attachmentCell")

    public open fun setAttachmentCell(attachmentCell: Any): Unit {
        Native.objc_msgSend("void", this, "setAttachmentCell:", attachmentCell)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextAttachment")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextView(pointer: Long) : NSText(pointer), NSUserInterfaceValidations, NSTextInputClient, NSTextLayoutOrientationProvider, NSDraggingSource, NSTextInput, NSAccessibilityNavigableStaticText, NSTextView_NSCompletion, NSTextView_NSPasteboard, NSTextView_NSDragging, NSTextView_NSSharing, NSTextView_NSTextChecking, NSTextView_NSQuickLookPreview, NSTextView_NSTextView_SharingService, NSTextView_NSDeprecated {
    public open fun initWithFrame_textContainer(frameRect: Any, container: NSTextContainer): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:textContainer:", frameRect, container) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    public open fun textContainer(): NSTextContainer =
        Native.objc_msgSend("class objc.NSTextContainer", this, "textContainer") as NSTextContainer

    public open fun setTextContainer(textContainer: NSTextContainer): Unit {
        Native.objc_msgSend("void", this, "setTextContainer:", textContainer)
    }

    public open fun replaceTextContainer(newContainer: NSTextContainer): Unit {
        Native.objc_msgSend("void", this, "replaceTextContainer:", newContainer)
    }

    public open fun textContainerInset(): Any =
        Native.objc_msgSend("class objc.Any", this, "textContainerInset")

    public open fun setTextContainerInset(textContainerInset: Any): Unit {
        Native.objc_msgSend("void", this, "setTextContainerInset:", textContainerInset)
    }

    public open fun textContainerOrigin(): Any =
        Native.objc_msgSend("class objc.Any", this, "textContainerOrigin")

    public open fun invalidateTextContainerOrigin(): Unit {
        Native.objc_msgSend("void", this, "invalidateTextContainerOrigin")
    }

    public open fun layoutManager(): NSLayoutManager =
        Native.objc_msgSend("class objc.NSLayoutManager", this, "layoutManager") as NSLayoutManager

    public open fun textStorage(): NSTextStorage =
        Native.objc_msgSend("class objc.NSTextStorage", this, "textStorage") as NSTextStorage

    override fun insertText(insertString: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertText:", insertString)
    }

    public open fun setConstrainedFrameSize(desiredSize: Any): Unit {
        Native.objc_msgSend("void", this, "setConstrainedFrameSize:", desiredSize)
    }

    public open fun setAlignment_range(alignment: Any, range: Any): Unit {
        Native.objc_msgSend("void", this, "setAlignment:range:", alignment, range)
    }

    public open fun setBaseWritingDirection_range(writingDirection: Any, range: Any): Unit {
        Native.objc_msgSend("void", this, "setBaseWritingDirection:range:", writingDirection, range)
    }

    public open fun turnOffKerning(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "turnOffKerning:", sender)
    }

    public open fun tightenKerning(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "tightenKerning:", sender)
    }

    public open fun loosenKerning(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "loosenKerning:", sender)
    }

    public open fun useStandardKerning(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "useStandardKerning:", sender)
    }

    public open fun turnOffLigatures(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "turnOffLigatures:", sender)
    }

    public open fun useStandardLigatures(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "useStandardLigatures:", sender)
    }

    public open fun useAllLigatures(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "useAllLigatures:", sender)
    }

    public open fun raiseBaseline(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "raiseBaseline:", sender)
    }

    public open fun lowerBaseline(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "lowerBaseline:", sender)
    }

    public open fun toggleTraditionalCharacterShape(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleTraditionalCharacterShape:", sender)
    }

    public open fun outline(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "outline:", sender)
    }

    public open fun performFindPanelAction(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performFindPanelAction:", sender)
    }

    public open fun alignJustified(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "alignJustified:", sender)
    }

    override fun changeColor(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeColor:", sender)
    }

    public open fun changeAttributes(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeAttributes:", sender)
    }

    public open fun changeDocumentBackgroundColor(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeDocumentBackgroundColor:", sender)
    }

    public open fun orderFrontSpacingPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontSpacingPanel:", sender)
    }

    public open fun orderFrontLinkPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontLinkPanel:", sender)
    }

    public open fun orderFrontListPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontListPanel:", sender)
    }

    public open fun orderFrontTablePanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontTablePanel:", sender)
    }

    override fun rulerView_didMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): Unit {
        Native.objc_msgSend("void", this, "rulerView:didMoveMarker:", ruler, marker)
    }

    override fun rulerView_didRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): Unit {
        Native.objc_msgSend("void", this, "rulerView:didRemoveMarker:", ruler, marker)
    }

    override fun rulerView_didAddMarker(ruler: NSRulerView, marker: NSRulerMarker): Unit {
        Native.objc_msgSend("void", this, "rulerView:didAddMarker:", ruler, marker)
    }

    override fun rulerView_shouldMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): Boolean =
        Native.objc_msgSend("boolean", this, "rulerView:shouldMoveMarker:", ruler, marker) as Boolean

    override fun rulerView_shouldAddMarker(ruler: NSRulerView, marker: NSRulerMarker): Boolean =
        Native.objc_msgSend("boolean", this, "rulerView:shouldAddMarker:", ruler, marker) as Boolean

    override fun rulerView_willMoveMarker_toLocation(ruler: NSRulerView, marker: NSRulerMarker, location: Double): Double =
        Native.objc_msgSend("double", this, "rulerView:willMoveMarker:toLocation:", ruler, marker, location) as Double

    override fun rulerView_shouldRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): Boolean =
        Native.objc_msgSend("boolean", this, "rulerView:shouldRemoveMarker:", ruler, marker) as Boolean

    override fun rulerView_willAddMarker_atLocation(ruler: NSRulerView, marker: NSRulerMarker, location: Double): Double =
        Native.objc_msgSend("double", this, "rulerView:willAddMarker:atLocation:", ruler, marker, location) as Double

    override fun rulerView_handleMouseDown(ruler: NSRulerView, event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rulerView:handleMouseDown:", ruler, event)
    }

    public open fun setNeedsDisplayInRect_avoidAdditionalLayout(rect: Any, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNeedsDisplayInRect:avoidAdditionalLayout:", rect, flag)
    }

    public open fun shouldDrawInsertionPoint(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldDrawInsertionPoint") as Boolean

    public open fun drawInsertionPointInRect_color_turnedOn(rect: Any, color: NSColor, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "drawInsertionPointInRect:color:turnedOn:", rect, color, flag)
    }

    public open fun drawViewBackgroundInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "drawViewBackgroundInRect:", rect)
    }

    public open fun updateRuler(): Unit {
        Native.objc_msgSend("void", this, "updateRuler")
    }

    public open fun updateFontPanel(): Unit {
        Native.objc_msgSend("void", this, "updateFontPanel")
    }

    public open fun updateDragTypeRegistration(): Unit {
        Native.objc_msgSend("void", this, "updateDragTypeRegistration")
    }

    public open fun selectionRangeForProposedRange_granularity(proposedCharRange: Any, granularity: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "selectionRangeForProposedRange:granularity:", proposedCharRange, granularity)

    public open fun clickedOnLink_atIndex(link: ObjCObject, charIndex: Int): Unit {
        Native.objc_msgSend("void", this, "clickedOnLink:atIndex:", link, charIndex)
    }

    public open fun startSpeaking(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "startSpeaking:", sender)
    }

    public open fun stopSpeaking(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "stopSpeaking:", sender)
    }

    public open fun setLayoutOrientation(theOrientation: Any): Unit {
        Native.objc_msgSend("void", this, "setLayoutOrientation:", theOrientation)
    }

    public open fun changeLayoutOrientation(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeLayoutOrientation:", sender)
    }

    public open fun characterIndexForInsertionAtPoint(point: Any): Int =
        Native.objc_msgSend("int", this, "characterIndexForInsertionAtPoint:", point) as Int

    override fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    override fun changeFont(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeFont:", sender)
    }

    override fun complete(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "complete:", sender)
    }

    override fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    override fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    override fun importsGraphics(): Boolean =
        Native.objc_msgSend("boolean", this, "importsGraphics") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    override fun isFieldEditor(): Boolean =
        Native.objc_msgSend("boolean", this, "isFieldEditor") as Boolean

    override fun isRichText(): Boolean =
        Native.objc_msgSend("boolean", this, "isRichText") as Boolean

    override fun isRulerVisible(): Boolean =
        Native.objc_msgSend("boolean", this, "isRulerVisible") as Boolean

    override fun isSelectable(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectable") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun selectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectAll:", sender)
    }

    override fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    override fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    override fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    override fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    override fun setFieldEditor(fieldEditor: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFieldEditor:", fieldEditor)
    }

    override fun setImportsGraphics(importsGraphics: Boolean): Unit {
        Native.objc_msgSend("void", this, "setImportsGraphics:", importsGraphics)
    }

    override fun setRichText(richText: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRichText:", richText)
    }

    override fun setSelectable(selectable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectable:", selectable)
    }

    override fun setSelectedRange(charRange: Any): Unit {
        Native.objc_msgSend("void", this, "setSelectedRange:", charRange)
    }

    override fun setUsesFontPanel(usesFontPanel: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFontPanel:", usesFontPanel)
    }

    override fun usesFontPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFontPanel") as Boolean

    override fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    trait metaclass : NSText.metaclass, NSUserInterfaceValidations.metaclass, NSTextInputClient.metaclass, NSTextLayoutOrientationProvider.metaclass, NSDraggingSource.metaclass, NSTextInput.metaclass, NSAccessibilityNavigableStaticText.metaclass, NSTextView_NSCompletion.metaclass, NSTextView_NSPasteboard.metaclass, NSTextView_NSDragging.metaclass, NSTextView_NSSharing.metaclass, NSTextView_NSTextChecking.metaclass, NSTextView_NSQuickLookPreview.metaclass, NSTextView_NSTextView_SharingService.metaclass, NSTextView_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTableView(pointer: Long) : NSControl(pointer), NSUserInterfaceValidations, NSTextViewDelegate, NSDraggingSource, NSAccessibilityTable, NSTableView_NSDeprecated {
    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun setDataSource(aSource: Any): Unit {
        Native.objc_msgSend("void", this, "setDataSource:", aSource)
    }

    public open fun dataSource(): Any =
        Native.objc_msgSend("class objc.Any", this, "dataSource")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun headerView(): NSTableHeaderView =
        Native.objc_msgSend("class objc.NSTableHeaderView", this, "headerView") as NSTableHeaderView

    public open fun setHeaderView(headerView: NSTableHeaderView): Unit {
        Native.objc_msgSend("void", this, "setHeaderView:", headerView)
    }

    public open fun cornerView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "cornerView") as NSView

    public open fun setCornerView(cornerView: NSView): Unit {
        Native.objc_msgSend("void", this, "setCornerView:", cornerView)
    }

    public open fun allowsColumnReordering(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsColumnReordering") as Boolean

    public open fun setAllowsColumnReordering(allowsColumnReordering: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsColumnReordering:", allowsColumnReordering)
    }

    public open fun allowsColumnResizing(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsColumnResizing") as Boolean

    public open fun setAllowsColumnResizing(allowsColumnResizing: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsColumnResizing:", allowsColumnResizing)
    }

    public open fun columnAutoresizingStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "columnAutoresizingStyle")

    public open fun setColumnAutoresizingStyle(columnAutoresizingStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setColumnAutoresizingStyle:", columnAutoresizingStyle)
    }

    public open fun gridStyleMask(): Any =
        Native.objc_msgSend("class objc.Any", this, "gridStyleMask")

    public open fun setGridStyleMask(gridStyleMask: Any): Unit {
        Native.objc_msgSend("void", this, "setGridStyleMask:", gridStyleMask)
    }

    public open fun intercellSpacing(): Any =
        Native.objc_msgSend("class objc.Any", this, "intercellSpacing")

    public open fun setIntercellSpacing(intercellSpacing: Any): Unit {
        Native.objc_msgSend("void", this, "setIntercellSpacing:", intercellSpacing)
    }

    public open fun usesAlternatingRowBackgroundColors(): Boolean =
        Native.objc_msgSend("boolean", this, "usesAlternatingRowBackgroundColors") as Boolean

    public open fun setUsesAlternatingRowBackgroundColors(usesAlternatingRowBackgroundColors: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesAlternatingRowBackgroundColors:", usesAlternatingRowBackgroundColors)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun gridColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "gridColor") as NSColor

    public open fun setGridColor(gridColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setGridColor:", gridColor)
    }

    public open fun rowSizeStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "rowSizeStyle")

    public open fun setRowSizeStyle(rowSizeStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setRowSizeStyle:", rowSizeStyle)
    }

    public open fun effectiveRowSizeStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "effectiveRowSizeStyle")

    public open fun rowHeight(): Double =
        Native.objc_msgSend("double", this, "rowHeight") as Double

    public open fun setRowHeight(rowHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setRowHeight:", rowHeight)
    }

    public open fun noteHeightOfRowsWithIndexesChanged(indexSet: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "noteHeightOfRowsWithIndexesChanged:", indexSet)
    }

    public open fun tableColumns(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tableColumns") as NSArray

    public open fun numberOfColumns(): Int =
        Native.objc_msgSend("int", this, "numberOfColumns") as Int

    public open fun numberOfRows(): Int =
        Native.objc_msgSend("int", this, "numberOfRows") as Int

    public open fun addTableColumn(tableColumn: NSTableColumn): Unit {
        Native.objc_msgSend("void", this, "addTableColumn:", tableColumn)
    }

    public open fun removeTableColumn(tableColumn: NSTableColumn): Unit {
        Native.objc_msgSend("void", this, "removeTableColumn:", tableColumn)
    }

    public open fun moveColumn_toColumn(oldIndex: Int, newIndex: Int): Unit {
        Native.objc_msgSend("void", this, "moveColumn:toColumn:", oldIndex, newIndex)
    }

    public open fun columnWithIdentifier(identifier: NSString): Int =
        Native.objc_msgSend("int", this, "columnWithIdentifier:", identifier) as Int

    public open fun tableColumnWithIdentifier(identifier: NSString): NSTableColumn =
        Native.objc_msgSend("class objc.NSTableColumn", this, "tableColumnWithIdentifier:", identifier) as NSTableColumn

    public open fun tile(): Unit {
        Native.objc_msgSend("void", this, "tile")
    }

    override fun sizeToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeToFit")
    }

    public open fun sizeLastColumnToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeLastColumnToFit")
    }

    public open fun scrollRowToVisible(row: Int): Unit {
        Native.objc_msgSend("void", this, "scrollRowToVisible:", row)
    }

    public open fun scrollColumnToVisible(column: Int): Unit {
        Native.objc_msgSend("void", this, "scrollColumnToVisible:", column)
    }

    public open fun reloadData(): Unit {
        Native.objc_msgSend("void", this, "reloadData")
    }

    public open fun noteNumberOfRowsChanged(): Unit {
        Native.objc_msgSend("void", this, "noteNumberOfRowsChanged")
    }

    public open fun reloadDataForRowIndexes_columnIndexes(rowIndexes: NSIndexSet, columnIndexes: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "reloadDataForRowIndexes:columnIndexes:", rowIndexes, columnIndexes)
    }

    public open fun editedColumn(): Int =
        Native.objc_msgSend("int", this, "editedColumn") as Int

    public open fun editedRow(): Int =
        Native.objc_msgSend("int", this, "editedRow") as Int

    public open fun clickedColumn(): Int =
        Native.objc_msgSend("int", this, "clickedColumn") as Int

    public open fun clickedRow(): Int =
        Native.objc_msgSend("int", this, "clickedRow") as Int

    public open fun doubleAction(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "doubleAction") as ObjCSelector

    public open fun setDoubleAction(doubleAction: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setDoubleAction:", doubleAction)
    }

    public open fun sortDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortDescriptors") as NSArray

    public open fun setSortDescriptors(sortDescriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSortDescriptors:", sortDescriptors)
    }

    public open fun setIndicatorImage_inTableColumn(anImage: NSImage, tableColumn: NSTableColumn): Unit {
        Native.objc_msgSend("void", this, "setIndicatorImage:inTableColumn:", anImage, tableColumn)
    }

    public open fun indicatorImageInTableColumn(tableColumn: NSTableColumn): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "indicatorImageInTableColumn:", tableColumn) as NSImage

    public open fun highlightedTableColumn(): NSTableColumn =
        Native.objc_msgSend("class objc.NSTableColumn", this, "highlightedTableColumn") as NSTableColumn

    public open fun setHighlightedTableColumn(highlightedTableColumn: NSTableColumn): Unit {
        Native.objc_msgSend("void", this, "setHighlightedTableColumn:", highlightedTableColumn)
    }

    public open fun verticalMotionCanBeginDrag(): Boolean =
        Native.objc_msgSend("boolean", this, "verticalMotionCanBeginDrag") as Boolean

    public open fun setVerticalMotionCanBeginDrag(verticalMotionCanBeginDrag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setVerticalMotionCanBeginDrag:", verticalMotionCanBeginDrag)
    }

    public open fun canDragRowsWithIndexes_atPoint(rowIndexes: NSIndexSet, mouseDownPoint: Any): Boolean =
        Native.objc_msgSend("boolean", this, "canDragRowsWithIndexes:atPoint:", rowIndexes, mouseDownPoint) as Boolean

    public open fun dragImageForRowsWithIndexes_tableColumns_event_offset(dragRows: NSIndexSet, tableColumns: NSArray, dragEvent: NSEvent, dragImageOffset: Pointer<Any>): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "dragImageForRowsWithIndexes:tableColumns:event:offset:", dragRows, tableColumns, dragEvent, dragImageOffset) as NSImage

    public open fun setDraggingSourceOperationMask_forLocal(mask: Any, isLocal: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDraggingSourceOperationMask:forLocal:", mask, isLocal)
    }

    public open fun setDropRow_dropOperation(row: Int, dropOperation: Any): Unit {
        Native.objc_msgSend("void", this, "setDropRow:dropOperation:", row, dropOperation)
    }

    public open fun allowsMultipleSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsMultipleSelection") as Boolean

    public open fun setAllowsMultipleSelection(allowsMultipleSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsMultipleSelection:", allowsMultipleSelection)
    }

    public open fun allowsEmptySelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsEmptySelection") as Boolean

    public open fun setAllowsEmptySelection(allowsEmptySelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsEmptySelection:", allowsEmptySelection)
    }

    public open fun allowsColumnSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsColumnSelection") as Boolean

    public open fun setAllowsColumnSelection(allowsColumnSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsColumnSelection:", allowsColumnSelection)
    }

    override fun selectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectAll:", sender)
    }

    public open fun deselectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deselectAll:", sender)
    }

    public open fun selectColumnIndexes_byExtendingSelection(indexes: NSIndexSet, extend: Boolean): Unit {
        Native.objc_msgSend("void", this, "selectColumnIndexes:byExtendingSelection:", indexes, extend)
    }

    public open fun selectRowIndexes_byExtendingSelection(indexes: NSIndexSet, extend: Boolean): Unit {
        Native.objc_msgSend("void", this, "selectRowIndexes:byExtendingSelection:", indexes, extend)
    }

    public open fun selectedColumnIndexes(): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "selectedColumnIndexes") as NSIndexSet

    public open fun selectedRowIndexes(): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "selectedRowIndexes") as NSIndexSet

    public open fun deselectColumn(column: Int): Unit {
        Native.objc_msgSend("void", this, "deselectColumn:", column)
    }

    public open fun deselectRow(row: Int): Unit {
        Native.objc_msgSend("void", this, "deselectRow:", row)
    }

    public open fun selectedColumn(): Int =
        Native.objc_msgSend("int", this, "selectedColumn") as Int

    public open fun selectedRow(): Int =
        Native.objc_msgSend("int", this, "selectedRow") as Int

    public open fun isColumnSelected(column: Int): Boolean =
        Native.objc_msgSend("boolean", this, "isColumnSelected:", column) as Boolean

    public open fun isRowSelected(row: Int): Boolean =
        Native.objc_msgSend("boolean", this, "isRowSelected:", row) as Boolean

    public open fun numberOfSelectedColumns(): Int =
        Native.objc_msgSend("int", this, "numberOfSelectedColumns") as Int

    public open fun numberOfSelectedRows(): Int =
        Native.objc_msgSend("int", this, "numberOfSelectedRows") as Int

    public open fun allowsTypeSelect(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsTypeSelect") as Boolean

    public open fun setAllowsTypeSelect(allowsTypeSelect: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsTypeSelect:", allowsTypeSelect)
    }

    public open fun selectionHighlightStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "selectionHighlightStyle")

    public open fun setSelectionHighlightStyle(selectionHighlightStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setSelectionHighlightStyle:", selectionHighlightStyle)
    }

    public open fun draggingDestinationFeedbackStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "draggingDestinationFeedbackStyle")

    public open fun setDraggingDestinationFeedbackStyle(draggingDestinationFeedbackStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setDraggingDestinationFeedbackStyle:", draggingDestinationFeedbackStyle)
    }

    public open fun rectOfColumn(column: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rectOfColumn:", column)

    public open fun rectOfRow(row: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rectOfRow:", row)

    public open fun columnIndexesInRect(rect: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "columnIndexesInRect:", rect) as NSIndexSet

    public open fun rowsInRect(rect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rowsInRect:", rect)

    public open fun columnAtPoint(point: Any): Int =
        Native.objc_msgSend("int", this, "columnAtPoint:", point) as Int

    public open fun rowAtPoint(point: Any): Int =
        Native.objc_msgSend("int", this, "rowAtPoint:", point) as Int

    public open fun frameOfCellAtColumn_row(column: Int, row: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "frameOfCellAtColumn:row:", column, row)

    public open fun autosaveName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "autosaveName") as NSString

    public open fun setAutosaveName(autosaveName: NSString): Unit {
        Native.objc_msgSend("void", this, "setAutosaveName:", autosaveName)
    }

    public open fun autosaveTableColumns(): Boolean =
        Native.objc_msgSend("boolean", this, "autosaveTableColumns") as Boolean

    public open fun setAutosaveTableColumns(autosaveTableColumns: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutosaveTableColumns:", autosaveTableColumns)
    }

    public open fun editColumn_row_withEvent_select(column: Int, row: Int, theEvent: NSEvent, select: Boolean): Unit {
        Native.objc_msgSend("void", this, "editColumn:row:withEvent:select:", column, row, theEvent, select)
    }

    public open fun drawRow_clipRect(row: Int, clipRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawRow:clipRect:", row, clipRect)
    }

    public open fun highlightSelectionInClipRect(clipRect: Any): Unit {
        Native.objc_msgSend("void", this, "highlightSelectionInClipRect:", clipRect)
    }

    public open fun drawGridInClipRect(clipRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawGridInClipRect:", clipRect)
    }

    public open fun drawBackgroundInClipRect(clipRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawBackgroundInClipRect:", clipRect)
    }

    public open fun viewAtColumn_row_makeIfNecessary(column: Int, row: Int, makeIfNecessary: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "viewAtColumn:row:makeIfNecessary:", column, row, makeIfNecessary) as ObjCObject

    public open fun rowViewAtRow_makeIfNecessary(row: Int, makeIfNecessary: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "rowViewAtRow:makeIfNecessary:", row, makeIfNecessary) as ObjCObject

    public open fun rowForView(view: NSView): Int =
        Native.objc_msgSend("int", this, "rowForView:", view) as Int

    public open fun columnForView(view: NSView): Int =
        Native.objc_msgSend("int", this, "columnForView:", view) as Int

    public open fun makeViewWithIdentifier_owner(identifier: NSString, owner: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "makeViewWithIdentifier:owner:", identifier, owner) as ObjCObject

    public open fun enumerateAvailableRowViewsUsingBlock(handler: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateAvailableRowViewsUsingBlock:", handler)
    }

    public open fun floatsGroupRows(): Boolean =
        Native.objc_msgSend("boolean", this, "floatsGroupRows") as Boolean

    public open fun setFloatsGroupRows(floatsGroupRows: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFloatsGroupRows:", floatsGroupRows)
    }

    public open fun beginUpdates(): Unit {
        Native.objc_msgSend("void", this, "beginUpdates")
    }

    public open fun endUpdates(): Unit {
        Native.objc_msgSend("void", this, "endUpdates")
    }

    public open fun insertRowsAtIndexes_withAnimation(indexes: NSIndexSet, animationOptions: Any): Unit {
        Native.objc_msgSend("void", this, "insertRowsAtIndexes:withAnimation:", indexes, animationOptions)
    }

    public open fun removeRowsAtIndexes_withAnimation(indexes: NSIndexSet, animationOptions: Any): Unit {
        Native.objc_msgSend("void", this, "removeRowsAtIndexes:withAnimation:", indexes, animationOptions)
    }

    public open fun moveRowAtIndex_toIndex(oldIndex: Int, newIndex: Int): Unit {
        Native.objc_msgSend("void", this, "moveRowAtIndex:toIndex:", oldIndex, newIndex)
    }

    public open fun registerNib_forIdentifier(nib: NSNib, identifier: NSString): Unit {
        Native.objc_msgSend("void", this, "registerNib:forIdentifier:", nib, identifier)
    }

    public open fun registeredNibsByIdentifier(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "registeredNibsByIdentifier") as NSDictionary

    public open fun didAddRowView_forRow(rowView: NSTableRowView, row: Int): Unit {
        Native.objc_msgSend("void", this, "didAddRowView:forRow:", rowView, row)
    }

    public open fun didRemoveRowView_forRow(rowView: NSTableRowView, row: Int): Unit {
        Native.objc_msgSend("void", this, "didRemoveRowView:forRow:", rowView, row)
    }

    public open fun usesStaticContents(): Boolean =
        Native.objc_msgSend("boolean", this, "usesStaticContents") as Boolean

    public open fun setUsesStaticContents(usesStaticContents: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesStaticContents:", usesStaticContents)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSUserInterfaceValidations.metaclass, NSTextViewDelegate.metaclass, NSDraggingSource.metaclass, NSAccessibilityTable.metaclass, NSTableView_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTableView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTableCellView(pointer: Long) : NSView(pointer) {
    public open fun objectValue(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectValue") as ObjCObject

    public open fun setObjectValue(objectValue: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setObjectValue:", objectValue)
    }

    public open fun textField(): NSTextField =
        Native.objc_msgSend("class objc.NSTextField", this, "textField") as NSTextField

    public open fun setTextField(textField: NSTextField): Unit {
        Native.objc_msgSend("void", this, "setTextField:", textField)
    }

    public open fun imageView(): NSImageView =
        Native.objc_msgSend("class objc.NSImageView", this, "imageView") as NSImageView

    public open fun setImageView(imageView: NSImageView): Unit {
        Native.objc_msgSend("void", this, "setImageView:", imageView)
    }

    public open fun backgroundStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "backgroundStyle")

    public open fun setBackgroundStyle(backgroundStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setBackgroundStyle:", backgroundStyle)
    }

    public open fun rowSizeStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "rowSizeStyle")

    public open fun setRowSizeStyle(rowSizeStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setRowSizeStyle:", rowSizeStyle)
    }

    public open fun draggingImageComponents(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "draggingImageComponents") as NSArray

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTableCellView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTableColumn(pointer: Long) : NSObject(pointer), NSCoding, NSUserInterfaceItemIdentification, NSTableColumn_NSDeprecated {
    public open fun initWithIdentifier(identifier: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIdentifier:", identifier) as ObjCObject

    public open fun identifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "identifier") as NSString

    public open fun setIdentifier(identifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setIdentifier:", identifier)
    }

    public open fun tableView(): NSTableView =
        Native.objc_msgSend("class objc.NSTableView", this, "tableView") as NSTableView

    public open fun setTableView(tableView: NSTableView): Unit {
        Native.objc_msgSend("void", this, "setTableView:", tableView)
    }

    public open fun width(): Double =
        Native.objc_msgSend("double", this, "width") as Double

    public open fun setWidth(width: Double): Unit {
        Native.objc_msgSend("void", this, "setWidth:", width)
    }

    public open fun minWidth(): Double =
        Native.objc_msgSend("double", this, "minWidth") as Double

    public open fun setMinWidth(minWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setMinWidth:", minWidth)
    }

    public open fun maxWidth(): Double =
        Native.objc_msgSend("double", this, "maxWidth") as Double

    public open fun setMaxWidth(maxWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxWidth:", maxWidth)
    }

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun headerCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "headerCell") as ObjCObject

    public open fun setHeaderCell(headerCell: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setHeaderCell:", headerCell)
    }

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun sizeToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeToFit")
    }

    public open fun sortDescriptorPrototype(): NSSortDescriptor =
        Native.objc_msgSend("class objc.NSSortDescriptor", this, "sortDescriptorPrototype") as NSSortDescriptor

    public open fun setSortDescriptorPrototype(sortDescriptorPrototype: NSSortDescriptor): Unit {
        Native.objc_msgSend("void", this, "setSortDescriptorPrototype:", sortDescriptorPrototype)
    }

    public open fun resizingMask(): Any =
        Native.objc_msgSend("class objc.Any", this, "resizingMask")

    public open fun setResizingMask(resizingMask: Any): Unit {
        Native.objc_msgSend("void", this, "setResizingMask:", resizingMask)
    }

    public open fun headerToolTip(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "headerToolTip") as NSString

    public open fun setHeaderToolTip(headerToolTip: NSString): Unit {
        Native.objc_msgSend("void", this, "setHeaderToolTip:", headerToolTip)
    }

    public open fun isHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "isHidden") as Boolean

    public open fun setHidden(hidden: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHidden:", hidden)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSUserInterfaceItemIdentification.metaclass, NSTableColumn_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTableColumn")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTableHeaderCell(pointer: Long) : NSTextFieldCell(pointer) {
    public open fun drawSortIndicatorWithFrame_inView_ascending_priority(cellFrame: Any, controlView: NSView, ascending: Boolean, priority: Int): Unit {
        Native.objc_msgSend("void", this, "drawSortIndicatorWithFrame:inView:ascending:priority:", cellFrame, controlView, ascending, priority)
    }

    public open fun sortIndicatorRectForBounds(theRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "sortIndicatorRectForBounds:", theRect)

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setUpFieldEditorAttributes(textObj: NSText): NSText =
        Native.objc_msgSend("class objc.NSText", this, "setUpFieldEditorAttributes:", textObj) as NSText

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSTextFieldCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTableHeaderCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTableHeaderView(pointer: Long) : NSView(pointer) {
    public open fun tableView(): NSTableView =
        Native.objc_msgSend("class objc.NSTableView", this, "tableView") as NSTableView

    public open fun setTableView(tableView: NSTableView): Unit {
        Native.objc_msgSend("void", this, "setTableView:", tableView)
    }

    public open fun draggedColumn(): Int =
        Native.objc_msgSend("int", this, "draggedColumn") as Int

    public open fun draggedDistance(): Double =
        Native.objc_msgSend("double", this, "draggedDistance") as Double

    public open fun resizedColumn(): Int =
        Native.objc_msgSend("int", this, "resizedColumn") as Int

    public open fun headerRectOfColumn(column: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "headerRectOfColumn:", column)

    public open fun columnAtPoint(point: Any): Int =
        Native.objc_msgSend("int", this, "columnAtPoint:", point) as Int

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTableHeaderView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTableRowView(pointer: Long) : NSView(pointer), NSAccessibilityRow {
    public open fun selectionHighlightStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "selectionHighlightStyle")

    public open fun setSelectionHighlightStyle(selectionHighlightStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setSelectionHighlightStyle:", selectionHighlightStyle)
    }

    public open fun isEmphasized(): Boolean =
        Native.objc_msgSend("boolean", this, "isEmphasized") as Boolean

    public open fun setEmphasized(emphasized: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEmphasized:", emphasized)
    }

    public open fun isGroupRowStyle(): Boolean =
        Native.objc_msgSend("boolean", this, "isGroupRowStyle") as Boolean

    public open fun setGroupRowStyle(groupRowStyle: Boolean): Unit {
        Native.objc_msgSend("void", this, "setGroupRowStyle:", groupRowStyle)
    }

    public open fun isSelected(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelected") as Boolean

    public open fun setSelected(selected: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelected:", selected)
    }

    public open fun isPreviousRowSelected(): Boolean =
        Native.objc_msgSend("boolean", this, "isPreviousRowSelected") as Boolean

    public open fun setPreviousRowSelected(previousRowSelected: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPreviousRowSelected:", previousRowSelected)
    }

    public open fun isNextRowSelected(): Boolean =
        Native.objc_msgSend("boolean", this, "isNextRowSelected") as Boolean

    public open fun setNextRowSelected(nextRowSelected: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNextRowSelected:", nextRowSelected)
    }

    public open fun isFloating(): Boolean =
        Native.objc_msgSend("boolean", this, "isFloating") as Boolean

    public open fun setFloating(floating: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFloating:", floating)
    }

    public open fun isTargetForDropOperation(): Boolean =
        Native.objc_msgSend("boolean", this, "isTargetForDropOperation") as Boolean

    public open fun setTargetForDropOperation(targetForDropOperation: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTargetForDropOperation:", targetForDropOperation)
    }

    public open fun draggingDestinationFeedbackStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "draggingDestinationFeedbackStyle")

    public open fun setDraggingDestinationFeedbackStyle(draggingDestinationFeedbackStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setDraggingDestinationFeedbackStyle:", draggingDestinationFeedbackStyle)
    }

    public open fun indentationForDropOperation(): Double =
        Native.objc_msgSend("double", this, "indentationForDropOperation") as Double

    public open fun setIndentationForDropOperation(indentationForDropOperation: Double): Unit {
        Native.objc_msgSend("void", this, "setIndentationForDropOperation:", indentationForDropOperation)
    }

    public open fun interiorBackgroundStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "interiorBackgroundStyle")

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun drawBackgroundInRect(dirtyRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawBackgroundInRect:", dirtyRect)
    }

    public open fun drawSelectionInRect(dirtyRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawSelectionInRect:", dirtyRect)
    }

    public open fun drawSeparatorInRect(dirtyRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawSeparatorInRect:", dirtyRect)
    }

    public open fun drawDraggingDestinationFeedbackInRect(dirtyRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawDraggingDestinationFeedbackInRect:", dirtyRect)
    }

    public open fun viewAtColumn(column: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "viewAtColumn:", column) as ObjCObject

    public open fun numberOfColumns(): Int =
        Native.objc_msgSend("int", this, "numberOfColumns") as Int

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSAccessibilityRow.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTableRowView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOutlineView(pointer: Long) : NSTableView(pointer), NSAccessibilityOutline {
    override fun setDelegate(anObject: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", anObject)
    }

    override fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    override fun setDataSource(aSource: Any): Unit {
        Native.objc_msgSend("void", this, "setDataSource:", aSource)
    }

    override fun dataSource(): Any =
        Native.objc_msgSend("class objc.Any", this, "dataSource")

    public open fun outlineTableColumn(): NSTableColumn =
        Native.objc_msgSend("class objc.NSTableColumn", this, "outlineTableColumn") as NSTableColumn

    public open fun setOutlineTableColumn(outlineTableColumn: NSTableColumn): Unit {
        Native.objc_msgSend("void", this, "setOutlineTableColumn:", outlineTableColumn)
    }

    public open fun isExpandable(item: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isExpandable:", item) as Boolean

    public open fun numberOfChildrenOfItem(item: ObjCObject): Int =
        Native.objc_msgSend("int", this, "numberOfChildrenOfItem:", item) as Int

    public open fun child_ofItem(index: Int, item: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "child:ofItem:", index, item) as ObjCObject

    public open fun expandItem_expandChildren(item: ObjCObject, expandChildren: Boolean): Unit {
        Native.objc_msgSend("void", this, "expandItem:expandChildren:", item, expandChildren)
    }

    public open fun expandItem(item: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "expandItem:", item)
    }

    public open fun collapseItem_collapseChildren(item: ObjCObject, collapseChildren: Boolean): Unit {
        Native.objc_msgSend("void", this, "collapseItem:collapseChildren:", item, collapseChildren)
    }

    public open fun collapseItem(item: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "collapseItem:", item)
    }

    public open fun reloadItem_reloadChildren(item: ObjCObject, reloadChildren: Boolean): Unit {
        Native.objc_msgSend("void", this, "reloadItem:reloadChildren:", item, reloadChildren)
    }

    public open fun reloadItem(item: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "reloadItem:", item)
    }

    public open fun parentForItem(item: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "parentForItem:", item) as ObjCObject

    public open fun itemAtRow(row: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "itemAtRow:", row) as ObjCObject

    public open fun rowForItem(item: ObjCObject): Int =
        Native.objc_msgSend("int", this, "rowForItem:", item) as Int

    public open fun levelForItem(item: ObjCObject): Int =
        Native.objc_msgSend("int", this, "levelForItem:", item) as Int

    public open fun levelForRow(row: Int): Int =
        Native.objc_msgSend("int", this, "levelForRow:", row) as Int

    public open fun isItemExpanded(item: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isItemExpanded:", item) as Boolean

    public open fun indentationPerLevel(): Double =
        Native.objc_msgSend("double", this, "indentationPerLevel") as Double

    public open fun setIndentationPerLevel(indentationPerLevel: Double): Unit {
        Native.objc_msgSend("void", this, "setIndentationPerLevel:", indentationPerLevel)
    }

    public open fun indentationMarkerFollowsCell(): Boolean =
        Native.objc_msgSend("boolean", this, "indentationMarkerFollowsCell") as Boolean

    public open fun setIndentationMarkerFollowsCell(indentationMarkerFollowsCell: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIndentationMarkerFollowsCell:", indentationMarkerFollowsCell)
    }

    public open fun autoresizesOutlineColumn(): Boolean =
        Native.objc_msgSend("boolean", this, "autoresizesOutlineColumn") as Boolean

    public open fun setAutoresizesOutlineColumn(autoresizesOutlineColumn: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutoresizesOutlineColumn:", autoresizesOutlineColumn)
    }

    public open fun frameOfOutlineCellAtRow(row: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "frameOfOutlineCellAtRow:", row)

    public open fun setDropItem_dropChildIndex(item: ObjCObject, index: Int): Unit {
        Native.objc_msgSend("void", this, "setDropItem:dropChildIndex:", item, index)
    }

    public open fun shouldCollapseAutoExpandedItemsForDeposited(deposited: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "shouldCollapseAutoExpandedItemsForDeposited:", deposited) as Boolean

    public open fun autosaveExpandedItems(): Boolean =
        Native.objc_msgSend("boolean", this, "autosaveExpandedItems") as Boolean

    public open fun setAutosaveExpandedItems(autosaveExpandedItems: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutosaveExpandedItems:", autosaveExpandedItems)
    }

    public open fun insertItemsAtIndexes_inParent_withAnimation(indexes: NSIndexSet, parent: ObjCObject, animationOptions: Any): Unit {
        Native.objc_msgSend("void", this, "insertItemsAtIndexes:inParent:withAnimation:", indexes, parent, animationOptions)
    }

    public open fun removeItemsAtIndexes_inParent_withAnimation(indexes: NSIndexSet, parent: ObjCObject, animationOptions: Any): Unit {
        Native.objc_msgSend("void", this, "removeItemsAtIndexes:inParent:withAnimation:", indexes, parent, animationOptions)
    }

    public open fun moveItemAtIndex_inParent_toIndex_inParent(fromIndex: Int, oldParent: ObjCObject, toIndex: Int, newParent: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveItemAtIndex:inParent:toIndex:inParent:", fromIndex, oldParent, toIndex, newParent)
    }

    override fun insertRowsAtIndexes_withAnimation(indexes: NSIndexSet, animationOptions: Any): Unit {
        Native.objc_msgSend("void", this, "insertRowsAtIndexes:withAnimation:", indexes, animationOptions)
    }

    override fun removeRowsAtIndexes_withAnimation(indexes: NSIndexSet, animationOptions: Any): Unit {
        Native.objc_msgSend("void", this, "removeRowsAtIndexes:withAnimation:", indexes, animationOptions)
    }

    override fun moveRowAtIndex_toIndex(oldIndex: Int, newIndex: Int): Unit {
        Native.objc_msgSend("void", this, "moveRowAtIndex:toIndex:", oldIndex, newIndex)
    }

    override fun userInterfaceLayoutDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "userInterfaceLayoutDirection")

    override fun setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setUserInterfaceLayoutDirection:", userInterfaceLayoutDirection)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun selectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectAll:", sender)
    }

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun sizeToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeToFit")
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSTableView.metaclass, NSAccessibilityOutline.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSOutlineView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSInputServer(pointer: Long) : NSObject(pointer), NSInputServiceProvider, NSInputServerMouseTracker {
    public open fun initWithDelegate_name(aDelegate: ObjCObject, name: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDelegate:name:", aDelegate, name) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSInputServiceProvider.metaclass, NSInputServerMouseTracker.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSInputServer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRulerMarker(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    public open fun initWithRulerView_markerLocation_image_imageOrigin(ruler: NSRulerView, location: Double, image: NSImage, imageOrigin: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRulerView:markerLocation:image:imageOrigin:", ruler, location, image, imageOrigin) as ObjCObject

    public open fun ruler(): NSRulerView =
        Native.objc_msgSend("class objc.NSRulerView", this, "ruler") as NSRulerView

    public open fun markerLocation(): Double =
        Native.objc_msgSend("double", this, "markerLocation") as Double

    public open fun setMarkerLocation(markerLocation: Double): Unit {
        Native.objc_msgSend("void", this, "setMarkerLocation:", markerLocation)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun imageOrigin(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageOrigin")

    public open fun setImageOrigin(imageOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "setImageOrigin:", imageOrigin)
    }

    public open fun isMovable(): Boolean =
        Native.objc_msgSend("boolean", this, "isMovable") as Boolean

    public open fun setMovable(movable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setMovable:", movable)
    }

    public open fun isRemovable(): Boolean =
        Native.objc_msgSend("boolean", this, "isRemovable") as Boolean

    public open fun setRemovable(removable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRemovable:", removable)
    }

    public open fun isDragging(): Boolean =
        Native.objc_msgSend("boolean", this, "isDragging") as Boolean

    public open fun representedObject(): Any =
        Native.objc_msgSend("class objc.Any", this, "representedObject")

    public open fun setRepresentedObject(representedObject: Any): Unit {
        Native.objc_msgSend("void", this, "setRepresentedObject:", representedObject)
    }

    public open fun imageRectInRuler(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageRectInRuler")

    public open fun thicknessRequiredInRuler(): Double =
        Native.objc_msgSend("double", this, "thicknessRequiredInRuler") as Double

    public open fun drawRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "drawRect:", rect)
    }

    public open fun trackMouse_adding(mouseDownEvent: NSEvent, isAdding: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "trackMouse:adding:", mouseDownEvent, isAdding) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSRulerMarker")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRulerView(pointer: Long) : NSView(pointer) {
    public open fun initWithScrollView_orientation(scrollView: NSScrollView, orientation: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithScrollView:orientation:", scrollView, orientation) as ObjCObject

    public open fun scrollView(): NSScrollView =
        Native.objc_msgSend("class objc.NSScrollView", this, "scrollView") as NSScrollView

    public open fun setScrollView(scrollView: NSScrollView): Unit {
        Native.objc_msgSend("void", this, "setScrollView:", scrollView)
    }

    public open fun orientation(): Any =
        Native.objc_msgSend("class objc.Any", this, "orientation")

    public open fun setOrientation(orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setOrientation:", orientation)
    }

    public open fun baselineLocation(): Double =
        Native.objc_msgSend("double", this, "baselineLocation") as Double

    public open fun requiredThickness(): Double =
        Native.objc_msgSend("double", this, "requiredThickness") as Double

    public open fun ruleThickness(): Double =
        Native.objc_msgSend("double", this, "ruleThickness") as Double

    public open fun setRuleThickness(ruleThickness: Double): Unit {
        Native.objc_msgSend("void", this, "setRuleThickness:", ruleThickness)
    }

    public open fun reservedThicknessForMarkers(): Double =
        Native.objc_msgSend("double", this, "reservedThicknessForMarkers") as Double

    public open fun setReservedThicknessForMarkers(reservedThicknessForMarkers: Double): Unit {
        Native.objc_msgSend("void", this, "setReservedThicknessForMarkers:", reservedThicknessForMarkers)
    }

    public open fun reservedThicknessForAccessoryView(): Double =
        Native.objc_msgSend("double", this, "reservedThicknessForAccessoryView") as Double

    public open fun setReservedThicknessForAccessoryView(reservedThicknessForAccessoryView: Double): Unit {
        Native.objc_msgSend("void", this, "setReservedThicknessForAccessoryView:", reservedThicknessForAccessoryView)
    }

    public open fun measurementUnits(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "measurementUnits") as NSString

    public open fun setMeasurementUnits(measurementUnits: NSString): Unit {
        Native.objc_msgSend("void", this, "setMeasurementUnits:", measurementUnits)
    }

    public open fun originOffset(): Double =
        Native.objc_msgSend("double", this, "originOffset") as Double

    public open fun setOriginOffset(originOffset: Double): Unit {
        Native.objc_msgSend("void", this, "setOriginOffset:", originOffset)
    }

    public open fun clientView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "clientView") as NSView

    public open fun setClientView(clientView: NSView): Unit {
        Native.objc_msgSend("void", this, "setClientView:", clientView)
    }

    public open fun addMarker(marker: NSRulerMarker): Unit {
        Native.objc_msgSend("void", this, "addMarker:", marker)
    }

    public open fun removeMarker(marker: NSRulerMarker): Unit {
        Native.objc_msgSend("void", this, "removeMarker:", marker)
    }

    public open fun markers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "markers") as NSArray

    public open fun setMarkers(markers: NSArray): Unit {
        Native.objc_msgSend("void", this, "setMarkers:", markers)
    }

    public open fun trackMarker_withMouseEvent(marker: NSRulerMarker, event: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "trackMarker:withMouseEvent:", marker, event) as Boolean

    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun setAccessoryView(accessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", accessoryView)
    }

    public open fun moveRulerlineFromLocation_toLocation(oldLocation: Double, newLocation: Double): Unit {
        Native.objc_msgSend("void", this, "moveRulerlineFromLocation:toLocation:", oldLocation, newLocation)
    }

    public open fun invalidateHashMarks(): Unit {
        Native.objc_msgSend("void", this, "invalidateHashMarks")
    }

    public open fun drawHashMarksAndLabelsInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "drawHashMarksAndLabelsInRect:", rect)
    }

    public open fun drawMarkersInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "drawMarkersInRect:", rect)
    }

    override fun isFlipped(): Boolean =
        Native.objc_msgSend("boolean", this, "isFlipped") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass {
        public open fun registerUnitWithName_abbreviation_unitToPointsConversionFactor_stepUpCycle_stepDownCycle(unitName: NSString, abbreviation: NSString, conversionFactor: Double, stepUpCycle: NSArray, stepDownCycle: NSArray): Unit {
            Native.objc_msgSend("void", this, "registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:", unitName, abbreviation, conversionFactor, stepUpCycle, stepDownCycle)
        }

    }

    companion object : NSObject(Native.objc_getClass("NSRulerView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSecureTextField(pointer: Long) : NSTextField(pointer) {
    override fun acceptsFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstResponder") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSTextField.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSecureTextField")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSecureTextFieldCell(pointer: Long) : NSTextFieldCell(pointer) {
    public open fun echosBullets(): Boolean =
        Native.objc_msgSend("boolean", this, "echosBullets") as Boolean

    public open fun setEchosBullets(echosBullets: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEchosBullets:", echosBullets)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setUpFieldEditorAttributes(textObj: NSText): NSText =
        Native.objc_msgSend("class objc.NSText", this, "setUpFieldEditorAttributes:", textObj) as NSText

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSTextFieldCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSecureTextFieldCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSProgressIndicator(pointer: Long) : NSView(pointer), NSAccessibilityProgressIndicator, NSProgressIndicator_NSProgressIndicatorDeprecated {
    public open fun isIndeterminate(): Boolean =
        Native.objc_msgSend("boolean", this, "isIndeterminate") as Boolean

    public open fun setIndeterminate(indeterminate: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIndeterminate:", indeterminate)
    }

    public open fun isBezeled(): Boolean =
        Native.objc_msgSend("boolean", this, "isBezeled") as Boolean

    public open fun setBezeled(bezeled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBezeled:", bezeled)
    }

    public open fun controlTint(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlTint")

    public open fun setControlTint(controlTint: Any): Unit {
        Native.objc_msgSend("void", this, "setControlTint:", controlTint)
    }

    public open fun controlSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlSize")

    public open fun setControlSize(controlSize: Any): Unit {
        Native.objc_msgSend("void", this, "setControlSize:", controlSize)
    }

    public open fun doubleValue(): Double =
        Native.objc_msgSend("double", this, "doubleValue") as Double

    public open fun setDoubleValue(doubleValue: Double): Unit {
        Native.objc_msgSend("void", this, "setDoubleValue:", doubleValue)
    }

    public open fun incrementBy(delta: Double): Unit {
        Native.objc_msgSend("void", this, "incrementBy:", delta)
    }

    public open fun minValue(): Double =
        Native.objc_msgSend("double", this, "minValue") as Double

    public open fun setMinValue(minValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMinValue:", minValue)
    }

    public open fun maxValue(): Double =
        Native.objc_msgSend("double", this, "maxValue") as Double

    public open fun setMaxValue(maxValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxValue:", maxValue)
    }

    public open fun usesThreadedAnimation(): Boolean =
        Native.objc_msgSend("boolean", this, "usesThreadedAnimation") as Boolean

    public open fun setUsesThreadedAnimation(usesThreadedAnimation: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesThreadedAnimation:", usesThreadedAnimation)
    }

    public open fun startAnimation(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "startAnimation:", sender)
    }

    public open fun stopAnimation(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "stopAnimation:", sender)
    }

    public open fun style(): Any =
        Native.objc_msgSend("class objc.Any", this, "style")

    public open fun setStyle(style: Any): Unit {
        Native.objc_msgSend("void", this, "setStyle:", style)
    }

    public open fun sizeToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeToFit")
    }

    public open fun isDisplayedWhenStopped(): Boolean =
        Native.objc_msgSend("boolean", this, "isDisplayedWhenStopped") as Boolean

    public open fun setDisplayedWhenStopped(displayedWhenStopped: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDisplayedWhenStopped:", displayedWhenStopped)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSAccessibilityProgressIndicator.metaclass, NSProgressIndicator_NSProgressIndicatorDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSProgressIndicator")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTabView(pointer: Long) : NSView(pointer) {
    public open fun selectTabViewItem(tabViewItem: NSTabViewItem): Unit {
        Native.objc_msgSend("void", this, "selectTabViewItem:", tabViewItem)
    }

    public open fun selectTabViewItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "selectTabViewItemAtIndex:", index)
    }

    public open fun selectTabViewItemWithIdentifier(identifier: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectTabViewItemWithIdentifier:", identifier)
    }

    public open fun takeSelectedTabViewItemFromSender(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeSelectedTabViewItemFromSender:", sender)
    }

    public open fun selectFirstTabViewItem(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectFirstTabViewItem:", sender)
    }

    public open fun selectLastTabViewItem(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectLastTabViewItem:", sender)
    }

    public open fun selectNextTabViewItem(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectNextTabViewItem:", sender)
    }

    public open fun selectPreviousTabViewItem(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectPreviousTabViewItem:", sender)
    }

    public open fun selectedTabViewItem(): NSTabViewItem =
        Native.objc_msgSend("class objc.NSTabViewItem", this, "selectedTabViewItem") as NSTabViewItem

    public open fun font(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "font") as NSFont

    public open fun setFont(font: NSFont): Unit {
        Native.objc_msgSend("void", this, "setFont:", font)
    }

    public open fun tabViewType(): Any =
        Native.objc_msgSend("class objc.Any", this, "tabViewType")

    public open fun setTabViewType(tabViewType: Any): Unit {
        Native.objc_msgSend("void", this, "setTabViewType:", tabViewType)
    }

    public open fun tabViewItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tabViewItems") as NSArray

    public open fun allowsTruncatedLabels(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsTruncatedLabels") as Boolean

    public open fun setAllowsTruncatedLabels(allowsTruncatedLabels: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsTruncatedLabels:", allowsTruncatedLabels)
    }

    public open fun minimumSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "minimumSize")

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun controlTint(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlTint")

    public open fun setControlTint(controlTint: Any): Unit {
        Native.objc_msgSend("void", this, "setControlTint:", controlTint)
    }

    public open fun controlSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlSize")

    public open fun setControlSize(controlSize: Any): Unit {
        Native.objc_msgSend("void", this, "setControlSize:", controlSize)
    }

    public open fun addTabViewItem(tabViewItem: NSTabViewItem): Unit {
        Native.objc_msgSend("void", this, "addTabViewItem:", tabViewItem)
    }

    public open fun insertTabViewItem_atIndex(tabViewItem: NSTabViewItem, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertTabViewItem:atIndex:", tabViewItem, index)
    }

    public open fun removeTabViewItem(tabViewItem: NSTabViewItem): Unit {
        Native.objc_msgSend("void", this, "removeTabViewItem:", tabViewItem)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun tabViewItemAtPoint(point: Any): NSTabViewItem =
        Native.objc_msgSend("class objc.NSTabViewItem", this, "tabViewItemAtPoint:", point) as NSTabViewItem

    public open fun contentRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentRect")

    public open fun numberOfTabViewItems(): Int =
        Native.objc_msgSend("int", this, "numberOfTabViewItems") as Int

    public open fun indexOfTabViewItem(tabViewItem: NSTabViewItem): Int =
        Native.objc_msgSend("int", this, "indexOfTabViewItem:", tabViewItem) as Int

    public open fun tabViewItemAtIndex(index: Int): NSTabViewItem =
        Native.objc_msgSend("class objc.NSTabViewItem", this, "tabViewItemAtIndex:", index) as NSTabViewItem

    public open fun indexOfTabViewItemWithIdentifier(identifier: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfTabViewItemWithIdentifier:", identifier) as Int

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTabView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSToolbar(pointer: Long) : NSObject(pointer), NSToolbar_NSDeprecated {
    public open fun initWithIdentifier(identifier: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIdentifier:", identifier) as ObjCObject

    public open fun insertItemWithItemIdentifier_atIndex(itemIdentifier: NSString, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertItemWithItemIdentifier:atIndex:", itemIdentifier, index)
    }

    public open fun removeItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeItemAtIndex:", index)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun isVisible(): Boolean =
        Native.objc_msgSend("boolean", this, "isVisible") as Boolean

    public open fun setVisible(visible: Boolean): Unit {
        Native.objc_msgSend("void", this, "setVisible:", visible)
    }

    public open fun runCustomizationPalette(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "runCustomizationPalette:", sender)
    }

    public open fun customizationPaletteIsRunning(): Boolean =
        Native.objc_msgSend("boolean", this, "customizationPaletteIsRunning") as Boolean

    public open fun displayMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "displayMode")

    public open fun setDisplayMode(displayMode: Any): Unit {
        Native.objc_msgSend("void", this, "setDisplayMode:", displayMode)
    }

    public open fun selectedItemIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "selectedItemIdentifier") as NSString

    public open fun setSelectedItemIdentifier(selectedItemIdentifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setSelectedItemIdentifier:", selectedItemIdentifier)
    }

    public open fun sizeMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "sizeMode")

    public open fun setSizeMode(sizeMode: Any): Unit {
        Native.objc_msgSend("void", this, "setSizeMode:", sizeMode)
    }

    public open fun showsBaselineSeparator(): Boolean =
        Native.objc_msgSend("boolean", this, "showsBaselineSeparator") as Boolean

    public open fun setShowsBaselineSeparator(showsBaselineSeparator: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsBaselineSeparator:", showsBaselineSeparator)
    }

    public open fun allowsUserCustomization(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsUserCustomization") as Boolean

    public open fun setAllowsUserCustomization(allowsUserCustomization: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsUserCustomization:", allowsUserCustomization)
    }

    public open fun identifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "identifier") as NSString

    public open fun items(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "items") as NSArray

    public open fun visibleItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "visibleItems") as NSArray

    public open fun autosavesConfiguration(): Boolean =
        Native.objc_msgSend("boolean", this, "autosavesConfiguration") as Boolean

    public open fun setAutosavesConfiguration(autosavesConfiguration: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutosavesConfiguration:", autosavesConfiguration)
    }

    public open fun setConfigurationFromDictionary(configDict: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setConfigurationFromDictionary:", configDict)
    }

    public open fun configurationDictionary(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "configurationDictionary") as NSDictionary

    public open fun validateVisibleItems(): Unit {
        Native.objc_msgSend("void", this, "validateVisibleItems")
    }

    public open fun allowsExtensionItems(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsExtensionItems") as Boolean

    public open fun setAllowsExtensionItems(allowsExtensionItems: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsExtensionItems:", allowsExtensionItems)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSToolbar_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSToolbar")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTabViewController(pointer: Long) : NSViewController(pointer), NSTabViewDelegate, NSToolbarDelegate {
    public open fun tabStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "tabStyle")

    public open fun setTabStyle(tabStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setTabStyle:", tabStyle)
    }

    public open fun tabView(): NSTabView =
        Native.objc_msgSend("class objc.NSTabView", this, "tabView") as NSTabView

    public open fun setTabView(tabView: NSTabView): Unit {
        Native.objc_msgSend("void", this, "setTabView:", tabView)
    }

    public open fun transitionOptions(): Any =
        Native.objc_msgSend("class objc.Any", this, "transitionOptions")

    public open fun setTransitionOptions(transitionOptions: Any): Unit {
        Native.objc_msgSend("void", this, "setTransitionOptions:", transitionOptions)
    }

    public open fun canPropagateSelectedChildViewControllerTitle(): Boolean =
        Native.objc_msgSend("boolean", this, "canPropagateSelectedChildViewControllerTitle") as Boolean

    public open fun setCanPropagateSelectedChildViewControllerTitle(canPropagateSelectedChildViewControllerTitle: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanPropagateSelectedChildViewControllerTitle:", canPropagateSelectedChildViewControllerTitle)
    }

    public open fun tabViewItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "tabViewItems") as NSArray

    public open fun setTabViewItems(tabViewItems: NSArray): Unit {
        Native.objc_msgSend("void", this, "setTabViewItems:", tabViewItems)
    }

    public open fun selectedTabViewItemIndex(): Int =
        Native.objc_msgSend("int", this, "selectedTabViewItemIndex") as Int

    public open fun setSelectedTabViewItemIndex(selectedTabViewItemIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setSelectedTabViewItemIndex:", selectedTabViewItemIndex)
    }

    public open fun addTabViewItem(tabViewItem: NSTabViewItem): Unit {
        Native.objc_msgSend("void", this, "addTabViewItem:", tabViewItem)
    }

    public open fun insertTabViewItem_atIndex(tabViewItem: NSTabViewItem, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertTabViewItem:atIndex:", tabViewItem, index)
    }

    public open fun removeTabViewItem(tabViewItem: NSTabViewItem): Unit {
        Native.objc_msgSend("void", this, "removeTabViewItem:", tabViewItem)
    }

    public open fun tabViewItemForViewController(viewController: NSViewController): NSTabViewItem =
        Native.objc_msgSend("class objc.NSTabViewItem", this, "tabViewItemForViewController:", viewController) as NSTabViewItem

    override fun viewDidLoad(): Unit {
        Native.objc_msgSend("void", this, "viewDidLoad")
    }

    public open fun tabView_willSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem): Unit {
        Native.objc_msgSend("void", this, "tabView:willSelectTabViewItem:", tabView, tabViewItem)
    }

    public open fun tabView_didSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem): Unit {
        Native.objc_msgSend("void", this, "tabView:didSelectTabViewItem:", tabView, tabViewItem)
    }

    public open fun tabView_shouldSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem): Boolean =
        Native.objc_msgSend("boolean", this, "tabView:shouldSelectTabViewItem:", tabView, tabViewItem) as Boolean

    public open fun toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(toolbar: NSToolbar, itemIdentifier: NSString, flag: Boolean): NSToolbarItem =
        Native.objc_msgSend("class objc.NSToolbarItem", this, "toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:", toolbar, itemIdentifier, flag) as NSToolbarItem

    public open fun toolbarDefaultItemIdentifiers(toolbar: NSToolbar): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toolbarDefaultItemIdentifiers:", toolbar) as NSArray

    public open fun toolbarAllowedItemIdentifiers(toolbar: NSToolbar): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toolbarAllowedItemIdentifiers:", toolbar) as NSArray

    public open fun toolbarSelectableItemIdentifiers(toolbar: NSToolbar): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toolbarSelectableItemIdentifiers:", toolbar) as NSArray

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSViewController.metaclass, NSTabViewDelegate.metaclass, NSToolbarDelegate.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTabViewController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTabViewItem(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun initWithIdentifier(identifier: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIdentifier:", identifier) as ObjCObject

    public open fun identifier(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "identifier") as ObjCObject

    public open fun setIdentifier(identifier: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setIdentifier:", identifier)
    }

    public open fun color(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "color") as NSColor

    public open fun setColor(color: NSColor): Unit {
        Native.objc_msgSend("void", this, "setColor:", color)
    }

    public open fun label(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "label") as NSString

    public open fun setLabel(label: NSString): Unit {
        Native.objc_msgSend("void", this, "setLabel:", label)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun setView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "setView:", view)
    }

    public open fun viewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "viewController") as NSViewController

    public open fun setViewController(viewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "setViewController:", viewController)
    }

    public open fun tabState(): Any =
        Native.objc_msgSend("class objc.Any", this, "tabState")

    public open fun tabView(): NSTabView =
        Native.objc_msgSend("class objc.NSTabView", this, "tabView") as NSTabView

    public open fun initialFirstResponder(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "initialFirstResponder") as NSView

    public open fun setInitialFirstResponder(initialFirstResponder: NSView): Unit {
        Native.objc_msgSend("void", this, "setInitialFirstResponder:", initialFirstResponder)
    }

    public open fun toolTip(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "toolTip") as NSString

    public open fun setToolTip(toolTip: NSString): Unit {
        Native.objc_msgSend("void", this, "setToolTip:", toolTip)
    }

    public open fun drawLabel_inRect(shouldTruncateLabel: Boolean, labelRect: Any): Unit {
        Native.objc_msgSend("void", this, "drawLabel:inRect:", shouldTruncateLabel, labelRect)
    }

    public open fun sizeOfLabel(computeMin: Boolean): Any =
        Native.objc_msgSend("class objc.Any", this, "sizeOfLabel:", computeMin)

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
        public open fun tabViewItemWithViewController(viewController: NSViewController): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "tabViewItemWithViewController:", viewController) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSTabViewItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPopUpButtonCell(pointer: Long) : NSMenuItemCell(pointer) {
    public open fun initTextCell_pullsDown(stringValue: NSString, pullDown: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initTextCell:pullsDown:", stringValue, pullDown) as ObjCObject

    override fun menu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menu") as NSMenu

    override fun setMenu(menu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setMenu:", menu)
    }

    public open fun pullsDown(): Boolean =
        Native.objc_msgSend("boolean", this, "pullsDown") as Boolean

    public open fun setPullsDown(pullsDown: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPullsDown:", pullsDown)
    }

    public open fun autoenablesItems(): Boolean =
        Native.objc_msgSend("boolean", this, "autoenablesItems") as Boolean

    public open fun setAutoenablesItems(autoenablesItems: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutoenablesItems:", autoenablesItems)
    }

    public open fun preferredEdge(): Int =
        Native.objc_msgSend("int", this, "preferredEdge") as Int

    public open fun setPreferredEdge(preferredEdge: Int): Unit {
        Native.objc_msgSend("void", this, "setPreferredEdge:", preferredEdge)
    }

    public open fun usesItemFromMenu(): Boolean =
        Native.objc_msgSend("boolean", this, "usesItemFromMenu") as Boolean

    public open fun setUsesItemFromMenu(usesItemFromMenu: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesItemFromMenu:", usesItemFromMenu)
    }

    public open fun altersStateOfSelectedItem(): Boolean =
        Native.objc_msgSend("boolean", this, "altersStateOfSelectedItem") as Boolean

    public open fun setAltersStateOfSelectedItem(altersStateOfSelectedItem: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAltersStateOfSelectedItem:", altersStateOfSelectedItem)
    }

    public open fun addItemWithTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "addItemWithTitle:", title)
    }

    public open fun addItemsWithTitles(itemTitles: NSArray): Unit {
        Native.objc_msgSend("void", this, "addItemsWithTitles:", itemTitles)
    }

    public open fun insertItemWithTitle_atIndex(title: NSString, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertItemWithTitle:atIndex:", title, index)
    }

    public open fun removeItemWithTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "removeItemWithTitle:", title)
    }

    public open fun removeItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeItemAtIndex:", index)
    }

    public open fun removeAllItems(): Unit {
        Native.objc_msgSend("void", this, "removeAllItems")
    }

    public open fun itemArray(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "itemArray") as NSArray

    public open fun numberOfItems(): Int =
        Native.objc_msgSend("int", this, "numberOfItems") as Int

    public open fun indexOfItem(item: NSMenuItem): Int =
        Native.objc_msgSend("int", this, "indexOfItem:", item) as Int

    public open fun indexOfItemWithTitle(title: NSString): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTitle:", title) as Int

    public open fun indexOfItemWithTag(tag: Int): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTag:", tag) as Int

    public open fun indexOfItemWithRepresentedObject(obj: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithRepresentedObject:", obj) as Int

    public open fun indexOfItemWithTarget_andAction(target: ObjCObject, actionSelector: ObjCSelector): Int =
        Native.objc_msgSend("int", this, "indexOfItemWithTarget:andAction:", target, actionSelector) as Int

    public open fun itemAtIndex(index: Int): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "itemAtIndex:", index) as NSMenuItem

    public open fun itemWithTitle(title: NSString): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "itemWithTitle:", title) as NSMenuItem

    public open fun lastItem(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "lastItem") as NSMenuItem

    public open fun selectItem(item: NSMenuItem): Unit {
        Native.objc_msgSend("void", this, "selectItem:", item)
    }

    public open fun selectItemAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "selectItemAtIndex:", index)
    }

    public open fun selectItemWithTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "selectItemWithTitle:", title)
    }

    public open fun selectItemWithTag(tag: Int): Boolean =
        Native.objc_msgSend("boolean", this, "selectItemWithTag:", tag) as Boolean

    override fun setTitle(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", aString)
    }

    public open fun selectedItem(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "selectedItem") as NSMenuItem

    public open fun indexOfSelectedItem(): Int =
        Native.objc_msgSend("int", this, "indexOfSelectedItem") as Int

    public open fun synchronizeTitleAndSelectedItem(): Unit {
        Native.objc_msgSend("void", this, "synchronizeTitleAndSelectedItem")
    }

    public open fun itemTitleAtIndex(index: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "itemTitleAtIndex:", index) as NSString

    public open fun itemTitles(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "itemTitles") as NSArray

    public open fun titleOfSelectedItem(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "titleOfSelectedItem") as NSString

    public open fun attachPopUpWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "attachPopUpWithFrame:inView:", cellFrame, controlView)
    }

    public open fun dismissPopUp(): Unit {
        Native.objc_msgSend("void", this, "dismissPopUp")
    }

    public open fun performClickWithFrame_inView(frame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "performClickWithFrame:inView:", frame, controlView)
    }

    public open fun arrowPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "arrowPosition")

    public open fun setArrowPosition(arrowPosition: Any): Unit {
        Native.objc_msgSend("void", this, "setArrowPosition:", arrowPosition)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun getPeriodicDelay_interval(delay: Pointer<Float>, interval: Pointer<Float>): Unit {
        Native.objc_msgSend("void", this, "getPeriodicDelay:interval:", delay, interval)
    }

    override fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    override fun keyEquivalent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "keyEquivalent") as NSString

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performClick(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performClick:", sender)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    override fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    override fun titleRectForBounds(theRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "titleRectForBounds:", theRect)

    trait metaclass : NSMenuItemCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPopUpButtonCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSBezierPath(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSBezierPath_NSBezierPathDeprecated {
    public open fun moveToPoint(point: Any): Unit {
        Native.objc_msgSend("void", this, "moveToPoint:", point)
    }

    public open fun lineToPoint(point: Any): Unit {
        Native.objc_msgSend("void", this, "lineToPoint:", point)
    }

    public open fun curveToPoint_controlPoint1_controlPoint2(endPoint: Any, controlPoint1: Any, controlPoint2: Any): Unit {
        Native.objc_msgSend("void", this, "curveToPoint:controlPoint1:controlPoint2:", endPoint, controlPoint1, controlPoint2)
    }

    public open fun closePath(): Unit {
        Native.objc_msgSend("void", this, "closePath")
    }

    public open fun removeAllPoints(): Unit {
        Native.objc_msgSend("void", this, "removeAllPoints")
    }

    public open fun relativeMoveToPoint(point: Any): Unit {
        Native.objc_msgSend("void", this, "relativeMoveToPoint:", point)
    }

    public open fun relativeLineToPoint(point: Any): Unit {
        Native.objc_msgSend("void", this, "relativeLineToPoint:", point)
    }

    public open fun relativeCurveToPoint_controlPoint1_controlPoint2(endPoint: Any, controlPoint1: Any, controlPoint2: Any): Unit {
        Native.objc_msgSend("void", this, "relativeCurveToPoint:controlPoint1:controlPoint2:", endPoint, controlPoint1, controlPoint2)
    }

    public open fun lineWidth(): Double =
        Native.objc_msgSend("double", this, "lineWidth") as Double

    public open fun setLineWidth(lineWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setLineWidth:", lineWidth)
    }

    public open fun lineCapStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "lineCapStyle")

    public open fun setLineCapStyle(lineCapStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setLineCapStyle:", lineCapStyle)
    }

    public open fun lineJoinStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "lineJoinStyle")

    public open fun setLineJoinStyle(lineJoinStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setLineJoinStyle:", lineJoinStyle)
    }

    public open fun windingRule(): Any =
        Native.objc_msgSend("class objc.Any", this, "windingRule")

    public open fun setWindingRule(windingRule: Any): Unit {
        Native.objc_msgSend("void", this, "setWindingRule:", windingRule)
    }

    public open fun miterLimit(): Double =
        Native.objc_msgSend("double", this, "miterLimit") as Double

    public open fun setMiterLimit(miterLimit: Double): Unit {
        Native.objc_msgSend("void", this, "setMiterLimit:", miterLimit)
    }

    public open fun flatness(): Double =
        Native.objc_msgSend("double", this, "flatness") as Double

    public open fun setFlatness(flatness: Double): Unit {
        Native.objc_msgSend("void", this, "setFlatness:", flatness)
    }

    public open fun getLineDash_count_phase(pattern: Pointer<Double>, count: Pointer<Int>, phase: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "getLineDash:count:phase:", pattern, count, phase)
    }

    public open fun setLineDash_count_phase(pattern: Pointer<Double>, count: Int, phase: Double): Unit {
        Native.objc_msgSend("void", this, "setLineDash:count:phase:", pattern, count, phase)
    }

    public open fun stroke(): Unit {
        Native.objc_msgSend("void", this, "stroke")
    }

    public open fun fill(): Unit {
        Native.objc_msgSend("void", this, "fill")
    }

    public open fun addClip(): Unit {
        Native.objc_msgSend("void", this, "addClip")
    }

    public open fun setClip(): Unit {
        Native.objc_msgSend("void", this, "setClip")
    }

    public open fun bezierPathByFlatteningPath(): NSBezierPath =
        Native.objc_msgSend("class objc.NSBezierPath", this, "bezierPathByFlatteningPath") as NSBezierPath

    public open fun bezierPathByReversingPath(): NSBezierPath =
        Native.objc_msgSend("class objc.NSBezierPath", this, "bezierPathByReversingPath") as NSBezierPath

    public open fun transformUsingAffineTransform(transform: NSAffineTransform): Unit {
        Native.objc_msgSend("void", this, "transformUsingAffineTransform:", transform)
    }

    public open fun isEmpty(): Boolean =
        Native.objc_msgSend("boolean", this, "isEmpty") as Boolean

    public open fun currentPoint(): Any =
        Native.objc_msgSend("class objc.Any", this, "currentPoint")

    public open fun controlPointBounds(): Any =
        Native.objc_msgSend("class objc.Any", this, "controlPointBounds")

    public open fun bounds(): Any =
        Native.objc_msgSend("class objc.Any", this, "bounds")

    public open fun elementCount(): Int =
        Native.objc_msgSend("int", this, "elementCount") as Int

    public open fun elementAtIndex_associatedPoints(index: Int, points: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "elementAtIndex:associatedPoints:", index, points)

    public open fun elementAtIndex(index: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "elementAtIndex:", index)

    public open fun setAssociatedPoints_atIndex(points: Pointer<Any>, index: Int): Unit {
        Native.objc_msgSend("void", this, "setAssociatedPoints:atIndex:", points, index)
    }

    public open fun appendBezierPath(path: NSBezierPath): Unit {
        Native.objc_msgSend("void", this, "appendBezierPath:", path)
    }

    public open fun appendBezierPathWithRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithRect:", rect)
    }

    public open fun appendBezierPathWithPoints_count(points: Pointer<Any>, count: Int): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithPoints:count:", points, count)
    }

    public open fun appendBezierPathWithOvalInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithOvalInRect:", rect)
    }

    public open fun appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise(center: Any, radius: Double, startAngle: Double, endAngle: Double, clockwise: Boolean): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:", center, radius, startAngle, endAngle, clockwise)
    }

    public open fun appendBezierPathWithArcWithCenter_radius_startAngle_endAngle(center: Any, radius: Double, startAngle: Double, endAngle: Double): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:", center, radius, startAngle, endAngle)
    }

    public open fun appendBezierPathWithArcFromPoint_toPoint_radius(point1: Any, point2: Any, radius: Double): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithArcFromPoint:toPoint:radius:", point1, point2, radius)
    }

    public open fun appendBezierPathWithGlyph_inFont(glyph: Int, font: NSFont): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithGlyph:inFont:", glyph, font)
    }

    public open fun appendBezierPathWithGlyphs_count_inFont(glyphs: Pointer<Int>, count: Int, font: NSFont): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithGlyphs:count:inFont:", glyphs, count, font)
    }

    public open fun appendBezierPathWithPackedGlyphs(packedGlyphs: Pointer<Char>): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithPackedGlyphs:", packedGlyphs)
    }

    public open fun appendBezierPathWithRoundedRect_xRadius_yRadius(rect: Any, xRadius: Double, yRadius: Double): Unit {
        Native.objc_msgSend("void", this, "appendBezierPathWithRoundedRect:xRadius:yRadius:", rect, xRadius, yRadius)
    }

    public open fun containsPoint(point: Any): Boolean =
        Native.objc_msgSend("boolean", this, "containsPoint:", point) as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSBezierPath_NSBezierPathDeprecated.metaclass {
        public open fun bezierPath(): NSBezierPath =
            Native.objc_msgSend("class objc.NSBezierPath", this, "bezierPath") as NSBezierPath

        public open fun bezierPathWithRect(rect: Any): NSBezierPath =
            Native.objc_msgSend("class objc.NSBezierPath", this, "bezierPathWithRect:", rect) as NSBezierPath

        public open fun bezierPathWithOvalInRect(rect: Any): NSBezierPath =
            Native.objc_msgSend("class objc.NSBezierPath", this, "bezierPathWithOvalInRect:", rect) as NSBezierPath

        public open fun bezierPathWithRoundedRect_xRadius_yRadius(rect: Any, xRadius: Double, yRadius: Double): NSBezierPath =
            Native.objc_msgSend("class objc.NSBezierPath", this, "bezierPathWithRoundedRect:xRadius:yRadius:", rect, xRadius, yRadius) as NSBezierPath

        public open fun fillRect(rect: Any): Unit {
            Native.objc_msgSend("void", this, "fillRect:", rect)
        }

        public open fun strokeRect(rect: Any): Unit {
            Native.objc_msgSend("void", this, "strokeRect:", rect)
        }

        public open fun clipRect(rect: Any): Unit {
            Native.objc_msgSend("void", this, "clipRect:", rect)
        }

        public open fun strokeLineFromPoint_toPoint(point1: Any, point2: Any): Unit {
            Native.objc_msgSend("void", this, "strokeLineFromPoint:toPoint:", point1, point2)
        }

        public open fun drawPackedGlyphs_atPoint(packedGlyphs: Pointer<Char>, point: Any): Unit {
            Native.objc_msgSend("void", this, "drawPackedGlyphs:atPoint:", packedGlyphs, point)
        }

        public open fun setDefaultMiterLimit(limit: Double): Unit {
            Native.objc_msgSend("void", this, "setDefaultMiterLimit:", limit)
        }

        public open fun defaultMiterLimit(): Double =
            Native.objc_msgSend("double", this, "defaultMiterLimit") as Double

        public open fun setDefaultFlatness(flatness: Double): Unit {
            Native.objc_msgSend("void", this, "setDefaultFlatness:", flatness)
        }

        public open fun defaultFlatness(): Double =
            Native.objc_msgSend("double", this, "defaultFlatness") as Double

        public open fun setDefaultWindingRule(windingRule: Any): Unit {
            Native.objc_msgSend("void", this, "setDefaultWindingRule:", windingRule)
        }

        public open fun defaultWindingRule(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultWindingRule")

        public open fun setDefaultLineCapStyle(lineCapStyle: Any): Unit {
            Native.objc_msgSend("void", this, "setDefaultLineCapStyle:", lineCapStyle)
        }

        public open fun defaultLineCapStyle(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultLineCapStyle")

        public open fun setDefaultLineJoinStyle(lineJoinStyle: Any): Unit {
            Native.objc_msgSend("void", this, "setDefaultLineJoinStyle:", lineJoinStyle)
        }

        public open fun defaultLineJoinStyle(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultLineJoinStyle")

        public open fun setDefaultLineWidth(lineWidth: Double): Unit {
            Native.objc_msgSend("void", this, "setDefaultLineWidth:", lineWidth)
        }

        public open fun defaultLineWidth(): Double =
            Native.objc_msgSend("double", this, "defaultLineWidth") as Double

    }

    companion object : NSObject(Native.objc_getClass("NSBezierPath")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPICTImageRep(pointer: Long) : NSImageRep(pointer) {
    public open fun initWithData(pictData: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", pictData) as ObjCObject

    public open fun PICTRepresentation(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "PICTRepresentation") as NSData

    public open fun boundingBox(): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingBox")

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSImageRep.metaclass {
        public open fun imageRepWithData(pictData: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "imageRepWithData:", pictData) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSPICTImageRep")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStatusBar(pointer: Long) : NSObject(pointer) {
    public open fun statusItemWithLength(length: Double): NSStatusItem =
        Native.objc_msgSend("class objc.NSStatusItem", this, "statusItemWithLength:", length) as NSStatusItem

    public open fun removeStatusItem(item: NSStatusItem): Unit {
        Native.objc_msgSend("void", this, "removeStatusItem:", item)
    }

    public open fun isVertical(): Boolean =
        Native.objc_msgSend("boolean", this, "isVertical") as Boolean

    public open fun thickness(): Double =
        Native.objc_msgSend("double", this, "thickness") as Double

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun systemStatusBar(): NSStatusBar =
            Native.objc_msgSend("class objc.NSStatusBar", this, "systemStatusBar") as NSStatusBar

    }

    companion object : NSObject(Native.objc_getClass("NSStatusBar")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStatusBarButton(pointer: Long) : NSButton(pointer) {
    public open fun appearsDisabled(): Boolean =
        Native.objc_msgSend("boolean", this, "appearsDisabled") as Boolean

    public open fun setAppearsDisabled(appearsDisabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAppearsDisabled:", appearsDisabled)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSButton.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSStatusBarButton")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStatusItem(pointer: Long) : NSObject(pointer), NSStatusItem_NSStatusItemDeprecated {
    public open fun statusBar(): NSStatusBar =
        Native.objc_msgSend("class objc.NSStatusBar", this, "statusBar") as NSStatusBar

    public open fun length(): Double =
        Native.objc_msgSend("double", this, "length") as Double

    public open fun setLength(length: Double): Unit {
        Native.objc_msgSend("void", this, "setLength:", length)
    }

    public open fun menu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menu") as NSMenu

    public open fun setMenu(menu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setMenu:", menu)
    }

    public open fun button(): NSStatusBarButton =
        Native.objc_msgSend("class objc.NSStatusBarButton", this, "button") as NSStatusBarButton

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSStatusItem_NSStatusItemDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSStatusItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSound(pointer: Long) : NSObject(pointer), NSCopying, NSCoding, NSPasteboardReading, NSPasteboardWriting, NSSound_NSDeprecated {
    public open fun initWithContentsOfURL_byReference(url: NSURL, byRef: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:byReference:", url, byRef) as ObjCObject

    public open fun initWithContentsOfFile_byReference(path: NSString, byRef: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfFile:byReference:", path, byRef) as ObjCObject

    public open fun initWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", data) as ObjCObject

    public open fun setName(string: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setName:", string) as Boolean

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun initWithPasteboard(pasteboard: NSPasteboard): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPasteboard:", pasteboard) as ObjCObject

    public open fun writeToPasteboard(pasteboard: NSPasteboard): Unit {
        Native.objc_msgSend("void", this, "writeToPasteboard:", pasteboard)
    }

    public open fun play(): Boolean =
        Native.objc_msgSend("boolean", this, "play") as Boolean

    public open fun pause(): Boolean =
        Native.objc_msgSend("boolean", this, "pause") as Boolean

    public open fun resume(): Boolean =
        Native.objc_msgSend("boolean", this, "resume") as Boolean

    public open fun stop(): Boolean =
        Native.objc_msgSend("boolean", this, "stop") as Boolean

    public open fun isPlaying(): Boolean =
        Native.objc_msgSend("boolean", this, "isPlaying") as Boolean

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun duration(): Double =
        Native.objc_msgSend("double", this, "duration") as Double

    public open fun volume(): Float =
        Native.objc_msgSend("float", this, "volume") as Float

    public open fun setVolume(volume: Float): Unit {
        Native.objc_msgSend("void", this, "setVolume:", volume)
    }

    public open fun currentTime(): Double =
        Native.objc_msgSend("double", this, "currentTime") as Double

    public open fun setCurrentTime(currentTime: Double): Unit {
        Native.objc_msgSend("void", this, "setCurrentTime:", currentTime)
    }

    public open fun loops(): Boolean =
        Native.objc_msgSend("boolean", this, "loops") as Boolean

    public open fun setLoops(loops: Boolean): Unit {
        Native.objc_msgSend("void", this, "setLoops:", loops)
    }

    public open fun playbackDeviceIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "playbackDeviceIdentifier") as NSString

    public open fun setPlaybackDeviceIdentifier(playbackDeviceIdentifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setPlaybackDeviceIdentifier:", playbackDeviceIdentifier)
    }

    public open fun setChannelMapping(channelMapping: NSArray): Unit {
        Native.objc_msgSend("void", this, "setChannelMapping:", channelMapping)
    }

    public open fun channelMapping(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "channelMapping") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass, NSPasteboardReading.metaclass, NSPasteboardWriting.metaclass, NSSound_NSDeprecated.metaclass {
        public open fun soundNamed(name: NSString): NSSound =
            Native.objc_msgSend("class objc.NSSound", this, "soundNamed:", name) as NSSound

        public open fun canInitWithPasteboard(pasteboard: NSPasteboard): Boolean =
            Native.objc_msgSend("boolean", this, "canInitWithPasteboard:", pasteboard) as Boolean

        public open fun soundUnfilteredTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "soundUnfilteredTypes") as NSArray

    }

    companion object : NSObject(Native.objc_getClass("NSSound")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMovie(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun initWithMovie(movie: QTMovie): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithMovie:", movie) as ObjCObject

    public open fun QTMovie(): QTMovie =
        Native.objc_msgSend("class objc.QTMovie", this, "QTMovie") as QTMovie

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSMovie")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPDFImageRep(pointer: Long) : NSImageRep(pointer) {
    public open fun initWithData(pdfData: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", pdfData) as ObjCObject

    public open fun PDFRepresentation(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "PDFRepresentation") as NSData

    public open fun bounds(): Any =
        Native.objc_msgSend("class objc.Any", this, "bounds")

    public open fun currentPage(): Int =
        Native.objc_msgSend("int", this, "currentPage") as Int

    public open fun setCurrentPage(currentPage: Int): Unit {
        Native.objc_msgSend("void", this, "setCurrentPage:", currentPage)
    }

    public open fun pageCount(): Int =
        Native.objc_msgSend("int", this, "pageCount") as Int

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSImageRep.metaclass {
        public open fun imageRepWithData(pdfData: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "imageRepWithData:", pdfData) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSPDFImageRep")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDrawer(pointer: Long) : NSResponder(pointer), NSAccessibilityElementProtocol, NSAccessibility {
    public open fun initWithContentSize_preferredEdge(contentSize: Any, edge: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentSize:preferredEdge:", contentSize, edge) as ObjCObject

    public open fun parentWindow(): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "parentWindow") as NSWindow

    public open fun setParentWindow(parentWindow: NSWindow): Unit {
        Native.objc_msgSend("void", this, "setParentWindow:", parentWindow)
    }

    public open fun contentView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "contentView") as NSView

    public open fun setContentView(contentView: NSView): Unit {
        Native.objc_msgSend("void", this, "setContentView:", contentView)
    }

    public open fun preferredEdge(): Int =
        Native.objc_msgSend("int", this, "preferredEdge") as Int

    public open fun setPreferredEdge(preferredEdge: Int): Unit {
        Native.objc_msgSend("void", this, "setPreferredEdge:", preferredEdge)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun open(): Unit {
        Native.objc_msgSend("void", this, "open")
    }

    public open fun openOnEdge(edge: Int): Unit {
        Native.objc_msgSend("void", this, "openOnEdge:", edge)
    }

    public open fun close(): Unit {
        Native.objc_msgSend("void", this, "close")
    }

    public open fun open(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "open:", sender)
    }

    public open fun close(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "close:", sender)
    }

    public open fun toggle(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggle:", sender)
    }

    public open fun state(): Int =
        Native.objc_msgSend("int", this, "state") as Int

    public open fun edge(): Int =
        Native.objc_msgSend("int", this, "edge") as Int

    public open fun contentSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentSize")

    public open fun setContentSize(contentSize: Any): Unit {
        Native.objc_msgSend("void", this, "setContentSize:", contentSize)
    }

    public open fun minContentSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "minContentSize")

    public open fun setMinContentSize(minContentSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMinContentSize:", minContentSize)
    }

    public open fun maxContentSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "maxContentSize")

    public open fun setMaxContentSize(maxContentSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMaxContentSize:", maxContentSize)
    }

    public open fun leadingOffset(): Double =
        Native.objc_msgSend("double", this, "leadingOffset") as Double

    public open fun setLeadingOffset(leadingOffset: Double): Unit {
        Native.objc_msgSend("void", this, "setLeadingOffset:", leadingOffset)
    }

    public open fun trailingOffset(): Double =
        Native.objc_msgSend("double", this, "trailingOffset") as Double

    public open fun setTrailingOffset(trailingOffset: Double): Unit {
        Native.objc_msgSend("void", this, "setTrailingOffset:", trailingOffset)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSResponder.metaclass, NSAccessibilityElementProtocol.metaclass, NSAccessibility.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDrawer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOpenGLPixelFormat(pointer: Long) : NSObject(pointer), NSCoding {
    public open fun initWithAttributes(attribs: Pointer<Int>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithAttributes:", attribs) as ObjCObject

    public open fun initWithData(attribs: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", attribs) as ObjCObject

    public open fun initWithCGLPixelFormatObj(format: Pointer<Any>): NSOpenGLPixelFormat =
        Native.objc_msgSend("class objc.NSOpenGLPixelFormat", this, "initWithCGLPixelFormatObj:", format) as NSOpenGLPixelFormat

    public open fun attributes(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "attributes") as NSData

    public open fun setAttributes(attribs: NSData): Unit {
        Native.objc_msgSend("void", this, "setAttributes:", attribs)
    }

    public open fun getValues_forAttribute_forVirtualScreen(vals: Pointer<Int>, attrib: Int, screen: Int): Unit {
        Native.objc_msgSend("void", this, "getValues:forAttribute:forVirtualScreen:", vals, attrib, screen)
    }

    public open fun numberOfVirtualScreens(): Int =
        Native.objc_msgSend("int", this, "numberOfVirtualScreens") as Int

    public open fun CGLPixelFormatObj(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGLPixelFormatObj") as Pointer<Any>

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSOpenGLPixelFormat")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOpenGLPixelBuffer(pointer: Long) : NSObject(pointer) {
    public open fun initWithTextureTarget_textureInternalFormat_textureMaxMipMapLevel_pixelsWide_pixelsHigh(target: Int, format: Int, maxLevel: Int, pixelsWide: Int, pixelsHigh: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:", target, format, maxLevel, pixelsWide, pixelsHigh) as ObjCObject

    public open fun initWithCGLPBufferObj(pbuffer: Pointer<Any>): NSOpenGLPixelBuffer =
        Native.objc_msgSend("class objc.NSOpenGLPixelBuffer", this, "initWithCGLPBufferObj:", pbuffer) as NSOpenGLPixelBuffer

    public open fun CGLPBufferObj(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGLPBufferObj") as Pointer<Any>

    public open fun pixelsWide(): Int =
        Native.objc_msgSend("int", this, "pixelsWide") as Int

    public open fun pixelsHigh(): Int =
        Native.objc_msgSend("int", this, "pixelsHigh") as Int

    public open fun textureTarget(): Int =
        Native.objc_msgSend("int", this, "textureTarget") as Int

    public open fun textureInternalFormat(): Int =
        Native.objc_msgSend("int", this, "textureInternalFormat") as Int

    public open fun textureMaxMipMapLevel(): Int =
        Native.objc_msgSend("int", this, "textureMaxMipMapLevel") as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSOpenGLPixelBuffer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOpenGLContext(pointer: Long) : NSObject(pointer), NSLocking, NSOpenGLContext_NSOpenGLPixelBufer {
    public open fun initWithFormat_shareContext(format: NSOpenGLPixelFormat, share: NSOpenGLContext): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFormat:shareContext:", format, share) as ObjCObject

    public open fun initWithCGLContextObj(context: Pointer<Any>): NSOpenGLContext =
        Native.objc_msgSend("class objc.NSOpenGLContext", this, "initWithCGLContextObj:", context) as NSOpenGLContext

    public open fun pixelFormat(): NSOpenGLPixelFormat =
        Native.objc_msgSend("class objc.NSOpenGLPixelFormat", this, "pixelFormat") as NSOpenGLPixelFormat

    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun setView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "setView:", view)
    }

    public open fun setFullScreen(): Unit {
        Native.objc_msgSend("void", this, "setFullScreen")
    }

    public open fun setOffScreen_width_height_rowbytes(baseaddr: Pointer<*>, width: Int, height: Int, rowbytes: Int): Unit {
        Native.objc_msgSend("void", this, "setOffScreen:width:height:rowbytes:", baseaddr, width, height, rowbytes)
    }

    public open fun clearDrawable(): Unit {
        Native.objc_msgSend("void", this, "clearDrawable")
    }

    public open fun update(): Unit {
        Native.objc_msgSend("void", this, "update")
    }

    public open fun flushBuffer(): Unit {
        Native.objc_msgSend("void", this, "flushBuffer")
    }

    public open fun makeCurrentContext(): Unit {
        Native.objc_msgSend("void", this, "makeCurrentContext")
    }

    public open fun copyAttributesFromContext_withMask(context: NSOpenGLContext, mask: Int): Unit {
        Native.objc_msgSend("void", this, "copyAttributesFromContext:withMask:", context, mask)
    }

    public open fun setValues_forParameter(vals: Pointer<Int>, param: Any): Unit {
        Native.objc_msgSend("void", this, "setValues:forParameter:", vals, param)
    }

    public open fun getValues_forParameter(vals: Pointer<Int>, param: Any): Unit {
        Native.objc_msgSend("void", this, "getValues:forParameter:", vals, param)
    }

    public open fun currentVirtualScreen(): Int =
        Native.objc_msgSend("int", this, "currentVirtualScreen") as Int

    public open fun setCurrentVirtualScreen(currentVirtualScreen: Int): Unit {
        Native.objc_msgSend("void", this, "setCurrentVirtualScreen:", currentVirtualScreen)
    }

    public open fun createTexture_fromView_internalFormat(target: Int, view: NSView, format: Int): Unit {
        Native.objc_msgSend("void", this, "createTexture:fromView:internalFormat:", target, view, format)
    }

    public open fun CGLContextObj(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "CGLContextObj") as Pointer<Any>

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSLocking.metaclass, NSOpenGLContext_NSOpenGLPixelBufer.metaclass {
        public open fun clearCurrentContext(): Unit {
            Native.objc_msgSend("void", this, "clearCurrentContext")
        }

        public open fun currentContext(): NSOpenGLContext =
            Native.objc_msgSend("class objc.NSOpenGLContext", this, "currentContext") as NSOpenGLContext

    }

    companion object : NSObject(Native.objc_getClass("NSOpenGLContext")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CALayer(pointer: Long) : NSObject(pointer), NSCoding, CAMediaTiming {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithLayer(layer: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLayer:", layer) as ObjCObject

    public open fun presentationLayer(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "presentationLayer") as ObjCObject

    public open fun modelLayer(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "modelLayer") as ObjCObject

    public open fun shouldArchiveValueForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "shouldArchiveValueForKey:", key) as Boolean

    public open fun bounds(): Any =
        Native.objc_msgSend("class objc.Any", this, "bounds")

    public open fun setBounds(bounds: Any): Unit {
        Native.objc_msgSend("void", this, "setBounds:", bounds)
    }

    public open fun position(): Any =
        Native.objc_msgSend("class objc.Any", this, "position")

    public open fun setPosition(position: Any): Unit {
        Native.objc_msgSend("void", this, "setPosition:", position)
    }

    public open fun zPosition(): Double =
        Native.objc_msgSend("double", this, "zPosition") as Double

    public open fun setZPosition(zPosition: Double): Unit {
        Native.objc_msgSend("void", this, "setZPosition:", zPosition)
    }

    public open fun anchorPoint(): Any =
        Native.objc_msgSend("class objc.Any", this, "anchorPoint")

    public open fun setAnchorPoint(anchorPoint: Any): Unit {
        Native.objc_msgSend("void", this, "setAnchorPoint:", anchorPoint)
    }

    public open fun anchorPointZ(): Double =
        Native.objc_msgSend("double", this, "anchorPointZ") as Double

    public open fun setAnchorPointZ(anchorPointZ: Double): Unit {
        Native.objc_msgSend("void", this, "setAnchorPointZ:", anchorPointZ)
    }

    public open fun transform(): Any =
        Native.objc_msgSend("class objc.Any", this, "transform")

    public open fun setTransform(transform: Any): Unit {
        Native.objc_msgSend("void", this, "setTransform:", transform)
    }

    public open fun affineTransform(): Any =
        Native.objc_msgSend("class objc.Any", this, "affineTransform")

    public open fun setAffineTransform(m: Any): Unit {
        Native.objc_msgSend("void", this, "setAffineTransform:", m)
    }

    public open fun frame(): Any =
        Native.objc_msgSend("class objc.Any", this, "frame")

    public open fun setFrame(frame: Any): Unit {
        Native.objc_msgSend("void", this, "setFrame:", frame)
    }

    public open fun isHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "isHidden") as Boolean

    public open fun setHidden(hidden: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHidden:", hidden)
    }

    public open fun isDoubleSided(): Boolean =
        Native.objc_msgSend("boolean", this, "isDoubleSided") as Boolean

    public open fun setDoubleSided(doubleSided: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDoubleSided:", doubleSided)
    }

    public open fun isGeometryFlipped(): Boolean =
        Native.objc_msgSend("boolean", this, "isGeometryFlipped") as Boolean

    public open fun setGeometryFlipped(geometryFlipped: Boolean): Unit {
        Native.objc_msgSend("void", this, "setGeometryFlipped:", geometryFlipped)
    }

    public open fun contentsAreFlipped(): Boolean =
        Native.objc_msgSend("boolean", this, "contentsAreFlipped") as Boolean

    public open fun superlayer(): CALayer =
        Native.objc_msgSend("class objc.CALayer", this, "superlayer") as CALayer

    public open fun removeFromSuperlayer(): Unit {
        Native.objc_msgSend("void", this, "removeFromSuperlayer")
    }

    public open fun sublayers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sublayers") as NSArray

    public open fun setSublayers(sublayers: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSublayers:", sublayers)
    }

    public open fun addSublayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "addSublayer:", layer)
    }

    public open fun insertSublayer_atIndex(layer: CALayer, idx: Int): Unit {
        Native.objc_msgSend("void", this, "insertSublayer:atIndex:", layer, idx)
    }

    public open fun insertSublayer_below(layer: CALayer, sibling: CALayer): Unit {
        Native.objc_msgSend("void", this, "insertSublayer:below:", layer, sibling)
    }

    public open fun insertSublayer_above(layer: CALayer, sibling: CALayer): Unit {
        Native.objc_msgSend("void", this, "insertSublayer:above:", layer, sibling)
    }

    public open fun replaceSublayer_with(layer: CALayer, layer2: CALayer): Unit {
        Native.objc_msgSend("void", this, "replaceSublayer:with:", layer, layer2)
    }

    public open fun sublayerTransform(): Any =
        Native.objc_msgSend("class objc.Any", this, "sublayerTransform")

    public open fun setSublayerTransform(sublayerTransform: Any): Unit {
        Native.objc_msgSend("void", this, "setSublayerTransform:", sublayerTransform)
    }

    public open fun mask(): CALayer =
        Native.objc_msgSend("class objc.CALayer", this, "mask") as CALayer

    public open fun setMask(mask: CALayer): Unit {
        Native.objc_msgSend("void", this, "setMask:", mask)
    }

    public open fun masksToBounds(): Boolean =
        Native.objc_msgSend("boolean", this, "masksToBounds") as Boolean

    public open fun setMasksToBounds(masksToBounds: Boolean): Unit {
        Native.objc_msgSend("void", this, "setMasksToBounds:", masksToBounds)
    }

    public open fun convertPoint_fromLayer(p: Any, l: CALayer): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPoint:fromLayer:", p, l)

    public open fun convertPoint_toLayer(p: Any, l: CALayer): Any =
        Native.objc_msgSend("class objc.Any", this, "convertPoint:toLayer:", p, l)

    public open fun convertRect_fromLayer(r: Any, l: CALayer): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRect:fromLayer:", r, l)

    public open fun convertRect_toLayer(r: Any, l: CALayer): Any =
        Native.objc_msgSend("class objc.Any", this, "convertRect:toLayer:", r, l)

    public open fun convertTime_fromLayer(t: Double, l: CALayer): Double =
        Native.objc_msgSend("double", this, "convertTime:fromLayer:", t, l) as Double

    public open fun convertTime_toLayer(t: Double, l: CALayer): Double =
        Native.objc_msgSend("double", this, "convertTime:toLayer:", t, l) as Double

    public open fun hitTest(p: Any): CALayer =
        Native.objc_msgSend("class objc.CALayer", this, "hitTest:", p) as CALayer

    public open fun containsPoint(p: Any): Boolean =
        Native.objc_msgSend("boolean", this, "containsPoint:", p) as Boolean

    public open fun contents(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "contents") as ObjCObject

    public open fun setContents(contents: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setContents:", contents)
    }

    public open fun contentsRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentsRect")

    public open fun setContentsRect(contentsRect: Any): Unit {
        Native.objc_msgSend("void", this, "setContentsRect:", contentsRect)
    }

    public open fun contentsGravity(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "contentsGravity") as NSString

    public open fun setContentsGravity(contentsGravity: NSString): Unit {
        Native.objc_msgSend("void", this, "setContentsGravity:", contentsGravity)
    }

    public open fun contentsScale(): Double =
        Native.objc_msgSend("double", this, "contentsScale") as Double

    public open fun setContentsScale(contentsScale: Double): Unit {
        Native.objc_msgSend("void", this, "setContentsScale:", contentsScale)
    }

    public open fun contentsCenter(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentsCenter")

    public open fun setContentsCenter(contentsCenter: Any): Unit {
        Native.objc_msgSend("void", this, "setContentsCenter:", contentsCenter)
    }

    public open fun minificationFilter(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "minificationFilter") as NSString

    public open fun setMinificationFilter(minificationFilter: NSString): Unit {
        Native.objc_msgSend("void", this, "setMinificationFilter:", minificationFilter)
    }

    public open fun magnificationFilter(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "magnificationFilter") as NSString

    public open fun setMagnificationFilter(magnificationFilter: NSString): Unit {
        Native.objc_msgSend("void", this, "setMagnificationFilter:", magnificationFilter)
    }

    public open fun minificationFilterBias(): Float =
        Native.objc_msgSend("float", this, "minificationFilterBias") as Float

    public open fun setMinificationFilterBias(minificationFilterBias: Float): Unit {
        Native.objc_msgSend("void", this, "setMinificationFilterBias:", minificationFilterBias)
    }

    public open fun isOpaque(): Boolean =
        Native.objc_msgSend("boolean", this, "isOpaque") as Boolean

    public open fun setOpaque(opaque: Boolean): Unit {
        Native.objc_msgSend("void", this, "setOpaque:", opaque)
    }

    public open fun display(): Unit {
        Native.objc_msgSend("void", this, "display")
    }

    public open fun setNeedsDisplay(): Unit {
        Native.objc_msgSend("void", this, "setNeedsDisplay")
    }

    public open fun setNeedsDisplayInRect(r: Any): Unit {
        Native.objc_msgSend("void", this, "setNeedsDisplayInRect:", r)
    }

    public open fun needsDisplay(): Boolean =
        Native.objc_msgSend("boolean", this, "needsDisplay") as Boolean

    public open fun displayIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "displayIfNeeded")
    }

    public open fun needsDisplayOnBoundsChange(): Boolean =
        Native.objc_msgSend("boolean", this, "needsDisplayOnBoundsChange") as Boolean

    public open fun setNeedsDisplayOnBoundsChange(needsDisplayOnBoundsChange: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNeedsDisplayOnBoundsChange:", needsDisplayOnBoundsChange)
    }

    public open fun drawsAsynchronously(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsAsynchronously") as Boolean

    public open fun setDrawsAsynchronously(drawsAsynchronously: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsAsynchronously:", drawsAsynchronously)
    }

    public open fun drawInContext(ctx: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "drawInContext:", ctx)
    }

    public open fun renderInContext(ctx: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "renderInContext:", ctx)
    }

    public open fun edgeAntialiasingMask(): Any =
        Native.objc_msgSend("class objc.Any", this, "edgeAntialiasingMask")

    public open fun setEdgeAntialiasingMask(edgeAntialiasingMask: Any): Unit {
        Native.objc_msgSend("void", this, "setEdgeAntialiasingMask:", edgeAntialiasingMask)
    }

    public open fun backgroundColor(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "backgroundColor") as Pointer<Any>

    public open fun setBackgroundColor(backgroundColor: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun cornerRadius(): Double =
        Native.objc_msgSend("double", this, "cornerRadius") as Double

    public open fun setCornerRadius(cornerRadius: Double): Unit {
        Native.objc_msgSend("void", this, "setCornerRadius:", cornerRadius)
    }

    public open fun borderWidth(): Double =
        Native.objc_msgSend("double", this, "borderWidth") as Double

    public open fun setBorderWidth(borderWidth: Double): Unit {
        Native.objc_msgSend("void", this, "setBorderWidth:", borderWidth)
    }

    public open fun borderColor(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "borderColor") as Pointer<Any>

    public open fun setBorderColor(borderColor: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "setBorderColor:", borderColor)
    }

    public open fun opacity(): Float =
        Native.objc_msgSend("float", this, "opacity") as Float

    public open fun setOpacity(opacity: Float): Unit {
        Native.objc_msgSend("void", this, "setOpacity:", opacity)
    }

    public open fun compositingFilter(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "compositingFilter") as ObjCObject

    public open fun setCompositingFilter(compositingFilter: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setCompositingFilter:", compositingFilter)
    }

    public open fun filters(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "filters") as NSArray

    public open fun setFilters(filters: NSArray): Unit {
        Native.objc_msgSend("void", this, "setFilters:", filters)
    }

    public open fun backgroundFilters(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "backgroundFilters") as NSArray

    public open fun setBackgroundFilters(backgroundFilters: NSArray): Unit {
        Native.objc_msgSend("void", this, "setBackgroundFilters:", backgroundFilters)
    }

    public open fun shouldRasterize(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldRasterize") as Boolean

    public open fun setShouldRasterize(shouldRasterize: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldRasterize:", shouldRasterize)
    }

    public open fun rasterizationScale(): Double =
        Native.objc_msgSend("double", this, "rasterizationScale") as Double

    public open fun setRasterizationScale(rasterizationScale: Double): Unit {
        Native.objc_msgSend("void", this, "setRasterizationScale:", rasterizationScale)
    }

    public open fun shadowColor(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "shadowColor") as Pointer<Any>

    public open fun setShadowColor(shadowColor: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "setShadowColor:", shadowColor)
    }

    public open fun shadowOpacity(): Float =
        Native.objc_msgSend("float", this, "shadowOpacity") as Float

    public open fun setShadowOpacity(shadowOpacity: Float): Unit {
        Native.objc_msgSend("void", this, "setShadowOpacity:", shadowOpacity)
    }

    public open fun shadowOffset(): Any =
        Native.objc_msgSend("class objc.Any", this, "shadowOffset")

    public open fun setShadowOffset(shadowOffset: Any): Unit {
        Native.objc_msgSend("void", this, "setShadowOffset:", shadowOffset)
    }

    public open fun shadowRadius(): Double =
        Native.objc_msgSend("double", this, "shadowRadius") as Double

    public open fun setShadowRadius(shadowRadius: Double): Unit {
        Native.objc_msgSend("void", this, "setShadowRadius:", shadowRadius)
    }

    public open fun shadowPath(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "shadowPath") as Pointer<Any>

    public open fun setShadowPath(shadowPath: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "setShadowPath:", shadowPath)
    }

    public open fun autoresizingMask(): Any =
        Native.objc_msgSend("class objc.Any", this, "autoresizingMask")

    public open fun setAutoresizingMask(autoresizingMask: Any): Unit {
        Native.objc_msgSend("void", this, "setAutoresizingMask:", autoresizingMask)
    }

    public open fun layoutManager(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "layoutManager") as ObjCObject

    public open fun setLayoutManager(layoutManager: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setLayoutManager:", layoutManager)
    }

    public open fun preferredFrameSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredFrameSize")

    public open fun setNeedsLayout(): Unit {
        Native.objc_msgSend("void", this, "setNeedsLayout")
    }

    public open fun needsLayout(): Boolean =
        Native.objc_msgSend("boolean", this, "needsLayout") as Boolean

    public open fun layoutIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "layoutIfNeeded")
    }

    public open fun layoutSublayers(): Unit {
        Native.objc_msgSend("void", this, "layoutSublayers")
    }

    public open fun resizeSublayersWithOldSize(size: Any): Unit {
        Native.objc_msgSend("void", this, "resizeSublayersWithOldSize:", size)
    }

    public open fun resizeWithOldSuperlayerSize(size: Any): Unit {
        Native.objc_msgSend("void", this, "resizeWithOldSuperlayerSize:", size)
    }

    public open fun actionForKey(event: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "actionForKey:", event)

    public open fun actions(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "actions") as NSDictionary

    public open fun setActions(actions: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setActions:", actions)
    }

    public open fun addAnimation_forKey(anim: CAAnimation, key: NSString): Unit {
        Native.objc_msgSend("void", this, "addAnimation:forKey:", anim, key)
    }

    public open fun removeAllAnimations(): Unit {
        Native.objc_msgSend("void", this, "removeAllAnimations")
    }

    public open fun removeAnimationForKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "removeAnimationForKey:", key)
    }

    public open fun animationKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "animationKeys") as NSArray

    public open fun animationForKey(key: NSString): CAAnimation =
        Native.objc_msgSend("class objc.CAAnimation", this, "animationForKey:", key) as CAAnimation

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    public open fun delegate(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "delegate") as ObjCObject

    public open fun setDelegate(delegate: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun style(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "style") as NSDictionary

    public open fun setStyle(style: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setStyle:", style)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, CAMediaTiming.metaclass {
        public open fun layer(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "layer") as ObjCObject

        public open fun defaultValueForKey(key: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "defaultValueForKey:", key) as ObjCObject

        public open fun needsDisplayForKey(key: NSString): Boolean =
            Native.objc_msgSend("boolean", this, "needsDisplayForKey:", key) as Boolean

        public open fun defaultActionForKey(event: NSString): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultActionForKey:", event)

    }

    companion object : NSObject(Native.objc_getClass("CALayer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CAOpenGLLayer(pointer: Long) : CALayer(pointer) {
    public open fun isAsynchronous(): Boolean =
        Native.objc_msgSend("boolean", this, "isAsynchronous") as Boolean

    public open fun setAsynchronous(asynchronous: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAsynchronous:", asynchronous)
    }

    public open fun canDrawInCGLContext_pixelFormat_forLayerTime_displayTime(ctx: Pointer<Any>, pf: Pointer<Any>, t: Double, ts: Pointer<Any>): Boolean =
        Native.objc_msgSend("boolean", this, "canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:", ctx, pf, t, ts) as Boolean

    public open fun drawInCGLContext_pixelFormat_forLayerTime_displayTime(ctx: Pointer<Any>, pf: Pointer<Any>, t: Double, ts: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "drawInCGLContext:pixelFormat:forLayerTime:displayTime:", ctx, pf, t, ts)
    }

    public open fun copyCGLPixelFormatForDisplayMask(mask: Int): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "copyCGLPixelFormatForDisplayMask:", mask) as Pointer<Any>

    public open fun releaseCGLPixelFormat(pf: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "releaseCGLPixelFormat:", pf)
    }

    public open fun copyCGLContextForPixelFormat(pf: Pointer<Any>): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "copyCGLContextForPixelFormat:", pf) as Pointer<Any>

    public open fun releaseCGLContext(ctx: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "releaseCGLContext:", ctx)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : CALayer.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("CAOpenGLLayer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOpenGLLayer(pointer: Long) : CAOpenGLLayer(pointer) {
    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun setView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "setView:", view)
    }

    public open fun openGLPixelFormat(): NSOpenGLPixelFormat =
        Native.objc_msgSend("class objc.NSOpenGLPixelFormat", this, "openGLPixelFormat") as NSOpenGLPixelFormat

    public open fun setOpenGLPixelFormat(openGLPixelFormat: NSOpenGLPixelFormat): Unit {
        Native.objc_msgSend("void", this, "setOpenGLPixelFormat:", openGLPixelFormat)
    }

    public open fun openGLContext(): NSOpenGLContext =
        Native.objc_msgSend("class objc.NSOpenGLContext", this, "openGLContext") as NSOpenGLContext

    public open fun setOpenGLContext(openGLContext: NSOpenGLContext): Unit {
        Native.objc_msgSend("void", this, "setOpenGLContext:", openGLContext)
    }

    public open fun openGLPixelFormatForDisplayMask(mask: Int): NSOpenGLPixelFormat =
        Native.objc_msgSend("class objc.NSOpenGLPixelFormat", this, "openGLPixelFormatForDisplayMask:", mask) as NSOpenGLPixelFormat

    public open fun openGLContextForPixelFormat(pixelFormat: NSOpenGLPixelFormat): NSOpenGLContext =
        Native.objc_msgSend("class objc.NSOpenGLContext", this, "openGLContextForPixelFormat:", pixelFormat) as NSOpenGLContext

    public open fun canDrawInOpenGLContext_pixelFormat_forLayerTime_displayTime(context: NSOpenGLContext, pixelFormat: NSOpenGLPixelFormat, t: Double, ts: Pointer<Any>): Boolean =
        Native.objc_msgSend("boolean", this, "canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:", context, pixelFormat, t, ts) as Boolean

    public open fun drawInOpenGLContext_pixelFormat_forLayerTime_displayTime(context: NSOpenGLContext, pixelFormat: NSOpenGLPixelFormat, t: Double, ts: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:", context, pixelFormat, t, ts)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : CAOpenGLLayer.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSOpenGLLayer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSOpenGLView(pointer: Long) : NSView(pointer) {
    public open fun initWithFrame_pixelFormat(frameRect: Any, format: NSOpenGLPixelFormat): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:pixelFormat:", frameRect, format) as ObjCObject

    public open fun openGLContext(): NSOpenGLContext =
        Native.objc_msgSend("class objc.NSOpenGLContext", this, "openGLContext") as NSOpenGLContext

    public open fun setOpenGLContext(openGLContext: NSOpenGLContext): Unit {
        Native.objc_msgSend("void", this, "setOpenGLContext:", openGLContext)
    }

    public open fun clearGLContext(): Unit {
        Native.objc_msgSend("void", this, "clearGLContext")
    }

    public open fun update(): Unit {
        Native.objc_msgSend("void", this, "update")
    }

    public open fun reshape(): Unit {
        Native.objc_msgSend("void", this, "reshape")
    }

    public open fun pixelFormat(): NSOpenGLPixelFormat =
        Native.objc_msgSend("class objc.NSOpenGLPixelFormat", this, "pixelFormat") as NSOpenGLPixelFormat

    public open fun setPixelFormat(pixelFormat: NSOpenGLPixelFormat): Unit {
        Native.objc_msgSend("void", this, "setPixelFormat:", pixelFormat)
    }

    public open fun prepareOpenGL(): Unit {
        Native.objc_msgSend("void", this, "prepareOpenGL")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass {
        public open fun defaultPixelFormat(): NSOpenGLPixelFormat =
            Native.objc_msgSend("class objc.NSOpenGLPixelFormat", this, "defaultPixelFormat") as NSOpenGLPixelFormat

    }

    companion object : NSObject(Native.objc_getClass("NSOpenGLView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSToolbarItem(pointer: Long) : NSObject(pointer), NSCopying, NSValidatedUserInterfaceItem {
    public open fun initWithItemIdentifier(itemIdentifier: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithItemIdentifier:", itemIdentifier) as ObjCObject

    public open fun itemIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "itemIdentifier") as NSString

    public open fun toolbar(): NSToolbar =
        Native.objc_msgSend("class objc.NSToolbar", this, "toolbar") as NSToolbar

    public open fun label(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "label") as NSString

    public open fun setLabel(label: NSString): Unit {
        Native.objc_msgSend("void", this, "setLabel:", label)
    }

    public open fun paletteLabel(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "paletteLabel") as NSString

    public open fun setPaletteLabel(paletteLabel: NSString): Unit {
        Native.objc_msgSend("void", this, "setPaletteLabel:", paletteLabel)
    }

    public open fun toolTip(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "toolTip") as NSString

    public open fun setToolTip(toolTip: NSString): Unit {
        Native.objc_msgSend("void", this, "setToolTip:", toolTip)
    }

    public open fun menuFormRepresentation(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "menuFormRepresentation") as NSMenuItem

    public open fun setMenuFormRepresentation(menuFormRepresentation: NSMenuItem): Unit {
        Native.objc_msgSend("void", this, "setMenuFormRepresentation:", menuFormRepresentation)
    }

    public open fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    public open fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    public open fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    public open fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    public open fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    public open fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun setEnabled(enabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEnabled:", enabled)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun setView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "setView:", view)
    }

    public open fun minSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "minSize")

    public open fun setMinSize(minSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMinSize:", minSize)
    }

    public open fun maxSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "maxSize")

    public open fun setMaxSize(maxSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMaxSize:", maxSize)
    }

    public open fun visibilityPriority(): Int =
        Native.objc_msgSend("int", this, "visibilityPriority") as Int

    public open fun setVisibilityPriority(visibilityPriority: Int): Unit {
        Native.objc_msgSend("void", this, "setVisibilityPriority:", visibilityPriority)
    }

    public open fun validate(): Unit {
        Native.objc_msgSend("void", this, "validate")
    }

    public open fun autovalidates(): Boolean =
        Native.objc_msgSend("boolean", this, "autovalidates") as Boolean

    public open fun setAutovalidates(autovalidates: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutovalidates:", autovalidates)
    }

    public open fun allowsDuplicatesInToolbar(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsDuplicatesInToolbar") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSValidatedUserInterfaceItem.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSToolbarItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSToolbarItemGroup(pointer: Long) : NSToolbarItem(pointer) {
    public open fun subitems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "subitems") as NSArray

    public open fun setSubitems(subitems: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSubitems:", subitems)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSToolbarItem.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSToolbarItemGroup")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStepper(pointer: Long) : NSControl(pointer), NSAccessibilityStepper {
    public open fun minValue(): Double =
        Native.objc_msgSend("double", this, "minValue") as Double

    public open fun setMinValue(minValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMinValue:", minValue)
    }

    public open fun maxValue(): Double =
        Native.objc_msgSend("double", this, "maxValue") as Double

    public open fun setMaxValue(maxValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxValue:", maxValue)
    }

    public open fun increment(): Double =
        Native.objc_msgSend("double", this, "increment") as Double

    public open fun setIncrement(increment: Double): Unit {
        Native.objc_msgSend("void", this, "setIncrement:", increment)
    }

    public open fun valueWraps(): Boolean =
        Native.objc_msgSend("boolean", this, "valueWraps") as Boolean

    public open fun setValueWraps(valueWraps: Boolean): Unit {
        Native.objc_msgSend("void", this, "setValueWraps:", valueWraps)
    }

    public open fun autorepeat(): Boolean =
        Native.objc_msgSend("boolean", this, "autorepeat") as Boolean

    public open fun setAutorepeat(autorepeat: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutorepeat:", autorepeat)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSAccessibilityStepper.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSStepper")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStepperCell(pointer: Long) : NSActionCell(pointer) {
    public open fun minValue(): Double =
        Native.objc_msgSend("double", this, "minValue") as Double

    public open fun setMinValue(minValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMinValue:", minValue)
    }

    public open fun maxValue(): Double =
        Native.objc_msgSend("double", this, "maxValue") as Double

    public open fun setMaxValue(maxValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxValue:", maxValue)
    }

    public open fun increment(): Double =
        Native.objc_msgSend("double", this, "increment") as Double

    public open fun setIncrement(increment: Double): Unit {
        Native.objc_msgSend("void", this, "setIncrement:", increment)
    }

    public open fun valueWraps(): Boolean =
        Native.objc_msgSend("boolean", this, "valueWraps") as Boolean

    public open fun setValueWraps(valueWraps: Boolean): Unit {
        Native.objc_msgSend("void", this, "setValueWraps:", valueWraps)
    }

    public open fun autorepeat(): Boolean =
        Native.objc_msgSend("boolean", this, "autorepeat") as Boolean

    public open fun setAutorepeat(autorepeat: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutorepeat:", autorepeat)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSStepperCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSGlyphInfo(pointer: Long) : NSObject(pointer), NSCopying, NSSecureCoding {
    public open fun glyphName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "glyphName") as NSString

    public open fun characterIdentifier(): Int =
        Native.objc_msgSend("int", this, "characterIdentifier") as Int

    public open fun characterCollection(): Any =
        Native.objc_msgSend("class objc.Any", this, "characterCollection")

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSSecureCoding.metaclass {
        public open fun glyphInfoWithGlyphName_forFont_baseString(glyphName: NSString, font: NSFont, theString: NSString): NSGlyphInfo =
            Native.objc_msgSend("class objc.NSGlyphInfo", this, "glyphInfoWithGlyphName:forFont:baseString:", glyphName, font, theString) as NSGlyphInfo

        public open fun glyphInfoWithGlyph_forFont_baseString(glyph: Int, font: NSFont, theString: NSString): NSGlyphInfo =
            Native.objc_msgSend("class objc.NSGlyphInfo", this, "glyphInfoWithGlyph:forFont:baseString:", glyph, font, theString) as NSGlyphInfo

        public open fun glyphInfoWithCharacterIdentifier_collection_baseString(cid: Int, characterCollection: Any, theString: NSString): NSGlyphInfo =
            Native.objc_msgSend("class objc.NSGlyphInfo", this, "glyphInfoWithCharacterIdentifier:collection:baseString:", cid, characterCollection, theString) as NSGlyphInfo

    }

    companion object : NSObject(Native.objc_getClass("NSGlyphInfo")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSShadow(pointer: Long) : NSObject(pointer), NSCopying, NSCoding {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun shadowOffset(): Any =
        Native.objc_msgSend("class objc.Any", this, "shadowOffset")

    public open fun setShadowOffset(shadowOffset: Any): Unit {
        Native.objc_msgSend("void", this, "setShadowOffset:", shadowOffset)
    }

    public open fun shadowBlurRadius(): Double =
        Native.objc_msgSend("double", this, "shadowBlurRadius") as Double

    public open fun setShadowBlurRadius(shadowBlurRadius: Double): Unit {
        Native.objc_msgSend("void", this, "setShadowBlurRadius:", shadowBlurRadius)
    }

    public open fun shadowColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "shadowColor") as NSColor

    public open fun setShadowColor(shadowColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setShadowColor:", shadowColor)
    }

    public open fun set(): Unit {
        Native.objc_msgSend("void", this, "set")
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCopying.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSShadow")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTypesetter(pointer: Long) : NSObject(pointer), NSTypesetter_NSLayoutPhaseInterface, NSTypesetter_NSGlyphStorageInterface {
    public open fun usesFontLeading(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFontLeading") as Boolean

    public open fun setUsesFontLeading(usesFontLeading: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFontLeading:", usesFontLeading)
    }

    public open fun typesetterBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "typesetterBehavior")

    public open fun setTypesetterBehavior(typesetterBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setTypesetterBehavior:", typesetterBehavior)
    }

    public open fun hyphenationFactor(): Float =
        Native.objc_msgSend("float", this, "hyphenationFactor") as Float

    public open fun setHyphenationFactor(hyphenationFactor: Float): Unit {
        Native.objc_msgSend("void", this, "setHyphenationFactor:", hyphenationFactor)
    }

    public open fun lineFragmentPadding(): Double =
        Native.objc_msgSend("double", this, "lineFragmentPadding") as Double

    public open fun setLineFragmentPadding(lineFragmentPadding: Double): Unit {
        Native.objc_msgSend("void", this, "setLineFragmentPadding:", lineFragmentPadding)
    }

    public open fun substituteFontForFont(originalFont: NSFont): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "substituteFontForFont:", originalFont) as NSFont

    public open fun textTabForGlyphLocation_writingDirection_maxLocation(glyphLocation: Double, direction: Any, maxLocation: Double): NSTextTab =
        Native.objc_msgSend("class objc.NSTextTab", this, "textTabForGlyphLocation:writingDirection:maxLocation:", glyphLocation, direction, maxLocation) as NSTextTab

    public open fun bidiProcessingEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "bidiProcessingEnabled") as Boolean

    public open fun setBidiProcessingEnabled(bidiProcessingEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBidiProcessingEnabled:", bidiProcessingEnabled)
    }

    public open fun attributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedString") as NSAttributedString

    public open fun setAttributedString(attributedString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedString:", attributedString)
    }

    public open fun setParagraphGlyphRange_separatorGlyphRange(paragraphRange: Any, paragraphSeparatorRange: Any): Unit {
        Native.objc_msgSend("void", this, "setParagraphGlyphRange:separatorGlyphRange:", paragraphRange, paragraphSeparatorRange)
    }

    public open fun paragraphGlyphRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphGlyphRange")

    public open fun paragraphSeparatorGlyphRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphSeparatorGlyphRange")

    public open fun paragraphCharacterRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphCharacterRange")

    public open fun paragraphSeparatorCharacterRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphSeparatorCharacterRange")

    public open fun layoutParagraphAtPoint(lineFragmentOrigin: Pointer<Any>): Int =
        Native.objc_msgSend("int", this, "layoutParagraphAtPoint:", lineFragmentOrigin) as Int

    public open fun beginParagraph(): Unit {
        Native.objc_msgSend("void", this, "beginParagraph")
    }

    public open fun endParagraph(): Unit {
        Native.objc_msgSend("void", this, "endParagraph")
    }

    public open fun beginLineWithGlyphAtIndex(glyphIndex: Int): Unit {
        Native.objc_msgSend("void", this, "beginLineWithGlyphAtIndex:", glyphIndex)
    }

    public open fun endLineWithGlyphRange(lineGlyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "endLineWithGlyphRange:", lineGlyphRange)
    }

    public open fun lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    public open fun paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    public open fun paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    public open fun getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin(lineFragmentRect: Pointer<Any>, lineFragmentUsedRect: Pointer<Any>, paragraphSeparatorGlyphRange: Any, lineOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:", lineFragmentRect, lineFragmentUsedRect, paragraphSeparatorGlyphRange, lineOrigin)
    }

    public open fun attributesForExtraLineFragment(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "attributesForExtraLineFragment") as NSDictionary

    public open fun actionForControlCharacterAtIndex(charIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "actionForControlCharacterAtIndex:", charIndex)

    public open fun layoutManager(): NSLayoutManager =
        Native.objc_msgSend("class objc.NSLayoutManager", this, "layoutManager") as NSLayoutManager

    public open fun textContainers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "textContainers") as NSArray

    public open fun currentTextContainer(): NSTextContainer =
        Native.objc_msgSend("class objc.NSTextContainer", this, "currentTextContainer") as NSTextContainer

    public open fun currentParagraphStyle(): NSParagraphStyle =
        Native.objc_msgSend("class objc.NSParagraphStyle", this, "currentParagraphStyle") as NSParagraphStyle

    public open fun setHardInvalidation_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setHardInvalidation:forGlyphRange:", flag, glyphRange)
    }

    public open fun layoutGlyphsInLayoutManager_startingAtGlyphIndex_maxNumberOfLineFragments_nextGlyphIndex(layoutManager: NSLayoutManager, startGlyphIndex: Int, maxNumLines: Int, nextGlyph: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:", layoutManager, startGlyphIndex, maxNumLines, nextGlyph)
    }

    public open fun layoutCharactersInRange_forLayoutManager_maximumNumberOfLineFragments(characterRange: Any, layoutManager: NSLayoutManager, maxNumLines: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:", characterRange, layoutManager, maxNumLines)

    public open fun baselineOffsetInLayoutManager_glyphIndex(layoutMgr: NSLayoutManager, glyphIndex: Int): Double =
        Native.objc_msgSend("double", this, "baselineOffsetInLayoutManager:glyphIndex:", layoutMgr, glyphIndex) as Double

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSTypesetter_NSLayoutPhaseInterface.metaclass, NSTypesetter_NSGlyphStorageInterface.metaclass {
        public open fun printingAdjustmentInLayoutManager_forNominallySpacedGlyphRange_packedGlyphs_count(layoutMgr: NSLayoutManager, nominallySpacedGlyphsRange: Any, packedGlyphs: Pointer<Byte>, packedGlyphsCount: Int): Any =
            Native.objc_msgSend("class objc.Any", this, "printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:", layoutMgr, nominallySpacedGlyphsRange, packedGlyphs, packedGlyphsCount)

        public open fun sharedSystemTypesetter(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sharedSystemTypesetter") as ObjCObject

        public open fun sharedSystemTypesetterForBehavior(theBehavior: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sharedSystemTypesetterForBehavior:", theBehavior) as ObjCObject

        public open fun defaultTypesetterBehavior(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultTypesetterBehavior")

    }

    companion object : NSObject(Native.objc_getClass("NSTypesetter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSATSTypesetter(pointer: Long) : NSTypesetter(pointer), NSATSTypesetter_NSPantherCompatibility, NSATSTypesetter_NSPrimitiveInterface, NSATSTypesetter_NSLayoutPhaseInterface, NSATSTypesetter_NSGlyphStorageInterface {
    override fun attributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedString") as NSAttributedString

    override fun bidiProcessingEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "bidiProcessingEnabled") as Boolean

    override fun boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(glyphIndex: Int, textContainer: NSTextContainer, proposedRect: Any, glyphPosition: Any, charIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:", glyphIndex, textContainer, proposedRect, glyphPosition, charIndex)

    override fun characterRangeForGlyphRange_actualGlyphRange(glyphRange: Any, actualGlyphRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "characterRangeForGlyphRange:actualGlyphRange:", glyphRange, actualGlyphRange)

    override fun currentTextContainer(): NSTextContainer =
        Native.objc_msgSend("class objc.NSTextContainer", this, "currentTextContainer") as NSTextContainer

    override fun deleteGlyphsInRange(glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "deleteGlyphsInRange:", glyphRange)
    }

    override fun getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin(lineFragmentRect: Pointer<Any>, lineFragmentUsedRect: Pointer<Any>, paragraphSeparatorGlyphRange: Any, lineOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:", lineFragmentRect, lineFragmentUsedRect, paragraphSeparatorGlyphRange, lineOrigin)
    }

    override fun glyphRangeForCharacterRange_actualCharacterRange(charRange: Any, actualCharRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "glyphRangeForCharacterRange:actualCharacterRange:", charRange, actualCharRange)

    override fun hyphenCharacterForGlyphAtIndex(glyphIndex: Int): Int =
        Native.objc_msgSend("int", this, "hyphenCharacterForGlyphAtIndex:", glyphIndex) as Int

    override fun hyphenationFactor(): Float =
        Native.objc_msgSend("float", this, "hyphenationFactor") as Float

    override fun hyphenationFactorForGlyphAtIndex(glyphIndex: Int): Float =
        Native.objc_msgSend("float", this, "hyphenationFactorForGlyphAtIndex:", glyphIndex) as Float

    override fun insertGlyph_atGlyphIndex_characterIndex(glyph: Int, glyphIndex: Int, characterIndex: Int): Unit {
        Native.objc_msgSend("void", this, "insertGlyph:atGlyphIndex:characterIndex:", glyph, glyphIndex, characterIndex)
    }

    override fun layoutManager(): NSLayoutManager =
        Native.objc_msgSend("class objc.NSLayoutManager", this, "layoutManager") as NSLayoutManager

    override fun layoutParagraphAtPoint(lineFragmentOrigin: Pointer<Any>): Int =
        Native.objc_msgSend("int", this, "layoutParagraphAtPoint:", lineFragmentOrigin) as Int

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun lineFragmentPadding(): Double =
        Native.objc_msgSend("double", this, "lineFragmentPadding") as Double

    override fun lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    override fun paragraphGlyphRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphGlyphRange")

    override fun paragraphSeparatorGlyphRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphSeparatorGlyphRange")

    override fun paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    override fun paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    override fun setAttachmentSize_forGlyphRange(attachmentSize: Any, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setAttachmentSize:forGlyphRange:", attachmentSize, glyphRange)
    }

    override fun setAttributedString(attributedString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedString:", attributedString)
    }

    override fun setBidiLevels_forGlyphRange(levels: Pointer<Byte>, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setBidiLevels:forGlyphRange:", levels, glyphRange)
    }

    override fun setBidiProcessingEnabled(bidiProcessingEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBidiProcessingEnabled:", bidiProcessingEnabled)
    }

    override fun setDrawsOutsideLineFragment_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setDrawsOutsideLineFragment:forGlyphRange:", flag, glyphRange)
    }

    override fun setHardInvalidation_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setHardInvalidation:forGlyphRange:", flag, glyphRange)
    }

    override fun setHyphenationFactor(hyphenationFactor: Float): Unit {
        Native.objc_msgSend("void", this, "setHyphenationFactor:", hyphenationFactor)
    }

    override fun setLineFragmentPadding(lineFragmentPadding: Double): Unit {
        Native.objc_msgSend("void", this, "setLineFragmentPadding:", lineFragmentPadding)
    }

    override fun setLineFragmentRect_forGlyphRange_usedRect_baselineOffset(fragmentRect: Any, glyphRange: Any, usedRect: Any, baselineOffset: Double): Unit {
        Native.objc_msgSend("void", this, "setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:", fragmentRect, glyphRange, usedRect, baselineOffset)
    }

    override fun setLocation_withAdvancements_forStartOfGlyphRange(location: Any, advancements: Pointer<Double>, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setLocation:withAdvancements:forStartOfGlyphRange:", location, advancements, glyphRange)
    }

    override fun setNotShownAttribute_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setNotShownAttribute:forGlyphRange:", flag, glyphRange)
    }

    override fun setParagraphGlyphRange_separatorGlyphRange(paragraphRange: Any, paragraphSeparatorRange: Any): Unit {
        Native.objc_msgSend("void", this, "setParagraphGlyphRange:separatorGlyphRange:", paragraphRange, paragraphSeparatorRange)
    }

    override fun setTypesetterBehavior(typesetterBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setTypesetterBehavior:", typesetterBehavior)
    }

    override fun setUsesFontLeading(usesFontLeading: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFontLeading:", usesFontLeading)
    }

    override fun shouldBreakLineByHyphenatingBeforeCharacterAtIndex(charIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBreakLineByHyphenatingBeforeCharacterAtIndex:", charIndex) as Boolean

    override fun shouldBreakLineByWordBeforeCharacterAtIndex(charIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBreakLineByWordBeforeCharacterAtIndex:", charIndex) as Boolean

    override fun substituteFontForFont(originalFont: NSFont): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "substituteFontForFont:", originalFont) as NSFont

    override fun substituteGlyphsInRange_withGlyphs(glyphRange: Any, glyphs: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "substituteGlyphsInRange:withGlyphs:", glyphRange, glyphs)
    }

    override fun textTabForGlyphLocation_writingDirection_maxLocation(glyphLocation: Double, direction: Any, maxLocation: Double): NSTextTab =
        Native.objc_msgSend("class objc.NSTextTab", this, "textTabForGlyphLocation:writingDirection:maxLocation:", glyphLocation, direction, maxLocation) as NSTextTab

    override fun typesetterBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "typesetterBehavior")

    override fun usesFontLeading(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFontLeading") as Boolean

    override fun willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset(lineRect: Pointer<Any>, glyphRange: Any, usedRect: Pointer<Any>, baselineOffset: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:", lineRect, glyphRange, usedRect, baselineOffset)
    }

    trait metaclass : NSTypesetter.metaclass, NSATSTypesetter_NSPantherCompatibility.metaclass, NSATSTypesetter_NSPrimitiveInterface.metaclass, NSATSTypesetter_NSLayoutPhaseInterface.metaclass, NSATSTypesetter_NSGlyphStorageInterface.metaclass {
        public open fun sharedTypesetter(): NSATSTypesetter =
            Native.objc_msgSend("class objc.NSATSTypesetter", this, "sharedTypesetter") as NSATSTypesetter

    }

    companion object : NSObject(Native.objc_getClass("NSATSTypesetter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSearchField(pointer: Long) : NSTextField(pointer) {
    public open fun recentSearches(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "recentSearches") as NSArray

    public open fun setRecentSearches(recentSearches: NSArray): Unit {
        Native.objc_msgSend("void", this, "setRecentSearches:", recentSearches)
    }

    public open fun recentsAutosaveName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "recentsAutosaveName") as NSString

    public open fun setRecentsAutosaveName(recentsAutosaveName: NSString): Unit {
        Native.objc_msgSend("void", this, "setRecentsAutosaveName:", recentsAutosaveName)
    }

    public open fun searchMenuTemplate(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "searchMenuTemplate") as NSMenu

    public open fun setSearchMenuTemplate(searchMenuTemplate: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setSearchMenuTemplate:", searchMenuTemplate)
    }

    public open fun sendsWholeSearchString(): Boolean =
        Native.objc_msgSend("boolean", this, "sendsWholeSearchString") as Boolean

    public open fun setSendsWholeSearchString(sendsWholeSearchString: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSendsWholeSearchString:", sendsWholeSearchString)
    }

    public open fun maximumRecents(): Int =
        Native.objc_msgSend("int", this, "maximumRecents") as Int

    public open fun setMaximumRecents(maximumRecents: Int): Unit {
        Native.objc_msgSend("void", this, "setMaximumRecents:", maximumRecents)
    }

    public open fun sendsSearchStringImmediately(): Boolean =
        Native.objc_msgSend("boolean", this, "sendsSearchStringImmediately") as Boolean

    public open fun setSendsSearchStringImmediately(sendsSearchStringImmediately: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSendsSearchStringImmediately:", sendsSearchStringImmediately)
    }

    override fun acceptsFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstResponder") as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSTextField.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSearchField")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSearchFieldCell(pointer: Long) : NSTextFieldCell(pointer) {
    public open fun searchButtonCell(): NSButtonCell =
        Native.objc_msgSend("class objc.NSButtonCell", this, "searchButtonCell") as NSButtonCell

    public open fun setSearchButtonCell(searchButtonCell: NSButtonCell): Unit {
        Native.objc_msgSend("void", this, "setSearchButtonCell:", searchButtonCell)
    }

    public open fun cancelButtonCell(): NSButtonCell =
        Native.objc_msgSend("class objc.NSButtonCell", this, "cancelButtonCell") as NSButtonCell

    public open fun setCancelButtonCell(cancelButtonCell: NSButtonCell): Unit {
        Native.objc_msgSend("void", this, "setCancelButtonCell:", cancelButtonCell)
    }

    public open fun resetSearchButtonCell(): Unit {
        Native.objc_msgSend("void", this, "resetSearchButtonCell")
    }

    public open fun resetCancelButtonCell(): Unit {
        Native.objc_msgSend("void", this, "resetCancelButtonCell")
    }

    public open fun searchTextRectForBounds(rect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "searchTextRectForBounds:", rect)

    public open fun searchButtonRectForBounds(rect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "searchButtonRectForBounds:", rect)

    public open fun cancelButtonRectForBounds(rect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "cancelButtonRectForBounds:", rect)

    public open fun searchMenuTemplate(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "searchMenuTemplate") as NSMenu

    public open fun setSearchMenuTemplate(searchMenuTemplate: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setSearchMenuTemplate:", searchMenuTemplate)
    }

    public open fun sendsWholeSearchString(): Boolean =
        Native.objc_msgSend("boolean", this, "sendsWholeSearchString") as Boolean

    public open fun setSendsWholeSearchString(sendsWholeSearchString: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSendsWholeSearchString:", sendsWholeSearchString)
    }

    public open fun maximumRecents(): Int =
        Native.objc_msgSend("int", this, "maximumRecents") as Int

    public open fun setMaximumRecents(maximumRecents: Int): Unit {
        Native.objc_msgSend("void", this, "setMaximumRecents:", maximumRecents)
    }

    public open fun recentSearches(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "recentSearches") as NSArray

    public open fun setRecentSearches(recentSearches: NSArray): Unit {
        Native.objc_msgSend("void", this, "setRecentSearches:", recentSearches)
    }

    public open fun recentsAutosaveName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "recentsAutosaveName") as NSString

    public open fun setRecentsAutosaveName(recentsAutosaveName: NSString): Unit {
        Native.objc_msgSend("void", this, "setRecentsAutosaveName:", recentsAutosaveName)
    }

    public open fun sendsSearchStringImmediately(): Boolean =
        Native.objc_msgSend("boolean", this, "sendsSearchStringImmediately") as Boolean

    public open fun setSendsSearchStringImmediately(sendsSearchStringImmediately: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSendsSearchStringImmediately:", sendsSearchStringImmediately)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setUpFieldEditorAttributes(textObj: NSText): NSText =
        Native.objc_msgSend("class objc.NSText", this, "setUpFieldEditorAttributes:", textObj) as NSText

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSTextFieldCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSSearchFieldCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSController(pointer: Long) : NSObject(pointer), NSCoding {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun objectDidBeginEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidBeginEditing:", editor)
    }

    override fun objectDidEndEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidEndEditing:", editor)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    public open fun isEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditing") as Boolean

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSObjectController(pointer: Long) : NSController(pointer), NSObjectController_NSManagedController {
    public open fun initWithContent(content: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContent:", content) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun content(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "content") as ObjCObject

    public open fun setContent(content: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setContent:", content)
    }

    public open fun selection(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "selection") as ObjCObject

    public open fun selectedObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectedObjects") as NSArray

    public open fun automaticallyPreparesContent(): Boolean =
        Native.objc_msgSend("boolean", this, "automaticallyPreparesContent") as Boolean

    public open fun setAutomaticallyPreparesContent(automaticallyPreparesContent: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticallyPreparesContent:", automaticallyPreparesContent)
    }

    public open fun prepareContent(): Unit {
        Native.objc_msgSend("void", this, "prepareContent")
    }

    public open fun objectClass(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "objectClass") as ObjCClass

    public open fun setObjectClass(objectClass: ObjCClass): Unit {
        Native.objc_msgSend("void", this, "setObjectClass:", objectClass)
    }

    public open fun newObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "newObject") as ObjCObject

    public open fun addObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", `object`)
    }

    public open fun removeObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObject:", `object`)
    }

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun add(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "add:", sender)
    }

    public open fun canAdd(): Boolean =
        Native.objc_msgSend("boolean", this, "canAdd") as Boolean

    public open fun remove(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "remove:", sender)
    }

    public open fun canRemove(): Boolean =
        Native.objc_msgSend("boolean", this, "canRemove") as Boolean

    public open fun validateUserInterfaceItem(item: Any): Boolean =
        Native.objc_msgSend("boolean", this, "validateUserInterfaceItem:", item) as Boolean

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun objectDidBeginEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidBeginEditing:", editor)
    }

    override fun objectDidEndEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidEndEditing:", editor)
    }

    trait metaclass : NSController.metaclass, NSObjectController_NSManagedController.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSObjectController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSArrayController(pointer: Long) : NSObjectController(pointer) {
    public open fun rearrangeObjects(): Unit {
        Native.objc_msgSend("void", this, "rearrangeObjects")
    }

    public open fun automaticallyRearrangesObjects(): Boolean =
        Native.objc_msgSend("boolean", this, "automaticallyRearrangesObjects") as Boolean

    public open fun setAutomaticallyRearrangesObjects(automaticallyRearrangesObjects: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticallyRearrangesObjects:", automaticallyRearrangesObjects)
    }

    public open fun automaticRearrangementKeyPaths(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "automaticRearrangementKeyPaths") as NSArray

    public open fun didChangeArrangementCriteria(): Unit {
        Native.objc_msgSend("void", this, "didChangeArrangementCriteria")
    }

    public open fun sortDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortDescriptors") as NSArray

    public open fun setSortDescriptors(sortDescriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSortDescriptors:", sortDescriptors)
    }

    public open fun filterPredicate(): NSPredicate =
        Native.objc_msgSend("class objc.NSPredicate", this, "filterPredicate") as NSPredicate

    public open fun setFilterPredicate(filterPredicate: NSPredicate): Unit {
        Native.objc_msgSend("void", this, "setFilterPredicate:", filterPredicate)
    }

    public open fun clearsFilterPredicateOnInsertion(): Boolean =
        Native.objc_msgSend("boolean", this, "clearsFilterPredicateOnInsertion") as Boolean

    public open fun setClearsFilterPredicateOnInsertion(clearsFilterPredicateOnInsertion: Boolean): Unit {
        Native.objc_msgSend("void", this, "setClearsFilterPredicateOnInsertion:", clearsFilterPredicateOnInsertion)
    }

    public open fun arrangeObjects(objects: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arrangeObjects:", objects) as NSArray

    public open fun arrangedObjects(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "arrangedObjects") as ObjCObject

    public open fun avoidsEmptySelection(): Boolean =
        Native.objc_msgSend("boolean", this, "avoidsEmptySelection") as Boolean

    public open fun setAvoidsEmptySelection(avoidsEmptySelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAvoidsEmptySelection:", avoidsEmptySelection)
    }

    public open fun preservesSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "preservesSelection") as Boolean

    public open fun setPreservesSelection(preservesSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPreservesSelection:", preservesSelection)
    }

    public open fun selectsInsertedObjects(): Boolean =
        Native.objc_msgSend("boolean", this, "selectsInsertedObjects") as Boolean

    public open fun setSelectsInsertedObjects(selectsInsertedObjects: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectsInsertedObjects:", selectsInsertedObjects)
    }

    public open fun alwaysUsesMultipleValuesMarker(): Boolean =
        Native.objc_msgSend("boolean", this, "alwaysUsesMultipleValuesMarker") as Boolean

    public open fun setAlwaysUsesMultipleValuesMarker(alwaysUsesMultipleValuesMarker: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAlwaysUsesMultipleValuesMarker:", alwaysUsesMultipleValuesMarker)
    }

    public open fun setSelectionIndexes(indexes: NSIndexSet): Boolean =
        Native.objc_msgSend("boolean", this, "setSelectionIndexes:", indexes) as Boolean

    public open fun selectionIndexes(): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "selectionIndexes") as NSIndexSet

    public open fun setSelectionIndex(index: Int): Boolean =
        Native.objc_msgSend("boolean", this, "setSelectionIndex:", index) as Boolean

    public open fun selectionIndex(): Int =
        Native.objc_msgSend("int", this, "selectionIndex") as Int

    public open fun addSelectionIndexes(indexes: NSIndexSet): Boolean =
        Native.objc_msgSend("boolean", this, "addSelectionIndexes:", indexes) as Boolean

    public open fun removeSelectionIndexes(indexes: NSIndexSet): Boolean =
        Native.objc_msgSend("boolean", this, "removeSelectionIndexes:", indexes) as Boolean

    public open fun setSelectedObjects(objects: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "setSelectedObjects:", objects) as Boolean

    override fun selectedObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectedObjects") as NSArray

    public open fun addSelectedObjects(objects: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "addSelectedObjects:", objects) as Boolean

    public open fun removeSelectedObjects(objects: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "removeSelectedObjects:", objects) as Boolean

    override fun add(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "add:", sender)
    }

    override fun remove(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "remove:", sender)
    }

    public open fun insert(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insert:", sender)
    }

    public open fun canInsert(): Boolean =
        Native.objc_msgSend("boolean", this, "canInsert") as Boolean

    public open fun selectNext(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectNext:", sender)
    }

    public open fun selectPrevious(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectPrevious:", sender)
    }

    public open fun canSelectNext(): Boolean =
        Native.objc_msgSend("boolean", this, "canSelectNext") as Boolean

    public open fun canSelectPrevious(): Boolean =
        Native.objc_msgSend("boolean", this, "canSelectPrevious") as Boolean

    override fun addObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", `object`)
    }

    public open fun addObjects(objects: NSArray): Unit {
        Native.objc_msgSend("void", this, "addObjects:", objects)
    }

    public open fun insertObject_atArrangedObjectIndex(`object`: ObjCObject, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertObject:atArrangedObjectIndex:", `object`, index)
    }

    public open fun insertObjects_atArrangedObjectIndexes(objects: NSArray, indexes: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "insertObjects:atArrangedObjectIndexes:", objects, indexes)
    }

    public open fun removeObjectAtArrangedObjectIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeObjectAtArrangedObjectIndex:", index)
    }

    public open fun removeObjectsAtArrangedObjectIndexes(indexes: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "removeObjectsAtArrangedObjectIndexes:", indexes)
    }

    override fun removeObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObject:", `object`)
    }

    public open fun removeObjects(objects: NSArray): Unit {
        Native.objc_msgSend("void", this, "removeObjects:", objects)
    }

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun objectDidBeginEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidBeginEditing:", editor)
    }

    override fun objectDidEndEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidEndEditing:", editor)
    }

    trait metaclass : NSObjectController.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSArrayController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDictionaryController(pointer: Long) : NSArrayController(pointer) {
    override fun newObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "newObject") as ObjCObject

    public open fun initialKey(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "initialKey") as NSString

    public open fun setInitialKey(initialKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setInitialKey:", initialKey)
    }

    public open fun initialValue(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initialValue") as ObjCObject

    public open fun setInitialValue(initialValue: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setInitialValue:", initialValue)
    }

    public open fun includedKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "includedKeys") as NSArray

    public open fun setIncludedKeys(includedKeys: NSArray): Unit {
        Native.objc_msgSend("void", this, "setIncludedKeys:", includedKeys)
    }

    public open fun excludedKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "excludedKeys") as NSArray

    public open fun setExcludedKeys(excludedKeys: NSArray): Unit {
        Native.objc_msgSend("void", this, "setExcludedKeys:", excludedKeys)
    }

    public open fun localizedKeyDictionary(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "localizedKeyDictionary") as NSDictionary

    public open fun setLocalizedKeyDictionary(localizedKeyDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setLocalizedKeyDictionary:", localizedKeyDictionary)
    }

    public open fun localizedKeyTable(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedKeyTable") as NSString

    public open fun setLocalizedKeyTable(localizedKeyTable: NSString): Unit {
        Native.objc_msgSend("void", this, "setLocalizedKeyTable:", localizedKeyTable)
    }

    override fun add(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "add:", sender)
    }

    override fun addObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", `object`)
    }

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun objectDidBeginEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidBeginEditing:", editor)
    }

    override fun objectDidEndEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidEndEditing:", editor)
    }

    override fun remove(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "remove:", sender)
    }

    override fun removeObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObject:", `object`)
    }

    override fun selectedObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectedObjects") as NSArray

    trait metaclass : NSArrayController.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDictionaryController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTreeNode(pointer: Long) : NSObject(pointer) {
    public open fun initWithRepresentedObject(modelObject: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRepresentedObject:", modelObject) as ObjCObject

    public open fun representedObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "representedObject") as ObjCObject

    public open fun indexPath(): NSIndexPath =
        Native.objc_msgSend("class objc.NSIndexPath", this, "indexPath") as NSIndexPath

    public open fun isLeaf(): Boolean =
        Native.objc_msgSend("boolean", this, "isLeaf") as Boolean

    public open fun childNodes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "childNodes") as NSArray

    public open fun mutableChildNodes(): NSMutableArray =
        Native.objc_msgSend("class objc.NSMutableArray", this, "mutableChildNodes") as NSMutableArray

    public open fun descendantNodeAtIndexPath(indexPath: NSIndexPath): NSTreeNode =
        Native.objc_msgSend("class objc.NSTreeNode", this, "descendantNodeAtIndexPath:", indexPath) as NSTreeNode

    public open fun parentNode(): NSTreeNode =
        Native.objc_msgSend("class objc.NSTreeNode", this, "parentNode") as NSTreeNode

    public open fun sortWithSortDescriptors_recursively(sortDescriptors: NSArray, recursively: Boolean): Unit {
        Native.objc_msgSend("void", this, "sortWithSortDescriptors:recursively:", sortDescriptors, recursively)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun treeNodeWithRepresentedObject(modelObject: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "treeNodeWithRepresentedObject:", modelObject) as ObjCObject

    }

    companion object : NSObject(Native.objc_getClass("NSTreeNode")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTreeController(pointer: Long) : NSObjectController(pointer) {
    public open fun rearrangeObjects(): Unit {
        Native.objc_msgSend("void", this, "rearrangeObjects")
    }

    public open fun arrangedObjects(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "arrangedObjects") as ObjCObject

    public open fun childrenKeyPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "childrenKeyPath") as NSString

    public open fun setChildrenKeyPath(childrenKeyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setChildrenKeyPath:", childrenKeyPath)
    }

    public open fun countKeyPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "countKeyPath") as NSString

    public open fun setCountKeyPath(countKeyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setCountKeyPath:", countKeyPath)
    }

    public open fun leafKeyPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "leafKeyPath") as NSString

    public open fun setLeafKeyPath(leafKeyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setLeafKeyPath:", leafKeyPath)
    }

    public open fun sortDescriptors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortDescriptors") as NSArray

    public open fun setSortDescriptors(sortDescriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSortDescriptors:", sortDescriptors)
    }

    override fun content(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "content") as ObjCObject

    override fun setContent(content: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setContent:", content)
    }

    override fun add(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "add:", sender)
    }

    override fun remove(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "remove:", sender)
    }

    public open fun addChild(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addChild:", sender)
    }

    public open fun insert(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insert:", sender)
    }

    public open fun insertChild(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertChild:", sender)
    }

    public open fun canInsert(): Boolean =
        Native.objc_msgSend("boolean", this, "canInsert") as Boolean

    public open fun canInsertChild(): Boolean =
        Native.objc_msgSend("boolean", this, "canInsertChild") as Boolean

    public open fun canAddChild(): Boolean =
        Native.objc_msgSend("boolean", this, "canAddChild") as Boolean

    public open fun insertObject_atArrangedObjectIndexPath(`object`: ObjCObject, indexPath: NSIndexPath): Unit {
        Native.objc_msgSend("void", this, "insertObject:atArrangedObjectIndexPath:", `object`, indexPath)
    }

    public open fun insertObjects_atArrangedObjectIndexPaths(objects: NSArray, indexPaths: NSArray): Unit {
        Native.objc_msgSend("void", this, "insertObjects:atArrangedObjectIndexPaths:", objects, indexPaths)
    }

    public open fun removeObjectAtArrangedObjectIndexPath(indexPath: NSIndexPath): Unit {
        Native.objc_msgSend("void", this, "removeObjectAtArrangedObjectIndexPath:", indexPath)
    }

    public open fun removeObjectsAtArrangedObjectIndexPaths(indexPaths: NSArray): Unit {
        Native.objc_msgSend("void", this, "removeObjectsAtArrangedObjectIndexPaths:", indexPaths)
    }

    public open fun avoidsEmptySelection(): Boolean =
        Native.objc_msgSend("boolean", this, "avoidsEmptySelection") as Boolean

    public open fun setAvoidsEmptySelection(avoidsEmptySelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAvoidsEmptySelection:", avoidsEmptySelection)
    }

    public open fun preservesSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "preservesSelection") as Boolean

    public open fun setPreservesSelection(preservesSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setPreservesSelection:", preservesSelection)
    }

    public open fun selectsInsertedObjects(): Boolean =
        Native.objc_msgSend("boolean", this, "selectsInsertedObjects") as Boolean

    public open fun setSelectsInsertedObjects(selectsInsertedObjects: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectsInsertedObjects:", selectsInsertedObjects)
    }

    public open fun alwaysUsesMultipleValuesMarker(): Boolean =
        Native.objc_msgSend("boolean", this, "alwaysUsesMultipleValuesMarker") as Boolean

    public open fun setAlwaysUsesMultipleValuesMarker(alwaysUsesMultipleValuesMarker: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAlwaysUsesMultipleValuesMarker:", alwaysUsesMultipleValuesMarker)
    }

    override fun selectedObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectedObjects") as NSArray

    public open fun setSelectionIndexPaths(indexPaths: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "setSelectionIndexPaths:", indexPaths) as Boolean

    public open fun selectionIndexPaths(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectionIndexPaths") as NSArray

    public open fun setSelectionIndexPath(indexPath: NSIndexPath): Boolean =
        Native.objc_msgSend("boolean", this, "setSelectionIndexPath:", indexPath) as Boolean

    public open fun selectionIndexPath(): NSIndexPath =
        Native.objc_msgSend("class objc.NSIndexPath", this, "selectionIndexPath") as NSIndexPath

    public open fun addSelectionIndexPaths(indexPaths: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "addSelectionIndexPaths:", indexPaths) as Boolean

    public open fun removeSelectionIndexPaths(indexPaths: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "removeSelectionIndexPaths:", indexPaths) as Boolean

    public open fun selectedNodes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectedNodes") as NSArray

    public open fun moveNode_toIndexPath(node: NSTreeNode, indexPath: NSIndexPath): Unit {
        Native.objc_msgSend("void", this, "moveNode:toIndexPath:", node, indexPath)
    }

    public open fun moveNodes_toIndexPath(nodes: NSArray, startingIndexPath: NSIndexPath): Unit {
        Native.objc_msgSend("void", this, "moveNodes:toIndexPath:", nodes, startingIndexPath)
    }

    public open fun childrenKeyPathForNode(node: NSTreeNode): NSString =
        Native.objc_msgSend("class objc.NSString", this, "childrenKeyPathForNode:", node) as NSString

    public open fun countKeyPathForNode(node: NSTreeNode): NSString =
        Native.objc_msgSend("class objc.NSString", this, "countKeyPathForNode:", node) as NSString

    public open fun leafKeyPathForNode(node: NSTreeNode): NSString =
        Native.objc_msgSend("class objc.NSString", this, "leafKeyPathForNode:", node) as NSString

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun objectDidBeginEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidBeginEditing:", editor)
    }

    override fun objectDidEndEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidEndEditing:", editor)
    }

    trait metaclass : NSObjectController.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTreeController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSUserDefaultsController(pointer: Long) : NSController(pointer) {
    public open fun initWithDefaults_initialValues(defaults: NSUserDefaults, initialValues: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDefaults:initialValues:", defaults, initialValues) as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    public open fun defaults(): NSUserDefaults =
        Native.objc_msgSend("class objc.NSUserDefaults", this, "defaults") as NSUserDefaults

    public open fun initialValues(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "initialValues") as NSDictionary

    public open fun setInitialValues(initialValues: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setInitialValues:", initialValues)
    }

    public open fun appliesImmediately(): Boolean =
        Native.objc_msgSend("boolean", this, "appliesImmediately") as Boolean

    public open fun setAppliesImmediately(appliesImmediately: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAppliesImmediately:", appliesImmediately)
    }

    public open fun hasUnappliedChanges(): Boolean =
        Native.objc_msgSend("boolean", this, "hasUnappliedChanges") as Boolean

    public open fun values(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "values") as ObjCObject

    public open fun revert(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "revert:", sender)
    }

    public open fun save(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "save:", sender)
    }

    public open fun revertToInitialValues(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "revertToInitialValues:", sender)
    }

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun objectDidBeginEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidBeginEditing:", editor)
    }

    override fun objectDidEndEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidEndEditing:", editor)
    }

    trait metaclass : NSController.metaclass {
        public open fun sharedUserDefaultsController(): NSUserDefaultsController =
            Native.objc_msgSend("class objc.NSUserDefaultsController", this, "sharedUserDefaultsController") as NSUserDefaultsController

    }

    companion object : NSObject(Native.objc_getClass("NSUserDefaultsController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextList(pointer: Long) : NSObject(pointer), NSCoding, NSCopying {
    public open fun initWithMarkerFormat_options(format: NSString, mask: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithMarkerFormat:options:", format, mask) as ObjCObject

    public open fun markerFormat(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "markerFormat") as NSString

    public open fun listOptions(): Any =
        Native.objc_msgSend("class objc.Any", this, "listOptions")

    public open fun markerForItemNumber(itemNum: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "markerForItemNumber:", itemNum) as NSString

    public open fun startingItemNumber(): Int =
        Native.objc_msgSend("int", this, "startingItemNumber") as Int

    public open fun setStartingItemNumber(startingItemNumber: Int): Unit {
        Native.objc_msgSend("void", this, "setStartingItemNumber:", startingItemNumber)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextList")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextBlock(pointer: Long) : NSObject(pointer), NSCoding, NSCopying {
    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    public open fun setValue_type_forDimension(`val`: Double, type: Any, dimension: Any): Unit {
        Native.objc_msgSend("void", this, "setValue:type:forDimension:", `val`, type, dimension)
    }

    public open fun valueForDimension(dimension: Any): Double =
        Native.objc_msgSend("double", this, "valueForDimension:", dimension) as Double

    public open fun valueTypeForDimension(dimension: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "valueTypeForDimension:", dimension)

    public open fun setContentWidth_type(`val`: Double, type: Any): Unit {
        Native.objc_msgSend("void", this, "setContentWidth:type:", `val`, type)
    }

    public open fun contentWidth(): Double =
        Native.objc_msgSend("double", this, "contentWidth") as Double

    public open fun contentWidthValueType(): Any =
        Native.objc_msgSend("class objc.Any", this, "contentWidthValueType")

    public open fun setWidth_type_forLayer_edge(`val`: Double, type: Any, layer: Any, edge: Int): Unit {
        Native.objc_msgSend("void", this, "setWidth:type:forLayer:edge:", `val`, type, layer, edge)
    }

    public open fun setWidth_type_forLayer(`val`: Double, type: Any, layer: Any): Unit {
        Native.objc_msgSend("void", this, "setWidth:type:forLayer:", `val`, type, layer)
    }

    public open fun widthForLayer_edge(layer: Any, edge: Int): Double =
        Native.objc_msgSend("double", this, "widthForLayer:edge:", layer, edge) as Double

    public open fun widthValueTypeForLayer_edge(layer: Any, edge: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "widthValueTypeForLayer:edge:", layer, edge)

    public open fun verticalAlignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "verticalAlignment")

    public open fun setVerticalAlignment(verticalAlignment: Any): Unit {
        Native.objc_msgSend("void", this, "setVerticalAlignment:", verticalAlignment)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun setBorderColor_forEdge(color: NSColor, edge: Int): Unit {
        Native.objc_msgSend("void", this, "setBorderColor:forEdge:", color, edge)
    }

    public open fun setBorderColor(color: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBorderColor:", color)
    }

    public open fun borderColorForEdge(edge: Int): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "borderColorForEdge:", edge) as NSColor

    public open fun rectForLayoutAtPoint_inRect_textContainer_characterRange(startingPoint: Any, rect: Any, textContainer: NSTextContainer, charRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rectForLayoutAtPoint:inRect:textContainer:characterRange:", startingPoint, rect, textContainer, charRange)

    public open fun boundsRectForContentRect_inRect_textContainer_characterRange(contentRect: Any, rect: Any, textContainer: NSTextContainer, charRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "boundsRectForContentRect:inRect:textContainer:characterRange:", contentRect, rect, textContainer, charRange)

    public open fun drawBackgroundWithFrame_inView_characterRange_layoutManager(frameRect: Any, controlView: NSView, charRange: Any, layoutManager: NSLayoutManager): Unit {
        Native.objc_msgSend("void", this, "drawBackgroundWithFrame:inView:characterRange:layoutManager:", frameRect, controlView, charRange, layoutManager)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextBlock")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextTableBlock(pointer: Long) : NSTextBlock(pointer) {
    public open fun initWithTable_startingRow_rowSpan_startingColumn_columnSpan(table: NSTextTable, row: Int, rowSpan: Int, col: Int, colSpan: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTable:startingRow:rowSpan:startingColumn:columnSpan:", table, row, rowSpan, col, colSpan) as ObjCObject

    public open fun table(): NSTextTable =
        Native.objc_msgSend("class objc.NSTextTable", this, "table") as NSTextTable

    public open fun startingRow(): Int =
        Native.objc_msgSend("int", this, "startingRow") as Int

    public open fun rowSpan(): Int =
        Native.objc_msgSend("int", this, "rowSpan") as Int

    public open fun startingColumn(): Int =
        Native.objc_msgSend("int", this, "startingColumn") as Int

    public open fun columnSpan(): Int =
        Native.objc_msgSend("int", this, "columnSpan") as Int

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSTextBlock.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextTableBlock")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextTable(pointer: Long) : NSTextBlock(pointer) {
    public open fun numberOfColumns(): Int =
        Native.objc_msgSend("int", this, "numberOfColumns") as Int

    public open fun setNumberOfColumns(numberOfColumns: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfColumns:", numberOfColumns)
    }

    public open fun layoutAlgorithm(): Any =
        Native.objc_msgSend("class objc.Any", this, "layoutAlgorithm")

    public open fun setLayoutAlgorithm(layoutAlgorithm: Any): Unit {
        Native.objc_msgSend("void", this, "setLayoutAlgorithm:", layoutAlgorithm)
    }

    public open fun collapsesBorders(): Boolean =
        Native.objc_msgSend("boolean", this, "collapsesBorders") as Boolean

    public open fun setCollapsesBorders(collapsesBorders: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCollapsesBorders:", collapsesBorders)
    }

    public open fun hidesEmptyCells(): Boolean =
        Native.objc_msgSend("boolean", this, "hidesEmptyCells") as Boolean

    public open fun setHidesEmptyCells(hidesEmptyCells: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHidesEmptyCells:", hidesEmptyCells)
    }

    public open fun rectForBlock_layoutAtPoint_inRect_textContainer_characterRange(block: NSTextTableBlock, startingPoint: Any, rect: Any, textContainer: NSTextContainer, charRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:", block, startingPoint, rect, textContainer, charRange)

    public open fun boundsRectForBlock_contentRect_inRect_textContainer_characterRange(block: NSTextTableBlock, contentRect: Any, rect: Any, textContainer: NSTextContainer, charRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "boundsRectForBlock:contentRect:inRect:textContainer:characterRange:", block, contentRect, rect, textContainer, charRange)

    public open fun drawBackgroundForBlock_withFrame_inView_characterRange_layoutManager(block: NSTextTableBlock, frameRect: Any, controlView: NSView, charRange: Any, layoutManager: NSLayoutManager): Unit {
        Native.objc_msgSend("void", this, "drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:", block, frameRect, controlView, charRange, layoutManager)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSTextBlock.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextTable")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDatePickerCell(pointer: Long) : NSActionCell(pointer) {
    public open fun datePickerStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "datePickerStyle")

    public open fun setDatePickerStyle(datePickerStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setDatePickerStyle:", datePickerStyle)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun textColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "textColor") as NSColor

    public open fun setTextColor(textColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setTextColor:", textColor)
    }

    public open fun datePickerMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "datePickerMode")

    public open fun setDatePickerMode(datePickerMode: Any): Unit {
        Native.objc_msgSend("void", this, "setDatePickerMode:", datePickerMode)
    }

    public open fun datePickerElements(): Any =
        Native.objc_msgSend("class objc.Any", this, "datePickerElements")

    public open fun setDatePickerElements(datePickerElements: Any): Unit {
        Native.objc_msgSend("void", this, "setDatePickerElements:", datePickerElements)
    }

    public open fun calendar(): NSCalendar =
        Native.objc_msgSend("class objc.NSCalendar", this, "calendar") as NSCalendar

    public open fun setCalendar(calendar: NSCalendar): Unit {
        Native.objc_msgSend("void", this, "setCalendar:", calendar)
    }

    public open fun locale(): NSLocale =
        Native.objc_msgSend("class objc.NSLocale", this, "locale") as NSLocale

    public open fun setLocale(locale: NSLocale): Unit {
        Native.objc_msgSend("void", this, "setLocale:", locale)
    }

    public open fun timeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "timeZone") as NSTimeZone

    public open fun setTimeZone(timeZone: NSTimeZone): Unit {
        Native.objc_msgSend("void", this, "setTimeZone:", timeZone)
    }

    public open fun dateValue(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateValue") as NSDate

    public open fun setDateValue(dateValue: NSDate): Unit {
        Native.objc_msgSend("void", this, "setDateValue:", dateValue)
    }

    public open fun timeInterval(): Double =
        Native.objc_msgSend("double", this, "timeInterval") as Double

    public open fun setTimeInterval(timeInterval: Double): Unit {
        Native.objc_msgSend("void", this, "setTimeInterval:", timeInterval)
    }

    public open fun minDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "minDate") as NSDate

    public open fun setMinDate(minDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setMinDate:", minDate)
    }

    public open fun maxDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "maxDate") as NSDate

    public open fun setMaxDate(maxDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setMaxDate:", maxDate)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDatePickerCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDatePicker(pointer: Long) : NSControl(pointer) {
    public open fun datePickerStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "datePickerStyle")

    public open fun setDatePickerStyle(datePickerStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setDatePickerStyle:", datePickerStyle)
    }

    public open fun isBezeled(): Boolean =
        Native.objc_msgSend("boolean", this, "isBezeled") as Boolean

    public open fun setBezeled(bezeled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBezeled:", bezeled)
    }

    public open fun isBordered(): Boolean =
        Native.objc_msgSend("boolean", this, "isBordered") as Boolean

    public open fun setBordered(bordered: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBordered:", bordered)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun textColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "textColor") as NSColor

    public open fun setTextColor(textColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setTextColor:", textColor)
    }

    public open fun datePickerMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "datePickerMode")

    public open fun setDatePickerMode(datePickerMode: Any): Unit {
        Native.objc_msgSend("void", this, "setDatePickerMode:", datePickerMode)
    }

    public open fun datePickerElements(): Any =
        Native.objc_msgSend("class objc.Any", this, "datePickerElements")

    public open fun setDatePickerElements(datePickerElements: Any): Unit {
        Native.objc_msgSend("void", this, "setDatePickerElements:", datePickerElements)
    }

    public open fun calendar(): NSCalendar =
        Native.objc_msgSend("class objc.NSCalendar", this, "calendar") as NSCalendar

    public open fun setCalendar(calendar: NSCalendar): Unit {
        Native.objc_msgSend("void", this, "setCalendar:", calendar)
    }

    public open fun locale(): NSLocale =
        Native.objc_msgSend("class objc.NSLocale", this, "locale") as NSLocale

    public open fun setLocale(locale: NSLocale): Unit {
        Native.objc_msgSend("void", this, "setLocale:", locale)
    }

    public open fun timeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "timeZone") as NSTimeZone

    public open fun setTimeZone(timeZone: NSTimeZone): Unit {
        Native.objc_msgSend("void", this, "setTimeZone:", timeZone)
    }

    public open fun dateValue(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "dateValue") as NSDate

    public open fun setDateValue(dateValue: NSDate): Unit {
        Native.objc_msgSend("void", this, "setDateValue:", dateValue)
    }

    public open fun timeInterval(): Double =
        Native.objc_msgSend("double", this, "timeInterval") as Double

    public open fun setTimeInterval(timeInterval: Double): Unit {
        Native.objc_msgSend("void", this, "setTimeInterval:", timeInterval)
    }

    public open fun minDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "minDate") as NSDate

    public open fun setMinDate(minDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setMinDate:", minDate)
    }

    public open fun maxDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "maxDate") as NSDate

    public open fun setMaxDate(maxDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "setMaxDate:", maxDate)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSDatePicker")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLevelIndicatorCell(pointer: Long) : NSActionCell(pointer) {
    public open fun initWithLevelIndicatorStyle(levelIndicatorStyle: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLevelIndicatorStyle:", levelIndicatorStyle) as ObjCObject

    public open fun levelIndicatorStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "levelIndicatorStyle")

    public open fun setLevelIndicatorStyle(levelIndicatorStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setLevelIndicatorStyle:", levelIndicatorStyle)
    }

    public open fun minValue(): Double =
        Native.objc_msgSend("double", this, "minValue") as Double

    public open fun setMinValue(minValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMinValue:", minValue)
    }

    public open fun maxValue(): Double =
        Native.objc_msgSend("double", this, "maxValue") as Double

    public open fun setMaxValue(maxValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxValue:", maxValue)
    }

    public open fun warningValue(): Double =
        Native.objc_msgSend("double", this, "warningValue") as Double

    public open fun setWarningValue(warningValue: Double): Unit {
        Native.objc_msgSend("void", this, "setWarningValue:", warningValue)
    }

    public open fun criticalValue(): Double =
        Native.objc_msgSend("double", this, "criticalValue") as Double

    public open fun setCriticalValue(criticalValue: Double): Unit {
        Native.objc_msgSend("void", this, "setCriticalValue:", criticalValue)
    }

    public open fun tickMarkPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "tickMarkPosition")

    public open fun setTickMarkPosition(tickMarkPosition: Any): Unit {
        Native.objc_msgSend("void", this, "setTickMarkPosition:", tickMarkPosition)
    }

    public open fun numberOfTickMarks(): Int =
        Native.objc_msgSend("int", this, "numberOfTickMarks") as Int

    public open fun setNumberOfTickMarks(numberOfTickMarks: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfTickMarks:", numberOfTickMarks)
    }

    public open fun numberOfMajorTickMarks(): Int =
        Native.objc_msgSend("int", this, "numberOfMajorTickMarks") as Int

    public open fun setNumberOfMajorTickMarks(numberOfMajorTickMarks: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfMajorTickMarks:", numberOfMajorTickMarks)
    }

    public open fun rectOfTickMarkAtIndex(index: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rectOfTickMarkAtIndex:", index)

    public open fun tickMarkValueAtIndex(index: Int): Double =
        Native.objc_msgSend("double", this, "tickMarkValueAtIndex:", index) as Double

    override fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSLevelIndicatorCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSLevelIndicator(pointer: Long) : NSControl(pointer) {
    public open fun levelIndicatorStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "levelIndicatorStyle")

    public open fun setLevelIndicatorStyle(levelIndicatorStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setLevelIndicatorStyle:", levelIndicatorStyle)
    }

    public open fun minValue(): Double =
        Native.objc_msgSend("double", this, "minValue") as Double

    public open fun setMinValue(minValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMinValue:", minValue)
    }

    public open fun maxValue(): Double =
        Native.objc_msgSend("double", this, "maxValue") as Double

    public open fun setMaxValue(maxValue: Double): Unit {
        Native.objc_msgSend("void", this, "setMaxValue:", maxValue)
    }

    public open fun warningValue(): Double =
        Native.objc_msgSend("double", this, "warningValue") as Double

    public open fun setWarningValue(warningValue: Double): Unit {
        Native.objc_msgSend("void", this, "setWarningValue:", warningValue)
    }

    public open fun criticalValue(): Double =
        Native.objc_msgSend("double", this, "criticalValue") as Double

    public open fun setCriticalValue(criticalValue: Double): Unit {
        Native.objc_msgSend("void", this, "setCriticalValue:", criticalValue)
    }

    public open fun tickMarkPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "tickMarkPosition")

    public open fun setTickMarkPosition(tickMarkPosition: Any): Unit {
        Native.objc_msgSend("void", this, "setTickMarkPosition:", tickMarkPosition)
    }

    public open fun numberOfTickMarks(): Int =
        Native.objc_msgSend("int", this, "numberOfTickMarks") as Int

    public open fun setNumberOfTickMarks(numberOfTickMarks: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfTickMarks:", numberOfTickMarks)
    }

    public open fun numberOfMajorTickMarks(): Int =
        Native.objc_msgSend("int", this, "numberOfMajorTickMarks") as Int

    public open fun setNumberOfMajorTickMarks(numberOfMajorTickMarks: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfMajorTickMarks:", numberOfMajorTickMarks)
    }

    public open fun tickMarkValueAtIndex(index: Int): Double =
        Native.objc_msgSend("double", this, "tickMarkValueAtIndex:", index) as Double

    public open fun rectOfTickMarkAtIndex(index: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rectOfTickMarkAtIndex:", index)

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSLevelIndicator")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPersistentDocument(pointer: Long) : NSDocument(pointer), NSPersistentDocument_NSDeprecated {
    public open fun managedObjectContext(): NSManagedObjectContext =
        Native.objc_msgSend("class objc.NSManagedObjectContext", this, "managedObjectContext") as NSManagedObjectContext

    public open fun setManagedObjectContext(managedObjectContext: NSManagedObjectContext): Unit {
        Native.objc_msgSend("void", this, "setManagedObjectContext:", managedObjectContext)
    }

    public open fun managedObjectModel(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "managedObjectModel") as ObjCObject

    public open fun configurePersistentStoreCoordinatorForURL_ofType_modelConfiguration_storeOptions_error(url: NSURL, fileType: NSString, configuration: NSString, storeOptions: NSDictionary, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:", url, fileType, configuration, storeOptions, error) as Boolean

    public open fun persistentStoreTypeForFileType(fileType: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "persistentStoreTypeForFileType:", fileType) as NSString

    override fun writeToURL_ofType_forSaveOperation_originalContentsURL_error(absoluteURL: NSURL, typeName: NSString, saveOperation: Any, absoluteOriginalContentsURL: NSURL, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:ofType:forSaveOperation:originalContentsURL:error:", absoluteURL, typeName, saveOperation, absoluteOriginalContentsURL, error) as Boolean

    override fun readFromURL_ofType_error(absoluteURL: NSURL, typeName: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromURL:ofType:error:", absoluteURL, typeName, error) as Boolean

    override fun revertToContentsOfURL_ofType_error(inAbsoluteURL: NSURL, inTypeName: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "revertToContentsOfURL:ofType:error:", inAbsoluteURL, inTypeName, outError) as Boolean

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun objectSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "objectSpecifier") as NSScriptObjectSpecifier

    trait metaclass : NSDocument.metaclass, NSPersistentDocument_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPersistentDocument")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRuleEditor(pointer: Long) : NSControl(pointer) {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun formattingStringsFilename(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "formattingStringsFilename") as NSString

    public open fun setFormattingStringsFilename(formattingStringsFilename: NSString): Unit {
        Native.objc_msgSend("void", this, "setFormattingStringsFilename:", formattingStringsFilename)
    }

    public open fun formattingDictionary(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "formattingDictionary") as NSDictionary

    public open fun setFormattingDictionary(formattingDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setFormattingDictionary:", formattingDictionary)
    }

    public open fun reloadCriteria(): Unit {
        Native.objc_msgSend("void", this, "reloadCriteria")
    }

    public open fun nestingMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "nestingMode")

    public open fun setNestingMode(nestingMode: Any): Unit {
        Native.objc_msgSend("void", this, "setNestingMode:", nestingMode)
    }

    public open fun rowHeight(): Double =
        Native.objc_msgSend("double", this, "rowHeight") as Double

    public open fun setRowHeight(rowHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setRowHeight:", rowHeight)
    }

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun canRemoveAllRows(): Boolean =
        Native.objc_msgSend("boolean", this, "canRemoveAllRows") as Boolean

    public open fun setCanRemoveAllRows(canRemoveAllRows: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanRemoveAllRows:", canRemoveAllRows)
    }

    public open fun predicate(): NSPredicate =
        Native.objc_msgSend("class objc.NSPredicate", this, "predicate") as NSPredicate

    public open fun reloadPredicate(): Unit {
        Native.objc_msgSend("void", this, "reloadPredicate")
    }

    public open fun predicateForRow(row: Int): NSPredicate =
        Native.objc_msgSend("class objc.NSPredicate", this, "predicateForRow:", row) as NSPredicate

    public open fun numberOfRows(): Int =
        Native.objc_msgSend("int", this, "numberOfRows") as Int

    public open fun subrowIndexesForRow(rowIndex: Int): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "subrowIndexesForRow:", rowIndex) as NSIndexSet

    public open fun criteriaForRow(row: Int): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "criteriaForRow:", row) as NSArray

    public open fun displayValuesForRow(row: Int): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "displayValuesForRow:", row) as NSArray

    public open fun rowForDisplayValue(displayValue: ObjCObject): Int =
        Native.objc_msgSend("int", this, "rowForDisplayValue:", displayValue) as Int

    public open fun rowTypeForRow(rowIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rowTypeForRow:", rowIndex)

    public open fun parentRowForRow(rowIndex: Int): Int =
        Native.objc_msgSend("int", this, "parentRowForRow:", rowIndex) as Int

    public open fun addRow(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addRow:", sender)
    }

    public open fun insertRowAtIndex_withType_asSubrowOfRow_animate(rowIndex: Int, rowType: Any, parentRow: Int, shouldAnimate: Boolean): Unit {
        Native.objc_msgSend("void", this, "insertRowAtIndex:withType:asSubrowOfRow:animate:", rowIndex, rowType, parentRow, shouldAnimate)
    }

    public open fun setCriteria_andDisplayValues_forRowAtIndex(criteria: NSArray, values: NSArray, rowIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setCriteria:andDisplayValues:forRowAtIndex:", criteria, values, rowIndex)
    }

    public open fun removeRowAtIndex(rowIndex: Int): Unit {
        Native.objc_msgSend("void", this, "removeRowAtIndex:", rowIndex)
    }

    public open fun removeRowsAtIndexes_includeSubrows(rowIndexes: NSIndexSet, includeSubrows: Boolean): Unit {
        Native.objc_msgSend("void", this, "removeRowsAtIndexes:includeSubrows:", rowIndexes, includeSubrows)
    }

    public open fun selectedRowIndexes(): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "selectedRowIndexes") as NSIndexSet

    public open fun selectRowIndexes_byExtendingSelection(indexes: NSIndexSet, extend: Boolean): Unit {
        Native.objc_msgSend("void", this, "selectRowIndexes:byExtendingSelection:", indexes, extend)
    }

    public open fun rowClass(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "rowClass") as ObjCClass

    public open fun setRowClass(rowClass: ObjCClass): Unit {
        Native.objc_msgSend("void", this, "setRowClass:", rowClass)
    }

    public open fun rowTypeKeyPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "rowTypeKeyPath") as NSString

    public open fun setRowTypeKeyPath(rowTypeKeyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setRowTypeKeyPath:", rowTypeKeyPath)
    }

    public open fun subrowsKeyPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "subrowsKeyPath") as NSString

    public open fun setSubrowsKeyPath(subrowsKeyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setSubrowsKeyPath:", subrowsKeyPath)
    }

    public open fun criteriaKeyPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "criteriaKeyPath") as NSString

    public open fun setCriteriaKeyPath(criteriaKeyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setCriteriaKeyPath:", criteriaKeyPath)
    }

    public open fun displayValuesKeyPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "displayValuesKeyPath") as NSString

    public open fun setDisplayValuesKeyPath(displayValuesKeyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setDisplayValuesKeyPath:", displayValuesKeyPath)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSRuleEditor")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPredicateEditor(pointer: Long) : NSRuleEditor(pointer) {
    public open fun rowTemplates(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "rowTemplates") as NSArray

    public open fun setRowTemplates(rowTemplates: NSArray): Unit {
        Native.objc_msgSend("void", this, "setRowTemplates:", rowTemplates)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSRuleEditor.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPredicateEditor")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPropertyDescription(pointer: Long) : NSObject(pointer), NSCoding, NSCopying {
    public open fun entity(): NSEntityDescription =
        Native.objc_msgSend("class objc.NSEntityDescription", this, "entity") as NSEntityDescription

    public open fun name(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "name") as NSString

    public open fun setName(name: NSString): Unit {
        Native.objc_msgSend("void", this, "setName:", name)
    }

    public open fun isOptional(): Boolean =
        Native.objc_msgSend("boolean", this, "isOptional") as Boolean

    public open fun setOptional(optional: Boolean): Unit {
        Native.objc_msgSend("void", this, "setOptional:", optional)
    }

    public open fun isTransient(): Boolean =
        Native.objc_msgSend("boolean", this, "isTransient") as Boolean

    public open fun setTransient(transient: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTransient:", transient)
    }

    public open fun validationPredicates(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "validationPredicates") as NSArray

    public open fun validationWarnings(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "validationWarnings") as NSArray

    public open fun setValidationPredicates_withValidationWarnings(validationPredicates: NSArray, validationWarnings: NSArray): Unit {
        Native.objc_msgSend("void", this, "setValidationPredicates:withValidationWarnings:", validationPredicates, validationWarnings)
    }

    public open fun userInfo(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "userInfo") as NSDictionary

    public open fun setUserInfo(userInfo: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setUserInfo:", userInfo)
    }

    public open fun isIndexed(): Boolean =
        Native.objc_msgSend("boolean", this, "isIndexed") as Boolean

    public open fun setIndexed(indexed: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIndexed:", indexed)
    }

    public open fun versionHash(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "versionHash") as NSData

    public open fun versionHashModifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "versionHashModifier") as NSString

    public open fun setVersionHashModifier(versionHashModifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setVersionHashModifier:", versionHashModifier)
    }

    public open fun isIndexedBySpotlight(): Boolean =
        Native.objc_msgSend("boolean", this, "isIndexedBySpotlight") as Boolean

    public open fun setIndexedBySpotlight(indexedBySpotlight: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIndexedBySpotlight:", indexedBySpotlight)
    }

    public open fun isStoredInExternalRecord(): Boolean =
        Native.objc_msgSend("boolean", this, "isStoredInExternalRecord") as Boolean

    public open fun setStoredInExternalRecord(storedInExternalRecord: Boolean): Unit {
        Native.objc_msgSend("void", this, "setStoredInExternalRecord:", storedInExternalRecord)
    }

    public open fun renamingIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "renamingIdentifier") as NSString

    public open fun setRenamingIdentifier(renamingIdentifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setRenamingIdentifier:", renamingIdentifier)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPropertyDescription")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSAttributeDescription(pointer: Long) : NSPropertyDescription(pointer) {
    public open fun attributeType(): Any =
        Native.objc_msgSend("class objc.Any", this, "attributeType")

    public open fun setAttributeType(attributeType: Any): Unit {
        Native.objc_msgSend("void", this, "setAttributeType:", attributeType)
    }

    public open fun attributeValueClassName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "attributeValueClassName") as NSString

    public open fun setAttributeValueClassName(attributeValueClassName: NSString): Unit {
        Native.objc_msgSend("void", this, "setAttributeValueClassName:", attributeValueClassName)
    }

    public open fun defaultValue(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "defaultValue") as ObjCObject

    public open fun setDefaultValue(defaultValue: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDefaultValue:", defaultValue)
    }

    override fun versionHash(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "versionHash") as NSData

    public open fun valueTransformerName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "valueTransformerName") as NSString

    public open fun setValueTransformerName(valueTransformerName: NSString): Unit {
        Native.objc_msgSend("void", this, "setValueTransformerName:", valueTransformerName)
    }

    public open fun allowsExternalBinaryDataStorage(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsExternalBinaryDataStorage") as Boolean

    public open fun setAllowsExternalBinaryDataStorage(allowsExternalBinaryDataStorage: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsExternalBinaryDataStorage:", allowsExternalBinaryDataStorage)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSPropertyDescription.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSAttributeDescription")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPredicateEditorRowTemplate(pointer: Long) : NSObject(pointer), NSCoding, NSCopying {
    public open fun matchForPredicate(predicate: NSPredicate): Double =
        Native.objc_msgSend("double", this, "matchForPredicate:", predicate) as Double

    public open fun templateViews(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "templateViews") as NSArray

    public open fun setPredicate(predicate: NSPredicate): Unit {
        Native.objc_msgSend("void", this, "setPredicate:", predicate)
    }

    public open fun predicateWithSubpredicates(subpredicates: NSArray): NSPredicate =
        Native.objc_msgSend("class objc.NSPredicate", this, "predicateWithSubpredicates:", subpredicates) as NSPredicate

    public open fun displayableSubpredicatesOfPredicate(predicate: NSPredicate): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "displayableSubpredicatesOfPredicate:", predicate) as NSArray

    public open fun initWithLeftExpressions_rightExpressions_modifier_operators_options(leftExpressions: NSArray, rightExpressions: NSArray, modifier: Any, operators: NSArray, options: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLeftExpressions:rightExpressions:modifier:operators:options:", leftExpressions, rightExpressions, modifier, operators, options) as ObjCObject

    public open fun initWithLeftExpressions_rightExpressionAttributeType_modifier_operators_options(leftExpressions: NSArray, attributeType: Any, modifier: Any, operators: NSArray, options: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:", leftExpressions, attributeType, modifier, operators, options) as ObjCObject

    public open fun initWithCompoundTypes(compoundTypes: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCompoundTypes:", compoundTypes) as ObjCObject

    public open fun leftExpressions(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "leftExpressions") as NSArray

    public open fun rightExpressions(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "rightExpressions") as NSArray

    public open fun rightExpressionAttributeType(): Any =
        Native.objc_msgSend("class objc.Any", this, "rightExpressionAttributeType")

    public open fun modifier(): Any =
        Native.objc_msgSend("class objc.Any", this, "modifier")

    public open fun operators(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "operators") as NSArray

    public open fun options(): Int =
        Native.objc_msgSend("int", this, "options") as Int

    public open fun compoundTypes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "compoundTypes") as NSArray

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass, NSCoding.metaclass, NSCopying.metaclass {
        public open fun templatesWithAttributeKeyPaths_inEntityDescription(keyPaths: NSArray, entityDescription: NSEntityDescription): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "templatesWithAttributeKeyPaths:inEntityDescription:", keyPaths, entityDescription) as NSArray

    }

    companion object : NSObject(Native.objc_getClass("NSPredicateEditorRowTemplate")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPathCell(pointer: Long) : NSActionCell(pointer), NSOpenSavePanelDelegate {
    public open fun pathStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "pathStyle")

    public open fun setPathStyle(pathStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setPathStyle:", pathStyle)
    }

    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun setURL(URL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setURL:", URL)
    }

    public open fun setObjectValue(obj: Any): Unit {
        Native.objc_msgSend("void", this, "setObjectValue:", obj)
    }

    public open fun allowedTypes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allowedTypes") as NSArray

    public open fun setAllowedTypes(allowedTypes: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAllowedTypes:", allowedTypes)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun pathComponentCells(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pathComponentCells") as NSArray

    public open fun setPathComponentCells(pathComponentCells: NSArray): Unit {
        Native.objc_msgSend("void", this, "setPathComponentCells:", pathComponentCells)
    }

    public open fun rectOfPathComponentCell_withFrame_inView(cell: NSPathComponentCell, frame: Any, view: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "rectOfPathComponentCell:withFrame:inView:", cell, frame, view)

    public open fun pathComponentCellAtPoint_withFrame_inView(point: Any, frame: Any, view: NSView): NSPathComponentCell =
        Native.objc_msgSend("class objc.NSPathComponentCell", this, "pathComponentCellAtPoint:withFrame:inView:", point, frame, view) as NSPathComponentCell

    public open fun clickedPathComponentCell(): NSPathComponentCell =
        Native.objc_msgSend("class objc.NSPathComponentCell", this, "clickedPathComponentCell") as NSPathComponentCell

    public open fun mouseEntered_withFrame_inView(event: NSEvent, frame: Any, view: NSView): Unit {
        Native.objc_msgSend("void", this, "mouseEntered:withFrame:inView:", event, frame, view)
    }

    public open fun mouseExited_withFrame_inView(event: NSEvent, frame: Any, view: NSView): Unit {
        Native.objc_msgSend("void", this, "mouseExited:withFrame:inView:", event, frame, view)
    }

    public open fun doubleAction(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "doubleAction") as ObjCSelector

    public open fun setDoubleAction(doubleAction: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setDoubleAction:", doubleAction)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun placeholderString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "placeholderString") as NSString

    public open fun setPlaceholderString(placeholderString: NSString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderString:", placeholderString)
    }

    public open fun placeholderAttributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "placeholderAttributedString") as NSAttributedString

    public open fun setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderAttributedString:", placeholderAttributedString)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSActionCell.metaclass, NSOpenSavePanelDelegate.metaclass {
        public open fun pathComponentCellClass(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "pathComponentCellClass") as ObjCClass

    }

    companion object : NSObject(Native.objc_getClass("NSPathCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPathControl(pointer: Long) : NSControl(pointer), NSPathControl_NSDeprecated {
    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun allowedTypes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allowedTypes") as NSArray

    public open fun setAllowedTypes(allowedTypes: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAllowedTypes:", allowedTypes)
    }

    public open fun placeholderString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "placeholderString") as NSString

    public open fun setPlaceholderString(placeholderString: NSString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderString:", placeholderString)
    }

    public open fun placeholderAttributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "placeholderAttributedString") as NSAttributedString

    public open fun setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setPlaceholderAttributedString:", placeholderAttributedString)
    }

    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun setURL(URL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setURL:", URL)
    }

    public open fun doubleAction(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "doubleAction") as ObjCSelector

    public open fun setDoubleAction(doubleAction: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setDoubleAction:", doubleAction)
    }

    public open fun pathStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "pathStyle")

    public open fun setPathStyle(pathStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setPathStyle:", pathStyle)
    }

    public open fun clickedPathItem(): NSPathControlItem =
        Native.objc_msgSend("class objc.NSPathControlItem", this, "clickedPathItem") as NSPathControlItem

    public open fun pathItems(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pathItems") as NSArray

    public open fun setPathItems(pathItems: NSArray): Unit {
        Native.objc_msgSend("void", this, "setPathItems:", pathItems)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun setDraggingSourceOperationMask_forLocal(mask: Any, isLocal: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDraggingSourceOperationMask:forLocal:", mask, isLocal)
    }

    override fun menu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "menu") as NSMenu

    override fun setMenu(menu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setMenu:", menu)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun initWithFrame(frameRect: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFrame:", frameRect) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun mouseDown(theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", theEvent)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    override fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    override fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    trait metaclass : NSControl.metaclass, NSPathControl_NSDeprecated.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPathControl")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPathComponentCell(pointer: Long) : NSTextFieldCell(pointer) {
    override fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    override fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun setURL(URL: NSURL): Unit {
        Native.objc_msgSend("void", this, "setURL:", URL)
    }

    override fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    override fun setTag(tag: Int): Unit {
        Native.objc_msgSend("void", this, "setTag:", tag)
    }

    override fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    override fun setUpFieldEditorAttributes(textObj: NSText): NSText =
        Native.objc_msgSend("class objc.NSText", this, "setUpFieldEditorAttributes:", textObj) as NSText

    override fun tag(): Int =
        Native.objc_msgSend("int", this, "tag") as Int

    override fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    trait metaclass : NSTextFieldCell.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPathComponentCell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPathControlItem(pointer: Long) : NSObject(pointer) {
    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun attributedTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedTitle") as NSAttributedString

    public open fun setAttributedTitle(attributedTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedTitle:", attributedTitle)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPathControlItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPageController(pointer: Long) : NSViewController(pointer), NSAnimatablePropertyContainer, NSCoding {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun selectedViewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "selectedViewController") as NSViewController

    public open fun transitionStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "transitionStyle")

    public open fun setTransitionStyle(transitionStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setTransitionStyle:", transitionStyle)
    }

    public open fun arrangedObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arrangedObjects") as NSArray

    public open fun setArrangedObjects(arrangedObjects: NSArray): Unit {
        Native.objc_msgSend("void", this, "setArrangedObjects:", arrangedObjects)
    }

    public open fun selectedIndex(): Int =
        Native.objc_msgSend("int", this, "selectedIndex") as Int

    public open fun setSelectedIndex(selectedIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setSelectedIndex:", selectedIndex)
    }

    public open fun navigateForwardToObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "navigateForwardToObject:", `object`)
    }

    public open fun completeTransition(): Unit {
        Native.objc_msgSend("void", this, "completeTransition")
    }

    public open fun navigateBack(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "navigateBack:", sender)
    }

    public open fun navigateForward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "navigateForward:", sender)
    }

    public open fun takeSelectedIndexFrom(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "takeSelectedIndexFrom:", sender)
    }

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSViewController.metaclass, NSAnimatablePropertyContainer.metaclass, NSCoding.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSPageController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCollectionViewItem(pointer: Long) : NSViewController(pointer), NSCopying {
    public open fun collectionView(): NSCollectionView =
        Native.objc_msgSend("class objc.NSCollectionView", this, "collectionView") as NSCollectionView

    public open fun isSelected(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelected") as Boolean

    public open fun setSelected(selected: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelected:", selected)
    }

    public open fun imageView(): NSImageView =
        Native.objc_msgSend("class objc.NSImageView", this, "imageView") as NSImageView

    public open fun setImageView(imageView: NSImageView): Unit {
        Native.objc_msgSend("void", this, "setImageView:", imageView)
    }

    public open fun textField(): NSTextField =
        Native.objc_msgSend("class objc.NSTextField", this, "textField") as NSTextField

    public open fun setTextField(textField: NSTextField): Unit {
        Native.objc_msgSend("void", this, "setTextField:", textField)
    }

    public open fun draggingImageComponents(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "draggingImageComponents") as NSArray

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSViewController.metaclass, NSCopying.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCollectionViewItem")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCollectionView(pointer: Long) : NSView(pointer), NSDraggingSource, NSDraggingDestination {
    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun isFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "isFirstResponder") as Boolean

    public open fun content(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "content") as NSArray

    public open fun setContent(content: NSArray): Unit {
        Native.objc_msgSend("void", this, "setContent:", content)
    }

    public open fun isSelectable(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectable") as Boolean

    public open fun setSelectable(selectable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectable:", selectable)
    }

    public open fun allowsMultipleSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsMultipleSelection") as Boolean

    public open fun setAllowsMultipleSelection(allowsMultipleSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsMultipleSelection:", allowsMultipleSelection)
    }

    public open fun selectionIndexes(): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "selectionIndexes") as NSIndexSet

    public open fun setSelectionIndexes(selectionIndexes: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "setSelectionIndexes:", selectionIndexes)
    }

    public open fun newItemForRepresentedObject(`object`: ObjCObject): NSCollectionViewItem =
        Native.objc_msgSend("class objc.NSCollectionViewItem", this, "newItemForRepresentedObject:", `object`) as NSCollectionViewItem

    public open fun itemPrototype(): NSCollectionViewItem =
        Native.objc_msgSend("class objc.NSCollectionViewItem", this, "itemPrototype") as NSCollectionViewItem

    public open fun setItemPrototype(itemPrototype: NSCollectionViewItem): Unit {
        Native.objc_msgSend("void", this, "setItemPrototype:", itemPrototype)
    }

    public open fun maxNumberOfRows(): Int =
        Native.objc_msgSend("int", this, "maxNumberOfRows") as Int

    public open fun setMaxNumberOfRows(maxNumberOfRows: Int): Unit {
        Native.objc_msgSend("void", this, "setMaxNumberOfRows:", maxNumberOfRows)
    }

    public open fun maxNumberOfColumns(): Int =
        Native.objc_msgSend("int", this, "maxNumberOfColumns") as Int

    public open fun setMaxNumberOfColumns(maxNumberOfColumns: Int): Unit {
        Native.objc_msgSend("void", this, "setMaxNumberOfColumns:", maxNumberOfColumns)
    }

    public open fun minItemSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "minItemSize")

    public open fun setMinItemSize(minItemSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMinItemSize:", minItemSize)
    }

    public open fun maxItemSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "maxItemSize")

    public open fun setMaxItemSize(maxItemSize: Any): Unit {
        Native.objc_msgSend("void", this, "setMaxItemSize:", maxItemSize)
    }

    public open fun backgroundColors(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "backgroundColors") as NSArray

    public open fun setBackgroundColors(backgroundColors: NSArray): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColors:", backgroundColors)
    }

    public open fun itemAtIndex(index: Int): NSCollectionViewItem =
        Native.objc_msgSend("class objc.NSCollectionViewItem", this, "itemAtIndex:", index) as NSCollectionViewItem

    public open fun frameForItemAtIndex(index: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "frameForItemAtIndex:", index)

    public open fun frameForItemAtIndex_withNumberOfItems(index: Int, numberOfItems: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "frameForItemAtIndex:withNumberOfItems:", index, numberOfItems)

    public open fun setDraggingSourceOperationMask_forLocal(dragOperationMask: Any, localDestination: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDraggingSourceOperationMask:forLocal:", dragOperationMask, localDestination)
    }

    public open fun draggingImageForItemsAtIndexes_withEvent_offset(indexes: NSIndexSet, event: NSEvent, dragImageOffset: Pointer<Any>): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "draggingImageForItemsAtIndexes:withEvent:offset:", indexes, event, dragImageOffset) as NSImage

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass, NSDraggingSource.metaclass, NSDraggingDestination.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSCollectionView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextInputContext(pointer: Long) : NSObject(pointer) {
    public open fun initWithClient(theClient: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithClient:", theClient) as ObjCObject

    public open fun client(): Any =
        Native.objc_msgSend("class objc.Any", this, "client")

    public open fun acceptsGlyphInfo(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsGlyphInfo") as Boolean

    public open fun setAcceptsGlyphInfo(acceptsGlyphInfo: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAcceptsGlyphInfo:", acceptsGlyphInfo)
    }

    public open fun allowedInputSourceLocales(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allowedInputSourceLocales") as NSArray

    public open fun setAllowedInputSourceLocales(allowedInputSourceLocales: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAllowedInputSourceLocales:", allowedInputSourceLocales)
    }

    public open fun activate(): Unit {
        Native.objc_msgSend("void", this, "activate")
    }

    public open fun deactivate(): Unit {
        Native.objc_msgSend("void", this, "deactivate")
    }

    public open fun handleEvent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "handleEvent:", theEvent) as Boolean

    public open fun discardMarkedText(): Unit {
        Native.objc_msgSend("void", this, "discardMarkedText")
    }

    public open fun invalidateCharacterCoordinates(): Unit {
        Native.objc_msgSend("void", this, "invalidateCharacterCoordinates")
    }

    public open fun keyboardInputSources(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "keyboardInputSources") as NSArray

    public open fun selectedKeyboardInputSource(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "selectedKeyboardInputSource") as NSString

    public open fun setSelectedKeyboardInputSource(selectedKeyboardInputSource: NSString): Unit {
        Native.objc_msgSend("void", this, "setSelectedKeyboardInputSource:", selectedKeyboardInputSource)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
        public open fun currentInputContext(): NSTextInputContext =
            Native.objc_msgSend("class objc.NSTextInputContext", this, "currentInputContext") as NSTextInputContext

        public open fun localizedNameForInputSource(inputSourceIdentifier: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localizedNameForInputSource:", inputSourceIdentifier) as NSString

    }

    companion object : NSObject(Native.objc_getClass("NSTextInputContext")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTextAlternatives(pointer: Long) : NSObject(pointer) {
    public open fun initWithPrimaryString_alternativeStrings(primaryString: NSString, alternativeStrings: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPrimaryString:alternativeStrings:", primaryString, alternativeStrings) as ObjCObject

    public open fun primaryString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "primaryString") as NSString

    public open fun alternativeStrings(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "alternativeStrings") as NSArray

    public open fun noteSelectedAlternativeString(alternativeString: NSString): Unit {
        Native.objc_msgSend("void", this, "noteSelectedAlternativeString:", alternativeString)
    }

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSObject.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTextAlternatives")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSVisualEffectView(pointer: Long) : NSView(pointer) {
    public open fun material(): Any =
        Native.objc_msgSend("class objc.Any", this, "material")

    public open fun setMaterial(material: Any): Unit {
        Native.objc_msgSend("void", this, "setMaterial:", material)
    }

    public open fun interiorBackgroundStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "interiorBackgroundStyle")

    public open fun blendingMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "blendingMode")

    public open fun setBlendingMode(blendingMode: Any): Unit {
        Native.objc_msgSend("void", this, "setBlendingMode:", blendingMode)
    }

    public open fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    public open fun setState(state: Any): Unit {
        Native.objc_msgSend("void", this, "setState:", state)
    }

    public open fun maskImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "maskImage") as NSImage

    public open fun setMaskImage(maskImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setMaskImage:", maskImage)
    }

    override fun viewDidMoveToWindow(): Unit {
        Native.objc_msgSend("void", this, "viewDidMoveToWindow")
    }

    override fun viewWillMoveToWindow(newWindow: NSWindow): Unit {
        Native.objc_msgSend("void", this, "viewWillMoveToWindow:", newWindow)
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    override fun performKeyEquivalent(theEvent: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "performKeyEquivalent:", theEvent) as Boolean

    override fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : NSView.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSVisualEffectView")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTitlebarAccessoryViewController(pointer: Long) : NSViewController(pointer) {
    public open fun layoutAttribute(): Any =
        Native.objc_msgSend("class objc.Any", this, "layoutAttribute")

    public open fun setLayoutAttribute(layoutAttribute: Any): Unit {
        Native.objc_msgSend("void", this, "setLayoutAttribute:", layoutAttribute)
    }

    public open fun fullScreenMinHeight(): Double =
        Native.objc_msgSend("double", this, "fullScreenMinHeight") as Double

    public open fun setFullScreenMinHeight(fullScreenMinHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setFullScreenMinHeight:", fullScreenMinHeight)
    }

    override fun viewWillAppear(): Unit {
        Native.objc_msgSend("void", this, "viewWillAppear")
    }

    override fun viewDidAppear(): Unit {
        Native.objc_msgSend("void", this, "viewDidAppear")
    }

    override fun viewDidDisappear(): Unit {
        Native.objc_msgSend("void", this, "viewDidDisappear")
    }

    override fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    override fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    override fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    override fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    override fun initWithCoder(coder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCoder:", coder) as ObjCObject

    override fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : NSViewController.metaclass {
    }

    companion object : NSObject(Native.objc_getClass("NSTitlebarAccessoryViewController")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CAAnimation(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("CAAnimation")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CALayerArray(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("CALayerArray")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CAMediaTimingFunction(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("CAMediaTimingFunction")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CIContext(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("CIContext")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CIFilter(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("CIFilter")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class CIFilterShape(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("CIFilterShape")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSCachedURLResponseInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSCachedURLResponseInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSControlAuxiliary(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSControlAuxiliary")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSDisplayLink(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSDisplayLink")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSEntityDescription(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSEntityDescription")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSFetchRequest(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSFetchRequest")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHTTPCookieInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSHTTPCookieInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHTTPCookieStorageInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSHTTPCookieStorageInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSHTTPURLResponseInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSHTTPURLResponseInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSIBObjectData(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSIBObjectData")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSManagedObjectContext(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSManagedObjectContext")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSManagedObjectModel(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSManagedObjectModel")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSMouseTracker(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSMouseTracker")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPredicateOperator(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSPredicateOperator")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSPredicateTemplate(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSPredicateTemplate")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSRunStorage(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSRunStorage")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSavePanelAuxiliary(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSSavePanelAuxiliary")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSSortedArray(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSSortedArray")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSStorage(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSStorage")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSTabWell(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSTabWell")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSToolbarItemViewer(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSToolbarItemViewer")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLAuthenticationChallengeInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLAuthenticationChallengeInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLCacheInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLCacheInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLConnectionInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLConnectionInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLCredentialInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLCredentialInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLCredentialStorageInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLCredentialStorageInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLDownloadInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLDownloadInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLProtectionSpaceInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLProtectionSpaceInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLProtocolInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLProtocolInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLRequestInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLRequestInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSURLResponseInternal(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSURLResponseInternal")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class NSWindowAuxiliary(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("NSWindowAuxiliary")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class QTMovie(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("QTMovie")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class _NSImageAuxiliary(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("_NSImageAuxiliary")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class _NSOVRowEntry(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("_NSOVRowEntry")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

public open class _NSViewAuxiliary(pointer: Long) : ObjCObject(pointer) {
    trait metaclass : IObjCObject {
    }

    companion object : NSObject(Native.objc_getClass("_NSViewAuxiliary")), metaclass, ObjCClass {
        init { loadLibrary(interopConfig.nativeLibraryPath) }
    }
}

trait NSObject_NSCoderMethods : IObjCObject {
    public open fun classForCoder(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "classForCoder") as ObjCClass

    public open fun replacementObjectForCoder(aCoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "replacementObjectForCoder:", aCoder) as ObjCObject

    public open fun awakeAfterUsingCoder(aDecoder: NSCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "awakeAfterUsingCoder:", aDecoder) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun version(): Int =
            Native.objc_msgSend("int", this, "version") as Int

        public open fun setVersion(aVersion: Int): Unit {
            Native.objc_msgSend("void", this, "setVersion:", aVersion)
        }
    }
}

trait NSObject_NSDeprecatedMethods : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun poseAsClass(aClass: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "poseAsClass:", aClass)
        }
    }
}

trait NSObject_NSDiscardableContentProxy : IObjCObject {
    public open fun autoContentAccessingProxy(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "autoContentAccessingProxy") as ObjCObject

    trait metaclass : IObjCObject
}

trait NSEnumerator_NSExtendedEnumerator : IObjCObject {
    public open fun allObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allObjects") as NSArray

    trait metaclass : IObjCObject
}

trait NSValue_NSValueCreation : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun valueWithBytes_objCType(value: Pointer<Unit>, type: Pointer<Char>): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithBytes:objCType:", value, type) as NSValue

        public open fun value_withObjCType(value: Pointer<Unit>, type: Pointer<Char>): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "value:withObjCType:", value, type) as NSValue
    }
}

trait NSValue_NSValueExtensionMethods : IObjCObject {
    public open fun nonretainedObjectValue(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "nonretainedObjectValue") as ObjCObject

    public open fun pointerValue(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "pointerValue") as Pointer<*>

    public open fun isEqualToValue(value: NSValue): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToValue:", value) as Boolean

    trait metaclass : IObjCObject {
        public open fun valueWithNonretainedObject(anObject: ObjCObject): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithNonretainedObject:", anObject) as NSValue

        public open fun valueWithPointer(pointer: Pointer<Unit>): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithPointer:", pointer) as NSValue
    }
}

trait NSNumber_NSNumberCreation : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun numberWithChar(value: Char): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithChar:", value) as NSNumber

        public open fun numberWithUnsignedChar(value: Byte): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithUnsignedChar:", value) as NSNumber

        public open fun numberWithShort(value: Short): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithShort:", value) as NSNumber

        public open fun numberWithUnsignedShort(value: Short): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithUnsignedShort:", value) as NSNumber

        public open fun numberWithInt(value: Int): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithInt:", value) as NSNumber

        public open fun numberWithUnsignedInt(value: Int): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithUnsignedInt:", value) as NSNumber

        public open fun numberWithLong(value: Int): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithLong:", value) as NSNumber

        public open fun numberWithUnsignedLong(value: Int): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithUnsignedLong:", value) as NSNumber

        public open fun numberWithLongLong(value: Long): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithLongLong:", value) as NSNumber

        public open fun numberWithUnsignedLongLong(value: Long): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithUnsignedLongLong:", value) as NSNumber

        public open fun numberWithFloat(value: Float): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithFloat:", value) as NSNumber

        public open fun numberWithDouble(value: Double): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithDouble:", value) as NSNumber

        public open fun numberWithBool(value: Boolean): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithBool:", value) as NSNumber

        public open fun numberWithInteger(value: Int): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithInteger:", value) as NSNumber

        public open fun numberWithUnsignedInteger(value: Int): NSNumber =
            Native.objc_msgSend("class objc.NSNumber", this, "numberWithUnsignedInteger:", value) as NSNumber
    }
}

trait NSValue_NSValueRangeExtensions : IObjCObject {
    public open fun rangeValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeValue")

    trait metaclass : IObjCObject {
        public open fun valueWithRange(range: Any): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithRange:", range) as NSValue
    }
}

trait NSArray_NSExtendedArray : IObjCObject {
    public open fun arrayByAddingObject(anObject: ObjCObject): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arrayByAddingObject:", anObject) as NSArray

    public open fun arrayByAddingObjectsFromArray(otherArray: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "arrayByAddingObjectsFromArray:", otherArray) as NSArray

    public open fun componentsJoinedByString(separator: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "componentsJoinedByString:", separator) as NSString

    public open fun containsObject(anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "containsObject:", anObject) as Boolean

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun descriptionWithLocale(locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:", locale) as NSString

    public open fun descriptionWithLocale_indent(locale: ObjCObject, level: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:indent:", locale, level) as NSString

    public open fun firstObjectCommonWithArray(otherArray: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "firstObjectCommonWithArray:", otherArray) as ObjCObject

    public open fun getObjects_range(objects: Any, range: Any): Unit {
        Native.objc_msgSend("void", this, "getObjects:range:", objects, range)
    }

    public open fun indexOfObject(anObject: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfObject:", anObject) as Int

    public open fun indexOfObject_inRange(anObject: ObjCObject, range: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObject:inRange:", anObject, range) as Int

    public open fun indexOfObjectIdenticalTo(anObject: ObjCObject): Int =
        Native.objc_msgSend("int", this, "indexOfObjectIdenticalTo:", anObject) as Int

    public open fun indexOfObjectIdenticalTo_inRange(anObject: ObjCObject, range: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObjectIdenticalTo:inRange:", anObject, range) as Int

    public open fun isEqualToArray(otherArray: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToArray:", otherArray) as Boolean

    public open fun firstObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "firstObject") as ObjCObject

    public open fun lastObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "lastObject") as ObjCObject

    public open fun objectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "objectEnumerator") as NSEnumerator

    public open fun reverseObjectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "reverseObjectEnumerator") as NSEnumerator

    public open fun sortedArrayHint(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "sortedArrayHint") as NSData

    public open fun sortedArrayUsingFunction_context(comparator: (Any, Any, Pointer<*>) -> Int, context: Pointer<*>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayUsingFunction:context:", comparator, context) as NSArray

    public open fun sortedArrayUsingFunction_context_hint(comparator: (Any, Any, Pointer<*>) -> Int, context: Pointer<*>, hint: NSData): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayUsingFunction:context:hint:", comparator, context, hint) as NSArray

    public open fun sortedArrayUsingSelector(comparator: ObjCSelector): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayUsingSelector:", comparator) as NSArray

    public open fun subarrayWithRange(range: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "subarrayWithRange:", range) as NSArray

    public open fun writeToFile_atomically(path: NSString, useAuxiliaryFile: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:atomically:", path, useAuxiliaryFile) as Boolean

    public open fun writeToURL_atomically(url: NSURL, atomically: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:atomically:", url, atomically) as Boolean

    public open fun makeObjectsPerformSelector(aSelector: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "makeObjectsPerformSelector:", aSelector)
    }

    public open fun makeObjectsPerformSelector_withObject(aSelector: ObjCSelector, argument: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeObjectsPerformSelector:withObject:", aSelector, argument)
    }

    public open fun objectsAtIndexes(indexes: NSIndexSet): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "objectsAtIndexes:", indexes) as NSArray

    public open fun objectAtIndexedSubscript(idx: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectAtIndexedSubscript:", idx) as ObjCObject

    public open fun enumerateObjectsUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateObjectsUsingBlock:", block)
    }

    public open fun enumerateObjectsWithOptions_usingBlock(opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateObjectsWithOptions:usingBlock:", opts, block)
    }

    public open fun enumerateObjectsAtIndexes_options_usingBlock(s: NSIndexSet, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateObjectsAtIndexes:options:usingBlock:", s, opts, block)
    }

    public open fun indexOfObjectPassingTest(predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObjectPassingTest:", predicate) as Int

    public open fun indexOfObjectWithOptions_passingTest(opts: Any, predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObjectWithOptions:passingTest:", opts, predicate) as Int

    public open fun indexOfObjectAtIndexes_options_passingTest(s: NSIndexSet, opts: Any, predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObjectAtIndexes:options:passingTest:", s, opts, predicate) as Int

    public open fun indexesOfObjectsPassingTest(predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesOfObjectsPassingTest:", predicate) as NSIndexSet

    public open fun indexesOfObjectsWithOptions_passingTest(opts: Any, predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesOfObjectsWithOptions:passingTest:", opts, predicate) as NSIndexSet

    public open fun indexesOfObjectsAtIndexes_options_passingTest(s: NSIndexSet, opts: Any, predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesOfObjectsAtIndexes:options:passingTest:", s, opts, predicate) as NSIndexSet

    public open fun sortedArrayUsingComparator(cmptr: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayUsingComparator:", cmptr) as NSArray

    public open fun sortedArrayWithOptions_usingComparator(opts: Any, cmptr: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayWithOptions:usingComparator:", opts, cmptr) as NSArray

    public open fun indexOfObject_inSortedRange_options_usingComparator(obj: ObjCObject, r: Any, opts: Any, cmp: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObject:inSortedRange:options:usingComparator:", obj, r, opts, cmp) as Int

    trait metaclass : IObjCObject
}

trait NSArray_NSArrayCreation : IObjCObject {
    public open fun initWithObjects(firstObj: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjects:", firstObj) as ObjCObject

    public open fun initWithArray(array: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithArray:", array) as ObjCObject

    public open fun initWithArray_copyItems(array: NSArray, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithArray:copyItems:", array, flag) as ObjCObject

    public open fun initWithContentsOfFile(path: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "initWithContentsOfFile:", path) as NSArray

    public open fun initWithContentsOfURL(url: NSURL): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "initWithContentsOfURL:", url) as NSArray

    trait metaclass : IObjCObject {
        public open fun array(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "array") as ObjCObject

        public open fun arrayWithObject(anObject: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "arrayWithObject:", anObject) as ObjCObject

        public open fun arrayWithObjects_count(objects: Any, cnt: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "arrayWithObjects:count:", objects, cnt) as ObjCObject

        public open fun arrayWithObjects(firstObj: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "arrayWithObjects:", firstObj) as ObjCObject

        public open fun arrayWithArray(array: NSArray): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "arrayWithArray:", array) as ObjCObject

        public open fun arrayWithContentsOfFile(path: NSString): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "arrayWithContentsOfFile:", path) as NSArray

        public open fun arrayWithContentsOfURL(url: NSURL): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "arrayWithContentsOfURL:", url) as NSArray
    }
}

trait NSArray_NSDeprecated : IObjCObject {
    public open fun getObjects(objects: Any): Unit {
        Native.objc_msgSend("void", this, "getObjects:", objects)
    }

    trait metaclass : IObjCObject
}

trait NSMutableArray_NSExtendedMutableArray : IObjCObject {
    public open fun addObjectsFromArray(otherArray: NSArray): Unit {
        Native.objc_msgSend("void", this, "addObjectsFromArray:", otherArray)
    }

    public open fun exchangeObjectAtIndex_withObjectAtIndex(idx1: Int, idx2: Int): Unit {
        Native.objc_msgSend("void", this, "exchangeObjectAtIndex:withObjectAtIndex:", idx1, idx2)
    }

    public open fun removeAllObjects(): Unit {
        Native.objc_msgSend("void", this, "removeAllObjects")
    }

    public open fun removeObject_inRange(anObject: ObjCObject, range: Any): Unit {
        Native.objc_msgSend("void", this, "removeObject:inRange:", anObject, range)
    }

    public open fun removeObject(anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObject:", anObject)
    }

    public open fun removeObjectIdenticalTo_inRange(anObject: ObjCObject, range: Any): Unit {
        Native.objc_msgSend("void", this, "removeObjectIdenticalTo:inRange:", anObject, range)
    }

    public open fun removeObjectIdenticalTo(anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObjectIdenticalTo:", anObject)
    }

    public open fun removeObjectsFromIndices_numIndices(indices: Pointer<Int>, cnt: Int): Unit {
        Native.objc_msgSend("void", this, "removeObjectsFromIndices:numIndices:", indices, cnt)
    }

    public open fun removeObjectsInArray(otherArray: NSArray): Unit {
        Native.objc_msgSend("void", this, "removeObjectsInArray:", otherArray)
    }

    public open fun removeObjectsInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "removeObjectsInRange:", range)
    }

    public open fun replaceObjectsInRange_withObjectsFromArray_range(range: Any, otherArray: NSArray, otherRange: Any): Unit {
        Native.objc_msgSend("void", this, "replaceObjectsInRange:withObjectsFromArray:range:", range, otherArray, otherRange)
    }

    public open fun replaceObjectsInRange_withObjectsFromArray(range: Any, otherArray: NSArray): Unit {
        Native.objc_msgSend("void", this, "replaceObjectsInRange:withObjectsFromArray:", range, otherArray)
    }

    public open fun setArray(otherArray: NSArray): Unit {
        Native.objc_msgSend("void", this, "setArray:", otherArray)
    }

    public open fun sortUsingFunction_context(compare: (Any, Any, Pointer<*>) -> Int, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "sortUsingFunction:context:", compare, context)
    }

    public open fun sortUsingSelector(comparator: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "sortUsingSelector:", comparator)
    }

    public open fun insertObjects_atIndexes(objects: NSArray, indexes: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "insertObjects:atIndexes:", objects, indexes)
    }

    public open fun removeObjectsAtIndexes(indexes: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "removeObjectsAtIndexes:", indexes)
    }

    public open fun replaceObjectsAtIndexes_withObjects(indexes: NSIndexSet, objects: NSArray): Unit {
        Native.objc_msgSend("void", this, "replaceObjectsAtIndexes:withObjects:", indexes, objects)
    }

    public open fun setObject_atIndexedSubscript(obj: ObjCObject, idx: Int): Unit {
        Native.objc_msgSend("void", this, "setObject:atIndexedSubscript:", obj, idx)
    }

    public open fun sortUsingComparator(cmptr: Any): Unit {
        Native.objc_msgSend("void", this, "sortUsingComparator:", cmptr)
    }

    public open fun sortWithOptions_usingComparator(opts: Any, cmptr: Any): Unit {
        Native.objc_msgSend("void", this, "sortWithOptions:usingComparator:", opts, cmptr)
    }

    trait metaclass : IObjCObject
}

trait NSMutableArray_NSMutableArrayCreation : IObjCObject {
    public open fun initWithContentsOfFile(path: NSString): NSMutableArray =
        Native.objc_msgSend("class objc.NSMutableArray", this, "initWithContentsOfFile:", path) as NSMutableArray

    public open fun initWithContentsOfURL(url: NSURL): NSMutableArray =
        Native.objc_msgSend("class objc.NSMutableArray", this, "initWithContentsOfURL:", url) as NSMutableArray

    trait metaclass : IObjCObject {
        public open fun arrayWithCapacity(numItems: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "arrayWithCapacity:", numItems) as ObjCObject

        public open fun arrayWithContentsOfFile(path: NSString): NSMutableArray =
            Native.objc_msgSend("class objc.NSMutableArray", this, "arrayWithContentsOfFile:", path) as NSMutableArray

        public open fun arrayWithContentsOfURL(url: NSURL): NSMutableArray =
            Native.objc_msgSend("class objc.NSMutableArray", this, "arrayWithContentsOfURL:", url) as NSMutableArray
    }
}

trait NSDate_NSExtendedDate : IObjCObject {
    public open fun timeIntervalSinceDate(anotherDate: NSDate): Double =
        Native.objc_msgSend("double", this, "timeIntervalSinceDate:", anotherDate) as Double

    public open fun timeIntervalSinceNow(): Double =
        Native.objc_msgSend("double", this, "timeIntervalSinceNow") as Double

    public open fun timeIntervalSince1970(): Double =
        Native.objc_msgSend("double", this, "timeIntervalSince1970") as Double

    public open fun addTimeInterval(seconds: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "addTimeInterval:", seconds) as ObjCObject

    public open fun dateByAddingTimeInterval(ti: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateByAddingTimeInterval:", ti) as ObjCObject

    public open fun earlierDate(anotherDate: NSDate): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "earlierDate:", anotherDate) as NSDate

    public open fun laterDate(anotherDate: NSDate): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "laterDate:", anotherDate) as NSDate

    public open fun compare(other: NSDate): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:", other)

    public open fun isEqualToDate(otherDate: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToDate:", otherDate) as Boolean

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun descriptionWithLocale(locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:", locale) as NSString

    trait metaclass : IObjCObject {
        public open fun timeIntervalSinceReferenceDate(): Double =
            Native.objc_msgSend("double", this, "timeIntervalSinceReferenceDate") as Double
    }
}

trait NSDate_NSDateCreation : IObjCObject {
    public open fun initWithTimeIntervalSinceNow(secs: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTimeIntervalSinceNow:", secs) as ObjCObject

    public open fun initWithTimeIntervalSince1970(secs: Double): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTimeIntervalSince1970:", secs) as ObjCObject

    public open fun initWithTimeInterval_sinceDate(secsToBeAdded: Double, date: NSDate): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTimeInterval:sinceDate:", secsToBeAdded, date) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun date(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "date") as ObjCObject

        public open fun dateWithTimeIntervalSinceNow(secs: Double): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithTimeIntervalSinceNow:", secs) as ObjCObject

        public open fun dateWithTimeIntervalSinceReferenceDate(ti: Double): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithTimeIntervalSinceReferenceDate:", ti) as ObjCObject

        public open fun dateWithTimeIntervalSince1970(secs: Double): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithTimeIntervalSince1970:", secs) as ObjCObject

        public open fun dateWithTimeInterval_sinceDate(secsToBeAdded: Double, date: NSDate): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithTimeInterval:sinceDate:", secsToBeAdded, date) as ObjCObject

        public open fun distantFuture(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "distantFuture") as ObjCObject

        public open fun distantPast(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "distantPast") as ObjCObject
    }
}

trait NSString_NSStringExtensionMethods : IObjCObject {
    public open fun getCharacters_range(buffer: Pointer<Short>, aRange: Any): Unit {
        Native.objc_msgSend("void", this, "getCharacters:range:", buffer, aRange)
    }

    public open fun substringFromIndex(from: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "substringFromIndex:", from) as NSString

    public open fun substringToIndex(to: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "substringToIndex:", to) as NSString

    public open fun substringWithRange(range: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "substringWithRange:", range) as NSString

    public open fun compare(string: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:", string)

    public open fun compare_options(string: NSString, mask: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:options:", string, mask)

    public open fun compare_options_range(string: NSString, mask: Any, compareRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:options:range:", string, mask, compareRange)

    public open fun compare_options_range_locale(string: NSString, mask: Any, compareRange: Any, locale: ObjCObject): Any =
        Native.objc_msgSend("class objc.Any", this, "compare:options:range:locale:", string, mask, compareRange, locale)

    public open fun caseInsensitiveCompare(string: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "caseInsensitiveCompare:", string)

    public open fun localizedCompare(string: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "localizedCompare:", string)

    public open fun localizedCaseInsensitiveCompare(string: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "localizedCaseInsensitiveCompare:", string)

    public open fun localizedStandardCompare(string: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "localizedStandardCompare:", string)

    public open fun isEqualToString(aString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToString:", aString) as Boolean

    public open fun hasPrefix(aString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "hasPrefix:", aString) as Boolean

    public open fun hasSuffix(aString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "hasSuffix:", aString) as Boolean

    public open fun containsString(aString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "containsString:", aString) as Boolean

    public open fun localizedCaseInsensitiveContainsString(aString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "localizedCaseInsensitiveContainsString:", aString) as Boolean

    public open fun rangeOfString(aString: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfString:", aString)

    public open fun rangeOfString_options(aString: NSString, mask: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfString:options:", aString, mask)

    public open fun rangeOfString_options_range(aString: NSString, mask: Any, searchRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfString:options:range:", aString, mask, searchRange)

    public open fun rangeOfString_options_range_locale(aString: NSString, mask: Any, searchRange: Any, locale: NSLocale): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfString:options:range:locale:", aString, mask, searchRange, locale)

    public open fun rangeOfCharacterFromSet(aSet: NSCharacterSet): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfCharacterFromSet:", aSet)

    public open fun rangeOfCharacterFromSet_options(aSet: NSCharacterSet, mask: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfCharacterFromSet:options:", aSet, mask)

    public open fun rangeOfCharacterFromSet_options_range(aSet: NSCharacterSet, mask: Any, searchRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfCharacterFromSet:options:range:", aSet, mask, searchRange)

    public open fun rangeOfComposedCharacterSequenceAtIndex(index: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfComposedCharacterSequenceAtIndex:", index)

    public open fun rangeOfComposedCharacterSequencesForRange(range: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfComposedCharacterSequencesForRange:", range)

    public open fun stringByAppendingString(aString: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByAppendingString:", aString) as NSString

    public open fun stringByAppendingFormat(format: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByAppendingFormat:", format) as NSString

    public open fun doubleValue(): Double =
        Native.objc_msgSend("double", this, "doubleValue") as Double

    public open fun floatValue(): Float =
        Native.objc_msgSend("float", this, "floatValue") as Float

    public open fun intValue(): Int =
        Native.objc_msgSend("int", this, "intValue") as Int

    public open fun integerValue(): Int =
        Native.objc_msgSend("int", this, "integerValue") as Int

    public open fun longLongValue(): Long =
        Native.objc_msgSend("long", this, "longLongValue") as Long

    public open fun boolValue(): Boolean =
        Native.objc_msgSend("boolean", this, "boolValue") as Boolean

    public open fun componentsSeparatedByString(separator: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "componentsSeparatedByString:", separator) as NSArray

    public open fun componentsSeparatedByCharactersInSet(separator: NSCharacterSet): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "componentsSeparatedByCharactersInSet:", separator) as NSArray

    public open fun commonPrefixWithString_options(aString: NSString, mask: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "commonPrefixWithString:options:", aString, mask) as NSString

    public open fun uppercaseString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "uppercaseString") as NSString

    public open fun lowercaseString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "lowercaseString") as NSString

    public open fun capitalizedString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "capitalizedString") as NSString

    public open fun uppercaseStringWithLocale(locale: NSLocale): NSString =
        Native.objc_msgSend("class objc.NSString", this, "uppercaseStringWithLocale:", locale) as NSString

    public open fun lowercaseStringWithLocale(locale: NSLocale): NSString =
        Native.objc_msgSend("class objc.NSString", this, "lowercaseStringWithLocale:", locale) as NSString

    public open fun capitalizedStringWithLocale(locale: NSLocale): NSString =
        Native.objc_msgSend("class objc.NSString", this, "capitalizedStringWithLocale:", locale) as NSString

    public open fun stringByTrimmingCharactersInSet(set: NSCharacterSet): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByTrimmingCharactersInSet:", set) as NSString

    public open fun stringByPaddingToLength_withString_startingAtIndex(newLength: Int, padString: NSString, padIndex: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByPaddingToLength:withString:startingAtIndex:", newLength, padString, padIndex) as NSString

    public open fun getLineStart_end_contentsEnd_forRange(startPtr: Pointer<Int>, lineEndPtr: Pointer<Int>, contentsEndPtr: Pointer<Int>, range: Any): Unit {
        Native.objc_msgSend("void", this, "getLineStart:end:contentsEnd:forRange:", startPtr, lineEndPtr, contentsEndPtr, range)
    }

    public open fun lineRangeForRange(range: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "lineRangeForRange:", range)

    public open fun getParagraphStart_end_contentsEnd_forRange(startPtr: Pointer<Int>, parEndPtr: Pointer<Int>, contentsEndPtr: Pointer<Int>, range: Any): Unit {
        Native.objc_msgSend("void", this, "getParagraphStart:end:contentsEnd:forRange:", startPtr, parEndPtr, contentsEndPtr, range)
    }

    public open fun paragraphRangeForRange(range: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphRangeForRange:", range)

    public open fun enumerateSubstringsInRange_options_usingBlock(range: Any, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateSubstringsInRange:options:usingBlock:", range, opts, block)
    }

    public open fun enumerateLinesUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateLinesUsingBlock:", block)
    }

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun hash(): Int =
        Native.objc_msgSend("int", this, "hash") as Int

    public open fun fastestEncoding(): Int =
        Native.objc_msgSend("int", this, "fastestEncoding") as Int

    public open fun smallestEncoding(): Int =
        Native.objc_msgSend("int", this, "smallestEncoding") as Int

    public open fun dataUsingEncoding_allowLossyConversion(encoding: Int, lossy: Boolean): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataUsingEncoding:allowLossyConversion:", encoding, lossy) as NSData

    public open fun dataUsingEncoding(encoding: Int): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataUsingEncoding:", encoding) as NSData

    public open fun canBeConvertedToEncoding(encoding: Int): Boolean =
        Native.objc_msgSend("boolean", this, "canBeConvertedToEncoding:", encoding) as Boolean

    public open fun cStringUsingEncoding(encoding: Int): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "cStringUsingEncoding:", encoding) as Pointer<Char>

    public open fun getCString_maxLength_encoding(buffer: Pointer<Char>, maxBufferCount: Int, encoding: Int): Boolean =
        Native.objc_msgSend("boolean", this, "getCString:maxLength:encoding:", buffer, maxBufferCount, encoding) as Boolean

    public open fun getBytes_maxLength_usedLength_encoding_options_range_remainingRange(buffer: Pointer<*>, maxBufferCount: Int, usedBufferCount: Pointer<Int>, encoding: Int, options: Any, range: Any, leftover: Pointer<Any>): Boolean =
        Native.objc_msgSend("boolean", this, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", buffer, maxBufferCount, usedBufferCount, encoding, options, range, leftover) as Boolean

    public open fun maximumLengthOfBytesUsingEncoding(enc: Int): Int =
        Native.objc_msgSend("int", this, "maximumLengthOfBytesUsingEncoding:", enc) as Int

    public open fun lengthOfBytesUsingEncoding(enc: Int): Int =
        Native.objc_msgSend("int", this, "lengthOfBytesUsingEncoding:", enc) as Int

    public open fun decomposedStringWithCanonicalMapping(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "decomposedStringWithCanonicalMapping") as NSString

    public open fun precomposedStringWithCanonicalMapping(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "precomposedStringWithCanonicalMapping") as NSString

    public open fun decomposedStringWithCompatibilityMapping(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "decomposedStringWithCompatibilityMapping") as NSString

    public open fun precomposedStringWithCompatibilityMapping(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "precomposedStringWithCompatibilityMapping") as NSString

    public open fun stringByFoldingWithOptions_locale(options: Any, locale: NSLocale): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByFoldingWithOptions:locale:", options, locale) as NSString

    public open fun stringByReplacingOccurrencesOfString_withString_options_range(target: NSString, replacement: NSString, options: Any, searchRange: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByReplacingOccurrencesOfString:withString:options:range:", target, replacement, options, searchRange) as NSString

    public open fun stringByReplacingOccurrencesOfString_withString(target: NSString, replacement: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByReplacingOccurrencesOfString:withString:", target, replacement) as NSString

    public open fun stringByReplacingCharactersInRange_withString(range: Any, replacement: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByReplacingCharactersInRange:withString:", range, replacement) as NSString

    public open fun UTF8String(): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "UTF8String") as Pointer<Char>

    public open fun initWithCharactersNoCopy_length_freeWhenDone(characters: Pointer<Short>, length: Int, freeBuffer: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCharactersNoCopy:length:freeWhenDone:", characters, length, freeBuffer) as ObjCObject

    public open fun initWithCharacters_length(characters: Pointer<Short>, length: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCharacters:length:", characters, length) as ObjCObject

    public open fun initWithUTF8String(nullTerminatedCString: Pointer<Char>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithUTF8String:", nullTerminatedCString) as ObjCObject

    public open fun initWithString(aString: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", aString) as ObjCObject

    public open fun initWithFormat(format: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFormat:", format) as ObjCObject

    public open fun initWithFormat_arguments(format: NSString, argList: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFormat:arguments:", format, argList) as ObjCObject

    public open fun initWithFormat_locale(format: NSString, locale: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFormat:locale:", format, locale) as ObjCObject

    public open fun initWithFormat_locale_arguments(format: NSString, locale: ObjCObject, argList: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFormat:locale:arguments:", format, locale, argList) as ObjCObject

    public open fun initWithData_encoding(data: NSData, encoding: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:encoding:", data, encoding) as ObjCObject

    public open fun initWithBytes_length_encoding(bytes: Pointer<Unit>, len: Int, encoding: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBytes:length:encoding:", bytes, len, encoding) as ObjCObject

    public open fun initWithBytesNoCopy_length_encoding_freeWhenDone(bytes: Pointer<*>, len: Int, encoding: Int, freeBuffer: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBytesNoCopy:length:encoding:freeWhenDone:", bytes, len, encoding, freeBuffer) as ObjCObject

    public open fun initWithCString_encoding(nullTerminatedCString: Pointer<Char>, encoding: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCString:encoding:", nullTerminatedCString, encoding) as ObjCObject

    public open fun initWithContentsOfURL_encoding_error(url: NSURL, enc: Int, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:encoding:error:", url, enc, error) as ObjCObject

    public open fun initWithContentsOfFile_encoding_error(path: NSString, enc: Int, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfFile:encoding:error:", path, enc, error) as ObjCObject

    public open fun initWithContentsOfURL_usedEncoding_error(url: NSURL, enc: Pointer<Int>, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:usedEncoding:error:", url, enc, error) as ObjCObject

    public open fun initWithContentsOfFile_usedEncoding_error(path: NSString, enc: Pointer<Int>, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfFile:usedEncoding:error:", path, enc, error) as ObjCObject

    public open fun writeToURL_atomically_encoding_error(url: NSURL, useAuxiliaryFile: Boolean, enc: Int, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:atomically:encoding:error:", url, useAuxiliaryFile, enc, error) as Boolean

    public open fun writeToFile_atomically_encoding_error(path: NSString, useAuxiliaryFile: Boolean, enc: Int, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:atomically:encoding:error:", path, useAuxiliaryFile, enc, error) as Boolean

    trait metaclass : IObjCObject {
        public open fun defaultCStringEncoding(): Int =
            Native.objc_msgSend("int", this, "defaultCStringEncoding") as Int

        public open fun availableStringEncodings(): Pointer<Int> =
            Native.objc_msgSend("class kni.objc.Pointer", this, "availableStringEncodings") as Pointer<Int>

        public open fun localizedNameOfStringEncoding(encoding: Int): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localizedNameOfStringEncoding:", encoding) as NSString

        public open fun string(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "string") as ObjCObject

        public open fun stringWithString(string: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithString:", string) as ObjCObject

        public open fun stringWithCharacters_length(characters: Pointer<Short>, length: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithCharacters:length:", characters, length) as ObjCObject

        public open fun stringWithUTF8String(nullTerminatedCString: Pointer<Char>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithUTF8String:", nullTerminatedCString) as ObjCObject

        public open fun stringWithFormat(format: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithFormat:", format) as ObjCObject

        public open fun localizedStringWithFormat(format: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "localizedStringWithFormat:", format) as ObjCObject

        public open fun stringWithCString_encoding(cString: Pointer<Char>, enc: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithCString:encoding:", cString, enc) as ObjCObject

        public open fun stringWithContentsOfURL_encoding_error(url: NSURL, enc: Int, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithContentsOfURL:encoding:error:", url, enc, error) as ObjCObject

        public open fun stringWithContentsOfFile_encoding_error(path: NSString, enc: Int, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithContentsOfFile:encoding:error:", path, enc, error) as ObjCObject

        public open fun stringWithContentsOfURL_usedEncoding_error(url: NSURL, enc: Pointer<Int>, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithContentsOfURL:usedEncoding:error:", url, enc, error) as ObjCObject

        public open fun stringWithContentsOfFile_usedEncoding_error(path: NSString, enc: Pointer<Int>, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithContentsOfFile:usedEncoding:error:", path, enc, error) as ObjCObject
    }
}

trait NSMutableString_NSMutableStringExtensionMethods : IObjCObject {
    public open fun insertString_atIndex(aString: NSString, loc: Int): Unit {
        Native.objc_msgSend("void", this, "insertString:atIndex:", aString, loc)
    }

    public open fun deleteCharactersInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "deleteCharactersInRange:", range)
    }

    public open fun appendString(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "appendString:", aString)
    }

    public open fun appendFormat(format: NSString): Unit {
        Native.objc_msgSend("void", this, "appendFormat:", format)
    }

    public open fun setString(aString: NSString): Unit {
        Native.objc_msgSend("void", this, "setString:", aString)
    }

    public open fun initWithCapacity(capacity: Int): NSMutableString =
        Native.objc_msgSend("class objc.NSMutableString", this, "initWithCapacity:", capacity) as NSMutableString

    public open fun replaceOccurrencesOfString_withString_options_range(target: NSString, replacement: NSString, options: Any, searchRange: Any): Int =
        Native.objc_msgSend("int", this, "replaceOccurrencesOfString:withString:options:range:", target, replacement, options, searchRange) as Int

    trait metaclass : IObjCObject {
        public open fun stringWithCapacity(capacity: Int): NSMutableString =
            Native.objc_msgSend("class objc.NSMutableString", this, "stringWithCapacity:", capacity) as NSMutableString
    }
}

trait NSString_NSStringEncodingDetection : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun stringEncodingForData_encodingOptions_convertedString_usedLossyConversion(data: NSData, opts: NSDictionary, string: Pointer<NSString>, usedLossyConversion: Pointer<Boolean>): Int =
            Native.objc_msgSend("int", this, "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:", data, opts, string, usedLossyConversion) as Int
    }
}

trait NSString_NSExtendedStringPropertyListParsing : IObjCObject {
    public open fun propertyList(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyList") as ObjCObject

    public open fun propertyListFromStringsFileFormat(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "propertyListFromStringsFileFormat") as NSDictionary

    trait metaclass : IObjCObject
}

trait NSString_NSStringDeprecated : IObjCObject {
    public open fun cString(): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "cString") as Pointer<Char>

    public open fun lossyCString(): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "lossyCString") as Pointer<Char>

    public open fun cStringLength(): Int =
        Native.objc_msgSend("int", this, "cStringLength") as Int

    public open fun getCString(bytes: Pointer<Char>): Unit {
        Native.objc_msgSend("void", this, "getCString:", bytes)
    }

    public open fun getCString_maxLength(bytes: Pointer<Char>, maxLength: Int): Unit {
        Native.objc_msgSend("void", this, "getCString:maxLength:", bytes, maxLength)
    }

    public open fun getCString_maxLength_range_remainingRange(bytes: Pointer<Char>, maxLength: Int, aRange: Any, leftoverRange: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "getCString:maxLength:range:remainingRange:", bytes, maxLength, aRange, leftoverRange)
    }

    public open fun writeToFile_atomically(path: NSString, useAuxiliaryFile: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:atomically:", path, useAuxiliaryFile) as Boolean

    public open fun writeToURL_atomically(url: NSURL, atomically: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:atomically:", url, atomically) as Boolean

    public open fun initWithContentsOfFile(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfFile:", path) as ObjCObject

    public open fun initWithContentsOfURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:", url) as ObjCObject

    public open fun initWithCStringNoCopy_length_freeWhenDone(bytes: Pointer<Char>, length: Int, freeBuffer: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCStringNoCopy:length:freeWhenDone:", bytes, length, freeBuffer) as ObjCObject

    public open fun initWithCString_length(bytes: Pointer<Char>, length: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCString:length:", bytes, length) as ObjCObject

    public open fun initWithCString(bytes: Pointer<Char>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCString:", bytes) as ObjCObject

    public open fun getCharacters(buffer: Pointer<Short>): Unit {
        Native.objc_msgSend("void", this, "getCharacters:", buffer)
    }

    trait metaclass : IObjCObject {
        public open fun stringWithContentsOfFile(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithContentsOfFile:", path) as ObjCObject

        public open fun stringWithContentsOfURL(url: NSURL): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithContentsOfURL:", url) as ObjCObject

        public open fun stringWithCString_length(bytes: Pointer<Char>, length: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithCString:length:", bytes, length) as ObjCObject

        public open fun stringWithCString(bytes: Pointer<Char>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "stringWithCString:", bytes) as ObjCObject
    }
}

trait NSCoder_NSExtendedCoder : IObjCObject {
    public open fun encodeObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodeObject:", `object`)
    }

    public open fun encodeRootObject(rootObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodeRootObject:", rootObject)
    }

    public open fun encodeBycopyObject(anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodeBycopyObject:", anObject)
    }

    public open fun encodeByrefObject(anObject: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodeByrefObject:", anObject)
    }

    public open fun encodeConditionalObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodeConditionalObject:", `object`)
    }

    public open fun encodeValuesOfObjCTypes(types: Pointer<Char>): Unit {
        Native.objc_msgSend("void", this, "encodeValuesOfObjCTypes:", types)
    }

    public open fun encodeArrayOfObjCType_count_at(type: Pointer<Char>, count: Int, array: Pointer<Unit>): Unit {
        Native.objc_msgSend("void", this, "encodeArrayOfObjCType:count:at:", type, count, array)
    }

    public open fun encodeBytes_length(byteaddr: Pointer<Unit>, length: Int): Unit {
        Native.objc_msgSend("void", this, "encodeBytes:length:", byteaddr, length)
    }

    public open fun decodeObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "decodeObject") as ObjCObject

    public open fun decodeValuesOfObjCTypes(types: Pointer<Char>): Unit {
        Native.objc_msgSend("void", this, "decodeValuesOfObjCTypes:", types)
    }

    public open fun decodeArrayOfObjCType_count_at(itemType: Pointer<Char>, count: Int, array: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "decodeArrayOfObjCType:count:at:", itemType, count, array)
    }

    public open fun decodeBytesWithReturnedLength(lengthp: Pointer<Int>): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "decodeBytesWithReturnedLength:", lengthp) as Pointer<*>

    public open fun encodePropertyList(aPropertyList: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodePropertyList:", aPropertyList)
    }

    public open fun decodePropertyList(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "decodePropertyList") as ObjCObject

    public open fun setObjectZone(zone: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "setObjectZone:", zone)
    }

    public open fun objectZone(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "objectZone") as Pointer<Any>

    public open fun systemVersion(): Int =
        Native.objc_msgSend("int", this, "systemVersion") as Int

    public open fun allowsKeyedCoding(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsKeyedCoding") as Boolean

    public open fun encodeObject_forKey(objv: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeObject:forKey:", objv, key)
    }

    public open fun encodeConditionalObject_forKey(objv: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeConditionalObject:forKey:", objv, key)
    }

    public open fun encodeBool_forKey(boolv: Boolean, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeBool:forKey:", boolv, key)
    }

    public open fun encodeInt_forKey(intv: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeInt:forKey:", intv, key)
    }

    public open fun encodeInt32_forKey(intv: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeInt32:forKey:", intv, key)
    }

    public open fun encodeInt64_forKey(intv: Long, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeInt64:forKey:", intv, key)
    }

    public open fun encodeFloat_forKey(realv: Float, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeFloat:forKey:", realv, key)
    }

    public open fun encodeDouble_forKey(realv: Double, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeDouble:forKey:", realv, key)
    }

    public open fun encodeBytes_length_forKey(bytesp: Pointer<Byte>, lenv: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeBytes:length:forKey:", bytesp, lenv, key)
    }

    public open fun containsValueForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "containsValueForKey:", key) as Boolean

    public open fun decodeObjectForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "decodeObjectForKey:", key) as ObjCObject

    public open fun decodeBoolForKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "decodeBoolForKey:", key) as Boolean

    public open fun decodeIntForKey(key: NSString): Int =
        Native.objc_msgSend("int", this, "decodeIntForKey:", key) as Int

    public open fun decodeInt32ForKey(key: NSString): Int =
        Native.objc_msgSend("int", this, "decodeInt32ForKey:", key) as Int

    public open fun decodeInt64ForKey(key: NSString): Long =
        Native.objc_msgSend("long", this, "decodeInt64ForKey:", key) as Long

    public open fun decodeFloatForKey(key: NSString): Float =
        Native.objc_msgSend("float", this, "decodeFloatForKey:", key) as Float

    public open fun decodeDoubleForKey(key: NSString): Double =
        Native.objc_msgSend("double", this, "decodeDoubleForKey:", key) as Double

    public open fun decodeBytesForKey_returnedLength(key: NSString, lengthp: Pointer<Int>): Pointer<Byte> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "decodeBytesForKey:returnedLength:", key, lengthp) as Pointer<Byte>

    public open fun encodeInteger_forKey(intv: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeInteger:forKey:", intv, key)
    }

    public open fun decodeIntegerForKey(key: NSString): Int =
        Native.objc_msgSend("int", this, "decodeIntegerForKey:", key) as Int

    public open fun requiresSecureCoding(): Boolean =
        Native.objc_msgSend("boolean", this, "requiresSecureCoding") as Boolean

    public open fun decodeObjectOfClass_forKey(aClass: ObjCClass, key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "decodeObjectOfClass:forKey:", aClass, key) as ObjCObject

    public open fun decodeObjectOfClasses_forKey(classes: NSSet, key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "decodeObjectOfClasses:forKey:", classes, key) as ObjCObject

    public open fun decodePropertyListForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "decodePropertyListForKey:", key) as ObjCObject

    public open fun allowedClasses(): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "allowedClasses") as NSSet

    trait metaclass : IObjCObject
}

trait NSCoder_NSTypedstreamCompatibility : IObjCObject {
    public open fun encodeNXObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "encodeNXObject:", `object`)
    }

    public open fun decodeNXObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "decodeNXObject") as ObjCObject

    trait metaclass : IObjCObject
}

trait NSData_NSExtendedData : IObjCObject {
    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun getBytes_length(buffer: Pointer<*>, length: Int): Unit {
        Native.objc_msgSend("void", this, "getBytes:length:", buffer, length)
    }

    public open fun getBytes_range(buffer: Pointer<*>, range: Any): Unit {
        Native.objc_msgSend("void", this, "getBytes:range:", buffer, range)
    }

    public open fun isEqualToData(other: NSData): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToData:", other) as Boolean

    public open fun subdataWithRange(range: Any): NSData =
        Native.objc_msgSend("class objc.NSData", this, "subdataWithRange:", range) as NSData

    public open fun writeToFile_atomically(path: NSString, useAuxiliaryFile: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:atomically:", path, useAuxiliaryFile) as Boolean

    public open fun writeToURL_atomically(url: NSURL, atomically: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:atomically:", url, atomically) as Boolean

    public open fun writeToFile_options_error(path: NSString, writeOptionsMask: Any, errorPtr: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:options:error:", path, writeOptionsMask, errorPtr) as Boolean

    public open fun writeToURL_options_error(url: NSURL, writeOptionsMask: Any, errorPtr: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:options:error:", url, writeOptionsMask, errorPtr) as Boolean

    public open fun rangeOfData_options_range(dataToFind: NSData, mask: Any, searchRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfData:options:range:", dataToFind, mask, searchRange)

    public open fun enumerateByteRangesUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateByteRangesUsingBlock:", block)
    }

    trait metaclass : IObjCObject
}

trait NSData_NSDataCreation : IObjCObject {
    public open fun initWithBytes_length(bytes: Pointer<Unit>, length: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBytes:length:", bytes, length) as ObjCObject

    public open fun initWithBytesNoCopy_length(bytes: Pointer<*>, length: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBytesNoCopy:length:", bytes, length) as ObjCObject

    public open fun initWithBytesNoCopy_length_freeWhenDone(bytes: Pointer<*>, length: Int, b: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBytesNoCopy:length:freeWhenDone:", bytes, length, b) as ObjCObject

    public open fun initWithBytesNoCopy_length_deallocator(bytes: Pointer<*>, length: Int, deallocator: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBytesNoCopy:length:deallocator:", bytes, length, deallocator) as ObjCObject

    public open fun initWithContentsOfFile_options_error(path: NSString, readOptionsMask: Any, errorPtr: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfFile:options:error:", path, readOptionsMask, errorPtr) as ObjCObject

    public open fun initWithContentsOfURL_options_error(url: NSURL, readOptionsMask: Any, errorPtr: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:options:error:", url, readOptionsMask, errorPtr) as ObjCObject

    public open fun initWithContentsOfFile(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfFile:", path) as ObjCObject

    public open fun initWithContentsOfURL(url: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:", url) as ObjCObject

    public open fun initWithData(data: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:", data) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun data(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "data") as ObjCObject

        public open fun dataWithBytes_length(bytes: Pointer<Unit>, length: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithBytes:length:", bytes, length) as ObjCObject

        public open fun dataWithBytesNoCopy_length(bytes: Pointer<*>, length: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithBytesNoCopy:length:", bytes, length) as ObjCObject

        public open fun dataWithBytesNoCopy_length_freeWhenDone(bytes: Pointer<*>, length: Int, b: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithBytesNoCopy:length:freeWhenDone:", bytes, length, b) as ObjCObject

        public open fun dataWithContentsOfFile_options_error(path: NSString, readOptionsMask: Any, errorPtr: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithContentsOfFile:options:error:", path, readOptionsMask, errorPtr) as ObjCObject

        public open fun dataWithContentsOfURL_options_error(url: NSURL, readOptionsMask: Any, errorPtr: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithContentsOfURL:options:error:", url, readOptionsMask, errorPtr) as ObjCObject

        public open fun dataWithContentsOfFile(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithContentsOfFile:", path) as ObjCObject

        public open fun dataWithContentsOfURL(url: NSURL): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithContentsOfURL:", url) as ObjCObject

        public open fun dataWithData(data: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithData:", data) as ObjCObject
    }
}

trait NSData_NSDataBase64Encoding : IObjCObject {
    public open fun initWithBase64EncodedString_options(base64String: NSString, options: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBase64EncodedString:options:", base64String, options) as ObjCObject

    public open fun base64EncodedStringWithOptions(options: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "base64EncodedStringWithOptions:", options) as NSString

    public open fun initWithBase64EncodedData_options(base64Data: NSData, options: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBase64EncodedData:options:", base64Data, options) as ObjCObject

    public open fun base64EncodedDataWithOptions(options: Any): NSData =
        Native.objc_msgSend("class objc.NSData", this, "base64EncodedDataWithOptions:", options) as NSData

    trait metaclass : IObjCObject
}

trait NSData_NSDeprecated : IObjCObject {
    public open fun getBytes(buffer: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "getBytes:", buffer)
    }

    public open fun initWithContentsOfMappedFile(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfMappedFile:", path) as ObjCObject

    public open fun initWithBase64Encoding(base64String: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBase64Encoding:", base64String) as ObjCObject

    public open fun base64Encoding(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "base64Encoding") as NSString

    trait metaclass : IObjCObject {
        public open fun dataWithContentsOfMappedFile(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithContentsOfMappedFile:", path) as ObjCObject
    }
}

trait NSMutableData_NSExtendedMutableData : IObjCObject {
    public open fun appendBytes_length(bytes: Pointer<Unit>, length: Int): Unit {
        Native.objc_msgSend("void", this, "appendBytes:length:", bytes, length)
    }

    public open fun appendData(other: NSData): Unit {
        Native.objc_msgSend("void", this, "appendData:", other)
    }

    public open fun increaseLengthBy(extraLength: Int): Unit {
        Native.objc_msgSend("void", this, "increaseLengthBy:", extraLength)
    }

    public open fun replaceBytesInRange_withBytes(range: Any, bytes: Pointer<Unit>): Unit {
        Native.objc_msgSend("void", this, "replaceBytesInRange:withBytes:", range, bytes)
    }

    public open fun resetBytesInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "resetBytesInRange:", range)
    }

    public open fun setData(data: NSData): Unit {
        Native.objc_msgSend("void", this, "setData:", data)
    }

    public open fun replaceBytesInRange_withBytes_length(range: Any, replacementBytes: Pointer<Unit>, replacementLength: Int): Unit {
        Native.objc_msgSend("void", this, "replaceBytesInRange:withBytes:length:", range, replacementBytes, replacementLength)
    }

    trait metaclass : IObjCObject
}

trait NSMutableData_NSMutableDataCreation : IObjCObject {
    public open fun initWithCapacity(capacity: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithCapacity:", capacity) as ObjCObject

    public open fun initWithLength(length: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithLength:", length) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun dataWithCapacity(aNumItems: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithCapacity:", aNumItems) as ObjCObject

        public open fun dataWithLength(length: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataWithLength:", length) as ObjCObject
    }
}

trait NSDateFormatter_NSDateFormatterCompatibility : IObjCObject {
    public open fun initWithDateFormat_allowNaturalLanguage(format: NSString, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDateFormat:allowNaturalLanguage:", format, flag) as ObjCObject

    public open fun allowsNaturalLanguage(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsNaturalLanguage") as Boolean

    trait metaclass : IObjCObject
}

trait NSScanner_NSExtendedScanner : IObjCObject {
    public open fun scanInt(result: Pointer<Int>): Boolean =
        Native.objc_msgSend("boolean", this, "scanInt:", result) as Boolean

    public open fun scanInteger(result: Pointer<Int>): Boolean =
        Native.objc_msgSend("boolean", this, "scanInteger:", result) as Boolean

    public open fun scanLongLong(result: Pointer<Long>): Boolean =
        Native.objc_msgSend("boolean", this, "scanLongLong:", result) as Boolean

    public open fun scanUnsignedLongLong(result: Pointer<Long>): Boolean =
        Native.objc_msgSend("boolean", this, "scanUnsignedLongLong:", result) as Boolean

    public open fun scanFloat(result: Pointer<Float>): Boolean =
        Native.objc_msgSend("boolean", this, "scanFloat:", result) as Boolean

    public open fun scanDouble(result: Pointer<Double>): Boolean =
        Native.objc_msgSend("boolean", this, "scanDouble:", result) as Boolean

    public open fun scanHexInt(result: Pointer<Int>): Boolean =
        Native.objc_msgSend("boolean", this, "scanHexInt:", result) as Boolean

    public open fun scanHexLongLong(result: Pointer<Long>): Boolean =
        Native.objc_msgSend("boolean", this, "scanHexLongLong:", result) as Boolean

    public open fun scanHexFloat(result: Pointer<Float>): Boolean =
        Native.objc_msgSend("boolean", this, "scanHexFloat:", result) as Boolean

    public open fun scanHexDouble(result: Pointer<Double>): Boolean =
        Native.objc_msgSend("boolean", this, "scanHexDouble:", result) as Boolean

    public open fun scanString_intoString(string: NSString, result: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "scanString:intoString:", string, result) as Boolean

    public open fun scanCharactersFromSet_intoString(set: NSCharacterSet, result: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "scanCharactersFromSet:intoString:", set, result) as Boolean

    public open fun scanUpToString_intoString(string: NSString, result: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "scanUpToString:intoString:", string, result) as Boolean

    public open fun scanUpToCharactersFromSet_intoString(set: NSCharacterSet, result: Pointer<NSString>): Boolean =
        Native.objc_msgSend("boolean", this, "scanUpToCharactersFromSet:intoString:", set, result) as Boolean

    public open fun isAtEnd(): Boolean =
        Native.objc_msgSend("boolean", this, "isAtEnd") as Boolean

    trait metaclass : IObjCObject {
        public open fun scannerWithString(string: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "scannerWithString:", string) as ObjCObject

        public open fun localizedScannerWithString(string: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "localizedScannerWithString:", string) as ObjCObject
    }
}

trait NSDictionary_NSExtendedDictionary : IObjCObject {
    public open fun allKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allKeys") as NSArray

    public open fun allKeysForObject(anObject: ObjCObject): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allKeysForObject:", anObject) as NSArray

    public open fun allValues(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allValues") as NSArray

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun descriptionInStringsFileFormat(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionInStringsFileFormat") as NSString

    public open fun descriptionWithLocale(locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:", locale) as NSString

    public open fun descriptionWithLocale_indent(locale: ObjCObject, level: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:indent:", locale, level) as NSString

    public open fun isEqualToDictionary(otherDictionary: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToDictionary:", otherDictionary) as Boolean

    public open fun objectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "objectEnumerator") as NSEnumerator

    public open fun objectsForKeys_notFoundMarker(keys: NSArray, marker: ObjCObject): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "objectsForKeys:notFoundMarker:", keys, marker) as NSArray

    public open fun writeToFile_atomically(path: NSString, useAuxiliaryFile: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:atomically:", path, useAuxiliaryFile) as Boolean

    public open fun writeToURL_atomically(url: NSURL, atomically: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:atomically:", url, atomically) as Boolean

    public open fun keysSortedByValueUsingSelector(comparator: ObjCSelector): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "keysSortedByValueUsingSelector:", comparator) as NSArray

    public open fun getObjects_andKeys(objects: Any, keys: Any): Unit {
        Native.objc_msgSend("void", this, "getObjects:andKeys:", objects, keys)
    }

    public open fun objectForKeyedSubscript(key: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectForKeyedSubscript:", key) as ObjCObject

    public open fun enumerateKeysAndObjectsUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateKeysAndObjectsUsingBlock:", block)
    }

    public open fun enumerateKeysAndObjectsWithOptions_usingBlock(opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateKeysAndObjectsWithOptions:usingBlock:", opts, block)
    }

    public open fun keysSortedByValueUsingComparator(cmptr: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "keysSortedByValueUsingComparator:", cmptr) as NSArray

    public open fun keysSortedByValueWithOptions_usingComparator(opts: Any, cmptr: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "keysSortedByValueWithOptions:usingComparator:", opts, cmptr) as NSArray

    public open fun keysOfEntriesPassingTest(predicate: Any): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "keysOfEntriesPassingTest:", predicate) as NSSet

    public open fun keysOfEntriesWithOptions_passingTest(opts: Any, predicate: Any): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "keysOfEntriesWithOptions:passingTest:", opts, predicate) as NSSet

    trait metaclass : IObjCObject
}

trait NSDictionary_NSDictionaryCreation : IObjCObject {
    public open fun initWithObjectsAndKeys(firstObject: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjectsAndKeys:", firstObject) as ObjCObject

    public open fun initWithDictionary(otherDictionary: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDictionary:", otherDictionary) as ObjCObject

    public open fun initWithDictionary_copyItems(otherDictionary: NSDictionary, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDictionary:copyItems:", otherDictionary, flag) as ObjCObject

    public open fun initWithObjects_forKeys(objects: NSArray, keys: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjects:forKeys:", objects, keys) as ObjCObject

    public open fun initWithContentsOfFile(path: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "initWithContentsOfFile:", path) as NSDictionary

    public open fun initWithContentsOfURL(url: NSURL): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "initWithContentsOfURL:", url) as NSDictionary

    trait metaclass : IObjCObject {
        public open fun dictionary(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dictionary") as ObjCObject

        public open fun dictionaryWithObject_forKey(`object`: ObjCObject, key: Any): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dictionaryWithObject:forKey:", `object`, key) as ObjCObject

        public open fun dictionaryWithObjects_forKeys_count(objects: Any, keys: Any, cnt: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dictionaryWithObjects:forKeys:count:", objects, keys, cnt) as ObjCObject

        public open fun dictionaryWithObjectsAndKeys(firstObject: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dictionaryWithObjectsAndKeys:", firstObject) as ObjCObject

        public open fun dictionaryWithDictionary(dict: NSDictionary): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dictionaryWithDictionary:", dict) as ObjCObject

        public open fun dictionaryWithObjects_forKeys(objects: NSArray, keys: NSArray): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dictionaryWithObjects:forKeys:", objects, keys) as ObjCObject

        public open fun dictionaryWithContentsOfFile(path: NSString): NSDictionary =
            Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryWithContentsOfFile:", path) as NSDictionary

        public open fun dictionaryWithContentsOfURL(url: NSURL): NSDictionary =
            Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryWithContentsOfURL:", url) as NSDictionary
    }
}

trait NSMutableDictionary_NSExtendedMutableDictionary : IObjCObject {
    public open fun addEntriesFromDictionary(otherDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "addEntriesFromDictionary:", otherDictionary)
    }

    public open fun removeAllObjects(): Unit {
        Native.objc_msgSend("void", this, "removeAllObjects")
    }

    public open fun removeObjectsForKeys(keyArray: NSArray): Unit {
        Native.objc_msgSend("void", this, "removeObjectsForKeys:", keyArray)
    }

    public open fun setDictionary(otherDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setDictionary:", otherDictionary)
    }

    public open fun setObject_forKeyedSubscript(obj: ObjCObject, key: Any): Unit {
        Native.objc_msgSend("void", this, "setObject:forKeyedSubscript:", obj, key)
    }

    trait metaclass : IObjCObject
}

trait NSMutableDictionary_NSMutableDictionaryCreation : IObjCObject {
    public open fun initWithContentsOfFile(path: NSString): NSMutableDictionary =
        Native.objc_msgSend("class objc.NSMutableDictionary", this, "initWithContentsOfFile:", path) as NSMutableDictionary

    public open fun initWithContentsOfURL(url: NSURL): NSMutableDictionary =
        Native.objc_msgSend("class objc.NSMutableDictionary", this, "initWithContentsOfURL:", url) as NSMutableDictionary

    trait metaclass : IObjCObject {
        public open fun dictionaryWithCapacity(numItems: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dictionaryWithCapacity:", numItems) as ObjCObject

        public open fun dictionaryWithContentsOfFile(path: NSString): NSMutableDictionary =
            Native.objc_msgSend("class objc.NSMutableDictionary", this, "dictionaryWithContentsOfFile:", path) as NSMutableDictionary

        public open fun dictionaryWithContentsOfURL(url: NSURL): NSMutableDictionary =
            Native.objc_msgSend("class objc.NSMutableDictionary", this, "dictionaryWithContentsOfURL:", url) as NSMutableDictionary
    }
}

trait NSDictionary_NSSharedKeySetDictionary : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun sharedKeySetForKeys(keys: NSArray): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "sharedKeySetForKeys:", keys) as ObjCObject
    }
}

trait NSMutableDictionary_NSSharedKeySetDictionary : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun dictionaryWithSharedKeySet(keyset: ObjCObject): NSMutableDictionary =
            Native.objc_msgSend("class objc.NSMutableDictionary", this, "dictionaryWithSharedKeySet:", keyset) as NSMutableDictionary
    }
}

trait NSNumber_NSDecimalNumberExtensions : IObjCObject {
    public open fun decimalValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "decimalValue")

    trait metaclass : IObjCObject
}

trait NSScanner_NSDecimalNumberScanning : IObjCObject {
    public open fun scanDecimal(dcm: Pointer<Any>): Boolean =
        Native.objc_msgSend("boolean", this, "scanDecimal:", dcm) as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSErrorRecoveryAttempting : IObjCObject {
    public open fun attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo(error: NSError, recoveryOptionIndex: Int, delegate: ObjCObject, didRecoverSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:", error, recoveryOptionIndex, delegate, didRecoverSelector, contextInfo)
    }

    public open fun attemptRecoveryFromError_optionIndex(error: NSError, recoveryOptionIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "attemptRecoveryFromError:optionIndex:", error, recoveryOptionIndex) as Boolean

    trait metaclass : IObjCObject
}

trait NSException_NSExceptionRaisingConveniences : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun raise_format(name: NSString, format: NSString): Unit {
            Native.objc_msgSend("void", this, "raise:format:", name, format)
        }

        public open fun raise_format_arguments(name: NSString, format: NSString, argList: Any): Unit {
            Native.objc_msgSend("void", this, "raise:format:arguments:", name, format, argList)
        }
    }
}

trait NSFileHandle_NSFileHandleCreation : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun fileHandleWithStandardInput(): NSFileHandle =
            Native.objc_msgSend("class objc.NSFileHandle", this, "fileHandleWithStandardInput") as NSFileHandle

        public open fun fileHandleWithStandardOutput(): NSFileHandle =
            Native.objc_msgSend("class objc.NSFileHandle", this, "fileHandleWithStandardOutput") as NSFileHandle

        public open fun fileHandleWithStandardError(): NSFileHandle =
            Native.objc_msgSend("class objc.NSFileHandle", this, "fileHandleWithStandardError") as NSFileHandle

        public open fun fileHandleWithNullDevice(): NSFileHandle =
            Native.objc_msgSend("class objc.NSFileHandle", this, "fileHandleWithNullDevice") as NSFileHandle

        public open fun fileHandleForReadingAtPath(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "fileHandleForReadingAtPath:", path) as ObjCObject

        public open fun fileHandleForWritingAtPath(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "fileHandleForWritingAtPath:", path) as ObjCObject

        public open fun fileHandleForUpdatingAtPath(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "fileHandleForUpdatingAtPath:", path) as ObjCObject

        public open fun fileHandleForReadingFromURL_error(url: NSURL, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "fileHandleForReadingFromURL:error:", url, error) as ObjCObject

        public open fun fileHandleForWritingToURL_error(url: NSURL, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "fileHandleForWritingToURL:error:", url, error) as ObjCObject

        public open fun fileHandleForUpdatingURL_error(url: NSURL, error: Pointer<NSError>): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "fileHandleForUpdatingURL:error:", url, error) as ObjCObject
    }
}

trait NSFileHandle_NSFileHandleAsynchronousAccess : IObjCObject {
    public open fun readInBackgroundAndNotifyForModes(modes: NSArray): Unit {
        Native.objc_msgSend("void", this, "readInBackgroundAndNotifyForModes:", modes)
    }

    public open fun readInBackgroundAndNotify(): Unit {
        Native.objc_msgSend("void", this, "readInBackgroundAndNotify")
    }

    public open fun readToEndOfFileInBackgroundAndNotifyForModes(modes: NSArray): Unit {
        Native.objc_msgSend("void", this, "readToEndOfFileInBackgroundAndNotifyForModes:", modes)
    }

    public open fun readToEndOfFileInBackgroundAndNotify(): Unit {
        Native.objc_msgSend("void", this, "readToEndOfFileInBackgroundAndNotify")
    }

    public open fun acceptConnectionInBackgroundAndNotifyForModes(modes: NSArray): Unit {
        Native.objc_msgSend("void", this, "acceptConnectionInBackgroundAndNotifyForModes:", modes)
    }

    public open fun acceptConnectionInBackgroundAndNotify(): Unit {
        Native.objc_msgSend("void", this, "acceptConnectionInBackgroundAndNotify")
    }

    public open fun waitForDataInBackgroundAndNotifyForModes(modes: NSArray): Unit {
        Native.objc_msgSend("void", this, "waitForDataInBackgroundAndNotifyForModes:", modes)
    }

    public open fun waitForDataInBackgroundAndNotify(): Unit {
        Native.objc_msgSend("void", this, "waitForDataInBackgroundAndNotify")
    }

    public open fun readabilityHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "readabilityHandler")

    public open fun setReadabilityHandler(readabilityHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setReadabilityHandler:", readabilityHandler)
    }

    public open fun writeabilityHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "writeabilityHandler")

    public open fun setWriteabilityHandler(writeabilityHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setWriteabilityHandler:", writeabilityHandler)
    }

    trait metaclass : IObjCObject
}

trait NSFileHandle_NSFileHandlePlatformSpecific : IObjCObject {
    public open fun initWithFileDescriptor(fd: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFileDescriptor:", fd) as ObjCObject

    public open fun fileDescriptor(): Int =
        Native.objc_msgSend("int", this, "fileDescriptor") as Int

    trait metaclass : IObjCObject
}

trait NSString_NSStringPathExtensions : IObjCObject {
    public open fun pathComponents(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pathComponents") as NSArray

    public open fun isAbsolutePath(): Boolean =
        Native.objc_msgSend("boolean", this, "isAbsolutePath") as Boolean

    public open fun lastPathComponent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "lastPathComponent") as NSString

    public open fun stringByDeletingLastPathComponent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByDeletingLastPathComponent") as NSString

    public open fun stringByAppendingPathComponent(str: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByAppendingPathComponent:", str) as NSString

    public open fun pathExtension(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathExtension") as NSString

    public open fun stringByDeletingPathExtension(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByDeletingPathExtension") as NSString

    public open fun stringByAppendingPathExtension(str: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByAppendingPathExtension:", str) as NSString

    public open fun stringByAbbreviatingWithTildeInPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByAbbreviatingWithTildeInPath") as NSString

    public open fun stringByExpandingTildeInPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByExpandingTildeInPath") as NSString

    public open fun stringByStandardizingPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByStandardizingPath") as NSString

    public open fun stringByResolvingSymlinksInPath(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByResolvingSymlinksInPath") as NSString

    public open fun stringsByAppendingPaths(paths: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "stringsByAppendingPaths:", paths) as NSArray

    public open fun completePathIntoString_caseSensitive_matchesIntoArray_filterTypes(outputName: Pointer<NSString>, flag: Boolean, outputArray: Pointer<NSArray>, filterTypes: NSArray): Int =
        Native.objc_msgSend("int", this, "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:", outputName, flag, outputArray, filterTypes) as Int

    public open fun fileSystemRepresentation(): Pointer<Char> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "fileSystemRepresentation") as Pointer<Char>

    public open fun getFileSystemRepresentation_maxLength(cname: Pointer<Char>, max: Int): Boolean =
        Native.objc_msgSend("boolean", this, "getFileSystemRepresentation:maxLength:", cname, max) as Boolean

    trait metaclass : IObjCObject {
        public open fun pathWithComponents(components: NSArray): NSString =
            Native.objc_msgSend("class objc.NSString", this, "pathWithComponents:", components) as NSString
    }
}

trait NSArray_NSArrayPathExtensions : IObjCObject {
    public open fun pathsMatchingExtensions(filterTypes: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pathsMatchingExtensions:", filterTypes) as NSArray

    trait metaclass : IObjCObject
}

trait NSObject_NSCopyLinkMoveHandler : IObjCObject {
    public open fun fileManager_shouldProceedAfterError(fm: NSFileManager, errorInfo: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "fileManager:shouldProceedAfterError:", fm, errorInfo) as Boolean

    public open fun fileManager_willProcessPath(fm: NSFileManager, path: NSString): Unit {
        Native.objc_msgSend("void", this, "fileManager:willProcessPath:", fm, path)
    }

    trait metaclass : IObjCObject
}

trait NSDictionary_NSFileAttributes : IObjCObject {
    public open fun fileSize(): Long =
        Native.objc_msgSend("long", this, "fileSize") as Long

    public open fun fileModificationDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "fileModificationDate") as NSDate

    public open fun fileType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fileType") as NSString

    public open fun filePosixPermissions(): Int =
        Native.objc_msgSend("int", this, "filePosixPermissions") as Int

    public open fun fileOwnerAccountName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fileOwnerAccountName") as NSString

    public open fun fileGroupOwnerAccountName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fileGroupOwnerAccountName") as NSString

    public open fun fileSystemNumber(): Int =
        Native.objc_msgSend("int", this, "fileSystemNumber") as Int

    public open fun fileSystemFileNumber(): Int =
        Native.objc_msgSend("int", this, "fileSystemFileNumber") as Int

    public open fun fileExtensionHidden(): Boolean =
        Native.objc_msgSend("boolean", this, "fileExtensionHidden") as Boolean

    public open fun fileHFSCreatorCode(): Int =
        Native.objc_msgSend("int", this, "fileHFSCreatorCode") as Int

    public open fun fileHFSTypeCode(): Int =
        Native.objc_msgSend("int", this, "fileHFSTypeCode") as Int

    public open fun fileIsImmutable(): Boolean =
        Native.objc_msgSend("boolean", this, "fileIsImmutable") as Boolean

    public open fun fileIsAppendOnly(): Boolean =
        Native.objc_msgSend("boolean", this, "fileIsAppendOnly") as Boolean

    public open fun fileCreationDate(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "fileCreationDate") as NSDate

    public open fun fileOwnerAccountID(): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "fileOwnerAccountID") as NSNumber

    public open fun fileGroupOwnerAccountID(): NSNumber =
        Native.objc_msgSend("class objc.NSNumber", this, "fileGroupOwnerAccountID") as NSNumber

    trait metaclass : IObjCObject
}

trait NSHTTPCookieStorage_NSURLSessionTaskAdditions : IObjCObject {
    public open fun storeCookies_forTask(cookies: NSArray, task: NSURLSessionTask): Unit {
        Native.objc_msgSend("void", this, "storeCookies:forTask:", cookies, task)
    }

    public open fun getCookiesForTask_completionHandler(task: NSURLSessionTask, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "getCookiesForTask:completionHandler:", task, completionHandler)
    }

    trait metaclass : IObjCObject
}

trait NSOrderedSet_NSExtendedOrderedSet : IObjCObject {
    public open fun getObjects_range(objects: Any, range: Any): Unit {
        Native.objc_msgSend("void", this, "getObjects:range:", objects, range)
    }

    public open fun objectsAtIndexes(indexes: NSIndexSet): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "objectsAtIndexes:", indexes) as NSArray

    public open fun firstObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "firstObject") as ObjCObject

    public open fun lastObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "lastObject") as ObjCObject

    public open fun isEqualToOrderedSet(other: NSOrderedSet): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToOrderedSet:", other) as Boolean

    public open fun containsObject(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "containsObject:", `object`) as Boolean

    public open fun intersectsOrderedSet(other: NSOrderedSet): Boolean =
        Native.objc_msgSend("boolean", this, "intersectsOrderedSet:", other) as Boolean

    public open fun intersectsSet(set: NSSet): Boolean =
        Native.objc_msgSend("boolean", this, "intersectsSet:", set) as Boolean

    public open fun isSubsetOfOrderedSet(other: NSOrderedSet): Boolean =
        Native.objc_msgSend("boolean", this, "isSubsetOfOrderedSet:", other) as Boolean

    public open fun isSubsetOfSet(set: NSSet): Boolean =
        Native.objc_msgSend("boolean", this, "isSubsetOfSet:", set) as Boolean

    public open fun objectAtIndexedSubscript(idx: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "objectAtIndexedSubscript:", idx) as ObjCObject

    public open fun objectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "objectEnumerator") as NSEnumerator

    public open fun reverseObjectEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "reverseObjectEnumerator") as NSEnumerator

    public open fun reversedOrderedSet(): NSOrderedSet =
        Native.objc_msgSend("class objc.NSOrderedSet", this, "reversedOrderedSet") as NSOrderedSet

    public open fun array(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "array") as NSArray

    public open fun set(): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "set") as NSSet

    public open fun enumerateObjectsUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateObjectsUsingBlock:", block)
    }

    public open fun enumerateObjectsWithOptions_usingBlock(opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateObjectsWithOptions:usingBlock:", opts, block)
    }

    public open fun enumerateObjectsAtIndexes_options_usingBlock(s: NSIndexSet, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateObjectsAtIndexes:options:usingBlock:", s, opts, block)
    }

    public open fun indexOfObjectPassingTest(predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObjectPassingTest:", predicate) as Int

    public open fun indexOfObjectWithOptions_passingTest(opts: Any, predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObjectWithOptions:passingTest:", opts, predicate) as Int

    public open fun indexOfObjectAtIndexes_options_passingTest(s: NSIndexSet, opts: Any, predicate: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObjectAtIndexes:options:passingTest:", s, opts, predicate) as Int

    public open fun indexesOfObjectsPassingTest(predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesOfObjectsPassingTest:", predicate) as NSIndexSet

    public open fun indexesOfObjectsWithOptions_passingTest(opts: Any, predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesOfObjectsWithOptions:passingTest:", opts, predicate) as NSIndexSet

    public open fun indexesOfObjectsAtIndexes_options_passingTest(s: NSIndexSet, opts: Any, predicate: Any): NSIndexSet =
        Native.objc_msgSend("class objc.NSIndexSet", this, "indexesOfObjectsAtIndexes:options:passingTest:", s, opts, predicate) as NSIndexSet

    public open fun indexOfObject_inSortedRange_options_usingComparator(`object`: ObjCObject, range: Any, opts: Any, cmp: Any): Int =
        Native.objc_msgSend("int", this, "indexOfObject:inSortedRange:options:usingComparator:", `object`, range, opts, cmp) as Int

    public open fun sortedArrayUsingComparator(cmptr: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayUsingComparator:", cmptr) as NSArray

    public open fun sortedArrayWithOptions_usingComparator(opts: Any, cmptr: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayWithOptions:usingComparator:", opts, cmptr) as NSArray

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun descriptionWithLocale(locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:", locale) as NSString

    public open fun descriptionWithLocale_indent(locale: ObjCObject, level: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:indent:", locale, level) as NSString

    trait metaclass : IObjCObject
}

trait NSOrderedSet_NSOrderedSetCreation : IObjCObject {
    public open fun initWithObject(`object`: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObject:", `object`) as ObjCObject

    public open fun initWithObjects(firstObj: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjects:", firstObj) as ObjCObject

    public open fun initWithOrderedSet(set: NSOrderedSet): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithOrderedSet:", set) as ObjCObject

    public open fun initWithOrderedSet_copyItems(set: NSOrderedSet, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithOrderedSet:copyItems:", set, flag) as ObjCObject

    public open fun initWithOrderedSet_range_copyItems(set: NSOrderedSet, range: Any, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithOrderedSet:range:copyItems:", set, range, flag) as ObjCObject

    public open fun initWithArray(array: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithArray:", array) as ObjCObject

    public open fun initWithArray_copyItems(set: NSArray, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithArray:copyItems:", set, flag) as ObjCObject

    public open fun initWithArray_range_copyItems(set: NSArray, range: Any, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithArray:range:copyItems:", set, range, flag) as ObjCObject

    public open fun initWithSet(set: NSSet): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSet:", set) as ObjCObject

    public open fun initWithSet_copyItems(set: NSSet, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSet:copyItems:", set, flag) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun orderedSet(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSet") as ObjCObject

        public open fun orderedSetWithObject(`object`: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithObject:", `object`) as ObjCObject

        public open fun orderedSetWithObjects_count(objects: Any, cnt: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithObjects:count:", objects, cnt) as ObjCObject

        public open fun orderedSetWithObjects(firstObj: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithObjects:", firstObj) as ObjCObject

        public open fun orderedSetWithOrderedSet(set: NSOrderedSet): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithOrderedSet:", set) as ObjCObject

        public open fun orderedSetWithOrderedSet_range_copyItems(set: NSOrderedSet, range: Any, flag: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithOrderedSet:range:copyItems:", set, range, flag) as ObjCObject

        public open fun orderedSetWithArray(array: NSArray): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithArray:", array) as ObjCObject

        public open fun orderedSetWithArray_range_copyItems(array: NSArray, range: Any, flag: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithArray:range:copyItems:", array, range, flag) as ObjCObject

        public open fun orderedSetWithSet(set: NSSet): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithSet:", set) as ObjCObject

        public open fun orderedSetWithSet_copyItems(set: NSSet, flag: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithSet:copyItems:", set, flag) as ObjCObject
    }
}

trait NSMutableOrderedSet_NSExtendedMutableOrderedSet : IObjCObject {
    public open fun addObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addObject:", `object`)
    }

    public open fun addObjects_count(objects: Any, count: Int): Unit {
        Native.objc_msgSend("void", this, "addObjects:count:", objects, count)
    }

    public open fun addObjectsFromArray(array: NSArray): Unit {
        Native.objc_msgSend("void", this, "addObjectsFromArray:", array)
    }

    public open fun exchangeObjectAtIndex_withObjectAtIndex(idx1: Int, idx2: Int): Unit {
        Native.objc_msgSend("void", this, "exchangeObjectAtIndex:withObjectAtIndex:", idx1, idx2)
    }

    public open fun moveObjectsAtIndexes_toIndex(indexes: NSIndexSet, idx: Int): Unit {
        Native.objc_msgSend("void", this, "moveObjectsAtIndexes:toIndex:", indexes, idx)
    }

    public open fun insertObjects_atIndexes(objects: NSArray, indexes: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "insertObjects:atIndexes:", objects, indexes)
    }

    public open fun setObject_atIndex(obj: ObjCObject, idx: Int): Unit {
        Native.objc_msgSend("void", this, "setObject:atIndex:", obj, idx)
    }

    public open fun setObject_atIndexedSubscript(obj: ObjCObject, idx: Int): Unit {
        Native.objc_msgSend("void", this, "setObject:atIndexedSubscript:", obj, idx)
    }

    public open fun replaceObjectsInRange_withObjects_count(range: Any, objects: Any, count: Int): Unit {
        Native.objc_msgSend("void", this, "replaceObjectsInRange:withObjects:count:", range, objects, count)
    }

    public open fun replaceObjectsAtIndexes_withObjects(indexes: NSIndexSet, objects: NSArray): Unit {
        Native.objc_msgSend("void", this, "replaceObjectsAtIndexes:withObjects:", indexes, objects)
    }

    public open fun removeObjectsInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "removeObjectsInRange:", range)
    }

    public open fun removeObjectsAtIndexes(indexes: NSIndexSet): Unit {
        Native.objc_msgSend("void", this, "removeObjectsAtIndexes:", indexes)
    }

    public open fun removeAllObjects(): Unit {
        Native.objc_msgSend("void", this, "removeAllObjects")
    }

    public open fun removeObject(`object`: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeObject:", `object`)
    }

    public open fun removeObjectsInArray(array: NSArray): Unit {
        Native.objc_msgSend("void", this, "removeObjectsInArray:", array)
    }

    public open fun intersectOrderedSet(other: NSOrderedSet): Unit {
        Native.objc_msgSend("void", this, "intersectOrderedSet:", other)
    }

    public open fun minusOrderedSet(other: NSOrderedSet): Unit {
        Native.objc_msgSend("void", this, "minusOrderedSet:", other)
    }

    public open fun unionOrderedSet(other: NSOrderedSet): Unit {
        Native.objc_msgSend("void", this, "unionOrderedSet:", other)
    }

    public open fun intersectSet(other: NSSet): Unit {
        Native.objc_msgSend("void", this, "intersectSet:", other)
    }

    public open fun minusSet(other: NSSet): Unit {
        Native.objc_msgSend("void", this, "minusSet:", other)
    }

    public open fun unionSet(other: NSSet): Unit {
        Native.objc_msgSend("void", this, "unionSet:", other)
    }

    public open fun sortUsingComparator(cmptr: Any): Unit {
        Native.objc_msgSend("void", this, "sortUsingComparator:", cmptr)
    }

    public open fun sortWithOptions_usingComparator(opts: Any, cmptr: Any): Unit {
        Native.objc_msgSend("void", this, "sortWithOptions:usingComparator:", opts, cmptr)
    }

    public open fun sortRange_options_usingComparator(range: Any, opts: Any, cmptr: Any): Unit {
        Native.objc_msgSend("void", this, "sortRange:options:usingComparator:", range, opts, cmptr)
    }

    trait metaclass : IObjCObject
}

trait NSMutableOrderedSet_NSMutableOrderedSetCreation : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun orderedSetWithCapacity(numItems: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orderedSetWithCapacity:", numItems) as ObjCObject
    }
}

trait NSSet_NSExtendedSet : IObjCObject {
    public open fun allObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allObjects") as NSArray

    public open fun anyObject(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "anyObject") as ObjCObject

    public open fun containsObject(anObject: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "containsObject:", anObject) as Boolean

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun descriptionWithLocale(locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithLocale:", locale) as NSString

    public open fun intersectsSet(otherSet: NSSet): Boolean =
        Native.objc_msgSend("boolean", this, "intersectsSet:", otherSet) as Boolean

    public open fun isEqualToSet(otherSet: NSSet): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToSet:", otherSet) as Boolean

    public open fun isSubsetOfSet(otherSet: NSSet): Boolean =
        Native.objc_msgSend("boolean", this, "isSubsetOfSet:", otherSet) as Boolean

    public open fun makeObjectsPerformSelector(aSelector: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "makeObjectsPerformSelector:", aSelector)
    }

    public open fun makeObjectsPerformSelector_withObject(aSelector: ObjCSelector, argument: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeObjectsPerformSelector:withObject:", aSelector, argument)
    }

    public open fun setByAddingObject(anObject: ObjCObject): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "setByAddingObject:", anObject) as NSSet

    public open fun setByAddingObjectsFromSet(other: NSSet): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "setByAddingObjectsFromSet:", other) as NSSet

    public open fun setByAddingObjectsFromArray(other: NSArray): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "setByAddingObjectsFromArray:", other) as NSSet

    public open fun enumerateObjectsUsingBlock(block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateObjectsUsingBlock:", block)
    }

    public open fun enumerateObjectsWithOptions_usingBlock(opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateObjectsWithOptions:usingBlock:", opts, block)
    }

    public open fun objectsPassingTest(predicate: Any): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "objectsPassingTest:", predicate) as NSSet

    public open fun objectsWithOptions_passingTest(opts: Any, predicate: Any): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "objectsWithOptions:passingTest:", opts, predicate) as NSSet

    trait metaclass : IObjCObject
}

trait NSSet_NSSetCreation : IObjCObject {
    public open fun initWithObjects(firstObj: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithObjects:", firstObj) as ObjCObject

    public open fun initWithSet(set: NSSet): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSet:", set) as ObjCObject

    public open fun initWithSet_copyItems(set: NSSet, flag: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithSet:copyItems:", set, flag) as ObjCObject

    public open fun initWithArray(array: NSArray): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithArray:", array) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun set(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "set") as ObjCObject

        public open fun setWithObject(`object`: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "setWithObject:", `object`) as ObjCObject

        public open fun setWithObjects_count(objects: Any, cnt: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "setWithObjects:count:", objects, cnt) as ObjCObject

        public open fun setWithObjects(firstObj: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "setWithObjects:", firstObj) as ObjCObject

        public open fun setWithSet(set: NSSet): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "setWithSet:", set) as ObjCObject

        public open fun setWithArray(array: NSArray): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "setWithArray:", array) as ObjCObject
    }
}

trait NSMutableSet_NSExtendedMutableSet : IObjCObject {
    public open fun addObjectsFromArray(array: NSArray): Unit {
        Native.objc_msgSend("void", this, "addObjectsFromArray:", array)
    }

    public open fun intersectSet(otherSet: NSSet): Unit {
        Native.objc_msgSend("void", this, "intersectSet:", otherSet)
    }

    public open fun minusSet(otherSet: NSSet): Unit {
        Native.objc_msgSend("void", this, "minusSet:", otherSet)
    }

    public open fun removeAllObjects(): Unit {
        Native.objc_msgSend("void", this, "removeAllObjects")
    }

    public open fun unionSet(otherSet: NSSet): Unit {
        Native.objc_msgSend("void", this, "unionSet:", otherSet)
    }

    public open fun setSet(otherSet: NSSet): Unit {
        Native.objc_msgSend("void", this, "setSet:", otherSet)
    }

    trait metaclass : IObjCObject
}

trait NSMutableSet_NSMutableSetCreation : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun setWithCapacity(numItems: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "setWithCapacity:", numItems) as ObjCObject
    }
}

trait NSObject_NSKeyValueCoding : IObjCObject {
    public open fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    public open fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    public open fun validateValue_forKey_error(ioValue: Pointer<ObjCObject>, inKey: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "validateValue:forKey:error:", ioValue, inKey, outError) as Boolean

    public open fun mutableArrayValueForKey(key: NSString): NSMutableArray =
        Native.objc_msgSend("class objc.NSMutableArray", this, "mutableArrayValueForKey:", key) as NSMutableArray

    public open fun mutableOrderedSetValueForKey(key: NSString): NSMutableOrderedSet =
        Native.objc_msgSend("class objc.NSMutableOrderedSet", this, "mutableOrderedSetValueForKey:", key) as NSMutableOrderedSet

    public open fun mutableSetValueForKey(key: NSString): NSMutableSet =
        Native.objc_msgSend("class objc.NSMutableSet", this, "mutableSetValueForKey:", key) as NSMutableSet

    public open fun valueForKeyPath(keyPath: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKeyPath:", keyPath) as ObjCObject

    public open fun setValue_forKeyPath(value: ObjCObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKeyPath:", value, keyPath)
    }

    public open fun validateValue_forKeyPath_error(ioValue: Pointer<ObjCObject>, inKeyPath: NSString, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "validateValue:forKeyPath:error:", ioValue, inKeyPath, outError) as Boolean

    public open fun mutableArrayValueForKeyPath(keyPath: NSString): NSMutableArray =
        Native.objc_msgSend("class objc.NSMutableArray", this, "mutableArrayValueForKeyPath:", keyPath) as NSMutableArray

    public open fun mutableOrderedSetValueForKeyPath(keyPath: NSString): NSMutableOrderedSet =
        Native.objc_msgSend("class objc.NSMutableOrderedSet", this, "mutableOrderedSetValueForKeyPath:", keyPath) as NSMutableOrderedSet

    public open fun mutableSetValueForKeyPath(keyPath: NSString): NSMutableSet =
        Native.objc_msgSend("class objc.NSMutableSet", this, "mutableSetValueForKeyPath:", keyPath) as NSMutableSet

    public open fun valueForUndefinedKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForUndefinedKey:", key) as ObjCObject

    public open fun setValue_forUndefinedKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forUndefinedKey:", value, key)
    }

    public open fun setNilValueForKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setNilValueForKey:", key)
    }

    public open fun dictionaryWithValuesForKeys(keys: NSArray): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "dictionaryWithValuesForKeys:", keys) as NSDictionary

    public open fun setValuesForKeysWithDictionary(keyedValues: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setValuesForKeysWithDictionary:", keyedValues)
    }

    trait metaclass : IObjCObject {
        public open fun accessInstanceVariablesDirectly(): Boolean =
            Native.objc_msgSend("boolean", this, "accessInstanceVariablesDirectly") as Boolean
    }
}

trait NSArray_NSKeyValueCoding : IObjCObject {
    public open fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    public open fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    trait metaclass : IObjCObject
}

trait NSDictionary_NSKeyValueCoding : IObjCObject {
    public open fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    trait metaclass : IObjCObject
}

trait NSMutableDictionary_NSKeyValueCoding : IObjCObject {
    public open fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    trait metaclass : IObjCObject
}

trait NSOrderedSet_NSKeyValueCoding : IObjCObject {
    public open fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    public open fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    trait metaclass : IObjCObject
}

trait NSSet_NSKeyValueCoding : IObjCObject {
    public open fun valueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForKey:", key) as ObjCObject

    public open fun setValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forKey:", value, key)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSDeprecatedKeyValueCoding : IObjCObject {
    public open fun storedValueForKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "storedValueForKey:", key) as ObjCObject

    public open fun takeStoredValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "takeStoredValue:forKey:", value, key)
    }

    public open fun takeValue_forKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "takeValue:forKey:", value, key)
    }

    public open fun takeValue_forKeyPath(value: ObjCObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "takeValue:forKeyPath:", value, keyPath)
    }

    public open fun handleQueryWithUnboundKey(key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "handleQueryWithUnboundKey:", key) as ObjCObject

    public open fun handleTakeValue_forUnboundKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "handleTakeValue:forUnboundKey:", value, key)
    }

    public open fun unableToSetNilForKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "unableToSetNilForKey:", key)
    }

    public open fun valuesForKeys(keys: NSArray): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "valuesForKeys:", keys) as NSDictionary

    public open fun takeValuesFromDictionary(properties: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "takeValuesFromDictionary:", properties)
    }

    trait metaclass : IObjCObject {
        public open fun useStoredAccessor(): Boolean =
            Native.objc_msgSend("boolean", this, "useStoredAccessor") as Boolean
    }
}

trait NSObject_NSKeyValueObserving : IObjCObject {
    public open fun observeValueForKeyPath_ofObject_change_context(keyPath: NSString, `object`: ObjCObject, change: NSDictionary, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "observeValueForKeyPath:ofObject:change:context:", keyPath, `object`, change, context)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSKeyValueObserverRegistration : IObjCObject {
    public open fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    public open fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    public open fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    trait metaclass : IObjCObject
}

trait NSArray_NSKeyValueObserverRegistration : IObjCObject {
    public open fun addObserver_toObjectsAtIndexes_forKeyPath_options_context(observer: NSObject, indexes: NSIndexSet, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:toObjectsAtIndexes:forKeyPath:options:context:", observer, indexes, keyPath, options, context)
    }

    public open fun removeObserver_fromObjectsAtIndexes_forKeyPath_context(observer: NSObject, indexes: NSIndexSet, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:fromObjectsAtIndexes:forKeyPath:context:", observer, indexes, keyPath, context)
    }

    public open fun removeObserver_fromObjectsAtIndexes_forKeyPath(observer: NSObject, indexes: NSIndexSet, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:fromObjectsAtIndexes:forKeyPath:", observer, indexes, keyPath)
    }

    public open fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    public open fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    public open fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    trait metaclass : IObjCObject
}

trait NSOrderedSet_NSKeyValueObserverRegistration : IObjCObject {
    public open fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    public open fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    public open fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    trait metaclass : IObjCObject
}

trait NSSet_NSKeyValueObserverRegistration : IObjCObject {
    public open fun addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString, options: Any, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "addObserver:forKeyPath:options:context:", observer, keyPath, options, context)
    }

    public open fun removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString, context: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:context:", observer, keyPath, context)
    }

    public open fun removeObserver_forKeyPath(observer: NSObject, keyPath: NSString): Unit {
        Native.objc_msgSend("void", this, "removeObserver:forKeyPath:", observer, keyPath)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSKeyValueObserverNotification : IObjCObject {
    public open fun willChangeValueForKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "willChangeValueForKey:", key)
    }

    public open fun didChangeValueForKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "didChangeValueForKey:", key)
    }

    public open fun willChange_valuesAtIndexes_forKey(changeKind: Any, indexes: NSIndexSet, key: NSString): Unit {
        Native.objc_msgSend("void", this, "willChange:valuesAtIndexes:forKey:", changeKind, indexes, key)
    }

    public open fun didChange_valuesAtIndexes_forKey(changeKind: Any, indexes: NSIndexSet, key: NSString): Unit {
        Native.objc_msgSend("void", this, "didChange:valuesAtIndexes:forKey:", changeKind, indexes, key)
    }

    public open fun willChangeValueForKey_withSetMutation_usingObjects(key: NSString, mutationKind: Any, objects: NSSet): Unit {
        Native.objc_msgSend("void", this, "willChangeValueForKey:withSetMutation:usingObjects:", key, mutationKind, objects)
    }

    public open fun didChangeValueForKey_withSetMutation_usingObjects(key: NSString, mutationKind: Any, objects: NSSet): Unit {
        Native.objc_msgSend("void", this, "didChangeValueForKey:withSetMutation:usingObjects:", key, mutationKind, objects)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSKeyValueObservingCustomization : IObjCObject {
    public open fun observationInfo(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "observationInfo") as Pointer<*>

    public open fun setObservationInfo(observationInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "setObservationInfo:", observationInfo)
    }

    trait metaclass : IObjCObject {
        public open fun keyPathsForValuesAffectingValueForKey(key: NSString): NSSet =
            Native.objc_msgSend("class objc.NSSet", this, "keyPathsForValuesAffectingValueForKey:", key) as NSSet

        public open fun automaticallyNotifiesObserversForKey(key: NSString): Boolean =
            Native.objc_msgSend("boolean", this, "automaticallyNotifiesObserversForKey:", key) as Boolean
    }
}

trait NSObject_NSDeprecatedKeyValueObservingCustomization : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun setKeys_triggerChangeNotificationsForDependentKey(keys: NSArray, dependentKey: NSString): Unit {
            Native.objc_msgSend("void", this, "setKeys:triggerChangeNotificationsForDependentKey:", keys, dependentKey)
        }
    }
}

trait NSValue_NSValueGeometryExtensions : IObjCObject {
    public open fun pointValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "pointValue")

    public open fun sizeValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "sizeValue")

    public open fun rectValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "rectValue")

    public open fun edgeInsetsValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "edgeInsetsValue")

    trait metaclass : IObjCObject {
        public open fun valueWithPoint(point: Any): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithPoint:", point) as NSValue

        public open fun valueWithSize(size: Any): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithSize:", size) as NSValue

        public open fun valueWithRect(rect: Any): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithRect:", rect) as NSValue

        public open fun valueWithEdgeInsets(insets: Any): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithEdgeInsets:", insets) as NSValue
    }
}

trait NSCoder_NSGeometryCoding : IObjCObject {
    public open fun encodePoint(point: Any): Unit {
        Native.objc_msgSend("void", this, "encodePoint:", point)
    }

    public open fun decodePoint(): Any =
        Native.objc_msgSend("class objc.Any", this, "decodePoint")

    public open fun encodeSize(size: Any): Unit {
        Native.objc_msgSend("void", this, "encodeSize:", size)
    }

    public open fun decodeSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "decodeSize")

    public open fun encodeRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "encodeRect:", rect)
    }

    public open fun decodeRect(): Any =
        Native.objc_msgSend("class objc.Any", this, "decodeRect")

    trait metaclass : IObjCObject
}

trait NSCoder_NSGeometryKeyedCoding : IObjCObject {
    public open fun encodePoint_forKey(point: Any, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodePoint:forKey:", point, key)
    }

    public open fun encodeSize_forKey(size: Any, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeSize:forKey:", size, key)
    }

    public open fun encodeRect_forKey(rect: Any, key: NSString): Unit {
        Native.objc_msgSend("void", this, "encodeRect:forKey:", rect, key)
    }

    public open fun decodePointForKey(key: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "decodePointForKey:", key)

    public open fun decodeSizeForKey(key: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "decodeSizeForKey:", key)

    public open fun decodeRectForKey(key: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "decodeRectForKey:", key)

    trait metaclass : IObjCObject
}

trait NSObject_NSKeyedArchiverObjectSubstitution : IObjCObject {
    public open fun classForKeyedArchiver(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "classForKeyedArchiver") as ObjCClass

    public open fun replacementObjectForKeyedArchiver(archiver: NSKeyedArchiver): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "replacementObjectForKeyedArchiver:", archiver) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun classFallbacksForKeyedArchiver(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "classFallbacksForKeyedArchiver") as NSArray
    }
}

trait NSObject_NSKeyedUnarchiverObjectSubstitution : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun classForKeyedUnarchiver(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "classForKeyedUnarchiver") as ObjCClass
    }
}

trait NSLocale_NSExtendedLocale : IObjCObject {
    public open fun localeIdentifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localeIdentifier") as NSString

    trait metaclass : IObjCObject
}

trait NSLocale_NSLocaleCreation : IObjCObject {
    public open fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    trait metaclass : IObjCObject {
        public open fun autoupdatingCurrentLocale(): NSLocale =
            Native.objc_msgSend("class objc.NSLocale", this, "autoupdatingCurrentLocale") as NSLocale

        public open fun currentLocale(): NSLocale =
            Native.objc_msgSend("class objc.NSLocale", this, "currentLocale") as NSLocale

        public open fun systemLocale(): NSLocale =
            Native.objc_msgSend("class objc.NSLocale", this, "systemLocale") as NSLocale

        public open fun localeWithLocaleIdentifier(ident: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "localeWithLocaleIdentifier:", ident) as ObjCObject
    }
}

trait NSLocale_NSLocaleGeneralInfo : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun availableLocaleIdentifiers(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "availableLocaleIdentifiers") as NSArray

        public open fun ISOLanguageCodes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "ISOLanguageCodes") as NSArray

        public open fun ISOCountryCodes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "ISOCountryCodes") as NSArray

        public open fun ISOCurrencyCodes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "ISOCurrencyCodes") as NSArray

        public open fun commonISOCurrencyCodes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "commonISOCurrencyCodes") as NSArray

        public open fun preferredLanguages(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "preferredLanguages") as NSArray

        public open fun componentsFromLocaleIdentifier(string: NSString): NSDictionary =
            Native.objc_msgSend("class objc.NSDictionary", this, "componentsFromLocaleIdentifier:", string) as NSDictionary

        public open fun localeIdentifierFromComponents(dict: NSDictionary): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localeIdentifierFromComponents:", dict) as NSString

        public open fun canonicalLocaleIdentifierFromString(string: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "canonicalLocaleIdentifierFromString:", string) as NSString

        public open fun canonicalLanguageIdentifierFromString(string: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "canonicalLanguageIdentifierFromString:", string) as NSString

        public open fun localeIdentifierFromWindowsLocaleCode(lcid: Int): NSString =
            Native.objc_msgSend("class objc.NSString", this, "localeIdentifierFromWindowsLocaleCode:", lcid) as NSString

        public open fun windowsLocaleCodeFromLocaleIdentifier(localeIdentifier: NSString): Int =
            Native.objc_msgSend("int", this, "windowsLocaleCodeFromLocaleIdentifier:", localeIdentifier) as Int

        public open fun characterDirectionForLanguage(isoLangCode: NSString): Any =
            Native.objc_msgSend("class objc.Any", this, "characterDirectionForLanguage:", isoLangCode)

        public open fun lineDirectionForLanguage(isoLangCode: NSString): Any =
            Native.objc_msgSend("class objc.Any", this, "lineDirectionForLanguage:", isoLangCode)
    }
}

trait NSNotification_NSNotificationCreation : IObjCObject {
    public open fun init(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "init") as ObjCObject

    trait metaclass : IObjCObject {
        public open fun notificationWithName_object(aName: NSString, anObject: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "notificationWithName:object:", aName, anObject) as ObjCObject

        public open fun notificationWithName_object_userInfo(aName: NSString, anObject: ObjCObject, aUserInfo: NSDictionary): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "notificationWithName:object:userInfo:", aName, anObject, aUserInfo) as ObjCObject
    }
}

trait NSNumberFormatter_NSNumberFormatterCompatibility : IObjCObject {
    public open fun hasThousandSeparators(): Boolean =
        Native.objc_msgSend("boolean", this, "hasThousandSeparators") as Boolean

    public open fun setHasThousandSeparators(hasThousandSeparators: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasThousandSeparators:", hasThousandSeparators)
    }

    public open fun thousandSeparator(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "thousandSeparator") as NSString

    public open fun setThousandSeparator(thousandSeparator: NSString): Unit {
        Native.objc_msgSend("void", this, "setThousandSeparator:", thousandSeparator)
    }

    public open fun localizesFormat(): Boolean =
        Native.objc_msgSend("boolean", this, "localizesFormat") as Boolean

    public open fun setLocalizesFormat(localizesFormat: Boolean): Unit {
        Native.objc_msgSend("void", this, "setLocalizesFormat:", localizesFormat)
    }

    public open fun format(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "format") as NSString

    public open fun setFormat(format: NSString): Unit {
        Native.objc_msgSend("void", this, "setFormat:", format)
    }

    public open fun attributedStringForZero(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedStringForZero") as NSAttributedString

    public open fun setAttributedStringForZero(attributedStringForZero: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedStringForZero:", attributedStringForZero)
    }

    public open fun attributedStringForNil(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedStringForNil") as NSAttributedString

    public open fun setAttributedStringForNil(attributedStringForNil: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedStringForNil:", attributedStringForNil)
    }

    public open fun attributedStringForNotANumber(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedStringForNotANumber") as NSAttributedString

    public open fun setAttributedStringForNotANumber(attributedStringForNotANumber: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedStringForNotANumber:", attributedStringForNotANumber)
    }

    public open fun roundingBehavior(): NSDecimalNumberHandler =
        Native.objc_msgSend("class objc.NSDecimalNumberHandler", this, "roundingBehavior") as NSDecimalNumberHandler

    public open fun setRoundingBehavior(roundingBehavior: NSDecimalNumberHandler): Unit {
        Native.objc_msgSend("void", this, "setRoundingBehavior:", roundingBehavior)
    }

    trait metaclass : IObjCObject
}

trait NSOrthography_NSOrthographyExtended : IObjCObject {
    public open fun languagesForScript(script: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "languagesForScript:", script) as NSArray

    public open fun dominantLanguageForScript(script: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "dominantLanguageForScript:", script) as NSString

    public open fun dominantLanguage(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "dominantLanguage") as NSString

    public open fun allScripts(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allScripts") as NSArray

    public open fun allLanguages(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allLanguages") as NSArray

    trait metaclass : IObjCObject
}

trait NSOrthography_NSOrthographyCreation : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun orthographyWithDominantScript_languageMap(script: NSString, map: NSDictionary): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "orthographyWithDominantScript:languageMap:", script, map) as ObjCObject
    }
}

trait NSPointerArray_NSPointerArrayConveniences : IObjCObject {
    public open fun allObjects(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allObjects") as NSArray

    trait metaclass : IObjCObject {
        public open fun pointerArrayWithStrongObjects(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "pointerArrayWithStrongObjects") as ObjCObject

        public open fun pointerArrayWithWeakObjects(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "pointerArrayWithWeakObjects") as ObjCObject

        public open fun strongObjectsPointerArray(): NSPointerArray =
            Native.objc_msgSend("class objc.NSPointerArray", this, "strongObjectsPointerArray") as NSPointerArray

        public open fun weakObjectsPointerArray(): NSPointerArray =
            Native.objc_msgSend("class objc.NSPointerArray", this, "weakObjectsPointerArray") as NSPointerArray
    }
}

trait NSTextCheckingResult_NSTextCheckingResultOptional : IObjCObject {
    public open fun orthography(): NSOrthography =
        Native.objc_msgSend("class objc.NSOrthography", this, "orthography") as NSOrthography

    public open fun grammarDetails(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "grammarDetails") as NSArray

    public open fun date(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "date") as NSDate

    public open fun timeZone(): NSTimeZone =
        Native.objc_msgSend("class objc.NSTimeZone", this, "timeZone") as NSTimeZone

    public open fun duration(): Double =
        Native.objc_msgSend("double", this, "duration") as Double

    public open fun components(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "components") as NSDictionary

    public open fun URL(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URL") as NSURL

    public open fun replacementString(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "replacementString") as NSString

    public open fun alternativeStrings(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "alternativeStrings") as NSArray

    public open fun regularExpression(): NSRegularExpression =
        Native.objc_msgSend("class objc.NSRegularExpression", this, "regularExpression") as NSRegularExpression

    public open fun phoneNumber(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "phoneNumber") as NSString

    public open fun addressComponents(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "addressComponents") as NSDictionary

    public open fun numberOfRanges(): Int =
        Native.objc_msgSend("int", this, "numberOfRanges") as Int

    public open fun rangeAtIndex(idx: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeAtIndex:", idx)

    public open fun resultByAdjustingRangesWithOffset(offset: Int): NSTextCheckingResult =
        Native.objc_msgSend("class objc.NSTextCheckingResult", this, "resultByAdjustingRangesWithOffset:", offset) as NSTextCheckingResult

    trait metaclass : IObjCObject
}

trait NSTextCheckingResult_NSTextCheckingResultCreation : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun orthographyCheckingResultWithRange_orthography(range: Any, orthography: NSOrthography): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "orthographyCheckingResultWithRange:orthography:", range, orthography) as NSTextCheckingResult

        public open fun spellCheckingResultWithRange(range: Any): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "spellCheckingResultWithRange:", range) as NSTextCheckingResult

        public open fun grammarCheckingResultWithRange_details(range: Any, details: NSArray): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "grammarCheckingResultWithRange:details:", range, details) as NSTextCheckingResult

        public open fun dateCheckingResultWithRange_date(range: Any, date: NSDate): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "dateCheckingResultWithRange:date:", range, date) as NSTextCheckingResult

        public open fun dateCheckingResultWithRange_date_timeZone_duration(range: Any, date: NSDate, timeZone: NSTimeZone, duration: Double): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "dateCheckingResultWithRange:date:timeZone:duration:", range, date, timeZone, duration) as NSTextCheckingResult

        public open fun addressCheckingResultWithRange_components(range: Any, components: NSDictionary): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "addressCheckingResultWithRange:components:", range, components) as NSTextCheckingResult

        public open fun linkCheckingResultWithRange_URL(range: Any, url: NSURL): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "linkCheckingResultWithRange:URL:", range, url) as NSTextCheckingResult

        public open fun quoteCheckingResultWithRange_replacementString(range: Any, replacementString: NSString): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "quoteCheckingResultWithRange:replacementString:", range, replacementString) as NSTextCheckingResult

        public open fun dashCheckingResultWithRange_replacementString(range: Any, replacementString: NSString): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "dashCheckingResultWithRange:replacementString:", range, replacementString) as NSTextCheckingResult

        public open fun replacementCheckingResultWithRange_replacementString(range: Any, replacementString: NSString): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "replacementCheckingResultWithRange:replacementString:", range, replacementString) as NSTextCheckingResult

        public open fun correctionCheckingResultWithRange_replacementString(range: Any, replacementString: NSString): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "correctionCheckingResultWithRange:replacementString:", range, replacementString) as NSTextCheckingResult

        public open fun correctionCheckingResultWithRange_replacementString_alternativeStrings(range: Any, replacementString: NSString, alternativeStrings: NSArray): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "correctionCheckingResultWithRange:replacementString:alternativeStrings:", range, replacementString, alternativeStrings) as NSTextCheckingResult

        public open fun regularExpressionCheckingResultWithRanges_count_regularExpression(ranges: Pointer<Any>, count: Int, regularExpression: NSRegularExpression): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "regularExpressionCheckingResultWithRanges:count:regularExpression:", ranges, count, regularExpression) as NSTextCheckingResult

        public open fun phoneNumberCheckingResultWithRange_phoneNumber(range: Any, phoneNumber: NSString): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "phoneNumberCheckingResultWithRange:phoneNumber:", range, phoneNumber) as NSTextCheckingResult

        public open fun transitInformationCheckingResultWithRange_components(range: Any, components: NSDictionary): NSTextCheckingResult =
            Native.objc_msgSend("class objc.NSTextCheckingResult", this, "transitInformationCheckingResultWithRange:components:", range, components) as NSTextCheckingResult
    }
}

trait NSRegularExpression_NSMatching : IObjCObject {
    public open fun enumerateMatchesInString_options_range_usingBlock(string: NSString, options: Any, range: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateMatchesInString:options:range:usingBlock:", string, options, range, block)
    }

    public open fun matchesInString_options_range(string: NSString, options: Any, range: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "matchesInString:options:range:", string, options, range) as NSArray

    public open fun numberOfMatchesInString_options_range(string: NSString, options: Any, range: Any): Int =
        Native.objc_msgSend("int", this, "numberOfMatchesInString:options:range:", string, options, range) as Int

    public open fun firstMatchInString_options_range(string: NSString, options: Any, range: Any): NSTextCheckingResult =
        Native.objc_msgSend("class objc.NSTextCheckingResult", this, "firstMatchInString:options:range:", string, options, range) as NSTextCheckingResult

    public open fun rangeOfFirstMatchInString_options_range(string: NSString, options: Any, range: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfFirstMatchInString:options:range:", string, options, range)

    trait metaclass : IObjCObject
}

trait NSRegularExpression_NSReplacement : IObjCObject {
    public open fun stringByReplacingMatchesInString_options_range_withTemplate(string: NSString, options: Any, range: Any, templ: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByReplacingMatchesInString:options:range:withTemplate:", string, options, range, templ) as NSString

    public open fun replaceMatchesInString_options_range_withTemplate(string: NSMutableString, options: Any, range: Any, templ: NSString): Int =
        Native.objc_msgSend("int", this, "replaceMatchesInString:options:range:withTemplate:", string, options, range, templ) as Int

    public open fun replacementStringForResult_inString_offset_template(result: NSTextCheckingResult, string: NSString, offset: Int, templ: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "replacementStringForResult:inString:offset:template:", result, string, offset, templ) as NSString

    trait metaclass : IObjCObject {
        public open fun escapedTemplateForString(string: NSString): NSString =
            Native.objc_msgSend("class objc.NSString", this, "escapedTemplateForString:", string) as NSString
    }
}

trait NSRunLoop_NSRunLoopConveniences : IObjCObject {
    public open fun run(): Unit {
        Native.objc_msgSend("void", this, "run")
    }

    public open fun runUntilDate(limitDate: NSDate): Unit {
        Native.objc_msgSend("void", this, "runUntilDate:", limitDate)
    }

    public open fun runMode_beforeDate(mode: NSString, limitDate: NSDate): Boolean =
        Native.objc_msgSend("boolean", this, "runMode:beforeDate:", mode, limitDate) as Boolean

    public open fun configureAsServer(): Unit {
        Native.objc_msgSend("void", this, "configureAsServer")
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSDelayedPerforming : IObjCObject {
    public open fun performSelector_withObject_afterDelay_inModes(aSelector: ObjCSelector, anArgument: ObjCObject, delay: Double, modes: NSArray): Unit {
        Native.objc_msgSend("void", this, "performSelector:withObject:afterDelay:inModes:", aSelector, anArgument, delay, modes)
    }

    public open fun performSelector_withObject_afterDelay(aSelector: ObjCSelector, anArgument: ObjCObject, delay: Double): Unit {
        Native.objc_msgSend("void", this, "performSelector:withObject:afterDelay:", aSelector, anArgument, delay)
    }

    trait metaclass : IObjCObject {
        public open fun cancelPreviousPerformRequestsWithTarget_selector_object(aTarget: ObjCObject, aSelector: ObjCSelector, anArgument: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "cancelPreviousPerformRequestsWithTarget:selector:object:", aTarget, aSelector, anArgument)
        }

        public open fun cancelPreviousPerformRequestsWithTarget(aTarget: ObjCObject): Unit {
            Native.objc_msgSend("void", this, "cancelPreviousPerformRequestsWithTarget:", aTarget)
        }
    }
}

trait NSRunLoop_NSOrderedPerform : IObjCObject {
    public open fun performSelector_target_argument_order_modes(aSelector: ObjCSelector, target: ObjCObject, arg: ObjCObject, order: Int, modes: NSArray): Unit {
        Native.objc_msgSend("void", this, "performSelector:target:argument:order:modes:", aSelector, target, arg, order, modes)
    }

    public open fun cancelPerformSelector_target_argument(aSelector: ObjCSelector, target: ObjCObject, arg: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "cancelPerformSelector:target:argument:", aSelector, target, arg)
    }

    public open fun cancelPerformSelectorsWithTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "cancelPerformSelectorsWithTarget:", target)
    }

    trait metaclass : IObjCObject
}

trait NSSet_NSSortDescriptorSorting : IObjCObject {
    public open fun sortedArrayUsingDescriptors(sortDescriptors: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayUsingDescriptors:", sortDescriptors) as NSArray

    trait metaclass : IObjCObject
}

trait NSArray_NSSortDescriptorSorting : IObjCObject {
    public open fun sortedArrayUsingDescriptors(sortDescriptors: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayUsingDescriptors:", sortDescriptors) as NSArray

    trait metaclass : IObjCObject
}

trait NSMutableArray_NSSortDescriptorSorting : IObjCObject {
    public open fun sortUsingDescriptors(sortDescriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "sortUsingDescriptors:", sortDescriptors)
    }

    trait metaclass : IObjCObject
}

trait NSOrderedSet_NSKeyValueSorting : IObjCObject {
    public open fun sortedArrayUsingDescriptors(sortDescriptors: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "sortedArrayUsingDescriptors:", sortDescriptors) as NSArray

    trait metaclass : IObjCObject
}

trait NSMutableOrderedSet_NSKeyValueSorting : IObjCObject {
    public open fun sortUsingDescriptors(sortDescriptors: NSArray): Unit {
        Native.objc_msgSend("void", this, "sortUsingDescriptors:", sortDescriptors)
    }

    trait metaclass : IObjCObject
}

trait NSStream_NSSocketStreamCreationExtensions : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun getStreamsToHostWithName_port_inputStream_outputStream(hostname: NSString, port: Int, inputStream: Pointer<NSInputStream>, outputStream: Pointer<NSOutputStream>): Unit {
            Native.objc_msgSend("void", this, "getStreamsToHostWithName:port:inputStream:outputStream:", hostname, port, inputStream, outputStream)
        }

        public open fun getStreamsToHost_port_inputStream_outputStream(host: NSHost, port: Int, inputStream: Pointer<NSInputStream>, outputStream: Pointer<NSOutputStream>): Unit {
            Native.objc_msgSend("void", this, "getStreamsToHost:port:inputStream:outputStream:", host, port, inputStream, outputStream)
        }
    }
}

trait NSStream_NSStreamBoundPairCreationExtensions : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun getBoundStreamsWithBufferSize_inputStream_outputStream(bufferSize: Int, inputStream: Pointer<NSInputStream>, outputStream: Pointer<NSOutputStream>): Unit {
            Native.objc_msgSend("void", this, "getBoundStreamsWithBufferSize:inputStream:outputStream:", bufferSize, inputStream, outputStream)
        }
    }
}

trait NSInputStream_NSInputStreamExtensions : IObjCObject {
    public open fun initWithFileAtPath(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithFileAtPath:", path) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun inputStreamWithData(data: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "inputStreamWithData:", data) as ObjCObject

        public open fun inputStreamWithFileAtPath(path: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "inputStreamWithFileAtPath:", path) as ObjCObject

        public open fun inputStreamWithURL(url: NSURL): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "inputStreamWithURL:", url) as ObjCObject
    }
}

trait NSOutputStream_NSOutputStreamExtensions : IObjCObject {
    public open fun initToFileAtPath_append(path: NSString, shouldAppend: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initToFileAtPath:append:", path, shouldAppend) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun outputStreamToMemory(): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "outputStreamToMemory") as ObjCObject

        public open fun outputStreamToBuffer_capacity(buffer: Pointer<Byte>, capacity: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "outputStreamToBuffer:capacity:", buffer, capacity) as ObjCObject

        public open fun outputStreamToFileAtPath_append(path: NSString, shouldAppend: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "outputStreamToFileAtPath:append:", path, shouldAppend) as ObjCObject

        public open fun outputStreamWithURL_append(url: NSURL, shouldAppend: Boolean): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "outputStreamWithURL:append:", url, shouldAppend) as ObjCObject
    }
}

trait NSObject_NSThreadPerformAdditions : IObjCObject {
    public open fun performSelectorOnMainThread_withObject_waitUntilDone_modes(aSelector: ObjCSelector, arg: ObjCObject, wait: Boolean, array: NSArray): Unit {
        Native.objc_msgSend("void", this, "performSelectorOnMainThread:withObject:waitUntilDone:modes:", aSelector, arg, wait, array)
    }

    public open fun performSelectorOnMainThread_withObject_waitUntilDone(aSelector: ObjCSelector, arg: ObjCObject, wait: Boolean): Unit {
        Native.objc_msgSend("void", this, "performSelectorOnMainThread:withObject:waitUntilDone:", aSelector, arg, wait)
    }

    public open fun performSelector_onThread_withObject_waitUntilDone_modes(aSelector: ObjCSelector, thr: NSThread, arg: ObjCObject, wait: Boolean, array: NSArray): Unit {
        Native.objc_msgSend("void", this, "performSelector:onThread:withObject:waitUntilDone:modes:", aSelector, thr, arg, wait, array)
    }

    public open fun performSelector_onThread_withObject_waitUntilDone(aSelector: ObjCSelector, thr: NSThread, arg: ObjCObject, wait: Boolean): Unit {
        Native.objc_msgSend("void", this, "performSelector:onThread:withObject:waitUntilDone:", aSelector, thr, arg, wait)
    }

    public open fun performSelectorInBackground_withObject(aSelector: ObjCSelector, arg: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performSelectorInBackground:withObject:", aSelector, arg)
    }

    trait metaclass : IObjCObject
}

trait NSTimeZone_NSExtendedTimeZone : IObjCObject {
    public open fun secondsFromGMT(): Int =
        Native.objc_msgSend("int", this, "secondsFromGMT") as Int

    public open fun abbreviation(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "abbreviation") as NSString

    public open fun isDaylightSavingTime(): Boolean =
        Native.objc_msgSend("boolean", this, "isDaylightSavingTime") as Boolean

    public open fun daylightSavingTimeOffset(): Double =
        Native.objc_msgSend("double", this, "daylightSavingTimeOffset") as Double

    public open fun nextDaylightSavingTimeTransition(): NSDate =
        Native.objc_msgSend("class objc.NSDate", this, "nextDaylightSavingTimeTransition") as NSDate

    public open fun description(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "description") as NSString

    public open fun isEqualToTimeZone(aTimeZone: NSTimeZone): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToTimeZone:", aTimeZone) as Boolean

    public open fun localizedName_locale(style: Any, locale: NSLocale): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedName:locale:", style, locale) as NSString

    trait metaclass : IObjCObject {
        public open fun systemTimeZone(): NSTimeZone =
            Native.objc_msgSend("class objc.NSTimeZone", this, "systemTimeZone") as NSTimeZone

        public open fun resetSystemTimeZone(): Unit {
            Native.objc_msgSend("void", this, "resetSystemTimeZone")
        }

        public open fun defaultTimeZone(): NSTimeZone =
            Native.objc_msgSend("class objc.NSTimeZone", this, "defaultTimeZone") as NSTimeZone

        public open fun setDefaultTimeZone(aTimeZone: NSTimeZone): Unit {
            Native.objc_msgSend("void", this, "setDefaultTimeZone:", aTimeZone)
        }

        public open fun localTimeZone(): NSTimeZone =
            Native.objc_msgSend("class objc.NSTimeZone", this, "localTimeZone") as NSTimeZone

        public open fun knownTimeZoneNames(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "knownTimeZoneNames") as NSArray

        public open fun abbreviationDictionary(): NSDictionary =
            Native.objc_msgSend("class objc.NSDictionary", this, "abbreviationDictionary") as NSDictionary

        public open fun setAbbreviationDictionary(dict: NSDictionary): Unit {
            Native.objc_msgSend("void", this, "setAbbreviationDictionary:", dict)
        }

        public open fun timeZoneDataVersion(): NSString =
            Native.objc_msgSend("class objc.NSString", this, "timeZoneDataVersion") as NSString
    }
}

trait NSTimeZone_NSTimeZoneCreation : IObjCObject {
    public open fun initWithName(tzName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:", tzName) as ObjCObject

    public open fun initWithName_data(tzName: NSString, aData: NSData): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithName:data:", tzName, aData) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun timeZoneWithName(tzName: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "timeZoneWithName:", tzName) as ObjCObject

        public open fun timeZoneWithName_data(tzName: NSString, aData: NSData): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "timeZoneWithName:data:", tzName, aData) as ObjCObject

        public open fun timeZoneForSecondsFromGMT(seconds: Int): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "timeZoneForSecondsFromGMT:", seconds) as ObjCObject

        public open fun timeZoneWithAbbreviation(abbreviation: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "timeZoneWithAbbreviation:", abbreviation) as ObjCObject
    }
}

trait NSURL_NSPromisedItems : IObjCObject {
    public open fun getPromisedItemResourceValue_forKey_error(value: Pointer<ObjCObject>, key: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "getPromisedItemResourceValue:forKey:error:", value, key, error) as Boolean

    public open fun promisedItemResourceValuesForKeys_error(keys: NSArray, error: Pointer<NSError>): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "promisedItemResourceValuesForKeys:error:", keys, error) as NSDictionary

    public open fun checkPromisedItemIsReachableAndReturnError(error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "checkPromisedItemIsReachableAndReturnError:", error) as Boolean

    trait metaclass : IObjCObject
}

trait NSCharacterSet_NSURLUtilities : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun URLUserAllowedCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "URLUserAllowedCharacterSet") as NSCharacterSet

        public open fun URLPasswordAllowedCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "URLPasswordAllowedCharacterSet") as NSCharacterSet

        public open fun URLHostAllowedCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "URLHostAllowedCharacterSet") as NSCharacterSet

        public open fun URLPathAllowedCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "URLPathAllowedCharacterSet") as NSCharacterSet

        public open fun URLQueryAllowedCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "URLQueryAllowedCharacterSet") as NSCharacterSet

        public open fun URLFragmentAllowedCharacterSet(): NSCharacterSet =
            Native.objc_msgSend("class objc.NSCharacterSet", this, "URLFragmentAllowedCharacterSet") as NSCharacterSet
    }
}

trait NSString_NSURLUtilities : IObjCObject {
    public open fun stringByAddingPercentEncodingWithAllowedCharacters(allowedCharacters: NSCharacterSet): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByAddingPercentEncodingWithAllowedCharacters:", allowedCharacters) as NSString

    public open fun stringByRemovingPercentEncoding(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByRemovingPercentEncoding") as NSString

    public open fun stringByAddingPercentEscapesUsingEncoding(enc: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByAddingPercentEscapesUsingEncoding:", enc) as NSString

    public open fun stringByReplacingPercentEscapesUsingEncoding(enc: Int): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringByReplacingPercentEscapesUsingEncoding:", enc) as NSString

    trait metaclass : IObjCObject
}

trait NSURL_NSURLPathUtilities : IObjCObject {
    public open fun pathComponents(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pathComponents") as NSArray

    public open fun lastPathComponent(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "lastPathComponent") as NSString

    public open fun pathExtension(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathExtension") as NSString

    public open fun URLByAppendingPathComponent(pathComponent: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLByAppendingPathComponent:", pathComponent) as NSURL

    public open fun URLByAppendingPathComponent_isDirectory(pathComponent: NSString, isDirectory: Boolean): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLByAppendingPathComponent:isDirectory:", pathComponent, isDirectory) as NSURL

    public open fun URLByDeletingLastPathComponent(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLByDeletingLastPathComponent") as NSURL

    public open fun URLByAppendingPathExtension(pathExtension: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLByAppendingPathExtension:", pathExtension) as NSURL

    public open fun URLByDeletingPathExtension(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLByDeletingPathExtension") as NSURL

    public open fun URLByStandardizingPath(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLByStandardizingPath") as NSURL

    public open fun URLByResolvingSymlinksInPath(): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLByResolvingSymlinksInPath") as NSURL

    trait metaclass : IObjCObject {
        public open fun fileURLWithPathComponents(components: NSArray): NSURL =
            Native.objc_msgSend("class objc.NSURL", this, "fileURLWithPathComponents:", components) as NSURL
    }
}

trait NSObject_NSURLClient : IObjCObject {
    public open fun URL_resourceDataDidBecomeAvailable(sender: NSURL, newBytes: NSData): Unit {
        Native.objc_msgSend("void", this, "URL:resourceDataDidBecomeAvailable:", sender, newBytes)
    }

    public open fun URLResourceDidFinishLoading(sender: NSURL): Unit {
        Native.objc_msgSend("void", this, "URLResourceDidFinishLoading:", sender)
    }

    public open fun URLResourceDidCancelLoading(sender: NSURL): Unit {
        Native.objc_msgSend("void", this, "URLResourceDidCancelLoading:", sender)
    }

    public open fun URL_resourceDidFailLoadingWithReason(sender: NSURL, reason: NSString): Unit {
        Native.objc_msgSend("void", this, "URL:resourceDidFailLoadingWithReason:", sender, reason)
    }

    trait metaclass : IObjCObject
}

trait NSURL_NSURLLoading : IObjCObject {
    public open fun resourceDataUsingCache(shouldUseCache: Boolean): NSData =
        Native.objc_msgSend("class objc.NSData", this, "resourceDataUsingCache:", shouldUseCache) as NSData

    public open fun loadResourceDataNotifyingClient_usingCache(client: ObjCObject, shouldUseCache: Boolean): Unit {
        Native.objc_msgSend("void", this, "loadResourceDataNotifyingClient:usingCache:", client, shouldUseCache)
    }

    public open fun propertyForKey(propertyKey: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "propertyForKey:", propertyKey) as ObjCObject

    public open fun setResourceData(data: NSData): Boolean =
        Native.objc_msgSend("boolean", this, "setResourceData:", data) as Boolean

    public open fun setProperty_forKey(property: ObjCObject, propertyKey: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "setProperty:forKey:", property, propertyKey) as Boolean

    public open fun URLHandleUsingCache(shouldUseCache: Boolean): NSURLHandle =
        Native.objc_msgSend("class objc.NSURLHandle", this, "URLHandleUsingCache:", shouldUseCache) as NSURLHandle

    trait metaclass : IObjCObject
}

trait NSURLCache_NSURLSessionTaskAdditions : IObjCObject {
    public open fun storeCachedResponse_forDataTask(cachedResponse: NSCachedURLResponse, dataTask: NSURLSessionDataTask): Unit {
        Native.objc_msgSend("void", this, "storeCachedResponse:forDataTask:", cachedResponse, dataTask)
    }

    public open fun getCachedResponseForDataTask_completionHandler(dataTask: NSURLSessionDataTask, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "getCachedResponseForDataTask:completionHandler:", dataTask, completionHandler)
    }

    public open fun removeCachedResponseForDataTask(dataTask: NSURLSessionDataTask): Unit {
        Native.objc_msgSend("void", this, "removeCachedResponseForDataTask:", dataTask)
    }

    trait metaclass : IObjCObject
}

trait NSURLConnection_NSURLConnectionSynchronousLoading : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun sendSynchronousRequest_returningResponse_error(request: NSURLRequest, response: Pointer<NSURLResponse>, error: Pointer<NSError>): NSData =
            Native.objc_msgSend("class objc.NSData", this, "sendSynchronousRequest:returningResponse:error:", request, response, error) as NSData
    }
}

trait NSURLConnection_NSURLConnectionQueuedLoading : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun sendAsynchronousRequest_queue_completionHandler(request: NSURLRequest, queue: NSOperationQueue, handler: Any): Unit {
            Native.objc_msgSend("void", this, "sendAsynchronousRequest:queue:completionHandler:", request, queue, handler)
        }
    }
}

trait NSURLCredential_NSInternetPassword : IObjCObject {
    public open fun initWithUser_password_persistence(user: NSString, password: NSString, persistence: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithUser:password:persistence:", user, password, persistence) as ObjCObject

    public open fun user(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "user") as NSString

    public open fun password(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "password") as NSString

    public open fun hasPassword(): Boolean =
        Native.objc_msgSend("boolean", this, "hasPassword") as Boolean

    trait metaclass : IObjCObject {
        public open fun credentialWithUser_password_persistence(user: NSString, password: NSString, persistence: Any): NSURLCredential =
            Native.objc_msgSend("class objc.NSURLCredential", this, "credentialWithUser:password:persistence:", user, password, persistence) as NSURLCredential
    }
}

trait NSURLCredential_NSClientCertificate : IObjCObject {
    public open fun initWithIdentity_certificates_persistence(identity: Pointer<Any>, certArray: NSArray, persistence: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithIdentity:certificates:persistence:", identity, certArray, persistence) as ObjCObject

    public open fun identity(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "identity") as Pointer<Any>

    public open fun certificates(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "certificates") as NSArray

    trait metaclass : IObjCObject {
        public open fun credentialWithIdentity_certificates_persistence(identity: Pointer<Any>, certArray: NSArray, persistence: Any): NSURLCredential =
            Native.objc_msgSend("class objc.NSURLCredential", this, "credentialWithIdentity:certificates:persistence:", identity, certArray, persistence) as NSURLCredential
    }
}

trait NSURLCredential_NSServerTrust : IObjCObject {
    public open fun initWithTrust(trust: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTrust:", trust) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun credentialForTrust(trust: Pointer<Any>): NSURLCredential =
            Native.objc_msgSend("class objc.NSURLCredential", this, "credentialForTrust:", trust) as NSURLCredential
    }
}

trait NSURLCredentialStorage_NSURLSessionTaskAdditions : IObjCObject {
    public open fun getCredentialsForProtectionSpace_task_completionHandler(protectionSpace: NSURLProtectionSpace, task: NSURLSessionTask, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "getCredentialsForProtectionSpace:task:completionHandler:", protectionSpace, task, completionHandler)
    }

    public open fun setCredential_forProtectionSpace_task(credential: NSURLCredential, protectionSpace: NSURLProtectionSpace, task: NSURLSessionTask): Unit {
        Native.objc_msgSend("void", this, "setCredential:forProtectionSpace:task:", credential, protectionSpace, task)
    }

    public open fun removeCredential_forProtectionSpace_options_task(credential: NSURLCredential, protectionSpace: NSURLProtectionSpace, options: NSDictionary, task: NSURLSessionTask): Unit {
        Native.objc_msgSend("void", this, "removeCredential:forProtectionSpace:options:task:", credential, protectionSpace, options, task)
    }

    public open fun getDefaultCredentialForProtectionSpace_task_completionHandler(space: NSURLProtectionSpace, task: NSURLSessionTask, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "getDefaultCredentialForProtectionSpace:task:completionHandler:", space, task, completionHandler)
    }

    public open fun setDefaultCredential_forProtectionSpace_task(credential: NSURLCredential, protectionSpace: NSURLProtectionSpace, task: NSURLSessionTask): Unit {
        Native.objc_msgSend("void", this, "setDefaultCredential:forProtectionSpace:task:", credential, protectionSpace, task)
    }

    trait metaclass : IObjCObject
}

trait NSURLProtectionSpace_NSClientCertificateSpace : IObjCObject {
    public open fun distinguishedNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "distinguishedNames") as NSArray

    trait metaclass : IObjCObject
}

trait NSURLProtectionSpace_NSServerTrustValidationSpace : IObjCObject {
    public open fun serverTrust(): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "serverTrust") as Pointer<Any>

    trait metaclass : IObjCObject
}

trait NSURLProtocol_NSURLSessionTaskAdditions : IObjCObject {
    public open fun initWithTask_cachedResponse_client(task: NSURLSessionTask, cachedResponse: NSCachedURLResponse, client: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTask:cachedResponse:client:", task, cachedResponse, client) as ObjCObject

    public open fun task(): NSURLSessionTask =
        Native.objc_msgSend("class objc.NSURLSessionTask", this, "task") as NSURLSessionTask

    trait metaclass : IObjCObject {
        public open fun canInitWithTask(task: NSURLSessionTask): Boolean =
            Native.objc_msgSend("boolean", this, "canInitWithTask:", task) as Boolean
    }
}

trait NSURLRequest_NSHTTPURLRequest : IObjCObject {
    public open fun HTTPMethod(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "HTTPMethod") as NSString

    public open fun allHTTPHeaderFields(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "allHTTPHeaderFields") as NSDictionary

    public open fun valueForHTTPHeaderField(field: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "valueForHTTPHeaderField:", field) as NSString

    public open fun HTTPBody(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "HTTPBody") as NSData

    public open fun HTTPBodyStream(): NSInputStream =
        Native.objc_msgSend("class objc.NSInputStream", this, "HTTPBodyStream") as NSInputStream

    public open fun HTTPShouldHandleCookies(): Boolean =
        Native.objc_msgSend("boolean", this, "HTTPShouldHandleCookies") as Boolean

    public open fun HTTPShouldUsePipelining(): Boolean =
        Native.objc_msgSend("boolean", this, "HTTPShouldUsePipelining") as Boolean

    trait metaclass : IObjCObject
}

trait NSMutableURLRequest_NSMutableHTTPURLRequest : IObjCObject {
    public open fun HTTPMethod(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "HTTPMethod") as NSString

    public open fun setHTTPMethod(HTTPMethod: NSString): Unit {
        Native.objc_msgSend("void", this, "setHTTPMethod:", HTTPMethod)
    }

    public open fun allHTTPHeaderFields(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "allHTTPHeaderFields") as NSDictionary

    public open fun setAllHTTPHeaderFields(allHTTPHeaderFields: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setAllHTTPHeaderFields:", allHTTPHeaderFields)
    }

    public open fun setValue_forHTTPHeaderField(value: NSString, field: NSString): Unit {
        Native.objc_msgSend("void", this, "setValue:forHTTPHeaderField:", value, field)
    }

    public open fun addValue_forHTTPHeaderField(value: NSString, field: NSString): Unit {
        Native.objc_msgSend("void", this, "addValue:forHTTPHeaderField:", value, field)
    }

    public open fun HTTPBody(): NSData =
        Native.objc_msgSend("class objc.NSData", this, "HTTPBody") as NSData

    public open fun setHTTPBody(HTTPBody: NSData): Unit {
        Native.objc_msgSend("void", this, "setHTTPBody:", HTTPBody)
    }

    public open fun HTTPBodyStream(): NSInputStream =
        Native.objc_msgSend("class objc.NSInputStream", this, "HTTPBodyStream") as NSInputStream

    public open fun setHTTPBodyStream(HTTPBodyStream: NSInputStream): Unit {
        Native.objc_msgSend("void", this, "setHTTPBodyStream:", HTTPBodyStream)
    }

    public open fun HTTPShouldHandleCookies(): Boolean =
        Native.objc_msgSend("boolean", this, "HTTPShouldHandleCookies") as Boolean

    public open fun setHTTPShouldHandleCookies(HTTPShouldHandleCookies: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHTTPShouldHandleCookies:", HTTPShouldHandleCookies)
    }

    public open fun HTTPShouldUsePipelining(): Boolean =
        Native.objc_msgSend("boolean", this, "HTTPShouldUsePipelining") as Boolean

    public open fun setHTTPShouldUsePipelining(HTTPShouldUsePipelining: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHTTPShouldUsePipelining:", HTTPShouldUsePipelining)
    }

    trait metaclass : IObjCObject
}

trait NSXMLParser_NSXMLParserLocatorAdditions : IObjCObject {
    public open fun publicID(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "publicID") as NSString

    public open fun systemID(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "systemID") as NSString

    public open fun lineNumber(): Int =
        Native.objc_msgSend("int", this, "lineNumber") as Int

    public open fun columnNumber(): Int =
        Native.objc_msgSend("int", this, "columnNumber") as Int

    trait metaclass : IObjCObject
}

trait NSAttributedString_NSExtendedAttributedString : IObjCObject {
    public open fun length(): Int =
        Native.objc_msgSend("int", this, "length") as Int

    public open fun attribute_atIndex_effectiveRange(attrName: NSString, location: Int, range: Pointer<Any>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "attribute:atIndex:effectiveRange:", attrName, location, range) as ObjCObject

    public open fun attributedSubstringFromRange(range: Any): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedSubstringFromRange:", range) as NSAttributedString

    public open fun attributesAtIndex_longestEffectiveRange_inRange(location: Int, range: Pointer<Any>, rangeLimit: Any): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "attributesAtIndex:longestEffectiveRange:inRange:", location, range, rangeLimit) as NSDictionary

    public open fun attribute_atIndex_longestEffectiveRange_inRange(attrName: NSString, location: Int, range: Pointer<Any>, rangeLimit: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "attribute:atIndex:longestEffectiveRange:inRange:", attrName, location, range, rangeLimit) as ObjCObject

    public open fun isEqualToAttributedString(other: NSAttributedString): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualToAttributedString:", other) as Boolean

    public open fun initWithString(str: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", str) as ObjCObject

    public open fun initWithString_attributes(str: NSString, attrs: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:attributes:", str, attrs) as ObjCObject

    public open fun initWithAttributedString(attrStr: NSAttributedString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithAttributedString:", attrStr) as ObjCObject

    public open fun enumerateAttributesInRange_options_usingBlock(enumerationRange: Any, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateAttributesInRange:options:usingBlock:", enumerationRange, opts, block)
    }

    public open fun enumerateAttribute_inRange_options_usingBlock(attrName: NSString, enumerationRange: Any, opts: Any, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateAttribute:inRange:options:usingBlock:", attrName, enumerationRange, opts, block)
    }

    trait metaclass : IObjCObject
}

trait NSMutableAttributedString_NSExtendedMutableAttributedString : IObjCObject {
    public open fun mutableString(): NSMutableString =
        Native.objc_msgSend("class objc.NSMutableString", this, "mutableString") as NSMutableString

    public open fun addAttribute_value_range(name: NSString, value: ObjCObject, range: Any): Unit {
        Native.objc_msgSend("void", this, "addAttribute:value:range:", name, value, range)
    }

    public open fun addAttributes_range(attrs: NSDictionary, range: Any): Unit {
        Native.objc_msgSend("void", this, "addAttributes:range:", attrs, range)
    }

    public open fun removeAttribute_range(name: NSString, range: Any): Unit {
        Native.objc_msgSend("void", this, "removeAttribute:range:", name, range)
    }

    public open fun replaceCharactersInRange_withAttributedString(range: Any, attrString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "replaceCharactersInRange:withAttributedString:", range, attrString)
    }

    public open fun insertAttributedString_atIndex(attrString: NSAttributedString, loc: Int): Unit {
        Native.objc_msgSend("void", this, "insertAttributedString:atIndex:", attrString, loc)
    }

    public open fun appendAttributedString(attrString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "appendAttributedString:", attrString)
    }

    public open fun deleteCharactersInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "deleteCharactersInRange:", range)
    }

    public open fun setAttributedString(attrString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedString:", attrString)
    }

    public open fun beginEditing(): Unit {
        Native.objc_msgSend("void", this, "beginEditing")
    }

    public open fun endEditing(): Unit {
        Native.objc_msgSend("void", this, "endEditing")
    }

    trait metaclass : IObjCObject
}

trait NSArray_NSPredicateSupport : IObjCObject {
    public open fun filteredArrayUsingPredicate(predicate: NSPredicate): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "filteredArrayUsingPredicate:", predicate) as NSArray

    trait metaclass : IObjCObject
}

trait NSMutableArray_NSPredicateSupport : IObjCObject {
    public open fun filterUsingPredicate(predicate: NSPredicate): Unit {
        Native.objc_msgSend("void", this, "filterUsingPredicate:", predicate)
    }

    trait metaclass : IObjCObject
}

trait NSSet_NSPredicateSupport : IObjCObject {
    public open fun filteredSetUsingPredicate(predicate: NSPredicate): NSSet =
        Native.objc_msgSend("class objc.NSSet", this, "filteredSetUsingPredicate:", predicate) as NSSet

    trait metaclass : IObjCObject
}

trait NSMutableSet_NSPredicateSupport : IObjCObject {
    public open fun filterUsingPredicate(predicate: NSPredicate): Unit {
        Native.objc_msgSend("void", this, "filterUsingPredicate:", predicate)
    }

    trait metaclass : IObjCObject
}

trait NSOrderedSet_NSPredicateSupport : IObjCObject {
    public open fun filteredOrderedSetUsingPredicate(p: NSPredicate): NSOrderedSet =
        Native.objc_msgSend("class objc.NSOrderedSet", this, "filteredOrderedSetUsingPredicate:", p) as NSOrderedSet

    trait metaclass : IObjCObject
}

trait NSMutableOrderedSet_NSPredicateSupport : IObjCObject {
    public open fun filterUsingPredicate(p: NSPredicate): Unit {
        Native.objc_msgSend("void", this, "filterUsingPredicate:", p)
    }

    trait metaclass : IObjCObject
}

trait NSItemProvider_NSPreviewSupport : IObjCObject {
    public open fun previewImageHandler(): Any =
        Native.objc_msgSend("class objc.Any", this, "previewImageHandler")

    public open fun setPreviewImageHandler(previewImageHandler: Any): Unit {
        Native.objc_msgSend("void", this, "setPreviewImageHandler:", previewImageHandler)
    }

    public open fun loadPreviewImageWithOptions_completionHandler(options: NSDictionary, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "loadPreviewImageWithOptions:completionHandler:", options, completionHandler)
    }

    trait metaclass : IObjCObject
}

trait NSFileWrapper_NSDeprecated : IObjCObject {
    public open fun initWithPath(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPath:", path) as ObjCObject

    public open fun initSymbolicLinkWithDestination(path: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initSymbolicLinkWithDestination:", path) as ObjCObject

    public open fun needsToBeUpdatedFromPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "needsToBeUpdatedFromPath:", path) as Boolean

    public open fun updateFromPath(path: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "updateFromPath:", path) as Boolean

    public open fun writeToFile_atomically_updateFilenames(path: NSString, atomicFlag: Boolean, updateFilenamesFlag: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:atomically:updateFilenames:", path, atomicFlag, updateFilenamesFlag) as Boolean

    public open fun addFileWithPath(path: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "addFileWithPath:", path) as NSString

    public open fun addSymbolicLinkWithDestination_preferredFilename(path: NSString, filename: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "addSymbolicLinkWithDestination:preferredFilename:", path, filename) as NSString

    public open fun symbolicLinkDestination(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "symbolicLinkDestination") as NSString

    trait metaclass : IObjCObject
}

trait NSString_NSLinguisticAnalysis : IObjCObject {
    public open fun linguisticTagsInRange_scheme_options_orthography_tokenRanges(range: Any, tagScheme: NSString, opts: Any, orthography: NSOrthography, tokenRanges: Pointer<NSArray>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "linguisticTagsInRange:scheme:options:orthography:tokenRanges:", range, tagScheme, opts, orthography, tokenRanges) as NSArray

    public open fun enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock(range: Any, tagScheme: NSString, opts: Any, orthography: NSOrthography, block: Any): Unit {
        Native.objc_msgSend("void", this, "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:", range, tagScheme, opts, orthography, block)
    }

    trait metaclass : IObjCObject
}

trait NSNetService_NSDeprecated : IObjCObject {
    public open fun protocolSpecificInformation(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "protocolSpecificInformation") as NSString

    public open fun setProtocolSpecificInformation(specificInformation: NSString): Unit {
        Native.objc_msgSend("void", this, "setProtocolSpecificInformation:", specificInformation)
    }

    trait metaclass : IObjCObject
}

trait NSNetServiceBrowser_NSDeprecated : IObjCObject {
    public open fun searchForAllDomains(): Unit {
        Native.objc_msgSend("void", this, "searchForAllDomains")
    }

    trait metaclass : IObjCObject
}

trait NSURLSession_NSURLSessionAsynchronousConvenience : IObjCObject {
    public open fun dataTaskWithRequest_completionHandler(request: NSURLRequest, completionHandler: Any): NSURLSessionDataTask =
        Native.objc_msgSend("class objc.NSURLSessionDataTask", this, "dataTaskWithRequest:completionHandler:", request, completionHandler) as NSURLSessionDataTask

    public open fun dataTaskWithURL_completionHandler(url: NSURL, completionHandler: Any): NSURLSessionDataTask =
        Native.objc_msgSend("class objc.NSURLSessionDataTask", this, "dataTaskWithURL:completionHandler:", url, completionHandler) as NSURLSessionDataTask

    public open fun uploadTaskWithRequest_fromFile_completionHandler(request: NSURLRequest, fileURL: NSURL, completionHandler: Any): NSURLSessionUploadTask =
        Native.objc_msgSend("class objc.NSURLSessionUploadTask", this, "uploadTaskWithRequest:fromFile:completionHandler:", request, fileURL, completionHandler) as NSURLSessionUploadTask

    public open fun uploadTaskWithRequest_fromData_completionHandler(request: NSURLRequest, bodyData: NSData, completionHandler: Any): NSURLSessionUploadTask =
        Native.objc_msgSend("class objc.NSURLSessionUploadTask", this, "uploadTaskWithRequest:fromData:completionHandler:", request, bodyData, completionHandler) as NSURLSessionUploadTask

    public open fun downloadTaskWithRequest_completionHandler(request: NSURLRequest, completionHandler: Any): NSURLSessionDownloadTask =
        Native.objc_msgSend("class objc.NSURLSessionDownloadTask", this, "downloadTaskWithRequest:completionHandler:", request, completionHandler) as NSURLSessionDownloadTask

    public open fun downloadTaskWithURL_completionHandler(url: NSURL, completionHandler: Any): NSURLSessionDownloadTask =
        Native.objc_msgSend("class objc.NSURLSessionDownloadTask", this, "downloadTaskWithURL:completionHandler:", url, completionHandler) as NSURLSessionDownloadTask

    public open fun downloadTaskWithResumeData_completionHandler(resumeData: NSData, completionHandler: Any): NSURLSessionDownloadTask =
        Native.objc_msgSend("class objc.NSURLSessionDownloadTask", this, "downloadTaskWithResumeData:completionHandler:", resumeData, completionHandler) as NSURLSessionDownloadTask

    trait metaclass : IObjCObject
}

trait NSURLSession_NSURLSessionDeprecated : IObjCObject {
    public open fun dataTaskWithHTTPGetRequest(url: NSURL): NSURLSessionDataTask =
        Native.objc_msgSend("class objc.NSURLSessionDataTask", this, "dataTaskWithHTTPGetRequest:", url) as NSURLSessionDataTask

    public open fun dataTaskWithHTTPGetRequest_completionHandler(url: NSURL, completionHandler: Any): NSURLSessionDataTask =
        Native.objc_msgSend("class objc.NSURLSessionDataTask", this, "dataTaskWithHTTPGetRequest:completionHandler:", url, completionHandler) as NSURLSessionDataTask

    trait metaclass : IObjCObject
}

trait NSURLSessionConfiguration_NSURLSessionDeprecated : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun backgroundSessionConfiguration(identifier: NSString): NSURLSessionConfiguration =
            Native.objc_msgSend("class objc.NSURLSessionConfiguration", this, "backgroundSessionConfiguration:", identifier) as NSURLSessionConfiguration
    }
}

trait NSObject_NSArchiverCallback : IObjCObject {
    public open fun classForArchiver(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "classForArchiver") as ObjCClass

    public open fun replacementObjectForArchiver(archiver: NSArchiver): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "replacementObjectForArchiver:", archiver) as ObjCObject

    trait metaclass : IObjCObject
}

trait NSDate_NSCalendarDateExtras : IObjCObject {
    public open fun dateWithCalendarFormat_timeZone(format: NSString, aTimeZone: NSTimeZone): NSCalendarDate =
        Native.objc_msgSend("class objc.NSCalendarDate", this, "dateWithCalendarFormat:timeZone:", format, aTimeZone) as NSCalendarDate

    public open fun descriptionWithCalendarFormat_timeZone_locale(format: NSString, aTimeZone: NSTimeZone, locale: ObjCObject): NSString =
        Native.objc_msgSend("class objc.NSString", this, "descriptionWithCalendarFormat:timeZone:locale:", format, aTimeZone, locale) as NSString

    public open fun initWithString(description: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithString:", description) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun dateWithNaturalLanguageString_locale(string: NSString, locale: ObjCObject): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithNaturalLanguageString:locale:", string, locale) as ObjCObject

        public open fun dateWithNaturalLanguageString(string: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithNaturalLanguageString:", string) as ObjCObject

        public open fun dateWithString(aString: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "dateWithString:", aString) as ObjCObject
    }
}

trait NSObject_NSDistributedObjects : IObjCObject {
    public open fun classForPortCoder(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "classForPortCoder") as ObjCClass

    public open fun replacementObjectForPortCoder(coder: NSPortCoder): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "replacementObjectForPortCoder:", coder) as ObjCObject

    trait metaclass : IObjCObject
}

trait NSProtocolChecker_NSProtocolCheckerCreation : IObjCObject {
    public open fun initWithTarget_protocol(anObject: NSObject, aProtocol: Any?): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithTarget:protocol:", anObject, aProtocol) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun protocolCheckerWithTarget_protocol(anObject: NSObject, aProtocol: Any?): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "protocolCheckerWithTarget:protocol:", anObject, aProtocol) as ObjCObject
    }
}

trait NSTask_NSTaskConveniences : IObjCObject {
    public open fun waitUntilExit(): Unit {
        Native.objc_msgSend("void", this, "waitUntilExit")
    }

    trait metaclass : IObjCObject {
        public open fun launchedTaskWithLaunchPath_arguments(path: NSString, arguments: NSArray): NSTask =
            Native.objc_msgSend("class objc.NSTask", this, "launchedTaskWithLaunchPath:arguments:", path, arguments) as NSTask
    }
}

trait NSXMLElement_NSDeprecated : IObjCObject {
    public open fun setAttributesAsDictionary(attributes: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setAttributesAsDictionary:", attributes)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSClassDescriptionPrimitives : IObjCObject {
    public open fun classDescription(): NSClassDescription =
        Native.objc_msgSend("class objc.NSClassDescription", this, "classDescription") as NSClassDescription

    public open fun attributeKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "attributeKeys") as NSArray

    public open fun toOneRelationshipKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toOneRelationshipKeys") as NSArray

    public open fun toManyRelationshipKeys(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "toManyRelationshipKeys") as NSArray

    public open fun inverseForRelationshipKey(relationshipKey: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "inverseForRelationshipKey:", relationshipKey) as NSString

    trait metaclass : IObjCObject
}

trait NSObject_NSScripting : IObjCObject {
    public open fun scriptingValueForSpecifier(objectSpecifier: NSScriptObjectSpecifier): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "scriptingValueForSpecifier:", objectSpecifier) as ObjCObject

    public open fun scriptingProperties(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "scriptingProperties") as NSDictionary

    public open fun setScriptingProperties(scriptingProperties: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setScriptingProperties:", scriptingProperties)
    }

    public open fun copyScriptingValue_forKey_withProperties(value: ObjCObject, key: NSString, properties: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "copyScriptingValue:forKey:withProperties:", value, key, properties) as ObjCObject

    public open fun newScriptingObjectOfClass_forValueForKey_withContentsValue_properties(objectClass: ObjCClass, key: NSString, contentsValue: ObjCObject, properties: NSDictionary): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:", objectClass, key, contentsValue, properties) as ObjCObject

    trait metaclass : IObjCObject
}

trait NSScriptClassDescription_NSDeprecated : IObjCObject {
    public open fun isReadOnlyKey(key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isReadOnlyKey:", key) as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSScriptClassDescription : IObjCObject {
    public open fun classCode(): Int =
        Native.objc_msgSend("int", this, "classCode") as Int

    public open fun className(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "className") as NSString

    trait metaclass : IObjCObject
}

trait NSObject_NSScriptKeyValueCoding : IObjCObject {
    public open fun valueAtIndex_inPropertyWithKey(index: Int, key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueAtIndex:inPropertyWithKey:", index, key) as ObjCObject

    public open fun valueWithName_inPropertyWithKey(name: NSString, key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueWithName:inPropertyWithKey:", name, key) as ObjCObject

    public open fun valueWithUniqueID_inPropertyWithKey(uniqueID: ObjCObject, key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueWithUniqueID:inPropertyWithKey:", uniqueID, key) as ObjCObject

    public open fun insertValue_atIndex_inPropertyWithKey(value: ObjCObject, index: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "insertValue:atIndex:inPropertyWithKey:", value, index, key)
    }

    public open fun removeValueAtIndex_fromPropertyWithKey(index: Int, key: NSString): Unit {
        Native.objc_msgSend("void", this, "removeValueAtIndex:fromPropertyWithKey:", index, key)
    }

    public open fun replaceValueAtIndex_inPropertyWithKey_withValue(index: Int, key: NSString, value: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "replaceValueAtIndex:inPropertyWithKey:withValue:", index, key, value)
    }

    public open fun insertValue_inPropertyWithKey(value: ObjCObject, key: NSString): Unit {
        Native.objc_msgSend("void", this, "insertValue:inPropertyWithKey:", value, key)
    }

    public open fun coerceValue_forKey(value: ObjCObject, key: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "coerceValue:forKey:", value, key) as ObjCObject

    trait metaclass : IObjCObject
}

trait NSObject_NSScriptObjectSpecifiers : IObjCObject {
    public open fun objectSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "objectSpecifier") as NSScriptObjectSpecifier

    public open fun indicesOfObjectsByEvaluatingObjectSpecifier(specifier: NSScriptObjectSpecifier): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "indicesOfObjectsByEvaluatingObjectSpecifier:", specifier) as NSArray

    trait metaclass : IObjCObject
}

trait NSObject_NSComparisonMethods : IObjCObject {
    public open fun isEqualTo(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isEqualTo:", `object`) as Boolean

    public open fun isLessThanOrEqualTo(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isLessThanOrEqualTo:", `object`) as Boolean

    public open fun isLessThan(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isLessThan:", `object`) as Boolean

    public open fun isGreaterThanOrEqualTo(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isGreaterThanOrEqualTo:", `object`) as Boolean

    public open fun isGreaterThan(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isGreaterThan:", `object`) as Boolean

    public open fun isNotEqualTo(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "isNotEqualTo:", `object`) as Boolean

    public open fun doesContain(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "doesContain:", `object`) as Boolean

    public open fun isLike(`object`: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isLike:", `object`) as Boolean

    public open fun isCaseInsensitiveLike(`object`: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isCaseInsensitiveLike:", `object`) as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSScriptingComparisonMethods : IObjCObject {
    public open fun scriptingIsEqualTo(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "scriptingIsEqualTo:", `object`) as Boolean

    public open fun scriptingIsLessThanOrEqualTo(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "scriptingIsLessThanOrEqualTo:", `object`) as Boolean

    public open fun scriptingIsLessThan(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "scriptingIsLessThan:", `object`) as Boolean

    public open fun scriptingIsGreaterThanOrEqualTo(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "scriptingIsGreaterThanOrEqualTo:", `object`) as Boolean

    public open fun scriptingIsGreaterThan(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "scriptingIsGreaterThan:", `object`) as Boolean

    public open fun scriptingBeginsWith(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "scriptingBeginsWith:", `object`) as Boolean

    public open fun scriptingEndsWith(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "scriptingEndsWith:", `object`) as Boolean

    public open fun scriptingContains(`object`: ObjCObject): Boolean =
        Native.objc_msgSend("boolean", this, "scriptingContains:", `object`) as Boolean

    trait metaclass : IObjCObject
}

trait NSGraphicsContext_NSGraphicsContext_RenderingOptions : IObjCObject {
    public open fun shouldAntialias(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldAntialias") as Boolean

    public open fun setShouldAntialias(shouldAntialias: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldAntialias:", shouldAntialias)
    }

    public open fun imageInterpolation(): Any =
        Native.objc_msgSend("class objc.Any", this, "imageInterpolation")

    public open fun setImageInterpolation(imageInterpolation: Any): Unit {
        Native.objc_msgSend("void", this, "setImageInterpolation:", imageInterpolation)
    }

    public open fun patternPhase(): Any =
        Native.objc_msgSend("class objc.Any", this, "patternPhase")

    public open fun setPatternPhase(patternPhase: Any): Unit {
        Native.objc_msgSend("void", this, "setPatternPhase:", patternPhase)
    }

    public open fun compositingOperation(): Any =
        Native.objc_msgSend("class objc.Any", this, "compositingOperation")

    public open fun setCompositingOperation(compositingOperation: Any): Unit {
        Native.objc_msgSend("void", this, "setCompositingOperation:", compositingOperation)
    }

    public open fun colorRenderingIntent(): Any =
        Native.objc_msgSend("class objc.Any", this, "colorRenderingIntent")

    public open fun setColorRenderingIntent(colorRenderingIntent: Any): Unit {
        Native.objc_msgSend("void", this, "setColorRenderingIntent:", colorRenderingIntent)
    }

    trait metaclass : IObjCObject
}

trait NSGraphicsContext_NSQuartzCoreAdditions : IObjCObject {
    public open fun CIContext(): CIContext =
        Native.objc_msgSend("class objc.CIContext", this, "CIContext") as CIContext

    trait metaclass : IObjCObject
}

trait NSGraphicsContext_NSGraphicsContextDeprecated : IObjCObject {
    public open fun focusStack(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "focusStack") as ObjCObject

    public open fun setFocusStack(stack: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setFocusStack:", stack)
    }

    public open fun graphicsPort(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "graphicsPort") as Pointer<*>

    trait metaclass : IObjCObject {
        public open fun setGraphicsState(gState: Int): Unit {
            Native.objc_msgSend("void", this, "setGraphicsState:", gState)
        }

        public open fun graphicsContextWithGraphicsPort_flipped(graphicsPort: Pointer<*>, initialFlippedState: Boolean): NSGraphicsContext =
            Native.objc_msgSend("class objc.NSGraphicsContext", this, "graphicsContextWithGraphicsPort:flipped:", graphicsPort, initialFlippedState) as NSGraphicsContext
    }
}

trait NSWorkspace_NSDesktopImages : IObjCObject {
    public open fun setDesktopImageURL_forScreen_options_error(url: NSURL, screen: NSScreen, options: NSDictionary, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "setDesktopImageURL:forScreen:options:error:", url, screen, options, error) as Boolean

    public open fun desktopImageURLForScreen(screen: NSScreen): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "desktopImageURLForScreen:", screen) as NSURL

    public open fun desktopImageOptionsForScreen(screen: NSScreen): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "desktopImageOptionsForScreen:", screen) as NSDictionary

    trait metaclass : IObjCObject
}

trait NSWorkspace_NSDeprecated : IObjCObject {
    public open fun openTempFile(fullPath: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "openTempFile:", fullPath) as Boolean

    public open fun findApplications(): Unit {
        Native.objc_msgSend("void", this, "findApplications")
    }

    public open fun noteUserDefaultsChanged(): Unit {
        Native.objc_msgSend("void", this, "noteUserDefaultsChanged")
    }

    public open fun slideImage_from_to(image: NSImage, fromPoint: Any, toPoint: Any): Unit {
        Native.objc_msgSend("void", this, "slideImage:from:to:", image, fromPoint, toPoint)
    }

    public open fun checkForRemovableMedia(): Unit {
        Native.objc_msgSend("void", this, "checkForRemovableMedia")
    }

    public open fun noteFileSystemChanged(): Unit {
        Native.objc_msgSend("void", this, "noteFileSystemChanged")
    }

    public open fun fileSystemChanged(): Boolean =
        Native.objc_msgSend("boolean", this, "fileSystemChanged") as Boolean

    public open fun userDefaultsChanged(): Boolean =
        Native.objc_msgSend("boolean", this, "userDefaultsChanged") as Boolean

    public open fun mountNewRemovableMedia(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "mountNewRemovableMedia") as NSArray

    public open fun activeApplication(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "activeApplication") as NSDictionary

    public open fun mountedLocalVolumePaths(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "mountedLocalVolumePaths") as NSArray

    public open fun mountedRemovableMedia(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "mountedRemovableMedia") as NSArray

    public open fun launchedApplications(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "launchedApplications") as NSArray

    trait metaclass : IObjCObject
}

trait NSObject_NSAccessibility : IObjCObject {
    public open fun accessibilityAttributeNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "accessibilityAttributeNames") as NSArray

    public open fun accessibilityAttributeValue(attribute: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "accessibilityAttributeValue:", attribute) as ObjCObject

    public open fun accessibilityIsAttributeSettable(attribute: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "accessibilityIsAttributeSettable:", attribute) as Boolean

    public open fun accessibilitySetValue_forAttribute(value: ObjCObject, attribute: NSString): Unit {
        Native.objc_msgSend("void", this, "accessibilitySetValue:forAttribute:", value, attribute)
    }

    public open fun accessibilityParameterizedAttributeNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "accessibilityParameterizedAttributeNames") as NSArray

    public open fun accessibilityAttributeValue_forParameter(attribute: NSString, parameter: ObjCObject): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "accessibilityAttributeValue:forParameter:", attribute, parameter) as ObjCObject

    public open fun accessibilityActionNames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "accessibilityActionNames") as NSArray

    public open fun accessibilityActionDescription(action: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "accessibilityActionDescription:", action) as NSString

    public open fun accessibilityPerformAction(action: NSString): Unit {
        Native.objc_msgSend("void", this, "accessibilityPerformAction:", action)
    }

    public open fun accessibilityIsIgnored(): Boolean =
        Native.objc_msgSend("boolean", this, "accessibilityIsIgnored") as Boolean

    public open fun accessibilityHitTest(point: Any): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "accessibilityHitTest:", point) as ObjCObject

    public open fun accessibilityFocusedUIElement(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "accessibilityFocusedUIElement") as ObjCObject

    public open fun accessibilityIndexOfChild(child: ObjCObject): Int =
        Native.objc_msgSend("int", this, "accessibilityIndexOfChild:", child) as Int

    public open fun accessibilityArrayAttributeCount(attribute: NSString): Int =
        Native.objc_msgSend("int", this, "accessibilityArrayAttributeCount:", attribute) as Int

    public open fun accessibilityArrayAttributeValues_index_maxCount(attribute: NSString, index: Int, maxCount: Int): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "accessibilityArrayAttributeValues:index:maxCount:", attribute, index, maxCount) as NSArray

    public open fun accessibilityNotifiesWhenDestroyed(): Boolean =
        Native.objc_msgSend("boolean", this, "accessibilityNotifiesWhenDestroyed") as Boolean

    trait metaclass : IObjCObject
}

trait NSWorkspace_NSWorkspaceAccessibilityDisplay : IObjCObject {
    public open fun accessibilityDisplayShouldIncreaseContrast(): Boolean =
        Native.objc_msgSend("boolean", this, "accessibilityDisplayShouldIncreaseContrast") as Boolean

    public open fun accessibilityDisplayShouldDifferentiateWithoutColor(): Boolean =
        Native.objc_msgSend("boolean", this, "accessibilityDisplayShouldDifferentiateWithoutColor") as Boolean

    public open fun accessibilityDisplayShouldReduceTransparency(): Boolean =
        Native.objc_msgSend("boolean", this, "accessibilityDisplayShouldReduceTransparency") as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSAccessibilityAdditions : IObjCObject {
    public open fun accessibilitySetOverrideValue_forAttribute(value: ObjCObject, attribute: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "accessibilitySetOverrideValue:forAttribute:", value, attribute) as Boolean

    trait metaclass : IObjCObject
}

trait NSResponder_NSStandardKeyBindingMethods : IObjCObject {
    public open fun insertText(insertString: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertText:", insertString)
    }

    public open fun doCommandBySelector(aSelector: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "doCommandBySelector:", aSelector)
    }

    public open fun moveForward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveForward:", sender)
    }

    public open fun moveRight(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveRight:", sender)
    }

    public open fun moveBackward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveBackward:", sender)
    }

    public open fun moveLeft(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveLeft:", sender)
    }

    public open fun moveUp(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveUp:", sender)
    }

    public open fun moveDown(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveDown:", sender)
    }

    public open fun moveWordForward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveWordForward:", sender)
    }

    public open fun moveWordBackward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveWordBackward:", sender)
    }

    public open fun moveToBeginningOfLine(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToBeginningOfLine:", sender)
    }

    public open fun moveToEndOfLine(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToEndOfLine:", sender)
    }

    public open fun moveToBeginningOfParagraph(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToBeginningOfParagraph:", sender)
    }

    public open fun moveToEndOfParagraph(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToEndOfParagraph:", sender)
    }

    public open fun moveToEndOfDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToEndOfDocument:", sender)
    }

    public open fun moveToBeginningOfDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToBeginningOfDocument:", sender)
    }

    public open fun pageDown(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "pageDown:", sender)
    }

    public open fun pageUp(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "pageUp:", sender)
    }

    public open fun centerSelectionInVisibleArea(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "centerSelectionInVisibleArea:", sender)
    }

    public open fun moveBackwardAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveBackwardAndModifySelection:", sender)
    }

    public open fun moveForwardAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveForwardAndModifySelection:", sender)
    }

    public open fun moveWordForwardAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveWordForwardAndModifySelection:", sender)
    }

    public open fun moveWordBackwardAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveWordBackwardAndModifySelection:", sender)
    }

    public open fun moveUpAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveUpAndModifySelection:", sender)
    }

    public open fun moveDownAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveDownAndModifySelection:", sender)
    }

    public open fun moveToBeginningOfLineAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToBeginningOfLineAndModifySelection:", sender)
    }

    public open fun moveToEndOfLineAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToEndOfLineAndModifySelection:", sender)
    }

    public open fun moveToBeginningOfParagraphAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToBeginningOfParagraphAndModifySelection:", sender)
    }

    public open fun moveToEndOfParagraphAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToEndOfParagraphAndModifySelection:", sender)
    }

    public open fun moveToEndOfDocumentAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToEndOfDocumentAndModifySelection:", sender)
    }

    public open fun moveToBeginningOfDocumentAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToBeginningOfDocumentAndModifySelection:", sender)
    }

    public open fun pageDownAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "pageDownAndModifySelection:", sender)
    }

    public open fun pageUpAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "pageUpAndModifySelection:", sender)
    }

    public open fun moveParagraphForwardAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveParagraphForwardAndModifySelection:", sender)
    }

    public open fun moveParagraphBackwardAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveParagraphBackwardAndModifySelection:", sender)
    }

    public open fun moveWordRight(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveWordRight:", sender)
    }

    public open fun moveWordLeft(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveWordLeft:", sender)
    }

    public open fun moveRightAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveRightAndModifySelection:", sender)
    }

    public open fun moveLeftAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveLeftAndModifySelection:", sender)
    }

    public open fun moveWordRightAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveWordRightAndModifySelection:", sender)
    }

    public open fun moveWordLeftAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveWordLeftAndModifySelection:", sender)
    }

    public open fun moveToLeftEndOfLine(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToLeftEndOfLine:", sender)
    }

    public open fun moveToRightEndOfLine(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToRightEndOfLine:", sender)
    }

    public open fun moveToLeftEndOfLineAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToLeftEndOfLineAndModifySelection:", sender)
    }

    public open fun moveToRightEndOfLineAndModifySelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "moveToRightEndOfLineAndModifySelection:", sender)
    }

    public open fun scrollPageUp(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "scrollPageUp:", sender)
    }

    public open fun scrollPageDown(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "scrollPageDown:", sender)
    }

    public open fun scrollLineUp(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "scrollLineUp:", sender)
    }

    public open fun scrollLineDown(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "scrollLineDown:", sender)
    }

    public open fun scrollToBeginningOfDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "scrollToBeginningOfDocument:", sender)
    }

    public open fun scrollToEndOfDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "scrollToEndOfDocument:", sender)
    }

    public open fun transpose(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "transpose:", sender)
    }

    public open fun transposeWords(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "transposeWords:", sender)
    }

    public open fun selectAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectAll:", sender)
    }

    public open fun selectParagraph(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectParagraph:", sender)
    }

    public open fun selectLine(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectLine:", sender)
    }

    public open fun selectWord(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectWord:", sender)
    }

    public open fun indent(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "indent:", sender)
    }

    public open fun insertTab(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertTab:", sender)
    }

    public open fun insertBacktab(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertBacktab:", sender)
    }

    public open fun insertNewline(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertNewline:", sender)
    }

    public open fun insertParagraphSeparator(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertParagraphSeparator:", sender)
    }

    public open fun insertNewlineIgnoringFieldEditor(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertNewlineIgnoringFieldEditor:", sender)
    }

    public open fun insertTabIgnoringFieldEditor(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertTabIgnoringFieldEditor:", sender)
    }

    public open fun insertLineBreak(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertLineBreak:", sender)
    }

    public open fun insertContainerBreak(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertContainerBreak:", sender)
    }

    public open fun insertSingleQuoteIgnoringSubstitution(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertSingleQuoteIgnoringSubstitution:", sender)
    }

    public open fun insertDoubleQuoteIgnoringSubstitution(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "insertDoubleQuoteIgnoringSubstitution:", sender)
    }

    public open fun changeCaseOfLetter(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeCaseOfLetter:", sender)
    }

    public open fun uppercaseWord(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "uppercaseWord:", sender)
    }

    public open fun lowercaseWord(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "lowercaseWord:", sender)
    }

    public open fun capitalizeWord(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "capitalizeWord:", sender)
    }

    public open fun deleteForward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteForward:", sender)
    }

    public open fun deleteBackward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteBackward:", sender)
    }

    public open fun deleteBackwardByDecomposingPreviousCharacter(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteBackwardByDecomposingPreviousCharacter:", sender)
    }

    public open fun deleteWordForward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteWordForward:", sender)
    }

    public open fun deleteWordBackward(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteWordBackward:", sender)
    }

    public open fun deleteToBeginningOfLine(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteToBeginningOfLine:", sender)
    }

    public open fun deleteToEndOfLine(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteToEndOfLine:", sender)
    }

    public open fun deleteToBeginningOfParagraph(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteToBeginningOfParagraph:", sender)
    }

    public open fun deleteToEndOfParagraph(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteToEndOfParagraph:", sender)
    }

    public open fun yank(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "yank:", sender)
    }

    public open fun complete(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "complete:", sender)
    }

    public open fun setMark(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setMark:", sender)
    }

    public open fun deleteToMark(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "deleteToMark:", sender)
    }

    public open fun selectToMark(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectToMark:", sender)
    }

    public open fun swapWithMark(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "swapWithMark:", sender)
    }

    public open fun cancelOperation(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "cancelOperation:", sender)
    }

    public open fun makeBaseWritingDirectionNatural(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeBaseWritingDirectionNatural:", sender)
    }

    public open fun makeBaseWritingDirectionLeftToRight(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeBaseWritingDirectionLeftToRight:", sender)
    }

    public open fun makeBaseWritingDirectionRightToLeft(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeBaseWritingDirectionRightToLeft:", sender)
    }

    public open fun makeTextWritingDirectionNatural(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeTextWritingDirectionNatural:", sender)
    }

    public open fun makeTextWritingDirectionLeftToRight(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeTextWritingDirectionLeftToRight:", sender)
    }

    public open fun makeTextWritingDirectionRightToLeft(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "makeTextWritingDirectionRightToLeft:", sender)
    }

    public open fun quickLookPreviewItems(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "quickLookPreviewItems:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSResponder_NSUndoSupport : IObjCObject {
    public open fun undoManager(): NSUndoManager =
        Native.objc_msgSend("class objc.NSUndoManager", this, "undoManager") as NSUndoManager

    trait metaclass : IObjCObject
}

trait NSResponder_NSControlEditingSupport : IObjCObject {
    public open fun validateProposedFirstResponder_forEvent(responder: NSResponder, event: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "validateProposedFirstResponder:forEvent:", responder, event) as Boolean

    trait metaclass : IObjCObject
}

trait NSResponder_NSErrorPresentation : IObjCObject {
    public open fun presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: ObjCObject, didPresentSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:", error, window, delegate, didPresentSelector, contextInfo)
    }

    public open fun presentError(error: NSError): Boolean =
        Native.objc_msgSend("boolean", this, "presentError:", error) as Boolean

    public open fun willPresentError(error: NSError): NSError =
        Native.objc_msgSend("class objc.NSError", this, "willPresentError:", error) as NSError

    trait metaclass : IObjCObject
}

trait NSResponder_NSTextFinderSupport : IObjCObject {
    public open fun performTextFinderAction(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performTextFinderAction:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSResponder_NSDeprecated : IObjCObject {
    public open fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    trait metaclass : IObjCObject
}

trait NSWorkspace_NSWorkspaceRunningApplications : IObjCObject {
    public open fun runningApplications(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "runningApplications") as NSArray

    trait metaclass : IObjCObject
}

trait NSApplication_NSWindowsMenu : IObjCObject {
    public open fun windowsMenu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "windowsMenu") as NSMenu

    public open fun setWindowsMenu(windowsMenu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setWindowsMenu:", windowsMenu)
    }

    public open fun arrangeInFront(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "arrangeInFront:", sender)
    }

    public open fun removeWindowsItem(win: NSWindow): Unit {
        Native.objc_msgSend("void", this, "removeWindowsItem:", win)
    }

    public open fun addWindowsItem_title_filename(win: NSWindow, aString: NSString, isFilename: Boolean): Unit {
        Native.objc_msgSend("void", this, "addWindowsItem:title:filename:", win, aString, isFilename)
    }

    public open fun changeWindowsItem_title_filename(win: NSWindow, aString: NSString, isFilename: Boolean): Unit {
        Native.objc_msgSend("void", this, "changeWindowsItem:title:filename:", win, aString, isFilename)
    }

    public open fun updateWindowsItem(win: NSWindow): Unit {
        Native.objc_msgSend("void", this, "updateWindowsItem:", win)
    }

    public open fun miniaturizeAll(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "miniaturizeAll:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSFullKeyboardAccess : IObjCObject {
    public open fun isFullKeyboardAccessEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isFullKeyboardAccessEnabled") as Boolean

    trait metaclass : IObjCObject
}

trait NSApplication_NSServicesMenu : IObjCObject {
    public open fun servicesMenu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "servicesMenu") as NSMenu

    public open fun setServicesMenu(servicesMenu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "setServicesMenu:", servicesMenu)
    }

    public open fun registerServicesMenuSendTypes_returnTypes(sendTypes: NSArray, returnTypes: NSArray): Unit {
        Native.objc_msgSend("void", this, "registerServicesMenuSendTypes:returnTypes:", sendTypes, returnTypes)
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSServicesHandling : IObjCObject {
    public open fun servicesProvider(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "servicesProvider") as ObjCObject

    public open fun setServicesProvider(servicesProvider: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setServicesProvider:", servicesProvider)
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSStandardAboutPanel : IObjCObject {
    public open fun orderFrontStandardAboutPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontStandardAboutPanel:", sender)
    }

    public open fun orderFrontStandardAboutPanelWithOptions(optionsDictionary: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "orderFrontStandardAboutPanelWithOptions:", optionsDictionary)
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSApplicationLayoutDirection : IObjCObject {
    public open fun userInterfaceLayoutDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "userInterfaceLayoutDirection")

    trait metaclass : IObjCObject
}

trait NSApplication_NSRestorableUserInterface : IObjCObject {
    public open fun disableRelaunchOnLogin(): Unit {
        Native.objc_msgSend("void", this, "disableRelaunchOnLogin")
    }

    public open fun enableRelaunchOnLogin(): Unit {
        Native.objc_msgSend("void", this, "enableRelaunchOnLogin")
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSRemoteNotifications : IObjCObject {
    public open fun registerForRemoteNotificationTypes(types: Any): Unit {
        Native.objc_msgSend("void", this, "registerForRemoteNotificationTypes:", types)
    }

    public open fun unregisterForRemoteNotifications(): Unit {
        Native.objc_msgSend("void", this, "unregisterForRemoteNotifications")
    }

    public open fun enabledRemoteNotificationTypes(): Any =
        Native.objc_msgSend("class objc.Any", this, "enabledRemoteNotificationTypes")

    trait metaclass : IObjCObject
}

trait NSApplication_NSDeprecated : IObjCObject {
    public open fun runModalForWindow_relativeToWindow(theWindow: NSWindow, docWindow: NSWindow): Int =
        Native.objc_msgSend("int", this, "runModalForWindow:relativeToWindow:", theWindow, docWindow) as Int

    public open fun beginModalSessionForWindow_relativeToWindow(theWindow: NSWindow, docWindow: NSWindow): Pointer<Any> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "beginModalSessionForWindow:relativeToWindow:", theWindow, docWindow) as Pointer<Any>

    public open fun application_printFiles(sender: NSApplication, filenames: NSArray): Unit {
        Native.objc_msgSend("void", this, "application:printFiles:", sender, filenames)
    }

    public open fun beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo(sheet: NSWindow, docWindow: NSWindow, modalDelegate: ObjCObject, didEndSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:", sheet, docWindow, modalDelegate, didEndSelector, contextInfo)
    }

    public open fun endSheet(sheet: NSWindow): Unit {
        Native.objc_msgSend("void", this, "endSheet:", sheet)
    }

    public open fun endSheet_returnCode(sheet: NSWindow, returnCode: Int): Unit {
        Native.objc_msgSend("void", this, "endSheet:returnCode:", sheet, returnCode)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSDraggingSourceDeprecated : IObjCObject {
    public open fun namesOfPromisedFilesDroppedAtDestination(dropDestination: NSURL): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "namesOfPromisedFilesDroppedAtDestination:", dropDestination) as NSArray

    public open fun draggingSourceOperationMaskForLocal(flag: Boolean): Any =
        Native.objc_msgSend("class objc.Any", this, "draggingSourceOperationMaskForLocal:", flag)

    public open fun draggedImage_beganAt(image: NSImage, screenPoint: Any): Unit {
        Native.objc_msgSend("void", this, "draggedImage:beganAt:", image, screenPoint)
    }

    public open fun draggedImage_endedAt_operation(image: NSImage, screenPoint: Any, operation: Any): Unit {
        Native.objc_msgSend("void", this, "draggedImage:endedAt:operation:", image, screenPoint, operation)
    }

    public open fun draggedImage_movedTo(image: NSImage, screenPoint: Any): Unit {
        Native.objc_msgSend("void", this, "draggedImage:movedTo:", image, screenPoint)
    }

    public open fun ignoreModifierKeysWhileDragging(): Boolean =
        Native.objc_msgSend("boolean", this, "ignoreModifierKeysWhileDragging") as Boolean

    public open fun draggedImage_endedAt_deposited(image: NSImage, screenPoint: Any, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "draggedImage:endedAt:deposited:", image, screenPoint, flag)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSLayerDelegateContentsScaleUpdating : IObjCObject {
    public open fun layer_shouldInheritContentsScale_fromWindow(layer: CALayer, newScale: Double, window: NSWindow): Boolean =
        Native.objc_msgSend("boolean", this, "layer:shouldInheritContentsScale:fromWindow:", layer, newScale, window) as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSToolTipOwner : IObjCObject {
    public open fun view_stringForToolTip_point_userData(view: NSView, tag: Int, point: Any, data: Pointer<*>): NSString =
        Native.objc_msgSend("class objc.NSString", this, "view:stringForToolTip:point:userData:", view, tag, point, data) as NSString

    trait metaclass : IObjCObject
}

trait NSView_NSKeyboardUI : IObjCObject {
    public open fun nextKeyView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "nextKeyView") as NSView

    public open fun setNextKeyView(nextKeyView: NSView): Unit {
        Native.objc_msgSend("void", this, "setNextKeyView:", nextKeyView)
    }

    public open fun previousKeyView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "previousKeyView") as NSView

    public open fun nextValidKeyView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "nextValidKeyView") as NSView

    public open fun previousValidKeyView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "previousValidKeyView") as NSView

    public open fun canBecomeKeyView(): Boolean =
        Native.objc_msgSend("boolean", this, "canBecomeKeyView") as Boolean

    public open fun setKeyboardFocusRingNeedsDisplayInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "setKeyboardFocusRingNeedsDisplayInRect:", rect)
    }

    public open fun focusRingType(): Any =
        Native.objc_msgSend("class objc.Any", this, "focusRingType")

    public open fun setFocusRingType(focusRingType: Any): Unit {
        Native.objc_msgSend("void", this, "setFocusRingType:", focusRingType)
    }

    public open fun drawFocusRingMask(): Unit {
        Native.objc_msgSend("void", this, "drawFocusRingMask")
    }

    public open fun focusRingMaskBounds(): Any =
        Native.objc_msgSend("class objc.Any", this, "focusRingMaskBounds")

    public open fun noteFocusRingMaskChanged(): Unit {
        Native.objc_msgSend("void", this, "noteFocusRingMaskChanged")
    }

    trait metaclass : IObjCObject {
        public open fun defaultFocusRingType(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultFocusRingType")
    }
}

trait NSView_NSPrinting : IObjCObject {
    public open fun writeEPSInsideRect_toPasteboard(rect: Any, pasteboard: NSPasteboard): Unit {
        Native.objc_msgSend("void", this, "writeEPSInsideRect:toPasteboard:", rect, pasteboard)
    }

    public open fun dataWithEPSInsideRect(rect: Any): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataWithEPSInsideRect:", rect) as NSData

    public open fun writePDFInsideRect_toPasteboard(rect: Any, pasteboard: NSPasteboard): Unit {
        Native.objc_msgSend("void", this, "writePDFInsideRect:toPasteboard:", rect, pasteboard)
    }

    public open fun dataWithPDFInsideRect(rect: Any): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataWithPDFInsideRect:", rect) as NSData

    public open fun print(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "print:", sender)
    }

    public open fun knowsPageRange(range: Pointer<Any>): Boolean =
        Native.objc_msgSend("boolean", this, "knowsPageRange:", range) as Boolean

    public open fun heightAdjustLimit(): Double =
        Native.objc_msgSend("double", this, "heightAdjustLimit") as Double

    public open fun widthAdjustLimit(): Double =
        Native.objc_msgSend("double", this, "widthAdjustLimit") as Double

    public open fun adjustPageWidthNew_left_right_limit(newRight: Pointer<Double>, oldLeft: Double, oldRight: Double, rightLimit: Double): Unit {
        Native.objc_msgSend("void", this, "adjustPageWidthNew:left:right:limit:", newRight, oldLeft, oldRight, rightLimit)
    }

    public open fun adjustPageHeightNew_top_bottom_limit(newBottom: Pointer<Double>, oldTop: Double, oldBottom: Double, bottomLimit: Double): Unit {
        Native.objc_msgSend("void", this, "adjustPageHeightNew:top:bottom:limit:", newBottom, oldTop, oldBottom, bottomLimit)
    }

    public open fun rectForPage(page: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rectForPage:", page)

    public open fun locationOfPrintRect(aRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "locationOfPrintRect:", aRect)

    public open fun drawPageBorderWithSize(borderSize: Any): Unit {
        Native.objc_msgSend("void", this, "drawPageBorderWithSize:", borderSize)
    }

    public open fun pageHeader(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "pageHeader") as NSAttributedString

    public open fun pageFooter(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "pageFooter") as NSAttributedString

    public open fun drawSheetBorderWithSize(borderSize: Any): Unit {
        Native.objc_msgSend("void", this, "drawSheetBorderWithSize:", borderSize)
    }

    public open fun printJobTitle(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "printJobTitle") as NSString

    public open fun beginDocument(): Unit {
        Native.objc_msgSend("void", this, "beginDocument")
    }

    public open fun endDocument(): Unit {
        Native.objc_msgSend("void", this, "endDocument")
    }

    public open fun beginPageInRect_atPlacement(aRect: Any, location: Any): Unit {
        Native.objc_msgSend("void", this, "beginPageInRect:atPlacement:", aRect, location)
    }

    public open fun endPage(): Unit {
        Native.objc_msgSend("void", this, "endPage")
    }

    trait metaclass : IObjCObject
}

trait NSView_NSDrag : IObjCObject {
    public open fun beginDraggingSessionWithItems_event_source(items: NSArray, event: NSEvent, source: Any): NSDraggingSession =
        Native.objc_msgSend("class objc.NSDraggingSession", this, "beginDraggingSessionWithItems:event:source:", items, event, source) as NSDraggingSession

    public open fun dragImage_at_offset_event_pasteboard_source_slideBack(anImage: NSImage, viewLocation: Any, initialOffset: Any, event: NSEvent, pboard: NSPasteboard, sourceObj: ObjCObject, slideFlag: Boolean): Unit {
        Native.objc_msgSend("void", this, "dragImage:at:offset:event:pasteboard:source:slideBack:", anImage, viewLocation, initialOffset, event, pboard, sourceObj, slideFlag)
    }

    public open fun registeredDraggedTypes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "registeredDraggedTypes") as NSArray

    public open fun registerForDraggedTypes(newTypes: NSArray): Unit {
        Native.objc_msgSend("void", this, "registerForDraggedTypes:", newTypes)
    }

    public open fun unregisterDraggedTypes(): Unit {
        Native.objc_msgSend("void", this, "unregisterDraggedTypes")
    }

    public open fun dragFile_fromRect_slideBack_event(filename: NSString, rect: Any, aFlag: Boolean, event: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "dragFile:fromRect:slideBack:event:", filename, rect, aFlag, event) as Boolean

    public open fun dragPromisedFilesOfTypes_fromRect_source_slideBack_event(typeArray: NSArray, rect: Any, sourceObject: ObjCObject, aFlag: Boolean, event: NSEvent): Boolean =
        Native.objc_msgSend("boolean", this, "dragPromisedFilesOfTypes:fromRect:source:slideBack:event:", typeArray, rect, sourceObject, aFlag, event) as Boolean

    trait metaclass : IObjCObject
}

trait NSView_NSFullScreenMode : IObjCObject {
    public open fun enterFullScreenMode_withOptions(screen: NSScreen, options: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "enterFullScreenMode:withOptions:", screen, options) as Boolean

    public open fun exitFullScreenModeWithOptions(options: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "exitFullScreenModeWithOptions:", options)
    }

    public open fun isInFullScreenMode(): Boolean =
        Native.objc_msgSend("boolean", this, "isInFullScreenMode") as Boolean

    trait metaclass : IObjCObject
}

trait NSView_NSDefinition : IObjCObject {
    public open fun showDefinitionForAttributedString_atPoint(attrString: NSAttributedString, textBaselineOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "showDefinitionForAttributedString:atPoint:", attrString, textBaselineOrigin)
    }

    public open fun showDefinitionForAttributedString_range_options_baselineOriginProvider(attrString: NSAttributedString, targetRange: Any, options: NSDictionary, originProvider: Any): Unit {
        Native.objc_msgSend("void", this, "showDefinitionForAttributedString:range:options:baselineOriginProvider:", attrString, targetRange, options, originProvider)
    }

    trait metaclass : IObjCObject
}

trait NSView_NSFindIndicator : IObjCObject {
    public open fun isDrawingFindIndicator(): Boolean =
        Native.objc_msgSend("boolean", this, "isDrawingFindIndicator") as Boolean

    trait metaclass : IObjCObject
}

trait NSView_NSGestureRecognizer : IObjCObject {
    public open fun gestureRecognizers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "gestureRecognizers") as NSArray

    public open fun setGestureRecognizers(gestureRecognizers: NSArray): Unit {
        Native.objc_msgSend("void", this, "setGestureRecognizers:", gestureRecognizers)
    }

    public open fun addGestureRecognizer(gestureRecognizer: NSGestureRecognizer): Unit {
        Native.objc_msgSend("void", this, "addGestureRecognizer:", gestureRecognizer)
    }

    public open fun removeGestureRecognizer(gestureRecognizer: NSGestureRecognizer): Unit {
        Native.objc_msgSend("void", this, "removeGestureRecognizer:", gestureRecognizer)
    }

    trait metaclass : IObjCObject
}

trait NSView_NSDeprecated : IObjCObject {
    public open fun performMnemonic(theString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "performMnemonic:", theString) as Boolean

    public open fun shouldDrawColor(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldDrawColor") as Boolean

    public open fun gState(): Int =
        Native.objc_msgSend("int", this, "gState") as Int

    public open fun allocateGState(): Unit {
        Native.objc_msgSend("void", this, "allocateGState")
    }

    public open fun releaseGState(): Unit {
        Native.objc_msgSend("void", this, "releaseGState")
    }

    public open fun setUpGState(): Unit {
        Native.objc_msgSend("void", this, "setUpGState")
    }

    public open fun renewGState(): Unit {
        Native.objc_msgSend("void", this, "renewGState")
    }

    trait metaclass : IObjCObject
}

trait NSCell_NSKeyboardUI : IObjCObject {
    public open fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    public open fun setRefusesFirstResponder(refusesFirstResponder: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", refusesFirstResponder)
    }

    public open fun acceptsFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsFirstResponder") as Boolean

    public open fun showsFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "showsFirstResponder") as Boolean

    public open fun setShowsFirstResponder(showsFirstResponder: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsFirstResponder:", showsFirstResponder)
    }

    public open fun performClick(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performClick:", sender)
    }

    public open fun focusRingType(): Any =
        Native.objc_msgSend("class objc.Any", this, "focusRingType")

    public open fun setFocusRingType(focusRingType: Any): Unit {
        Native.objc_msgSend("void", this, "setFocusRingType:", focusRingType)
    }

    public open fun drawFocusRingMaskWithFrame_inView(cellFrame: Any, controlView: NSView): Unit {
        Native.objc_msgSend("void", this, "drawFocusRingMaskWithFrame:inView:", cellFrame, controlView)
    }

    public open fun focusRingMaskBoundsForFrame_inView(cellFrame: Any, controlView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "focusRingMaskBoundsForFrame:inView:", cellFrame, controlView)

    public open fun wantsNotificationForMarkedText(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsNotificationForMarkedText") as Boolean

    trait metaclass : IObjCObject {
        public open fun defaultFocusRingType(): Any =
            Native.objc_msgSend("class objc.Any", this, "defaultFocusRingType")
    }
}

trait NSCell_NSCellAttributedStringMethods : IObjCObject {
    public open fun attributedStringValue(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedStringValue") as NSAttributedString

    public open fun setAttributedStringValue(attributedStringValue: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedStringValue:", attributedStringValue)
    }

    public open fun allowsEditingTextAttributes(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsEditingTextAttributes") as Boolean

    public open fun setAllowsEditingTextAttributes(allowsEditingTextAttributes: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsEditingTextAttributes:", allowsEditingTextAttributes)
    }

    public open fun importsGraphics(): Boolean =
        Native.objc_msgSend("boolean", this, "importsGraphics") as Boolean

    public open fun setImportsGraphics(importsGraphics: Boolean): Unit {
        Native.objc_msgSend("void", this, "setImportsGraphics:", importsGraphics)
    }

    trait metaclass : IObjCObject
}

trait NSCell_NSCellMixedState : IObjCObject {
    public open fun allowsMixedState(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsMixedState") as Boolean

    public open fun setAllowsMixedState(allowsMixedState: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsMixedState:", allowsMixedState)
    }

    public open fun nextState(): Int =
        Native.objc_msgSend("int", this, "nextState") as Int

    public open fun setNextState(): Unit {
        Native.objc_msgSend("void", this, "setNextState")
    }

    trait metaclass : IObjCObject
}

trait NSCell_NSCellHitTest : IObjCObject {
    public open fun hitTestForEvent_inRect_ofView(event: NSEvent, cellFrame: Any, controlView: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "hitTestForEvent:inRect:ofView:", event, cellFrame, controlView)

    trait metaclass : IObjCObject
}

trait NSCell_NSCellExpansion : IObjCObject {
    public open fun expansionFrameWithFrame_inView(cellFrame: Any, view: NSView): Any =
        Native.objc_msgSend("class objc.Any", this, "expansionFrameWithFrame:inView:", cellFrame, view)

    public open fun drawWithExpansionFrame_inView(cellFrame: Any, view: NSView): Unit {
        Native.objc_msgSend("void", this, "drawWithExpansionFrame:inView:", cellFrame, view)
    }

    trait metaclass : IObjCObject
}

trait NSCell_NSCellBackgroundStyle : IObjCObject {
    public open fun backgroundStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "backgroundStyle")

    public open fun setBackgroundStyle(backgroundStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setBackgroundStyle:", backgroundStyle)
    }

    public open fun interiorBackgroundStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "interiorBackgroundStyle")

    trait metaclass : IObjCObject
}

trait NSCell_NSDeprecated : IObjCObject {
    public open fun entryType(): Int =
        Native.objc_msgSend("int", this, "entryType") as Int

    public open fun setEntryType(aType: Int): Unit {
        Native.objc_msgSend("void", this, "setEntryType:", aType)
    }

    public open fun isEntryAcceptable(aString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isEntryAcceptable:", aString) as Boolean

    public open fun setFloatingPointFormat_left_right(autoRange: Boolean, leftDigits: Int, rightDigits: Int): Unit {
        Native.objc_msgSend("void", this, "setFloatingPointFormat:left:right:", autoRange, leftDigits, rightDigits)
    }

    public open fun setMnemonicLocation(location: Int): Unit {
        Native.objc_msgSend("void", this, "setMnemonicLocation:", location)
    }

    public open fun mnemonicLocation(): Int =
        Native.objc_msgSend("int", this, "mnemonicLocation") as Int

    public open fun mnemonic(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "mnemonic") as NSString

    public open fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    trait metaclass : IObjCObject
}

trait NSAppleScript_NSExtensions : IObjCObject {
    public open fun richTextSource(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "richTextSource") as NSAttributedString

    trait metaclass : IObjCObject
}

trait NSBox_NSDeprecated : IObjCObject {
    public open fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    trait metaclass : IObjCObject
}

trait NSControl_NSKeyboardUI : IObjCObject {
    public open fun performClick(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "performClick:", sender)
    }

    public open fun setRefusesFirstResponder(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRefusesFirstResponder:", flag)
    }

    public open fun refusesFirstResponder(): Boolean =
        Native.objc_msgSend("boolean", this, "refusesFirstResponder") as Boolean

    trait metaclass : IObjCObject
}

trait NSControl_NSControlTextMethods : IObjCObject {
    public open fun alignment(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignment")

    public open fun setAlignment(alignment: Any): Unit {
        Native.objc_msgSend("void", this, "setAlignment:", alignment)
    }

    public open fun font(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "font") as NSFont

    public open fun setFont(font: NSFont): Unit {
        Native.objc_msgSend("void", this, "setFont:", font)
    }

    public open fun lineBreakMode(): Any =
        Native.objc_msgSend("class objc.Any", this, "lineBreakMode")

    public open fun setLineBreakMode(lineBreakMode: Any): Unit {
        Native.objc_msgSend("void", this, "setLineBreakMode:", lineBreakMode)
    }

    public open fun usesSingleLineMode(): Boolean =
        Native.objc_msgSend("boolean", this, "usesSingleLineMode") as Boolean

    public open fun setUsesSingleLineMode(usesSingleLineMode: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesSingleLineMode:", usesSingleLineMode)
    }

    public open fun baseWritingDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "baseWritingDirection")

    public open fun setBaseWritingDirection(baseWritingDirection: Any): Unit {
        Native.objc_msgSend("void", this, "setBaseWritingDirection:", baseWritingDirection)
    }

    public open fun allowsExpansionToolTips(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsExpansionToolTips") as Boolean

    public open fun setAllowsExpansionToolTips(allowsExpansionToolTips: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsExpansionToolTips:", allowsExpansionToolTips)
    }

    public open fun expansionFrameWithFrame(contentFrame: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "expansionFrameWithFrame:", contentFrame)

    public open fun drawWithExpansionFrame_inView(contentFrame: Any, view: NSView): Unit {
        Native.objc_msgSend("void", this, "drawWithExpansionFrame:inView:", contentFrame, view)
    }

    trait metaclass : IObjCObject
}

trait NSControl_NSControlEditableTextMethods : IObjCObject {
    public open fun currentEditor(): NSText =
        Native.objc_msgSend("class objc.NSText", this, "currentEditor") as NSText

    public open fun abortEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "abortEditing") as Boolean

    public open fun validateEditing(): Unit {
        Native.objc_msgSend("void", this, "validateEditing")
    }

    public open fun editWithFrame_editor_delegate_event(aRect: Any, textObj: NSText, anObject: ObjCObject, theEvent: NSEvent): Unit {
        Native.objc_msgSend("void", this, "editWithFrame:editor:delegate:event:", aRect, textObj, anObject, theEvent)
    }

    public open fun selectWithFrame_editor_delegate_start_length(aRect: Any, textObj: NSText, anObject: ObjCObject, selStart: Int, selLength: Int): Unit {
        Native.objc_msgSend("void", this, "selectWithFrame:editor:delegate:start:length:", aRect, textObj, anObject, selStart, selLength)
    }

    public open fun endEditing(textObj: NSText): Unit {
        Native.objc_msgSend("void", this, "endEditing:", textObj)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSControlSubclassNotifications : IObjCObject {
    public open fun controlTextDidBeginEditing(obj: NSNotification): Unit {
        Native.objc_msgSend("void", this, "controlTextDidBeginEditing:", obj)
    }

    public open fun controlTextDidEndEditing(obj: NSNotification): Unit {
        Native.objc_msgSend("void", this, "controlTextDidEndEditing:", obj)
    }

    public open fun controlTextDidChange(obj: NSNotification): Unit {
        Native.objc_msgSend("void", this, "controlTextDidChange:", obj)
    }

    trait metaclass : IObjCObject
}

trait NSControl_NSDeprecated : IObjCObject {
    public open fun setFloatingPointFormat_left_right(autoRange: Boolean, leftDigits: Int, rightDigits: Int): Unit {
        Native.objc_msgSend("void", this, "setFloatingPointFormat:left:right:", autoRange, leftDigits, rightDigits)
    }

    public open fun cell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "cell") as ObjCObject

    public open fun setCell(aCell: NSCell): Unit {
        Native.objc_msgSend("void", this, "setCell:", aCell)
    }

    public open fun selectedCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "selectedCell") as ObjCObject

    public open fun selectedTag(): Int =
        Native.objc_msgSend("int", this, "selectedTag") as Int

    public open fun setNeedsDisplay(): Unit {
        Native.objc_msgSend("void", this, "setNeedsDisplay")
    }

    public open fun calcSize(): Unit {
        Native.objc_msgSend("void", this, "calcSize")
    }

    public open fun updateCell(aCell: NSCell): Unit {
        Native.objc_msgSend("void", this, "updateCell:", aCell)
    }

    public open fun updateCellInside(aCell: NSCell): Unit {
        Native.objc_msgSend("void", this, "updateCellInside:", aCell)
    }

    public open fun drawCellInside(aCell: NSCell): Unit {
        Native.objc_msgSend("void", this, "drawCellInside:", aCell)
    }

    public open fun drawCell(aCell: NSCell): Unit {
        Native.objc_msgSend("void", this, "drawCell:", aCell)
    }

    public open fun selectCell(aCell: NSCell): Unit {
        Native.objc_msgSend("void", this, "selectCell:", aCell)
    }

    trait metaclass : IObjCObject {
        public open fun setCellClass(factoryId: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "setCellClass:", factoryId)
        }

        public open fun cellClass(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "cellClass") as ObjCClass
    }
}

trait NSButtonCell_NSButtonCellExtensions : IObjCObject {
    public open fun gradientType(): Any =
        Native.objc_msgSend("class objc.Any", this, "gradientType")

    public open fun setGradientType(gradientType: Any): Unit {
        Native.objc_msgSend("void", this, "setGradientType:", gradientType)
    }

    public open fun imageDimsWhenDisabled(): Boolean =
        Native.objc_msgSend("boolean", this, "imageDimsWhenDisabled") as Boolean

    public open fun setImageDimsWhenDisabled(imageDimsWhenDisabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setImageDimsWhenDisabled:", imageDimsWhenDisabled)
    }

    public open fun showsBorderOnlyWhileMouseInside(): Boolean =
        Native.objc_msgSend("boolean", this, "showsBorderOnlyWhileMouseInside") as Boolean

    public open fun setShowsBorderOnlyWhileMouseInside(showsBorderOnlyWhileMouseInside: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsBorderOnlyWhileMouseInside:", showsBorderOnlyWhileMouseInside)
    }

    public open fun mouseEntered(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseEntered:", event)
    }

    public open fun mouseExited(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseExited:", event)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    trait metaclass : IObjCObject
}

trait NSButtonCell_NSButtonCellAttributedStringMethods : IObjCObject {
    public open fun attributedTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedTitle") as NSAttributedString

    public open fun setAttributedTitle(attributedTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedTitle:", attributedTitle)
    }

    public open fun attributedAlternateTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedAlternateTitle") as NSAttributedString

    public open fun setAttributedAlternateTitle(attributedAlternateTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedAlternateTitle:", attributedAlternateTitle)
    }

    trait metaclass : IObjCObject
}

trait NSButtonCell_NSButtonCellBezelStyles : IObjCObject {
    public open fun bezelStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "bezelStyle")

    public open fun setBezelStyle(bezelStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setBezelStyle:", bezelStyle)
    }

    trait metaclass : IObjCObject
}

trait NSButtonCell_NSButtonCellSoundExtensions : IObjCObject {
    public open fun sound(): NSSound =
        Native.objc_msgSend("class objc.NSSound", this, "sound") as NSSound

    public open fun setSound(sound: NSSound): Unit {
        Native.objc_msgSend("void", this, "setSound:", sound)
    }

    trait metaclass : IObjCObject
}

trait NSButtonCell_NSKeyboardUI : IObjCObject {
    public open fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    public open fun setAlternateTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setAlternateTitleWithMnemonic:", stringWithAmpersand)
    }

    public open fun setAlternateMnemonicLocation(location: Int): Unit {
        Native.objc_msgSend("void", this, "setAlternateMnemonicLocation:", location)
    }

    public open fun alternateMnemonicLocation(): Int =
        Native.objc_msgSend("int", this, "alternateMnemonicLocation") as Int

    public open fun alternateMnemonic(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "alternateMnemonic") as NSString

    trait metaclass : IObjCObject
}

trait NSButton_NSButtonAttributedStringMethods : IObjCObject {
    public open fun attributedTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedTitle") as NSAttributedString

    public open fun setAttributedTitle(attributedTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedTitle:", attributedTitle)
    }

    public open fun attributedAlternateTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedAlternateTitle") as NSAttributedString

    public open fun setAttributedAlternateTitle(attributedAlternateTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedAlternateTitle:", attributedAlternateTitle)
    }

    trait metaclass : IObjCObject
}

trait NSButton_NSButtonBezelStyles : IObjCObject {
    public open fun bezelStyle(): Any =
        Native.objc_msgSend("class objc.Any", this, "bezelStyle")

    public open fun setBezelStyle(bezelStyle: Any): Unit {
        Native.objc_msgSend("void", this, "setBezelStyle:", bezelStyle)
    }

    trait metaclass : IObjCObject
}

trait NSButton_NSButtonMixedState : IObjCObject {
    public open fun allowsMixedState(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsMixedState") as Boolean

    public open fun setAllowsMixedState(allowsMixedState: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsMixedState:", allowsMixedState)
    }

    public open fun setNextState(): Unit {
        Native.objc_msgSend("void", this, "setNextState")
    }

    trait metaclass : IObjCObject
}

trait NSButton_NSButtonBorder : IObjCObject {
    public open fun showsBorderOnlyWhileMouseInside(): Boolean =
        Native.objc_msgSend("boolean", this, "showsBorderOnlyWhileMouseInside") as Boolean

    public open fun setShowsBorderOnlyWhileMouseInside(showsBorderOnlyWhileMouseInside: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsBorderOnlyWhileMouseInside:", showsBorderOnlyWhileMouseInside)
    }

    trait metaclass : IObjCObject
}

trait NSButton_NSButtonSoundExtensions : IObjCObject {
    public open fun sound(): NSSound =
        Native.objc_msgSend("class objc.NSSound", this, "sound") as NSSound

    public open fun setSound(sound: NSSound): Unit {
        Native.objc_msgSend("void", this, "setSound:", sound)
    }

    trait metaclass : IObjCObject
}

trait NSButton_NSKeyboardUI : IObjCObject {
    public open fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    trait metaclass : IObjCObject
}

trait NSClipView_NSDeprecated : IObjCObject {
    public open fun constrainScrollPoint(newOrigin: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "constrainScrollPoint:", newOrigin)

    trait metaclass : IObjCObject
}

trait NSView_NSClipViewSuperview : IObjCObject {
    public open fun reflectScrolledClipView(aClipView: NSClipView): Unit {
        Native.objc_msgSend("void", this, "reflectScrolledClipView:", aClipView)
    }

    public open fun scrollClipView_toPoint(aClipView: NSClipView, aPoint: Any): Unit {
        Native.objc_msgSend("void", this, "scrollClipView:toPoint:", aClipView, aPoint)
    }

    trait metaclass : IObjCObject
}

trait NSFontManager_NSFontManagerMenuActionMethods : IObjCObject {
    public open fun fontNamed_hasTraits(fName: NSString, someTraits: Any): Boolean =
        Native.objc_msgSend("boolean", this, "fontNamed:hasTraits:", fName, someTraits) as Boolean

    public open fun availableFontNamesWithTraits(someTraits: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "availableFontNamesWithTraits:", someTraits) as NSArray

    public open fun addFontTrait(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "addFontTrait:", sender)
    }

    public open fun removeFontTrait(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "removeFontTrait:", sender)
    }

    public open fun modifyFontViaPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "modifyFontViaPanel:", sender)
    }

    public open fun modifyFont(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "modifyFont:", sender)
    }

    public open fun orderFrontFontPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontFontPanel:", sender)
    }

    public open fun orderFrontStylesPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontStylesPanel:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSFontManagerDelegate : IObjCObject {
    public open fun fontManager_willIncludeFont(sender: ObjCObject, fontName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "fontManager:willIncludeFont:", sender, fontName) as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSFontManagerResponderMethod : IObjCObject {
    public open fun changeFont(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeFont:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSWindow_NSKeyboardUI : IObjCObject {
    public open fun initialFirstResponder(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "initialFirstResponder") as NSView

    public open fun setInitialFirstResponder(initialFirstResponder: NSView): Unit {
        Native.objc_msgSend("void", this, "setInitialFirstResponder:", initialFirstResponder)
    }

    public open fun selectNextKeyView(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectNextKeyView:", sender)
    }

    public open fun selectPreviousKeyView(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectPreviousKeyView:", sender)
    }

    public open fun selectKeyViewFollowingView(aView: NSView): Unit {
        Native.objc_msgSend("void", this, "selectKeyViewFollowingView:", aView)
    }

    public open fun selectKeyViewPrecedingView(aView: NSView): Unit {
        Native.objc_msgSend("void", this, "selectKeyViewPrecedingView:", aView)
    }

    public open fun keyViewSelectionDirection(): Any =
        Native.objc_msgSend("class objc.Any", this, "keyViewSelectionDirection")

    public open fun setDefaultButtonCell(defButt: NSButtonCell): Unit {
        Native.objc_msgSend("void", this, "setDefaultButtonCell:", defButt)
    }

    public open fun defaultButtonCell(): NSButtonCell =
        Native.objc_msgSend("class objc.NSButtonCell", this, "defaultButtonCell") as NSButtonCell

    public open fun disableKeyEquivalentForDefaultButtonCell(): Unit {
        Native.objc_msgSend("void", this, "disableKeyEquivalentForDefaultButtonCell")
    }

    public open fun enableKeyEquivalentForDefaultButtonCell(): Unit {
        Native.objc_msgSend("void", this, "enableKeyEquivalentForDefaultButtonCell")
    }

    public open fun autorecalculatesKeyViewLoop(): Boolean =
        Native.objc_msgSend("boolean", this, "autorecalculatesKeyViewLoop") as Boolean

    public open fun setAutorecalculatesKeyViewLoop(autorecalculatesKeyViewLoop: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutorecalculatesKeyViewLoop:", autorecalculatesKeyViewLoop)
    }

    public open fun recalculateKeyViewLoop(): Unit {
        Native.objc_msgSend("void", this, "recalculateKeyViewLoop")
    }

    trait metaclass : IObjCObject
}

trait NSWindow_NSToolbarSupport : IObjCObject {
    public open fun toolbar(): NSToolbar =
        Native.objc_msgSend("class objc.NSToolbar", this, "toolbar") as NSToolbar

    public open fun setToolbar(toolbar: NSToolbar): Unit {
        Native.objc_msgSend("void", this, "setToolbar:", toolbar)
    }

    public open fun toggleToolbarShown(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleToolbarShown:", sender)
    }

    public open fun runToolbarCustomizationPalette(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "runToolbarCustomizationPalette:", sender)
    }

    public open fun showsToolbarButton(): Boolean =
        Native.objc_msgSend("boolean", this, "showsToolbarButton") as Boolean

    public open fun setShowsToolbarButton(showsToolbarButton: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowsToolbarButton:", showsToolbarButton)
    }

    trait metaclass : IObjCObject
}

trait NSWindow_NSDrag : IObjCObject {
    public open fun dragImage_at_offset_event_pasteboard_source_slideBack(anImage: NSImage, baseLocation: Any, initialOffset: Any, event: NSEvent, pboard: NSPasteboard, sourceObj: ObjCObject, slideFlag: Boolean): Unit {
        Native.objc_msgSend("void", this, "dragImage:at:offset:event:pasteboard:source:slideBack:", anImage, baseLocation, initialOffset, event, pboard, sourceObj, slideFlag)
    }

    public open fun registerForDraggedTypes(newTypes: NSArray): Unit {
        Native.objc_msgSend("void", this, "registerForDraggedTypes:", newTypes)
    }

    public open fun unregisterDraggedTypes(): Unit {
        Native.objc_msgSend("void", this, "unregisterDraggedTypes")
    }

    trait metaclass : IObjCObject
}

trait NSWindow_NSCarbonExtensions : IObjCObject {
    public open fun initWithWindowRef(windowRef: Pointer<*>): NSWindow =
        Native.objc_msgSend("class objc.NSWindow", this, "initWithWindowRef:", windowRef) as NSWindow

    public open fun windowRef(): Pointer<*> =
        Native.objc_msgSend("class kni.objc.Pointer", this, "windowRef") as Pointer<*>

    trait metaclass : IObjCObject
}

trait NSWindow_NSDeprecated : IObjCObject {
    public open fun gState(): Int =
        Native.objc_msgSend("int", this, "gState") as Int

    public open fun convertBaseToScreen(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertBaseToScreen:", aPoint)

    public open fun convertScreenToBase(aPoint: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "convertScreenToBase:", aPoint)

    public open fun canBeVisibleOnAllSpaces(): Boolean =
        Native.objc_msgSend("boolean", this, "canBeVisibleOnAllSpaces") as Boolean

    public open fun setCanBeVisibleOnAllSpaces(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCanBeVisibleOnAllSpaces:", flag)
    }

    public open fun userSpaceScaleFactor(): Double =
        Native.objc_msgSend("double", this, "userSpaceScaleFactor") as Double

    public open fun useOptimizedDrawing(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "useOptimizedDrawing:", flag)
    }

    public open fun canStoreColor(): Boolean =
        Native.objc_msgSend("boolean", this, "canStoreColor") as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSFontPanelValidationAdditions : IObjCObject {
    public open fun validModesForFontPanel(fontPanel: NSFontPanel): Int =
        Native.objc_msgSend("int", this, "validModesForFontPanel:", fontPanel) as Int

    trait metaclass : IObjCObject
}

trait NSMatrix_NSKeyboardUI : IObjCObject {
    public open fun tabKeyTraversesCells(): Boolean =
        Native.objc_msgSend("boolean", this, "tabKeyTraversesCells") as Boolean

    public open fun setTabKeyTraversesCells(tabKeyTraversesCells: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTabKeyTraversesCells:", tabKeyTraversesCells)
    }

    public open fun keyCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "keyCell") as ObjCObject

    public open fun setKeyCell(keyCell: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setKeyCell:", keyCell)
    }

    trait metaclass : IObjCObject
}

trait NSFormCell_NSKeyboardUI : IObjCObject {
    public open fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    trait metaclass : IObjCObject
}

trait NSFormCell_NSFormCellAttributedStringMethods : IObjCObject {
    public open fun attributedTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedTitle") as NSAttributedString

    public open fun setAttributedTitle(attributedTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedTitle:", attributedTitle)
    }

    trait metaclass : IObjCObject
}

trait NSView_NSViewEnclosingMenuItem : IObjCObject {
    public open fun enclosingMenuItem(): NSMenuItem =
        Native.objc_msgSend("class objc.NSMenuItem", this, "enclosingMenuItem") as NSMenuItem

    trait metaclass : IObjCObject
}

trait NSMenuItem_NSDeprecated : IObjCObject {
    public open fun setMnemonicLocation(location: Int): Unit {
        Native.objc_msgSend("void", this, "setMnemonicLocation:", location)
    }

    public open fun mnemonicLocation(): Int =
        Native.objc_msgSend("int", this, "mnemonicLocation") as Int

    public open fun mnemonic(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "mnemonic") as NSString

    trait metaclass : IObjCObject
}

trait NSMenu_NSSubmenuAction : IObjCObject {
    public open fun submenuAction(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "submenuAction:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSMenuValidation : IObjCObject {
    public open fun validateMenuItem(menuItem: NSMenuItem): Boolean =
        Native.objc_msgSend("boolean", this, "validateMenuItem:", menuItem) as Boolean

    trait metaclass : IObjCObject
}

trait NSMenu_NSMenuPropertiesToUpdate : IObjCObject {
    public open fun propertiesToUpdate(): Any =
        Native.objc_msgSend("class objc.Any", this, "propertiesToUpdate")

    trait metaclass : IObjCObject
}

trait NSMenu_NSDeprecated : IObjCObject {
    public open fun setMenuRepresentation(menuRep: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setMenuRepresentation:", menuRep)
    }

    public open fun menuRepresentation(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "menuRepresentation") as ObjCObject

    public open fun setContextMenuRepresentation(menuRep: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setContextMenuRepresentation:", menuRep)
    }

    public open fun contextMenuRepresentation(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "contextMenuRepresentation") as ObjCObject

    public open fun setTearOffMenuRepresentation(menuRep: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTearOffMenuRepresentation:", menuRep)
    }

    public open fun tearOffMenuRepresentation(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "tearOffMenuRepresentation") as ObjCObject

    public open fun attachedMenu(): NSMenu =
        Native.objc_msgSend("class objc.NSMenu", this, "attachedMenu") as NSMenu

    public open fun isAttached(): Boolean =
        Native.objc_msgSend("boolean", this, "isAttached") as Boolean

    public open fun sizeToFit(): Unit {
        Native.objc_msgSend("void", this, "sizeToFit")
    }

    public open fun locationForSubmenu(aSubmenu: NSMenu): Any =
        Native.objc_msgSend("class objc.Any", this, "locationForSubmenu:", aSubmenu)

    trait metaclass : IObjCObject {
        public open fun setMenuZone(aZone: Pointer<Any>): Unit {
            Native.objc_msgSend("void", this, "setMenuZone:", aZone)
        }
    }
}

trait NSPasteboard_FilterServices : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun typesFilterableTo(type: NSString): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "typesFilterableTo:", type) as NSArray

        public open fun pasteboardByFilteringFile(filename: NSString): NSPasteboard =
            Native.objc_msgSend("class objc.NSPasteboard", this, "pasteboardByFilteringFile:", filename) as NSPasteboard

        public open fun pasteboardByFilteringData_ofType(data: NSData, type: NSString): NSPasteboard =
            Native.objc_msgSend("class objc.NSPasteboard", this, "pasteboardByFilteringData:ofType:", data, type) as NSPasteboard

        public open fun pasteboardByFilteringTypesInPasteboard(pboard: NSPasteboard): NSPasteboard =
            Native.objc_msgSend("class objc.NSPasteboard", this, "pasteboardByFilteringTypesInPasteboard:", pboard) as NSPasteboard
    }
}

trait NSObject_NSPasteboardOwner : IObjCObject {
    public open fun pasteboard_provideDataForType(sender: NSPasteboard, type: NSString): Unit {
        Native.objc_msgSend("void", this, "pasteboard:provideDataForType:", sender, type)
    }

    public open fun pasteboardChangedOwner(sender: NSPasteboard): Unit {
        Native.objc_msgSend("void", this, "pasteboardChangedOwner:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSURL_NSPasteboardSupport : IObjCObject {
    public open fun writeToPasteboard(pasteBoard: NSPasteboard): Unit {
        Native.objc_msgSend("void", this, "writeToPasteboard:", pasteBoard)
    }

    trait metaclass : IObjCObject {
        public open fun URLFromPasteboard(pasteBoard: NSPasteboard): NSURL =
            Native.objc_msgSend("class objc.NSURL", this, "URLFromPasteboard:", pasteBoard) as NSURL
    }
}

trait NSString_NSPasteboardSupport : IObjCObject {
    trait metaclass : IObjCObject
}

trait NSPasteboard_NSFileContents : IObjCObject {
    public open fun writeFileContents(filename: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "writeFileContents:", filename) as Boolean

    public open fun readFileContentsType_toFile(type: NSString, filename: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "readFileContentsType:toFile:", type, filename) as NSString

    public open fun writeFileWrapper(wrapper: NSFileWrapper): Boolean =
        Native.objc_msgSend("boolean", this, "writeFileWrapper:", wrapper) as Boolean

    public open fun readFileWrapper(): NSFileWrapper =
        Native.objc_msgSend("class objc.NSFileWrapper", this, "readFileWrapper") as NSFileWrapper

    trait metaclass : IObjCObject
}

trait NSColor_NSQuartzCoreAdditions : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun colorWithCIColor(color: CIColor): NSColor =
            Native.objc_msgSend("class objc.NSColor", this, "colorWithCIColor:", color) as NSColor
    }
}

trait CIColor_NSAppKitAdditions : IObjCObject {
    public open fun initWithColor(color: NSColor): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithColor:", color) as ObjCObject

    trait metaclass : IObjCObject
}

trait NSCoder_NSAppKitColorExtensions : IObjCObject {
    public open fun decodeNXColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "decodeNXColor") as NSColor

    trait metaclass : IObjCObject
}

trait NSBitmapImageRep_NSBitmapImageFileTypeExtensions : IObjCObject {
    public open fun representationUsingType_properties(storageType: Any, properties: NSDictionary): NSData =
        Native.objc_msgSend("class objc.NSData", this, "representationUsingType:properties:", storageType, properties) as NSData

    public open fun setProperty_withValue(property: NSString, value: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setProperty:withValue:", property, value)
    }

    public open fun valueForProperty(property: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "valueForProperty:", property) as ObjCObject

    trait metaclass : IObjCObject {
        public open fun representationOfImageRepsInArray_usingType_properties(imageReps: NSArray, storageType: Any, properties: NSDictionary): NSData =
            Native.objc_msgSend("class objc.NSData", this, "representationOfImageRepsInArray:usingType:properties:", imageReps, storageType, properties) as NSData
    }
}

trait NSViewController_NSViewControllerPresentation : IObjCObject {
    public open fun presentViewController_animator(viewController: NSViewController, animator: Any): Unit {
        Native.objc_msgSend("void", this, "presentViewController:animator:", viewController, animator)
    }

    public open fun dismissViewController(viewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "dismissViewController:", viewController)
    }

    public open fun dismissController(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "dismissController:", sender)
    }

    public open fun presentedViewControllers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "presentedViewControllers") as NSArray

    public open fun presentingViewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "presentingViewController") as NSViewController

    trait metaclass : IObjCObject
}

trait NSViewController_NSViewControllerPresentationAndTransitionStyles : IObjCObject {
    public open fun presentViewControllerAsSheet(viewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "presentViewControllerAsSheet:", viewController)
    }

    public open fun presentViewControllerAsModalWindow(viewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "presentViewControllerAsModalWindow:", viewController)
    }

    public open fun presentViewController_asPopoverRelativeToRect_ofView_preferredEdge_behavior(viewController: NSViewController, positioningRect: Any, positioningView: NSView, preferredEdge: Int, behavior: Any): Unit {
        Native.objc_msgSend("void", this, "presentViewController:asPopoverRelativeToRect:ofView:preferredEdge:behavior:", viewController, positioningRect, positioningView, preferredEdge, behavior)
    }

    public open fun transitionFromViewController_toViewController_options_completionHandler(fromViewController: NSViewController, toViewController: NSViewController, options: Any, completion: Any): Unit {
        Native.objc_msgSend("void", this, "transitionFromViewController:toViewController:options:completionHandler:", fromViewController, toViewController, options, completion)
    }

    trait metaclass : IObjCObject
}

trait NSViewController_NSViewControllerContainer : IObjCObject {
    public open fun parentViewController(): NSViewController =
        Native.objc_msgSend("class objc.NSViewController", this, "parentViewController") as NSViewController

    public open fun childViewControllers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "childViewControllers") as NSArray

    public open fun setChildViewControllers(childViewControllers: NSArray): Unit {
        Native.objc_msgSend("void", this, "setChildViewControllers:", childViewControllers)
    }

    public open fun addChildViewController(childViewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "addChildViewController:", childViewController)
    }

    public open fun removeFromParentViewController(): Unit {
        Native.objc_msgSend("void", this, "removeFromParentViewController")
    }

    public open fun insertChildViewController_atIndex(childViewController: NSViewController, index: Int): Unit {
        Native.objc_msgSend("void", this, "insertChildViewController:atIndex:", childViewController, index)
    }

    public open fun removeChildViewControllerAtIndex(index: Int): Unit {
        Native.objc_msgSend("void", this, "removeChildViewControllerAtIndex:", index)
    }

    public open fun preferredContentSizeDidChangeForViewController(viewController: NSViewController): Unit {
        Native.objc_msgSend("void", this, "preferredContentSizeDidChangeForViewController:", viewController)
    }

    public open fun viewWillTransitionToSize(newSize: Any): Unit {
        Native.objc_msgSend("void", this, "viewWillTransitionToSize:", newSize)
    }

    trait metaclass : IObjCObject
}

trait NSViewController_NSViewControllerStoryboardingMethods : IObjCObject {
    public open fun storyboard(): NSStoryboard =
        Native.objc_msgSend("class objc.NSStoryboard", this, "storyboard") as NSStoryboard

    trait metaclass : IObjCObject
}

trait NSViewController_NSExtensionAdditions : IObjCObject {
    public open fun extensionContext(): NSExtensionContext =
        Native.objc_msgSend("class objc.NSExtensionContext", this, "extensionContext") as NSExtensionContext

    public open fun sourceItemView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "sourceItemView") as NSView

    public open fun setSourceItemView(sourceItemView: NSView): Unit {
        Native.objc_msgSend("void", this, "setSourceItemView:", sourceItemView)
    }

    public open fun preferredScreenOrigin(): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredScreenOrigin")

    public open fun setPreferredScreenOrigin(preferredScreenOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "setPreferredScreenOrigin:", preferredScreenOrigin)
    }

    public open fun preferredMinimumSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredMinimumSize")

    public open fun preferredMaximumSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredMaximumSize")

    trait metaclass : IObjCObject
}

trait NSBrowser_NSDeprecated : IObjCObject {
    public open fun setAcceptsArrowKeys(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAcceptsArrowKeys:", flag)
    }

    public open fun acceptsArrowKeys(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsArrowKeys") as Boolean

    public open fun displayColumn(column: Int): Unit {
        Native.objc_msgSend("void", this, "displayColumn:", column)
    }

    public open fun displayAllColumns(): Unit {
        Native.objc_msgSend("void", this, "displayAllColumns")
    }

    public open fun scrollViaScroller(sender: NSScroller): Unit {
        Native.objc_msgSend("void", this, "scrollViaScroller:", sender)
    }

    public open fun updateScroller(): Unit {
        Native.objc_msgSend("void", this, "updateScroller")
    }

    public open fun setMatrixClass(factoryId: ObjCClass): Unit {
        Native.objc_msgSend("void", this, "setMatrixClass:", factoryId)
    }

    public open fun matrixClass(): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "matrixClass") as ObjCClass

    public open fun columnOfMatrix(matrix: NSMatrix): Int =
        Native.objc_msgSend("int", this, "columnOfMatrix:", matrix) as Int

    public open fun matrixInColumn(column: Int): NSMatrix =
        Native.objc_msgSend("class objc.NSMatrix", this, "matrixInColumn:", column) as NSMatrix

    trait metaclass : IObjCObject
}

trait CIImage_AutoAdjustment : IObjCObject {
    public open fun autoAdjustmentFilters(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "autoAdjustmentFilters") as NSArray

    public open fun autoAdjustmentFiltersWithOptions(dict: NSDictionary): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "autoAdjustmentFiltersWithOptions:", dict) as NSArray

    trait metaclass : IObjCObject
}

trait CIImage_NSAppKitAdditions : IObjCObject {
    public open fun initWithBitmapImageRep(bitmapImageRep: NSBitmapImageRep): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithBitmapImageRep:", bitmapImageRep) as ObjCObject

    public open fun drawInRect_fromRect_operation_fraction(rect: Any, fromRect: Any, op: Any, delta: Double): Unit {
        Native.objc_msgSend("void", this, "drawInRect:fromRect:operation:fraction:", rect, fromRect, op, delta)
    }

    public open fun drawAtPoint_fromRect_operation_fraction(point: Any, fromRect: Any, op: Any, delta: Double): Unit {
        Native.objc_msgSend("void", this, "drawAtPoint:fromRect:operation:fraction:", point, fromRect, op, delta)
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSColorPanel : IObjCObject {
    public open fun orderFrontColorPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontColorPanel:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSColorPanelResponderMethod : IObjCObject {
    public open fun changeColor(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "changeColor:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSDocument_NSDeprecated : IObjCObject {
    public open fun saveToURL_ofType_forSaveOperation_error(url: NSURL, typeName: NSString, saveOperation: Any, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "saveToURL:ofType:forSaveOperation:error:", url, typeName, saveOperation, outError) as Boolean

    public open fun dataRepresentationOfType(type: NSString): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataRepresentationOfType:", type) as NSData

    public open fun fileAttributesToWriteToFile_ofType_saveOperation(fullDocumentPath: NSString, documentTypeName: NSString, saveOperationType: Any): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fileAttributesToWriteToFile:ofType:saveOperation:", fullDocumentPath, documentTypeName, saveOperationType) as NSDictionary

    public open fun fileName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "fileName") as NSString

    public open fun fileWrapperRepresentationOfType(type: NSString): NSFileWrapper =
        Native.objc_msgSend("class objc.NSFileWrapper", this, "fileWrapperRepresentationOfType:", type) as NSFileWrapper

    public open fun initWithContentsOfFile_ofType(absolutePath: NSString, typeName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfFile:ofType:", absolutePath, typeName) as ObjCObject

    public open fun initWithContentsOfURL_ofType(url: NSURL, typeName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:ofType:", url, typeName) as ObjCObject

    public open fun loadDataRepresentation_ofType(data: NSData, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "loadDataRepresentation:ofType:", data, type) as Boolean

    public open fun loadFileWrapperRepresentation_ofType(wrapper: NSFileWrapper, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "loadFileWrapperRepresentation:ofType:", wrapper, type) as Boolean

    public open fun printShowingPrintPanel(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "printShowingPrintPanel:", flag)
    }

    public open fun readFromFile_ofType(fileName: NSString, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "readFromFile:ofType:", fileName, type) as Boolean

    public open fun readFromURL_ofType(url: NSURL, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "readFromURL:ofType:", url, type) as Boolean

    public open fun revertToSavedFromFile_ofType(fileName: NSString, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "revertToSavedFromFile:ofType:", fileName, type) as Boolean

    public open fun revertToSavedFromURL_ofType(url: NSURL, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "revertToSavedFromURL:ofType:", url, type) as Boolean

    public open fun runModalPageLayoutWithPrintInfo(printInfo: NSPrintInfo): Int =
        Native.objc_msgSend("int", this, "runModalPageLayoutWithPrintInfo:", printInfo) as Int

    public open fun saveToFile_saveOperation_delegate_didSaveSelector_contextInfo(fileName: NSString, saveOperation: Any, delegate: ObjCObject, didSaveSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:", fileName, saveOperation, delegate, didSaveSelector, contextInfo)
    }

    public open fun setFileName(fileName: NSString): Unit {
        Native.objc_msgSend("void", this, "setFileName:", fileName)
    }

    public open fun writeToFile_ofType(fileName: NSString, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:ofType:", fileName, type) as Boolean

    public open fun writeToFile_ofType_originalFile_saveOperation(fullDocumentPath: NSString, documentTypeName: NSString, fullOriginalDocumentPath: NSString, saveOperationType: Any): Boolean =
        Native.objc_msgSend("boolean", this, "writeToFile:ofType:originalFile:saveOperation:", fullDocumentPath, documentTypeName, fullOriginalDocumentPath, saveOperationType) as Boolean

    public open fun writeToURL_ofType(url: NSURL, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "writeToURL:ofType:", url, type) as Boolean

    public open fun writeWithBackupToFile_ofType_saveOperation(fullDocumentPath: NSString, documentTypeName: NSString, saveOperationType: Any): Boolean =
        Native.objc_msgSend("boolean", this, "writeWithBackupToFile:ofType:saveOperation:", fullDocumentPath, documentTypeName, saveOperationType) as Boolean

    trait metaclass : IObjCObject
}

trait NSDocumentController_NSDeprecated : IObjCObject {
    public open fun openDocumentWithContentsOfURL_display_error(url: NSURL, displayDocument: Boolean, outError: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "openDocumentWithContentsOfURL:display:error:", url, displayDocument, outError) as ObjCObject

    public open fun reopenDocumentForURL_withContentsOfURL_error(url: NSURL, contentsURL: NSURL, outError: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "reopenDocumentForURL:withContentsOfURL:error:", url, contentsURL, outError) as Boolean

    public open fun fileExtensionsFromType(typeName: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "fileExtensionsFromType:", typeName) as NSArray

    public open fun typeFromFileExtension(fileNameExtensionOrHFSFileType: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "typeFromFileExtension:", fileNameExtensionOrHFSFileType) as NSString

    public open fun documentForFileName(fileName: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "documentForFileName:", fileName) as ObjCObject

    public open fun fileNamesFromRunningOpenPanel(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "fileNamesFromRunningOpenPanel") as NSArray

    public open fun makeDocumentWithContentsOfFile_ofType(fileName: NSString, type: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "makeDocumentWithContentsOfFile:ofType:", fileName, type) as ObjCObject

    public open fun makeDocumentWithContentsOfURL_ofType(url: NSURL, type: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "makeDocumentWithContentsOfURL:ofType:", url, type) as ObjCObject

    public open fun makeUntitledDocumentOfType(type: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "makeUntitledDocumentOfType:", type) as ObjCObject

    public open fun openDocumentWithContentsOfFile_display(fileName: NSString, display: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "openDocumentWithContentsOfFile:display:", fileName, display) as ObjCObject

    public open fun openDocumentWithContentsOfURL_display(url: NSURL, display: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "openDocumentWithContentsOfURL:display:", url, display) as ObjCObject

    public open fun openUntitledDocumentOfType_display(type: NSString, display: Boolean): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "openUntitledDocumentOfType:display:", type, display) as ObjCObject

    public open fun setShouldCreateUI(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShouldCreateUI:", flag)
    }

    public open fun shouldCreateUI(): Boolean =
        Native.objc_msgSend("boolean", this, "shouldCreateUI") as Boolean

    trait metaclass : IObjCObject
}

trait NSFileWrapper_NSExtensions : IObjCObject {
    public open fun icon(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "icon") as NSImage

    public open fun setIcon(icon: NSImage): Unit {
        Native.objc_msgSend("void", this, "setIcon:", icon)
    }

    trait metaclass : IObjCObject
}

trait NSBundle_NSBundleHelpExtension : IObjCObject {
    public open fun contextHelpForKey(key: NSString): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "contextHelpForKey:", key) as NSAttributedString

    trait metaclass : IObjCObject
}

trait NSApplication_NSApplicationHelpExtension : IObjCObject {
    public open fun activateContextHelpMode(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "activateContextHelpMode:", sender)
    }

    public open fun showHelp(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "showHelp:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSGestureRecognizer_NSSubclassUse : IObjCObject {
    public open fun state(): Any =
        Native.objc_msgSend("class objc.Any", this, "state")

    public open fun setState(state: Any): Unit {
        Native.objc_msgSend("void", this, "setState:", state)
    }

    public open fun reset(): Unit {
        Native.objc_msgSend("void", this, "reset")
    }

    public open fun canPreventGestureRecognizer(preventedGestureRecognizer: NSGestureRecognizer): Boolean =
        Native.objc_msgSend("boolean", this, "canPreventGestureRecognizer:", preventedGestureRecognizer) as Boolean

    public open fun canBePreventedByGestureRecognizer(preventingGestureRecognizer: NSGestureRecognizer): Boolean =
        Native.objc_msgSend("boolean", this, "canBePreventedByGestureRecognizer:", preventingGestureRecognizer) as Boolean

    public open fun shouldRequireFailureOfGestureRecognizer(otherGestureRecognizer: NSGestureRecognizer): Boolean =
        Native.objc_msgSend("boolean", this, "shouldRequireFailureOfGestureRecognizer:", otherGestureRecognizer) as Boolean

    public open fun shouldBeRequiredToFailByGestureRecognizer(otherGestureRecognizer: NSGestureRecognizer): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBeRequiredToFailByGestureRecognizer:", otherGestureRecognizer) as Boolean

    public open fun mouseDown(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDown:", event)
    }

    public open fun rightMouseDown(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rightMouseDown:", event)
    }

    public open fun otherMouseDown(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "otherMouseDown:", event)
    }

    public open fun mouseUp(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseUp:", event)
    }

    public open fun rightMouseUp(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rightMouseUp:", event)
    }

    public open fun otherMouseUp(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "otherMouseUp:", event)
    }

    public open fun mouseDragged(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "mouseDragged:", event)
    }

    public open fun rightMouseDragged(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rightMouseDragged:", event)
    }

    public open fun otherMouseDragged(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "otherMouseDragged:", event)
    }

    public open fun keyDown(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyDown:", event)
    }

    public open fun keyUp(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "keyUp:", event)
    }

    public open fun flagsChanged(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "flagsChanged:", event)
    }

    public open fun tabletPoint(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "tabletPoint:", event)
    }

    public open fun magnifyWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "magnifyWithEvent:", event)
    }

    public open fun rotateWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rotateWithEvent:", event)
    }

    public open fun pressureChangeWithEvent(event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "pressureChangeWithEvent:", event)
    }

    trait metaclass : IObjCObject
}

trait NSLayoutConstraint_NSIdentifier : IObjCObject {
    public open fun identifier(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "identifier") as NSString

    public open fun setIdentifier(identifier: NSString): Unit {
        Native.objc_msgSend("void", this, "setIdentifier:", identifier)
    }

    trait metaclass : IObjCObject
}

trait NSView_NSConstraintBasedLayoutInstallingConstraints : IObjCObject {
    public open fun constraints(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "constraints") as NSArray

    public open fun addConstraint(constraint: NSLayoutConstraint): Unit {
        Native.objc_msgSend("void", this, "addConstraint:", constraint)
    }

    public open fun addConstraints(constraints: NSArray): Unit {
        Native.objc_msgSend("void", this, "addConstraints:", constraints)
    }

    public open fun removeConstraint(constraint: NSLayoutConstraint): Unit {
        Native.objc_msgSend("void", this, "removeConstraint:", constraint)
    }

    public open fun removeConstraints(constraints: NSArray): Unit {
        Native.objc_msgSend("void", this, "removeConstraints:", constraints)
    }

    trait metaclass : IObjCObject
}

trait NSWindow_NSConstraintBasedLayoutCoreMethods : IObjCObject {
    public open fun updateConstraintsIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "updateConstraintsIfNeeded")
    }

    public open fun layoutIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "layoutIfNeeded")
    }

    trait metaclass : IObjCObject
}

trait NSView_NSConstraintBasedLayoutCoreMethods : IObjCObject {
    public open fun updateConstraintsForSubtreeIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "updateConstraintsForSubtreeIfNeeded")
    }

    public open fun updateConstraints(): Unit {
        Native.objc_msgSend("void", this, "updateConstraints")
    }

    public open fun needsUpdateConstraints(): Boolean =
        Native.objc_msgSend("boolean", this, "needsUpdateConstraints") as Boolean

    public open fun setNeedsUpdateConstraints(needsUpdateConstraints: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNeedsUpdateConstraints:", needsUpdateConstraints)
    }

    public open fun layoutSubtreeIfNeeded(): Unit {
        Native.objc_msgSend("void", this, "layoutSubtreeIfNeeded")
    }

    public open fun layout(): Unit {
        Native.objc_msgSend("void", this, "layout")
    }

    public open fun needsLayout(): Boolean =
        Native.objc_msgSend("boolean", this, "needsLayout") as Boolean

    public open fun setNeedsLayout(needsLayout: Boolean): Unit {
        Native.objc_msgSend("void", this, "setNeedsLayout:", needsLayout)
    }

    trait metaclass : IObjCObject
}

trait NSView_NSConstraintBasedCompatibility : IObjCObject {
    public open fun translatesAutoresizingMaskIntoConstraints(): Boolean =
        Native.objc_msgSend("boolean", this, "translatesAutoresizingMaskIntoConstraints") as Boolean

    public open fun setTranslatesAutoresizingMaskIntoConstraints(translatesAutoresizingMaskIntoConstraints: Boolean): Unit {
        Native.objc_msgSend("void", this, "setTranslatesAutoresizingMaskIntoConstraints:", translatesAutoresizingMaskIntoConstraints)
    }

    trait metaclass : IObjCObject {
        public open fun requiresConstraintBasedLayout(): Boolean =
            Native.objc_msgSend("boolean", this, "requiresConstraintBasedLayout") as Boolean
    }
}

trait NSView_NSConstraintBasedLayoutLayering : IObjCObject {
    public open fun alignmentRectForFrame(frame: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "alignmentRectForFrame:", frame)

    public open fun frameForAlignmentRect(alignmentRect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "frameForAlignmentRect:", alignmentRect)

    public open fun alignmentRectInsets(): Any =
        Native.objc_msgSend("class objc.Any", this, "alignmentRectInsets")

    public open fun baselineOffsetFromBottom(): Double =
        Native.objc_msgSend("double", this, "baselineOffsetFromBottom") as Double

    public open fun intrinsicContentSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "intrinsicContentSize")

    public open fun invalidateIntrinsicContentSize(): Unit {
        Native.objc_msgSend("void", this, "invalidateIntrinsicContentSize")
    }

    public open fun contentHuggingPriorityForOrientation(orientation: Any): Float =
        Native.objc_msgSend("float", this, "contentHuggingPriorityForOrientation:", orientation) as Float

    public open fun setContentHuggingPriority_forOrientation(priority: Float, orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setContentHuggingPriority:forOrientation:", priority, orientation)
    }

    public open fun contentCompressionResistancePriorityForOrientation(orientation: Any): Float =
        Native.objc_msgSend("float", this, "contentCompressionResistancePriorityForOrientation:", orientation) as Float

    public open fun setContentCompressionResistancePriority_forOrientation(priority: Float, orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setContentCompressionResistancePriority:forOrientation:", priority, orientation)
    }

    trait metaclass : IObjCObject
}

trait NSControl_NSConstraintBasedLayoutLayering : IObjCObject {
    public open fun invalidateIntrinsicContentSizeForCell(cell: NSCell): Unit {
        Native.objc_msgSend("void", this, "invalidateIntrinsicContentSizeForCell:", cell)
    }

    trait metaclass : IObjCObject
}

trait NSWindow_NSConstraintBasedLayoutAnchoring : IObjCObject {
    public open fun anchorAttributeForOrientation(orientation: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "anchorAttributeForOrientation:", orientation)

    public open fun setAnchorAttribute_forOrientation(attr: Any, orientation: Any): Unit {
        Native.objc_msgSend("void", this, "setAnchorAttribute:forOrientation:", attr, orientation)
    }

    trait metaclass : IObjCObject
}

trait NSView_NSConstraintBasedLayoutFittingSize : IObjCObject {
    public open fun fittingSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "fittingSize")

    trait metaclass : IObjCObject
}

trait NSView_NSConstraintBasedLayoutDebugging : IObjCObject {
    public open fun constraintsAffectingLayoutForOrientation(orientation: Any): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "constraintsAffectingLayoutForOrientation:", orientation) as NSArray

    public open fun hasAmbiguousLayout(): Boolean =
        Native.objc_msgSend("boolean", this, "hasAmbiguousLayout") as Boolean

    public open fun exerciseAmbiguityInLayout(): Unit {
        Native.objc_msgSend("void", this, "exerciseAmbiguityInLayout")
    }

    trait metaclass : IObjCObject
}

trait NSWindow_NSConstraintBasedLayoutDebugging : IObjCObject {
    public open fun visualizeConstraints(constraints: NSArray): Unit {
        Native.objc_msgSend("void", this, "visualizeConstraints:", constraints)
    }

    trait metaclass : IObjCObject
}

trait NSBundle_NSBundleImageExtension : IObjCObject {
    public open fun imageForResource(name: NSString): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "imageForResource:", name) as NSImage

    public open fun pathForImageResource(name: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathForImageResource:", name) as NSString

    public open fun URLForImageResource(name: NSString): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLForImageResource:", name) as NSURL

    trait metaclass : IObjCObject
}

trait NSImage_NSDeprecated : IObjCObject {
    public open fun setFlipped(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFlipped:", flag)
    }

    public open fun isFlipped(): Boolean =
        Native.objc_msgSend("boolean", this, "isFlipped") as Boolean

    public open fun dissolveToPoint_fraction(point: Any, aFloat: Double): Unit {
        Native.objc_msgSend("void", this, "dissolveToPoint:fraction:", point, aFloat)
    }

    public open fun dissolveToPoint_fromRect_fraction(point: Any, rect: Any, aFloat: Double): Unit {
        Native.objc_msgSend("void", this, "dissolveToPoint:fromRect:fraction:", point, rect, aFloat)
    }

    public open fun compositeToPoint_operation(point: Any, op: Any): Unit {
        Native.objc_msgSend("void", this, "compositeToPoint:operation:", point, op)
    }

    public open fun compositeToPoint_fromRect_operation(point: Any, rect: Any, op: Any): Unit {
        Native.objc_msgSend("void", this, "compositeToPoint:fromRect:operation:", point, rect, op)
    }

    public open fun compositeToPoint_operation_fraction(point: Any, op: Any, delta: Double): Unit {
        Native.objc_msgSend("void", this, "compositeToPoint:operation:fraction:", point, op, delta)
    }

    public open fun compositeToPoint_fromRect_operation_fraction(point: Any, rect: Any, op: Any, delta: Double): Unit {
        Native.objc_msgSend("void", this, "compositeToPoint:fromRect:operation:fraction:", point, rect, op, delta)
    }

    public open fun lockFocusOnRepresentation(imageRepresentation: NSImageRep): Unit {
        Native.objc_msgSend("void", this, "lockFocusOnRepresentation:", imageRepresentation)
    }

    public open fun setScalesWhenResized(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setScalesWhenResized:", flag)
    }

    public open fun scalesWhenResized(): Boolean =
        Native.objc_msgSend("boolean", this, "scalesWhenResized") as Boolean

    public open fun setDataRetained(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDataRetained:", flag)
    }

    public open fun isDataRetained(): Boolean =
        Native.objc_msgSend("boolean", this, "isDataRetained") as Boolean

    public open fun setCachedSeparately(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCachedSeparately:", flag)
    }

    public open fun isCachedSeparately(): Boolean =
        Native.objc_msgSend("boolean", this, "isCachedSeparately") as Boolean

    public open fun setCacheDepthMatchesImageDepth(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCacheDepthMatchesImageDepth:", flag)
    }

    public open fun cacheDepthMatchesImageDepth(): Boolean =
        Native.objc_msgSend("boolean", this, "cacheDepthMatchesImageDepth") as Boolean

    trait metaclass : IObjCObject
}

trait NSNib_NSDeprecated : IObjCObject {
    public open fun initWithContentsOfURL(nibFileURL: NSURL): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithContentsOfURL:", nibFileURL) as ObjCObject

    public open fun instantiateNibWithExternalNameTable(externalNameTable: NSDictionary): Boolean =
        Native.objc_msgSend("boolean", this, "instantiateNibWithExternalNameTable:", externalNameTable) as Boolean

    public open fun instantiateNibWithOwner_topLevelObjects(owner: ObjCObject, topLevelObjects: Pointer<NSArray>): Boolean =
        Native.objc_msgSend("boolean", this, "instantiateNibWithOwner:topLevelObjects:", owner, topLevelObjects) as Boolean

    trait metaclass : IObjCObject
}

trait NSBundle_NSNibLoading : IObjCObject {
    public open fun loadNibNamed_owner_topLevelObjects(nibName: NSString, owner: ObjCObject, topLevelObjects: Pointer<NSArray>): Boolean =
        Native.objc_msgSend("boolean", this, "loadNibNamed:owner:topLevelObjects:", nibName, owner, topLevelObjects) as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSNibAwaking : IObjCObject {
    public open fun awakeFromNib(): Unit {
        Native.objc_msgSend("void", this, "awakeFromNib")
    }

    public open fun prepareForInterfaceBuilder(): Unit {
        Native.objc_msgSend("void", this, "prepareForInterfaceBuilder")
    }

    trait metaclass : IObjCObject
}

trait NSBundle_NSNibLoadingDeprecated : IObjCObject {
    public open fun loadNibFile_externalNameTable_withZone(fileName: NSString, context: NSDictionary, zone: Pointer<Any>): Boolean =
        Native.objc_msgSend("boolean", this, "loadNibFile:externalNameTable:withZone:", fileName, context, zone) as Boolean

    trait metaclass : IObjCObject {
        public open fun loadNibFile_externalNameTable_withZone(fileName: NSString, context: NSDictionary, zone: Pointer<Any>): Boolean =
            Native.objc_msgSend("boolean", this, "loadNibFile:externalNameTable:withZone:", fileName, context, zone) as Boolean

        public open fun loadNibNamed_owner(nibName: NSString, owner: ObjCObject): Boolean =
            Native.objc_msgSend("boolean", this, "loadNibNamed:owner:", nibName, owner) as Boolean
    }
}

trait NSPrinter_NSDeprecated : IObjCObject {
    public open fun statusForTable(tableName: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "statusForTable:", tableName)

    public open fun isKey_inTable(key: NSString, table: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isKey:inTable:", key, table) as Boolean

    public open fun booleanForKey_inTable(key: NSString, table: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "booleanForKey:inTable:", key, table) as Boolean

    public open fun floatForKey_inTable(key: NSString, table: NSString): Float =
        Native.objc_msgSend("float", this, "floatForKey:inTable:", key, table) as Float

    public open fun intForKey_inTable(key: NSString, table: NSString): Int =
        Native.objc_msgSend("int", this, "intForKey:inTable:", key, table) as Int

    public open fun rectForKey_inTable(key: NSString, table: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "rectForKey:inTable:", key, table)

    public open fun sizeForKey_inTable(key: NSString, table: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "sizeForKey:inTable:", key, table)

    public open fun stringForKey_inTable(key: NSString, table: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "stringForKey:inTable:", key, table) as NSString

    public open fun stringListForKey_inTable(key: NSString, table: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "stringListForKey:inTable:", key, table) as NSArray

    public open fun imageRectForPaper(paperName: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "imageRectForPaper:", paperName)

    public open fun acceptsBinary(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsBinary") as Boolean

    public open fun isColor(): Boolean =
        Native.objc_msgSend("boolean", this, "isColor") as Boolean

    public open fun isFontAvailable(faceName: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "isFontAvailable:", faceName) as Boolean

    public open fun isOutputStackInReverseOrder(): Boolean =
        Native.objc_msgSend("boolean", this, "isOutputStackInReverseOrder") as Boolean

    public open fun domain(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "domain") as NSString

    public open fun host(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "host") as NSString

    public open fun note(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "note") as NSString

    trait metaclass : IObjCObject {
        public open fun printerWithName_domain_includeUnavailable(name: NSString, domain: NSString, flag: Boolean): NSPrinter =
            Native.objc_msgSend("class objc.NSPrinter", this, "printerWithName:domain:includeUnavailable:", name, domain, flag) as NSPrinter
    }
}

trait NSSpellChecker_NSDeprecated : IObjCObject {
    public open fun guessesForWord(word: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "guessesForWord:", word) as NSArray

    public open fun forgetWord(word: NSString): Unit {
        Native.objc_msgSend("void", this, "forgetWord:", word)
    }

    trait metaclass : IObjCObject
}

trait NSSplitView_NSDeprecated : IObjCObject {
    public open fun setIsPaneSplitter(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIsPaneSplitter:", flag)
    }

    public open fun isPaneSplitter(): Boolean =
        Native.objc_msgSend("boolean", this, "isPaneSplitter") as Boolean

    trait metaclass : IObjCObject
}

trait NSObject_NSSavePanelDelegateDeprecated : IObjCObject {
    public open fun panel_isValidFilename(sender: ObjCObject, filename: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "panel:isValidFilename:", sender, filename) as Boolean

    public open fun panel_directoryDidChange(sender: ObjCObject, path: NSString): Unit {
        Native.objc_msgSend("void", this, "panel:directoryDidChange:", sender, path)
    }

    public open fun panel_compareFilename_with_caseSensitive(sender: ObjCObject, name1: NSString, name2: NSString, caseSensitive: Boolean): Any =
        Native.objc_msgSend("class objc.Any", this, "panel:compareFilename:with:caseSensitive:", sender, name1, name2, caseSensitive)

    public open fun panel_shouldShowFilename(sender: ObjCObject, filename: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "panel:shouldShowFilename:", sender, filename) as Boolean

    trait metaclass : IObjCObject
}

trait NSSavePanel_NSDeprecated : IObjCObject {
    public open fun filename(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "filename") as NSString

    public open fun directory(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "directory") as NSString

    public open fun setDirectory(path: NSString): Unit {
        Native.objc_msgSend("void", this, "setDirectory:", path)
    }

    public open fun requiredFileType(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "requiredFileType") as NSString

    public open fun setRequiredFileType(type: NSString): Unit {
        Native.objc_msgSend("void", this, "setRequiredFileType:", type)
    }

    public open fun beginSheetForDirectory_file_modalForWindow_modalDelegate_didEndSelector_contextInfo(path: NSString, name: NSString, docWindow: NSWindow, delegate: ObjCObject, didEndSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:", path, name, docWindow, delegate, didEndSelector, contextInfo)
    }

    public open fun runModalForDirectory_file(path: NSString, name: NSString): Int =
        Native.objc_msgSend("int", this, "runModalForDirectory:file:", path, name) as Int

    public open fun selectText(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "selectText:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSOpenPanel_NSDeprecated : IObjCObject {
    public open fun filenames(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "filenames") as NSArray

    public open fun beginSheetForDirectory_file_types_modalForWindow_modalDelegate_didEndSelector_contextInfo(path: NSString, name: NSString, fileTypes: NSArray, docWindow: NSWindow, delegate: ObjCObject, didEndSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:", path, name, fileTypes, docWindow, delegate, didEndSelector, contextInfo)
    }

    public open fun beginForDirectory_file_types_modelessDelegate_didEndSelector_contextInfo(path: NSString, name: NSString, fileTypes: NSArray, delegate: ObjCObject, didEndSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:", path, name, fileTypes, delegate, didEndSelector, contextInfo)
    }

    public open fun runModalForDirectory_file_types(path: NSString, name: NSString, fileTypes: NSArray): Int =
        Native.objc_msgSend("int", this, "runModalForDirectory:file:types:", path, name, fileTypes) as Int

    public open fun runModalForTypes(fileTypes: NSArray): Int =
        Native.objc_msgSend("int", this, "runModalForTypes:", fileTypes) as Int

    trait metaclass : IObjCObject
}

trait NSPageLayout_NSDeprecated : IObjCObject {
    public open fun setAccessoryView(accessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", accessoryView)
    }

    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun readPrintInfo(): Unit {
        Native.objc_msgSend("void", this, "readPrintInfo")
    }

    public open fun writePrintInfo(): Unit {
        Native.objc_msgSend("void", this, "writePrintInfo")
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSPageLayoutPanel : IObjCObject {
    public open fun runPageLayout(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "runPageLayout:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSPrintInfo_NSDeprecated : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun setDefaultPrinter(printer: NSPrinter): Unit {
            Native.objc_msgSend("void", this, "setDefaultPrinter:", printer)
        }

        public open fun sizeForPaperName(name: NSString): Any =
            Native.objc_msgSend("class objc.Any", this, "sizeForPaperName:", name)
    }
}

trait NSPrintOperation_NSDeprecated : IObjCObject {
    public open fun setAccessoryView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", view)
    }

    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun setJobStyleHint(hint: NSString): Unit {
        Native.objc_msgSend("void", this, "setJobStyleHint:", hint)
    }

    public open fun jobStyleHint(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "jobStyleHint") as NSString

    public open fun setShowPanels(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setShowPanels:", flag)
    }

    public open fun showPanels(): Boolean =
        Native.objc_msgSend("boolean", this, "showPanels") as Boolean

    trait metaclass : IObjCObject
}

trait NSPrintPanel_NSDeprecated : IObjCObject {
    public open fun setAccessoryView(accessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setAccessoryView:", accessoryView)
    }

    public open fun accessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "accessoryView") as NSView

    public open fun updateFromPrintInfo(): Unit {
        Native.objc_msgSend("void", this, "updateFromPrintInfo")
    }

    public open fun finalWritePrintInfo(): Unit {
        Native.objc_msgSend("void", this, "finalWritePrintInfo")
    }

    trait metaclass : IObjCObject
}

trait NSScreen_NSDeprecated : IObjCObject {
    public open fun userSpaceScaleFactor(): Double =
        Native.objc_msgSend("double", this, "userSpaceScaleFactor") as Double

    trait metaclass : IObjCObject
}

trait NSScroller_NSDeprecated : IObjCObject {
    public open fun setFloatValue_knobProportion(aFloat: Float, proportion: Double): Unit {
        Native.objc_msgSend("void", this, "setFloatValue:knobProportion:", aFloat, proportion)
    }

    trait metaclass : IObjCObject
}

trait NSScrollView_NSRulerSupport : IObjCObject {
    public open fun rulersVisible(): Boolean =
        Native.objc_msgSend("boolean", this, "rulersVisible") as Boolean

    public open fun setRulersVisible(rulersVisible: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRulersVisible:", rulersVisible)
    }

    public open fun hasHorizontalRuler(): Boolean =
        Native.objc_msgSend("boolean", this, "hasHorizontalRuler") as Boolean

    public open fun setHasHorizontalRuler(hasHorizontalRuler: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasHorizontalRuler:", hasHorizontalRuler)
    }

    public open fun hasVerticalRuler(): Boolean =
        Native.objc_msgSend("boolean", this, "hasVerticalRuler") as Boolean

    public open fun setHasVerticalRuler(hasVerticalRuler: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHasVerticalRuler:", hasVerticalRuler)
    }

    public open fun horizontalRulerView(): NSRulerView =
        Native.objc_msgSend("class objc.NSRulerView", this, "horizontalRulerView") as NSRulerView

    public open fun setHorizontalRulerView(horizontalRulerView: NSRulerView): Unit {
        Native.objc_msgSend("void", this, "setHorizontalRulerView:", horizontalRulerView)
    }

    public open fun verticalRulerView(): NSRulerView =
        Native.objc_msgSend("class objc.NSRulerView", this, "verticalRulerView") as NSRulerView

    public open fun setVerticalRulerView(verticalRulerView: NSRulerView): Unit {
        Native.objc_msgSend("void", this, "setVerticalRulerView:", verticalRulerView)
    }

    trait metaclass : IObjCObject {
        public open fun setRulerViewClass(rulerViewClass: ObjCClass): Unit {
            Native.objc_msgSend("void", this, "setRulerViewClass:", rulerViewClass)
        }

        public open fun rulerViewClass(): ObjCClass =
            Native.objc_msgSend("interface kni.objc.ObjCClass", this, "rulerViewClass") as ObjCClass
    }
}

trait NSScrollView_NSFindBarSupport : IObjCObject {
    public open fun findBarPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "findBarPosition")

    public open fun setFindBarPosition(findBarPosition: Any): Unit {
        Native.objc_msgSend("void", this, "setFindBarPosition:", findBarPosition)
    }

    trait metaclass : IObjCObject
}

trait NSSegmentedCell_NSSegmentBackgroundStyle : IObjCObject {
    public open fun interiorBackgroundStyleForSegment(segment: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "interiorBackgroundStyleForSegment:", segment)

    trait metaclass : IObjCObject
}

trait NSSliderCell_NSTickMarkSupport : IObjCObject {
    public open fun numberOfTickMarks(): Int =
        Native.objc_msgSend("int", this, "numberOfTickMarks") as Int

    public open fun setNumberOfTickMarks(numberOfTickMarks: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfTickMarks:", numberOfTickMarks)
    }

    public open fun tickMarkPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "tickMarkPosition")

    public open fun setTickMarkPosition(tickMarkPosition: Any): Unit {
        Native.objc_msgSend("void", this, "setTickMarkPosition:", tickMarkPosition)
    }

    public open fun allowsTickMarkValuesOnly(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsTickMarkValuesOnly") as Boolean

    public open fun setAllowsTickMarkValuesOnly(allowsTickMarkValuesOnly: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsTickMarkValuesOnly:", allowsTickMarkValuesOnly)
    }

    public open fun tickMarkValueAtIndex(index: Int): Double =
        Native.objc_msgSend("double", this, "tickMarkValueAtIndex:", index) as Double

    public open fun rectOfTickMarkAtIndex(index: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rectOfTickMarkAtIndex:", index)

    public open fun indexOfTickMarkAtPoint(point: Any): Int =
        Native.objc_msgSend("int", this, "indexOfTickMarkAtPoint:", point) as Int

    public open fun closestTickMarkValueToValue(value: Double): Double =
        Native.objc_msgSend("double", this, "closestTickMarkValueToValue:", value) as Double

    public open fun drawTickMarks(): Unit {
        Native.objc_msgSend("void", this, "drawTickMarks")
    }

    trait metaclass : IObjCObject
}

trait NSSlider_NSTickMarkSupport : IObjCObject {
    public open fun numberOfTickMarks(): Int =
        Native.objc_msgSend("int", this, "numberOfTickMarks") as Int

    public open fun setNumberOfTickMarks(numberOfTickMarks: Int): Unit {
        Native.objc_msgSend("void", this, "setNumberOfTickMarks:", numberOfTickMarks)
    }

    public open fun tickMarkPosition(): Any =
        Native.objc_msgSend("class objc.Any", this, "tickMarkPosition")

    public open fun setTickMarkPosition(tickMarkPosition: Any): Unit {
        Native.objc_msgSend("void", this, "setTickMarkPosition:", tickMarkPosition)
    }

    public open fun allowsTickMarkValuesOnly(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsTickMarkValuesOnly") as Boolean

    public open fun setAllowsTickMarkValuesOnly(allowsTickMarkValuesOnly: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsTickMarkValuesOnly:", allowsTickMarkValuesOnly)
    }

    public open fun tickMarkValueAtIndex(index: Int): Double =
        Native.objc_msgSend("double", this, "tickMarkValueAtIndex:", index) as Double

    public open fun rectOfTickMarkAtIndex(index: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rectOfTickMarkAtIndex:", index)

    public open fun indexOfTickMarkAtPoint(point: Any): Int =
        Native.objc_msgSend("int", this, "indexOfTickMarkAtPoint:", point) as Int

    public open fun closestTickMarkValueToValue(value: Double): Double =
        Native.objc_msgSend("double", this, "closestTickMarkValueToValue:", value) as Double

    trait metaclass : IObjCObject
}

trait NSTextField_NSTextFieldAttributedStringMethods : IObjCObject {
    public open fun allowsEditingTextAttributes(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsEditingTextAttributes") as Boolean

    public open fun setAllowsEditingTextAttributes(allowsEditingTextAttributes: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsEditingTextAttributes:", allowsEditingTextAttributes)
    }

    public open fun importsGraphics(): Boolean =
        Native.objc_msgSend("boolean", this, "importsGraphics") as Boolean

    public open fun setImportsGraphics(importsGraphics: Boolean): Unit {
        Native.objc_msgSend("void", this, "setImportsGraphics:", importsGraphics)
    }

    trait metaclass : IObjCObject
}

trait NSTextField_NSDeprecated : IObjCObject {
    public open fun setTitleWithMnemonic(stringWithAmpersand: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitleWithMnemonic:", stringWithAmpersand)
    }

    trait metaclass : IObjCObject
}

trait NSAttributedString_NSAttributedStringKitAdditions : IObjCObject {
    public open fun fontAttributesInRange(range: Any): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "fontAttributesInRange:", range) as NSDictionary

    public open fun rulerAttributesInRange(range: Any): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "rulerAttributesInRange:", range) as NSDictionary

    public open fun containsAttachments(): Boolean =
        Native.objc_msgSend("boolean", this, "containsAttachments") as Boolean

    public open fun lineBreakBeforeIndex_withinRange(location: Int, aRange: Any): Int =
        Native.objc_msgSend("int", this, "lineBreakBeforeIndex:withinRange:", location, aRange) as Int

    public open fun lineBreakByHyphenatingBeforeIndex_withinRange(location: Int, aRange: Any): Int =
        Native.objc_msgSend("int", this, "lineBreakByHyphenatingBeforeIndex:withinRange:", location, aRange) as Int

    public open fun doubleClickAtIndex(location: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "doubleClickAtIndex:", location)

    public open fun nextWordFromIndex_forward(location: Int, isForward: Boolean): Int =
        Native.objc_msgSend("int", this, "nextWordFromIndex:forward:", location, isForward) as Int

    public open fun URLAtIndex_effectiveRange(location: Int, effectiveRange: Pointer<Any>): NSURL =
        Native.objc_msgSend("class objc.NSURL", this, "URLAtIndex:effectiveRange:", location, effectiveRange) as NSURL

    public open fun rangeOfTextBlock_atIndex(block: NSTextBlock, location: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfTextBlock:atIndex:", block, location)

    public open fun rangeOfTextTable_atIndex(table: NSTextTable, location: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfTextTable:atIndex:", table, location)

    public open fun rangeOfTextList_atIndex(list: NSTextList, location: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeOfTextList:atIndex:", list, location)

    public open fun itemNumberInTextList_atIndex(list: NSTextList, location: Int): Int =
        Native.objc_msgSend("int", this, "itemNumberInTextList:atIndex:", list, location) as Int

    public open fun initWithURL_options_documentAttributes_error(url: NSURL, options: NSDictionary, dict: Pointer<NSDictionary>, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:options:documentAttributes:error:", url, options, dict, error) as ObjCObject

    public open fun initWithData_options_documentAttributes_error(data: NSData, options: NSDictionary, dict: Pointer<NSDictionary>, error: Pointer<NSError>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithData:options:documentAttributes:error:", data, options, dict, error) as ObjCObject

    public open fun initWithPath_documentAttributes(path: NSString, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithPath:documentAttributes:", path, dict) as ObjCObject

    public open fun initWithURL_documentAttributes(url: NSURL, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithURL:documentAttributes:", url, dict) as ObjCObject

    public open fun initWithRTF_documentAttributes(data: NSData, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRTF:documentAttributes:", data, dict) as ObjCObject

    public open fun initWithRTFD_documentAttributes(data: NSData, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRTFD:documentAttributes:", data, dict) as ObjCObject

    public open fun initWithHTML_documentAttributes(data: NSData, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithHTML:documentAttributes:", data, dict) as ObjCObject

    public open fun initWithHTML_baseURL_documentAttributes(data: NSData, base: NSURL, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithHTML:baseURL:documentAttributes:", data, base, dict) as ObjCObject

    public open fun initWithDocFormat_documentAttributes(data: NSData, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithDocFormat:documentAttributes:", data, dict) as ObjCObject

    public open fun initWithHTML_options_documentAttributes(data: NSData, options: NSDictionary, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithHTML:options:documentAttributes:", data, options, dict) as ObjCObject

    public open fun initWithRTFDFileWrapper_documentAttributes(wrapper: NSFileWrapper, dict: Pointer<NSDictionary>): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "initWithRTFDFileWrapper:documentAttributes:", wrapper, dict) as ObjCObject

    public open fun dataFromRange_documentAttributes_error(range: Any, dict: NSDictionary, error: Pointer<NSError>): NSData =
        Native.objc_msgSend("class objc.NSData", this, "dataFromRange:documentAttributes:error:", range, dict, error) as NSData

    public open fun fileWrapperFromRange_documentAttributes_error(range: Any, dict: NSDictionary, error: Pointer<NSError>): NSFileWrapper =
        Native.objc_msgSend("class objc.NSFileWrapper", this, "fileWrapperFromRange:documentAttributes:error:", range, dict, error) as NSFileWrapper

    public open fun RTFFromRange_documentAttributes(range: Any, dict: NSDictionary): NSData =
        Native.objc_msgSend("class objc.NSData", this, "RTFFromRange:documentAttributes:", range, dict) as NSData

    public open fun RTFDFromRange_documentAttributes(range: Any, dict: NSDictionary): NSData =
        Native.objc_msgSend("class objc.NSData", this, "RTFDFromRange:documentAttributes:", range, dict) as NSData

    public open fun RTFDFileWrapperFromRange_documentAttributes(range: Any, dict: NSDictionary): NSFileWrapper =
        Native.objc_msgSend("class objc.NSFileWrapper", this, "RTFDFileWrapperFromRange:documentAttributes:", range, dict) as NSFileWrapper

    public open fun docFormatFromRange_documentAttributes(range: Any, dict: NSDictionary): NSData =
        Native.objc_msgSend("class objc.NSData", this, "docFormatFromRange:documentAttributes:", range, dict) as NSData

    trait metaclass : IObjCObject
}

trait NSAttributedString_NSAttributedStringPasteboardAdditions : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun textTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "textTypes") as NSArray

        public open fun textUnfilteredTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "textUnfilteredTypes") as NSArray
    }
}

trait NSAttributedString_NSDeprecatedKitAdditions : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun textFileTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "textFileTypes") as NSArray

        public open fun textPasteboardTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "textPasteboardTypes") as NSArray

        public open fun textUnfilteredFileTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "textUnfilteredFileTypes") as NSArray

        public open fun textUnfilteredPasteboardTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "textUnfilteredPasteboardTypes") as NSArray
    }
}

trait NSMutableAttributedString_NSMutableAttributedStringKitAdditions : IObjCObject {
    public open fun readFromURL_options_documentAttributes_error(url: NSURL, opts: NSDictionary, dict: Pointer<NSDictionary>, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromURL:options:documentAttributes:error:", url, opts, dict, error) as Boolean

    public open fun readFromData_options_documentAttributes_error(data: NSData, opts: NSDictionary, dict: Pointer<NSDictionary>, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromData:options:documentAttributes:error:", data, opts, dict, error) as Boolean

    public open fun readFromURL_options_documentAttributes(url: NSURL, options: NSDictionary, dict: Pointer<NSDictionary>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromURL:options:documentAttributes:", url, options, dict) as Boolean

    public open fun readFromData_options_documentAttributes(data: NSData, options: NSDictionary, dict: Pointer<NSDictionary>): Boolean =
        Native.objc_msgSend("boolean", this, "readFromData:options:documentAttributes:", data, options, dict) as Boolean

    public open fun superscriptRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "superscriptRange:", range)
    }

    public open fun subscriptRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "subscriptRange:", range)
    }

    public open fun unscriptRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "unscriptRange:", range)
    }

    public open fun applyFontTraits_range(traitMask: Any, range: Any): Unit {
        Native.objc_msgSend("void", this, "applyFontTraits:range:", traitMask, range)
    }

    public open fun setAlignment_range(alignment: Any, range: Any): Unit {
        Native.objc_msgSend("void", this, "setAlignment:range:", alignment, range)
    }

    public open fun setBaseWritingDirection_range(writingDirection: Any, range: Any): Unit {
        Native.objc_msgSend("void", this, "setBaseWritingDirection:range:", writingDirection, range)
    }

    public open fun fixAttributesInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "fixAttributesInRange:", range)
    }

    public open fun fixFontAttributeInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "fixFontAttributeInRange:", range)
    }

    public open fun fixParagraphStyleAttributeInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "fixParagraphStyleAttributeInRange:", range)
    }

    public open fun fixAttachmentAttributeInRange(range: Any): Unit {
        Native.objc_msgSend("void", this, "fixAttachmentAttributeInRange:", range)
    }

    trait metaclass : IObjCObject
}

trait NSLayoutManager_NSTextViewSupport : IObjCObject {
    public open fun rulerMarkersForTextView_paragraphStyle_ruler(view: NSTextView, style: NSParagraphStyle, ruler: NSRulerView): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "rulerMarkersForTextView:paragraphStyle:ruler:", view, style, ruler) as NSArray

    public open fun rulerAccessoryViewForTextView_paragraphStyle_ruler_enabled(view: NSTextView, style: NSParagraphStyle, ruler: NSRulerView, isEnabled: Boolean): NSView =
        Native.objc_msgSend("class objc.NSView", this, "rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:", view, style, ruler, isEnabled) as NSView

    public open fun layoutManagerOwnsFirstResponderInWindow(window: NSWindow): Boolean =
        Native.objc_msgSend("boolean", this, "layoutManagerOwnsFirstResponderInWindow:", window) as Boolean

    public open fun firstTextView(): NSTextView =
        Native.objc_msgSend("class objc.NSTextView", this, "firstTextView") as NSTextView

    public open fun textViewForBeginningOfSelection(): NSTextView =
        Native.objc_msgSend("class objc.NSTextView", this, "textViewForBeginningOfSelection") as NSTextView

    public open fun drawBackgroundForGlyphRange_atPoint(glyphsToShow: Any, origin: Any): Unit {
        Native.objc_msgSend("void", this, "drawBackgroundForGlyphRange:atPoint:", glyphsToShow, origin)
    }

    public open fun drawGlyphsForGlyphRange_atPoint(glyphsToShow: Any, origin: Any): Unit {
        Native.objc_msgSend("void", this, "drawGlyphsForGlyphRange:atPoint:", glyphsToShow, origin)
    }

    public open fun showCGGlyphs_positions_count_font_matrix_attributes_inContext(glyphs: Pointer<Short>, positions: Pointer<Any>, glyphCount: Int, font: NSFont, textMatrix: NSAffineTransform, attributes: NSDictionary, graphicsContext: NSGraphicsContext): Unit {
        Native.objc_msgSend("void", this, "showCGGlyphs:positions:count:font:matrix:attributes:inContext:", glyphs, positions, glyphCount, font, textMatrix, attributes, graphicsContext)
    }

    public open fun showPackedGlyphs_length_glyphRange_atPoint_font_color_printingAdjustment(glyphs: Pointer<Char>, glyphLen: Int, glyphRange: Any, point: Any, font: NSFont, color: NSColor, printingAdjustment: Any): Unit {
        Native.objc_msgSend("void", this, "showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:", glyphs, glyphLen, glyphRange, point, font, color, printingAdjustment)
    }

    public open fun showAttachmentCell_inRect_characterIndex(cell: NSCell, rect: Any, attachmentIndex: Int): Unit {
        Native.objc_msgSend("void", this, "showAttachmentCell:inRect:characterIndex:", cell, rect, attachmentIndex)
    }

    public open fun fillBackgroundRectArray_count_forCharacterRange_color(rectArray: Pointer<Any>, rectCount: Int, charRange: Any, color: NSColor): Unit {
        Native.objc_msgSend("void", this, "fillBackgroundRectArray:count:forCharacterRange:color:", rectArray, rectCount, charRange, color)
    }

    public open fun drawUnderlineForGlyphRange_underlineType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: Any, underlineVal: Int, baselineOffset: Double, lineRect: Any, lineGlyphRange: Any, containerOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:", glyphRange, underlineVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin)
    }

    public open fun underlineGlyphRange_underlineType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: Any, underlineVal: Int, lineRect: Any, lineGlyphRange: Any, containerOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:", glyphRange, underlineVal, lineRect, lineGlyphRange, containerOrigin)
    }

    public open fun drawStrikethroughForGlyphRange_strikethroughType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: Any, strikethroughVal: Int, baselineOffset: Double, lineRect: Any, lineGlyphRange: Any, containerOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:", glyphRange, strikethroughVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin)
    }

    public open fun strikethroughGlyphRange_strikethroughType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: Any, strikethroughVal: Int, lineRect: Any, lineGlyphRange: Any, containerOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:", glyphRange, strikethroughVal, lineRect, lineGlyphRange, containerOrigin)
    }

    trait metaclass : IObjCObject
}

trait NSResponder_NSUserActivity : IObjCObject {
    public open fun userActivity(): NSUserActivity =
        Native.objc_msgSend("class objc.NSUserActivity", this, "userActivity") as NSUserActivity

    public open fun setUserActivity(userActivity: NSUserActivity): Unit {
        Native.objc_msgSend("void", this, "setUserActivity:", userActivity)
    }

    public open fun updateUserActivityState(userActivity: NSUserActivity): Unit {
        Native.objc_msgSend("void", this, "updateUserActivityState:", userActivity)
    }

    public open fun restoreUserActivityState(userActivity: NSUserActivity): Unit {
        Native.objc_msgSend("void", this, "restoreUserActivityState:", userActivity)
    }

    trait metaclass : IObjCObject
}

trait NSDocument_NSUserActivity : IObjCObject {
    public open fun userActivity(): NSUserActivity =
        Native.objc_msgSend("class objc.NSUserActivity", this, "userActivity") as NSUserActivity

    public open fun setUserActivity(userActivity: NSUserActivity): Unit {
        Native.objc_msgSend("void", this, "setUserActivity:", userActivity)
    }

    public open fun updateUserActivityState(activity: NSUserActivity): Unit {
        Native.objc_msgSend("void", this, "updateUserActivityState:", activity)
    }

    public open fun restoreUserActivityState(activity: NSUserActivity): Unit {
        Native.objc_msgSend("void", this, "restoreUserActivityState:", activity)
    }

    trait metaclass : IObjCObject
}

trait NSWindowController_NSWindowControllerStoryboardingMethods : IObjCObject {
    public open fun storyboard(): NSStoryboard =
        Native.objc_msgSend("class objc.NSStoryboard", this, "storyboard") as NSStoryboard

    trait metaclass : IObjCObject
}

trait NSWindowController_NSWindowControllerDismissing : IObjCObject {
    public open fun dismissController(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "dismissController:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSAttributedString_NSAttributedStringAttachmentConveniences : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun attributedStringWithAttachment(attachment: NSTextAttachment): NSAttributedString =
            Native.objc_msgSend("class objc.NSAttributedString", this, "attributedStringWithAttachment:", attachment) as NSAttributedString
    }
}

trait NSMutableAttributedString_NSMutableAttributedStringAttachmentConveniences : IObjCObject {
    public open fun updateAttachmentsFromPath(path: NSString): Unit {
        Native.objc_msgSend("void", this, "updateAttachmentsFromPath:", path)
    }

    trait metaclass : IObjCObject
}

trait NSTextView_NSCompletion : IObjCObject {
    public open fun complete(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "complete:", sender)
    }

    public open fun rangeForUserCompletion(): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeForUserCompletion")

    public open fun completionsForPartialWordRange_indexOfSelectedItem(charRange: Any, index: Pointer<Int>): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "completionsForPartialWordRange:indexOfSelectedItem:", charRange, index) as NSArray

    public open fun insertCompletion_forPartialWordRange_movement_isFinal(word: NSString, charRange: Any, movement: Int, flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "insertCompletion:forPartialWordRange:movement:isFinal:", word, charRange, movement, flag)
    }

    trait metaclass : IObjCObject
}

trait NSTextView_NSPasteboard : IObjCObject {
    public open fun writablePasteboardTypes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "writablePasteboardTypes") as NSArray

    public open fun writeSelectionToPasteboard_type(pboard: NSPasteboard, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "writeSelectionToPasteboard:type:", pboard, type) as Boolean

    public open fun writeSelectionToPasteboard_types(pboard: NSPasteboard, types: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "writeSelectionToPasteboard:types:", pboard, types) as Boolean

    public open fun readablePasteboardTypes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "readablePasteboardTypes") as NSArray

    public open fun preferredPasteboardTypeFromArray_restrictedToTypesFromArray(availableTypes: NSArray, allowedTypes: NSArray): NSString =
        Native.objc_msgSend("class objc.NSString", this, "preferredPasteboardTypeFromArray:restrictedToTypesFromArray:", availableTypes, allowedTypes) as NSString

    public open fun readSelectionFromPasteboard_type(pboard: NSPasteboard, type: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "readSelectionFromPasteboard:type:", pboard, type) as Boolean

    public open fun readSelectionFromPasteboard(pboard: NSPasteboard): Boolean =
        Native.objc_msgSend("boolean", this, "readSelectionFromPasteboard:", pboard) as Boolean

    public open fun validRequestorForSendType_returnType(sendType: NSString, returnType: NSString): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "validRequestorForSendType:returnType:", sendType, returnType) as ObjCObject

    public open fun pasteAsPlainText(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "pasteAsPlainText:", sender)
    }

    public open fun pasteAsRichText(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "pasteAsRichText:", sender)
    }

    trait metaclass : IObjCObject {
        public open fun registerForServices(): Unit {
            Native.objc_msgSend("void", this, "registerForServices")
        }
    }
}

trait NSTextView_NSDragging : IObjCObject {
    public open fun dragSelectionWithEvent_offset_slideBack(event: NSEvent, mouseOffset: Any, slideBack: Boolean): Boolean =
        Native.objc_msgSend("boolean", this, "dragSelectionWithEvent:offset:slideBack:", event, mouseOffset, slideBack) as Boolean

    public open fun dragImageForSelectionWithEvent_origin(event: NSEvent, origin: Pointer<Any>): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "dragImageForSelectionWithEvent:origin:", event, origin) as NSImage

    public open fun acceptableDragTypes(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "acceptableDragTypes") as NSArray

    public open fun dragOperationForDraggingInfo_type(dragInfo: Any, type: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "dragOperationForDraggingInfo:type:", dragInfo, type)

    public open fun cleanUpAfterDragOperation(): Unit {
        Native.objc_msgSend("void", this, "cleanUpAfterDragOperation")
    }

    trait metaclass : IObjCObject
}

trait NSTextView_NSSharing : IObjCObject {
    public open fun selectedRanges(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "selectedRanges") as NSArray

    public open fun setSelectedRanges(selectedRanges: NSArray): Unit {
        Native.objc_msgSend("void", this, "setSelectedRanges:", selectedRanges)
    }

    public open fun setSelectedRanges_affinity_stillSelecting(ranges: NSArray, affinity: Any, stillSelectingFlag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectedRanges:affinity:stillSelecting:", ranges, affinity, stillSelectingFlag)
    }

    public open fun setSelectedRange_affinity_stillSelecting(charRange: Any, affinity: Any, stillSelectingFlag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectedRange:affinity:stillSelecting:", charRange, affinity, stillSelectingFlag)
    }

    public open fun selectionAffinity(): Any =
        Native.objc_msgSend("class objc.Any", this, "selectionAffinity")

    public open fun selectionGranularity(): Any =
        Native.objc_msgSend("class objc.Any", this, "selectionGranularity")

    public open fun setSelectionGranularity(selectionGranularity: Any): Unit {
        Native.objc_msgSend("void", this, "setSelectionGranularity:", selectionGranularity)
    }

    public open fun selectedTextAttributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "selectedTextAttributes") as NSDictionary

    public open fun setSelectedTextAttributes(selectedTextAttributes: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setSelectedTextAttributes:", selectedTextAttributes)
    }

    public open fun insertionPointColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "insertionPointColor") as NSColor

    public open fun setInsertionPointColor(insertionPointColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setInsertionPointColor:", insertionPointColor)
    }

    public open fun updateInsertionPointStateAndRestartTimer(restartFlag: Boolean): Unit {
        Native.objc_msgSend("void", this, "updateInsertionPointStateAndRestartTimer:", restartFlag)
    }

    public open fun markedTextAttributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "markedTextAttributes") as NSDictionary

    public open fun setMarkedTextAttributes(markedTextAttributes: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setMarkedTextAttributes:", markedTextAttributes)
    }

    public open fun linkTextAttributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "linkTextAttributes") as NSDictionary

    public open fun setLinkTextAttributes(linkTextAttributes: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setLinkTextAttributes:", linkTextAttributes)
    }

    public open fun displaysLinkToolTips(): Boolean =
        Native.objc_msgSend("boolean", this, "displaysLinkToolTips") as Boolean

    public open fun setDisplaysLinkToolTips(displaysLinkToolTips: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDisplaysLinkToolTips:", displaysLinkToolTips)
    }

    public open fun acceptsGlyphInfo(): Boolean =
        Native.objc_msgSend("boolean", this, "acceptsGlyphInfo") as Boolean

    public open fun setAcceptsGlyphInfo(acceptsGlyphInfo: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAcceptsGlyphInfo:", acceptsGlyphInfo)
    }

    public open fun usesRuler(): Boolean =
        Native.objc_msgSend("boolean", this, "usesRuler") as Boolean

    public open fun setUsesRuler(usesRuler: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesRuler:", usesRuler)
    }

    public open fun usesInspectorBar(): Boolean =
        Native.objc_msgSend("boolean", this, "usesInspectorBar") as Boolean

    public open fun setUsesInspectorBar(usesInspectorBar: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesInspectorBar:", usesInspectorBar)
    }

    public open fun isContinuousSpellCheckingEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isContinuousSpellCheckingEnabled") as Boolean

    public open fun setContinuousSpellCheckingEnabled(continuousSpellCheckingEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setContinuousSpellCheckingEnabled:", continuousSpellCheckingEnabled)
    }

    public open fun toggleContinuousSpellChecking(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleContinuousSpellChecking:", sender)
    }

    public open fun spellCheckerDocumentTag(): Int =
        Native.objc_msgSend("int", this, "spellCheckerDocumentTag") as Int

    public open fun isGrammarCheckingEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isGrammarCheckingEnabled") as Boolean

    public open fun setGrammarCheckingEnabled(grammarCheckingEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setGrammarCheckingEnabled:", grammarCheckingEnabled)
    }

    public open fun toggleGrammarChecking(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleGrammarChecking:", sender)
    }

    public open fun setSpellingState_range(value: Int, charRange: Any): Unit {
        Native.objc_msgSend("void", this, "setSpellingState:range:", value, charRange)
    }

    public open fun typingAttributes(): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "typingAttributes") as NSDictionary

    public open fun setTypingAttributes(typingAttributes: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "setTypingAttributes:", typingAttributes)
    }

    public open fun shouldChangeTextInRanges_replacementStrings(affectedRanges: NSArray, replacementStrings: NSArray): Boolean =
        Native.objc_msgSend("boolean", this, "shouldChangeTextInRanges:replacementStrings:", affectedRanges, replacementStrings) as Boolean

    public open fun rangesForUserTextChange(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "rangesForUserTextChange") as NSArray

    public open fun rangesForUserCharacterAttributeChange(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "rangesForUserCharacterAttributeChange") as NSArray

    public open fun rangesForUserParagraphAttributeChange(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "rangesForUserParagraphAttributeChange") as NSArray

    public open fun shouldChangeTextInRange_replacementString(affectedCharRange: Any, replacementString: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "shouldChangeTextInRange:replacementString:", affectedCharRange, replacementString) as Boolean

    public open fun didChangeText(): Unit {
        Native.objc_msgSend("void", this, "didChangeText")
    }

    public open fun rangeForUserTextChange(): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeForUserTextChange")

    public open fun rangeForUserCharacterAttributeChange(): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeForUserCharacterAttributeChange")

    public open fun rangeForUserParagraphAttributeChange(): Any =
        Native.objc_msgSend("class objc.Any", this, "rangeForUserParagraphAttributeChange")

    public open fun allowsDocumentBackgroundColorChange(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsDocumentBackgroundColorChange") as Boolean

    public open fun setAllowsDocumentBackgroundColorChange(allowsDocumentBackgroundColorChange: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsDocumentBackgroundColorChange:", allowsDocumentBackgroundColorChange)
    }

    public open fun defaultParagraphStyle(): NSParagraphStyle =
        Native.objc_msgSend("class objc.NSParagraphStyle", this, "defaultParagraphStyle") as NSParagraphStyle

    public open fun setDefaultParagraphStyle(defaultParagraphStyle: NSParagraphStyle): Unit {
        Native.objc_msgSend("void", this, "setDefaultParagraphStyle:", defaultParagraphStyle)
    }

    public open fun allowsUndo(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsUndo") as Boolean

    public open fun setAllowsUndo(allowsUndo: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsUndo:", allowsUndo)
    }

    public open fun breakUndoCoalescing(): Unit {
        Native.objc_msgSend("void", this, "breakUndoCoalescing")
    }

    public open fun isCoalescingUndo(): Boolean =
        Native.objc_msgSend("boolean", this, "isCoalescingUndo") as Boolean

    public open fun allowsImageEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "allowsImageEditing") as Boolean

    public open fun setAllowsImageEditing(allowsImageEditing: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAllowsImageEditing:", allowsImageEditing)
    }

    public open fun showFindIndicatorForRange(charRange: Any): Unit {
        Native.objc_msgSend("void", this, "showFindIndicatorForRange:", charRange)
    }

    public open fun usesRolloverButtonForSelection(): Boolean =
        Native.objc_msgSend("boolean", this, "usesRolloverButtonForSelection") as Boolean

    public open fun setUsesRolloverButtonForSelection(usesRolloverButtonForSelection: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesRolloverButtonForSelection:", usesRolloverButtonForSelection)
    }

    public open fun delegate(): Any =
        Native.objc_msgSend("class objc.Any", this, "delegate")

    public open fun setDelegate(delegate: Any): Unit {
        Native.objc_msgSend("void", this, "setDelegate:", delegate)
    }

    public open fun isEditable(): Boolean =
        Native.objc_msgSend("boolean", this, "isEditable") as Boolean

    public open fun setEditable(editable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEditable:", editable)
    }

    public open fun isSelectable(): Boolean =
        Native.objc_msgSend("boolean", this, "isSelectable") as Boolean

    public open fun setSelectable(selectable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSelectable:", selectable)
    }

    public open fun isRichText(): Boolean =
        Native.objc_msgSend("boolean", this, "isRichText") as Boolean

    public open fun setRichText(richText: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRichText:", richText)
    }

    public open fun importsGraphics(): Boolean =
        Native.objc_msgSend("boolean", this, "importsGraphics") as Boolean

    public open fun setImportsGraphics(importsGraphics: Boolean): Unit {
        Native.objc_msgSend("void", this, "setImportsGraphics:", importsGraphics)
    }

    public open fun drawsBackground(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsBackground") as Boolean

    public open fun setDrawsBackground(drawsBackground: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsBackground:", drawsBackground)
    }

    public open fun backgroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "backgroundColor") as NSColor

    public open fun setBackgroundColor(backgroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setBackgroundColor:", backgroundColor)
    }

    public open fun isFieldEditor(): Boolean =
        Native.objc_msgSend("boolean", this, "isFieldEditor") as Boolean

    public open fun setFieldEditor(fieldEditor: Boolean): Unit {
        Native.objc_msgSend("void", this, "setFieldEditor:", fieldEditor)
    }

    public open fun usesFontPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFontPanel") as Boolean

    public open fun setUsesFontPanel(usesFontPanel: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFontPanel:", usesFontPanel)
    }

    public open fun isRulerVisible(): Boolean =
        Native.objc_msgSend("boolean", this, "isRulerVisible") as Boolean

    public open fun setRulerVisible(rulerVisible: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRulerVisible:", rulerVisible)
    }

    public open fun setSelectedRange(charRange: Any): Unit {
        Native.objc_msgSend("void", this, "setSelectedRange:", charRange)
    }

    public open fun allowedInputSourceLocales(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "allowedInputSourceLocales") as NSArray

    public open fun setAllowedInputSourceLocales(allowedInputSourceLocales: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAllowedInputSourceLocales:", allowedInputSourceLocales)
    }

    trait metaclass : IObjCObject
}

trait NSTextView_NSTextChecking : IObjCObject {
    public open fun smartInsertDeleteEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "smartInsertDeleteEnabled") as Boolean

    public open fun setSmartInsertDeleteEnabled(smartInsertDeleteEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setSmartInsertDeleteEnabled:", smartInsertDeleteEnabled)
    }

    public open fun smartDeleteRangeForProposedRange(proposedCharRange: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "smartDeleteRangeForProposedRange:", proposedCharRange)

    public open fun toggleSmartInsertDelete(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleSmartInsertDelete:", sender)
    }

    public open fun smartInsertForString_replacingRange_beforeString_afterString(pasteString: NSString, charRangeToReplace: Any, beforeString: Pointer<NSString>, afterString: Pointer<NSString>): Unit {
        Native.objc_msgSend("void", this, "smartInsertForString:replacingRange:beforeString:afterString:", pasteString, charRangeToReplace, beforeString, afterString)
    }

    public open fun smartInsertBeforeStringForString_replacingRange(pasteString: NSString, charRangeToReplace: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "smartInsertBeforeStringForString:replacingRange:", pasteString, charRangeToReplace) as NSString

    public open fun smartInsertAfterStringForString_replacingRange(pasteString: NSString, charRangeToReplace: Any): NSString =
        Native.objc_msgSend("class objc.NSString", this, "smartInsertAfterStringForString:replacingRange:", pasteString, charRangeToReplace) as NSString

    public open fun isAutomaticQuoteSubstitutionEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isAutomaticQuoteSubstitutionEnabled") as Boolean

    public open fun setAutomaticQuoteSubstitutionEnabled(automaticQuoteSubstitutionEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticQuoteSubstitutionEnabled:", automaticQuoteSubstitutionEnabled)
    }

    public open fun toggleAutomaticQuoteSubstitution(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleAutomaticQuoteSubstitution:", sender)
    }

    public open fun isAutomaticLinkDetectionEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isAutomaticLinkDetectionEnabled") as Boolean

    public open fun setAutomaticLinkDetectionEnabled(automaticLinkDetectionEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticLinkDetectionEnabled:", automaticLinkDetectionEnabled)
    }

    public open fun toggleAutomaticLinkDetection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleAutomaticLinkDetection:", sender)
    }

    public open fun isAutomaticDataDetectionEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isAutomaticDataDetectionEnabled") as Boolean

    public open fun setAutomaticDataDetectionEnabled(automaticDataDetectionEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticDataDetectionEnabled:", automaticDataDetectionEnabled)
    }

    public open fun toggleAutomaticDataDetection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleAutomaticDataDetection:", sender)
    }

    public open fun isAutomaticDashSubstitutionEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isAutomaticDashSubstitutionEnabled") as Boolean

    public open fun setAutomaticDashSubstitutionEnabled(automaticDashSubstitutionEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticDashSubstitutionEnabled:", automaticDashSubstitutionEnabled)
    }

    public open fun toggleAutomaticDashSubstitution(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleAutomaticDashSubstitution:", sender)
    }

    public open fun isAutomaticTextReplacementEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isAutomaticTextReplacementEnabled") as Boolean

    public open fun setAutomaticTextReplacementEnabled(automaticTextReplacementEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticTextReplacementEnabled:", automaticTextReplacementEnabled)
    }

    public open fun toggleAutomaticTextReplacement(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleAutomaticTextReplacement:", sender)
    }

    public open fun isAutomaticSpellingCorrectionEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isAutomaticSpellingCorrectionEnabled") as Boolean

    public open fun setAutomaticSpellingCorrectionEnabled(automaticSpellingCorrectionEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutomaticSpellingCorrectionEnabled:", automaticSpellingCorrectionEnabled)
    }

    public open fun toggleAutomaticSpellingCorrection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleAutomaticSpellingCorrection:", sender)
    }

    public open fun enabledTextCheckingTypes(): Long =
        Native.objc_msgSend("long", this, "enabledTextCheckingTypes") as Long

    public open fun setEnabledTextCheckingTypes(enabledTextCheckingTypes: Long): Unit {
        Native.objc_msgSend("void", this, "setEnabledTextCheckingTypes:", enabledTextCheckingTypes)
    }

    public open fun checkTextInRange_types_options(range: Any, checkingTypes: Long, options: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "checkTextInRange:types:options:", range, checkingTypes, options)
    }

    public open fun handleTextCheckingResults_forRange_types_options_orthography_wordCount(results: NSArray, range: Any, checkingTypes: Long, options: NSDictionary, orthography: NSOrthography, wordCount: Int): Unit {
        Native.objc_msgSend("void", this, "handleTextCheckingResults:forRange:types:options:orthography:wordCount:", results, range, checkingTypes, options, orthography, wordCount)
    }

    public open fun orderFrontSubstitutionsPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontSubstitutionsPanel:", sender)
    }

    public open fun checkTextInSelection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "checkTextInSelection:", sender)
    }

    public open fun checkTextInDocument(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "checkTextInDocument:", sender)
    }

    public open fun usesFindPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFindPanel") as Boolean

    public open fun setUsesFindPanel(usesFindPanel: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFindPanel:", usesFindPanel)
    }

    public open fun usesFindBar(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFindBar") as Boolean

    public open fun setUsesFindBar(usesFindBar: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFindBar:", usesFindBar)
    }

    public open fun isIncrementalSearchingEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isIncrementalSearchingEnabled") as Boolean

    public open fun setIncrementalSearchingEnabled(incrementalSearchingEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIncrementalSearchingEnabled:", incrementalSearchingEnabled)
    }

    trait metaclass : IObjCObject
}

trait NSTextView_NSQuickLookPreview : IObjCObject {
    public open fun toggleQuickLookPreviewPanel(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleQuickLookPreviewPanel:", sender)
    }

    public open fun quickLookPreviewableItemsInRanges(ranges: NSArray): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "quickLookPreviewableItemsInRanges:", ranges) as NSArray

    public open fun updateQuickLookPreviewPanel(): Unit {
        Native.objc_msgSend("void", this, "updateQuickLookPreviewPanel")
    }

    trait metaclass : IObjCObject
}

trait NSTextView_NSTextView_SharingService : IObjCObject {
    public open fun orderFrontSharingServicePicker(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "orderFrontSharingServicePicker:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSTextView_NSDeprecated : IObjCObject {
    public open fun toggleBaseWritingDirection(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "toggleBaseWritingDirection:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSTableViewDataSourceDeprecated : IObjCObject {
    public open fun tableView_writeRows_toPasteboard(tableView: NSTableView, rows: NSArray, pboard: NSPasteboard): Boolean =
        Native.objc_msgSend("boolean", this, "tableView:writeRows:toPasteboard:", tableView, rows, pboard) as Boolean

    trait metaclass : IObjCObject
}

trait NSTableView_NSDeprecated : IObjCObject {
    public open fun setDrawsGrid(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setDrawsGrid:", flag)
    }

    public open fun drawsGrid(): Boolean =
        Native.objc_msgSend("boolean", this, "drawsGrid") as Boolean

    public open fun selectColumn_byExtendingSelection(column: Int, extend: Boolean): Unit {
        Native.objc_msgSend("void", this, "selectColumn:byExtendingSelection:", column, extend)
    }

    public open fun selectRow_byExtendingSelection(row: Int, extend: Boolean): Unit {
        Native.objc_msgSend("void", this, "selectRow:byExtendingSelection:", row, extend)
    }

    public open fun selectedColumnEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "selectedColumnEnumerator") as NSEnumerator

    public open fun selectedRowEnumerator(): NSEnumerator =
        Native.objc_msgSend("class objc.NSEnumerator", this, "selectedRowEnumerator") as NSEnumerator

    public open fun dragImageForRows_event_dragImageOffset(dragRows: NSArray, dragEvent: NSEvent, dragImageOffset: Pointer<Any>): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "dragImageForRows:event:dragImageOffset:", dragRows, dragEvent, dragImageOffset) as NSImage

    public open fun setAutoresizesAllColumnsToFit(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setAutoresizesAllColumnsToFit:", flag)
    }

    public open fun autoresizesAllColumnsToFit(): Boolean =
        Native.objc_msgSend("boolean", this, "autoresizesAllColumnsToFit") as Boolean

    public open fun columnsInRect(rect: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "columnsInRect:", rect)

    public open fun preparedCellAtColumn_row(column: Int, row: Int): NSCell =
        Native.objc_msgSend("class objc.NSCell", this, "preparedCellAtColumn:row:", column, row) as NSCell

    public open fun textShouldBeginEditing(textObject: NSText): Boolean =
        Native.objc_msgSend("boolean", this, "textShouldBeginEditing:", textObject) as Boolean

    public open fun textShouldEndEditing(textObject: NSText): Boolean =
        Native.objc_msgSend("boolean", this, "textShouldEndEditing:", textObject) as Boolean

    public open fun textDidBeginEditing(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidBeginEditing:", notification)
    }

    public open fun textDidEndEditing(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidEndEditing:", notification)
    }

    public open fun textDidChange(notification: NSNotification): Unit {
        Native.objc_msgSend("void", this, "textDidChange:", notification)
    }

    public open fun shouldFocusCell_atColumn_row(cell: NSCell, column: Int, row: Int): Boolean =
        Native.objc_msgSend("boolean", this, "shouldFocusCell:atColumn:row:", cell, column, row) as Boolean

    public open fun focusedColumn(): Int =
        Native.objc_msgSend("int", this, "focusedColumn") as Int

    public open fun setFocusedColumn(focusedColumn: Int): Unit {
        Native.objc_msgSend("void", this, "setFocusedColumn:", focusedColumn)
    }

    public open fun performClickOnCellAtColumn_row(column: Int, row: Int): Unit {
        Native.objc_msgSend("void", this, "performClickOnCellAtColumn:row:", column, row)
    }

    trait metaclass : IObjCObject
}

trait NSTableColumn_NSDeprecated : IObjCObject {
    public open fun setResizable(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setResizable:", flag)
    }

    public open fun isResizable(): Boolean =
        Native.objc_msgSend("boolean", this, "isResizable") as Boolean

    public open fun dataCell(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataCell") as ObjCObject

    public open fun setDataCell(dataCell: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setDataCell:", dataCell)
    }

    public open fun dataCellForRow(row: Int): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "dataCellForRow:", row) as ObjCObject

    trait metaclass : IObjCObject
}

trait NSString_NSStringDrawing : IObjCObject {
    public open fun sizeWithAttributes(attrs: NSDictionary): Any =
        Native.objc_msgSend("class objc.Any", this, "sizeWithAttributes:", attrs)

    public open fun drawAtPoint_withAttributes(point: Any, attrs: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "drawAtPoint:withAttributes:", point, attrs)
    }

    public open fun drawInRect_withAttributes(rect: Any, attrs: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "drawInRect:withAttributes:", rect, attrs)
    }

    trait metaclass : IObjCObject
}

trait NSAttributedString_NSStringDrawing : IObjCObject {
    public open fun size(): Any =
        Native.objc_msgSend("class objc.Any", this, "size")

    public open fun drawAtPoint(point: Any): Unit {
        Native.objc_msgSend("void", this, "drawAtPoint:", point)
    }

    public open fun drawInRect(rect: Any): Unit {
        Native.objc_msgSend("void", this, "drawInRect:", rect)
    }

    trait metaclass : IObjCObject
}

trait NSString_NSExtendedStringDrawing : IObjCObject {
    public open fun drawWithRect_options_attributes(rect: Any, options: Any, attributes: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "drawWithRect:options:attributes:", rect, options, attributes)
    }

    public open fun boundingRectWithSize_options_attributes(size: Any, options: Any, attributes: NSDictionary): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingRectWithSize:options:attributes:", size, options, attributes)

    trait metaclass : IObjCObject
}

trait NSAttributedString_NSExtendedStringDrawing : IObjCObject {
    public open fun drawWithRect_options(rect: Any, options: Any): Unit {
        Native.objc_msgSend("void", this, "drawWithRect:options:", rect, options)
    }

    public open fun boundingRectWithSize_options(size: Any, options: Any): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingRectWithSize:options:", size, options)

    trait metaclass : IObjCObject
}

trait NSView_NSRulerMarkerClientViewDelegation : IObjCObject {
    public open fun rulerView_shouldMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): Boolean =
        Native.objc_msgSend("boolean", this, "rulerView:shouldMoveMarker:", ruler, marker) as Boolean

    public open fun rulerView_willMoveMarker_toLocation(ruler: NSRulerView, marker: NSRulerMarker, location: Double): Double =
        Native.objc_msgSend("double", this, "rulerView:willMoveMarker:toLocation:", ruler, marker, location) as Double

    public open fun rulerView_didMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): Unit {
        Native.objc_msgSend("void", this, "rulerView:didMoveMarker:", ruler, marker)
    }

    public open fun rulerView_shouldRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): Boolean =
        Native.objc_msgSend("boolean", this, "rulerView:shouldRemoveMarker:", ruler, marker) as Boolean

    public open fun rulerView_didRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): Unit {
        Native.objc_msgSend("void", this, "rulerView:didRemoveMarker:", ruler, marker)
    }

    public open fun rulerView_shouldAddMarker(ruler: NSRulerView, marker: NSRulerMarker): Boolean =
        Native.objc_msgSend("boolean", this, "rulerView:shouldAddMarker:", ruler, marker) as Boolean

    public open fun rulerView_willAddMarker_atLocation(ruler: NSRulerView, marker: NSRulerMarker, location: Double): Double =
        Native.objc_msgSend("double", this, "rulerView:willAddMarker:atLocation:", ruler, marker, location) as Double

    public open fun rulerView_didAddMarker(ruler: NSRulerView, marker: NSRulerMarker): Unit {
        Native.objc_msgSend("void", this, "rulerView:didAddMarker:", ruler, marker)
    }

    public open fun rulerView_handleMouseDown(ruler: NSRulerView, event: NSEvent): Unit {
        Native.objc_msgSend("void", this, "rulerView:handleMouseDown:", ruler, event)
    }

    public open fun rulerView_willSetClientView(ruler: NSRulerView, newClient: NSView): Unit {
        Native.objc_msgSend("void", this, "rulerView:willSetClientView:", ruler, newClient)
    }

    public open fun rulerView_locationForPoint(ruler: NSRulerView, aPoint: Any): Double =
        Native.objc_msgSend("double", this, "rulerView:locationForPoint:", ruler, aPoint) as Double

    public open fun rulerView_pointForLocation(ruler: NSRulerView, aPoint: Double): Any =
        Native.objc_msgSend("class objc.Any", this, "rulerView:pointForLocation:", ruler, aPoint)

    trait metaclass : IObjCObject
}

trait NSResponder_NSInterfaceStyle : IObjCObject {
    public open fun interfaceStyle(): Int =
        Native.objc_msgSend("int", this, "interfaceStyle") as Int

    public open fun setInterfaceStyle(interfaceStyle: Int): Unit {
        Native.objc_msgSend("void", this, "setInterfaceStyle:", interfaceStyle)
    }

    trait metaclass : IObjCObject
}

trait NSProgressIndicator_NSProgressIndicatorDeprecated : IObjCObject {
    public open fun animationDelay(): Double =
        Native.objc_msgSend("double", this, "animationDelay") as Double

    public open fun setAnimationDelay(delay: Double): Unit {
        Native.objc_msgSend("void", this, "setAnimationDelay:", delay)
    }

    public open fun animate(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "animate:", sender)
    }

    trait metaclass : IObjCObject
}

trait NSToolbar_NSDeprecated : IObjCObject {
    public open fun fullScreenAccessoryView(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "fullScreenAccessoryView") as NSView

    public open fun setFullScreenAccessoryView(fullScreenAccessoryView: NSView): Unit {
        Native.objc_msgSend("void", this, "setFullScreenAccessoryView:", fullScreenAccessoryView)
    }

    public open fun fullScreenAccessoryViewMinHeight(): Double =
        Native.objc_msgSend("double", this, "fullScreenAccessoryViewMinHeight") as Double

    public open fun setFullScreenAccessoryViewMinHeight(fullScreenAccessoryViewMinHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setFullScreenAccessoryViewMinHeight:", fullScreenAccessoryViewMinHeight)
    }

    public open fun fullScreenAccessoryViewMaxHeight(): Double =
        Native.objc_msgSend("double", this, "fullScreenAccessoryViewMaxHeight") as Double

    public open fun setFullScreenAccessoryViewMaxHeight(fullScreenAccessoryViewMaxHeight: Double): Unit {
        Native.objc_msgSend("void", this, "setFullScreenAccessoryViewMaxHeight:", fullScreenAccessoryViewMaxHeight)
    }

    trait metaclass : IObjCObject
}

trait NSAffineTransform_NSAppKitAdditons : IObjCObject {
    public open fun transformBezierPath(aPath: NSBezierPath): NSBezierPath =
        Native.objc_msgSend("class objc.NSBezierPath", this, "transformBezierPath:", aPath) as NSBezierPath

    public open fun set(): Unit {
        Native.objc_msgSend("void", this, "set")
    }

    public open fun concat(): Unit {
        Native.objc_msgSend("void", this, "concat")
    }

    trait metaclass : IObjCObject
}

trait NSBezierPath_NSBezierPathDeprecated : IObjCObject {
    public open fun cachesBezierPath(): Boolean =
        Native.objc_msgSend("boolean", this, "cachesBezierPath") as Boolean

    public open fun setCachesBezierPath(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setCachesBezierPath:", flag)
    }

    trait metaclass : IObjCObject
}

trait NSStatusItem_NSStatusItemDeprecated : IObjCObject {
    public open fun action(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "action") as ObjCSelector

    public open fun setAction(action: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setAction:", action)
    }

    public open fun doubleAction(): ObjCSelector =
        Native.objc_msgSend("class kni.objc.ObjCSelector", this, "doubleAction") as ObjCSelector

    public open fun setDoubleAction(doubleAction: ObjCSelector): Unit {
        Native.objc_msgSend("void", this, "setDoubleAction:", doubleAction)
    }

    public open fun target(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "target") as ObjCObject

    public open fun setTarget(target: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setTarget:", target)
    }

    public open fun title(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "title") as NSString

    public open fun setTitle(title: NSString): Unit {
        Native.objc_msgSend("void", this, "setTitle:", title)
    }

    public open fun attributedTitle(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedTitle") as NSAttributedString

    public open fun setAttributedTitle(attributedTitle: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedTitle:", attributedTitle)
    }

    public open fun image(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "image") as NSImage

    public open fun setImage(image: NSImage): Unit {
        Native.objc_msgSend("void", this, "setImage:", image)
    }

    public open fun alternateImage(): NSImage =
        Native.objc_msgSend("class objc.NSImage", this, "alternateImage") as NSImage

    public open fun setAlternateImage(alternateImage: NSImage): Unit {
        Native.objc_msgSend("void", this, "setAlternateImage:", alternateImage)
    }

    public open fun isEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "isEnabled") as Boolean

    public open fun setEnabled(enabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setEnabled:", enabled)
    }

    public open fun highlightMode(): Boolean =
        Native.objc_msgSend("boolean", this, "highlightMode") as Boolean

    public open fun setHighlightMode(highlightMode: Boolean): Unit {
        Native.objc_msgSend("void", this, "setHighlightMode:", highlightMode)
    }

    public open fun toolTip(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "toolTip") as NSString

    public open fun setToolTip(toolTip: NSString): Unit {
        Native.objc_msgSend("void", this, "setToolTip:", toolTip)
    }

    public open fun sendActionOn(mask: Int): Int =
        Native.objc_msgSend("int", this, "sendActionOn:", mask) as Int

    public open fun view(): NSView =
        Native.objc_msgSend("class objc.NSView", this, "view") as NSView

    public open fun setView(view: NSView): Unit {
        Native.objc_msgSend("void", this, "setView:", view)
    }

    public open fun drawStatusBarBackgroundInRect_withHighlight(rect: Any, highlight: Boolean): Unit {
        Native.objc_msgSend("void", this, "drawStatusBarBackgroundInRect:withHighlight:", rect, highlight)
    }

    public open fun popUpStatusItemMenu(menu: NSMenu): Unit {
        Native.objc_msgSend("void", this, "popUpStatusItemMenu:", menu)
    }

    trait metaclass : IObjCObject
}

trait NSSound_NSDeprecated : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun soundUnfilteredFileTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "soundUnfilteredFileTypes") as NSArray

        public open fun soundUnfilteredPasteboardTypes(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "soundUnfilteredPasteboardTypes") as NSArray
    }
}

trait NSBundle_NSBundleSoundExtensions : IObjCObject {
    public open fun pathForSoundResource(name: NSString): NSString =
        Native.objc_msgSend("class objc.NSString", this, "pathForSoundResource:", name) as NSString

    trait metaclass : IObjCObject
}

trait NSWindow_Drawers : IObjCObject {
    public open fun drawers(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "drawers") as NSArray

    trait metaclass : IObjCObject
}

trait NSOpenGLContext_NSOpenGLPixelBufer : IObjCObject {
    public open fun setPixelBuffer_cubeMapFace_mipMapLevel_currentVirtualScreen(pixelBuffer: NSOpenGLPixelBuffer, face: Int, level: Int, screen: Int): Unit {
        Native.objc_msgSend("void", this, "setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:", pixelBuffer, face, level, screen)
    }

    public open fun pixelBuffer(): NSOpenGLPixelBuffer =
        Native.objc_msgSend("class objc.NSOpenGLPixelBuffer", this, "pixelBuffer") as NSOpenGLPixelBuffer

    public open fun pixelBufferCubeMapFace(): Int =
        Native.objc_msgSend("int", this, "pixelBufferCubeMapFace") as Int

    public open fun pixelBufferMipMapLevel(): Int =
        Native.objc_msgSend("int", this, "pixelBufferMipMapLevel") as Int

    public open fun setTextureImageToPixelBuffer_colorBuffer(pixelBuffer: NSOpenGLPixelBuffer, source: Int): Unit {
        Native.objc_msgSend("void", this, "setTextureImageToPixelBuffer:colorBuffer:", pixelBuffer, source)
    }

    trait metaclass : IObjCObject
}

trait NSValue_CATransform3DAdditions : IObjCObject {
    public open fun CATransform3DValue(): Any =
        Native.objc_msgSend("class objc.Any", this, "CATransform3DValue")

    trait metaclass : IObjCObject {
        public open fun valueWithCATransform3D(t: Any): NSValue =
            Native.objc_msgSend("class objc.NSValue", this, "valueWithCATransform3D:", t) as NSValue
    }
}

trait NSObject_CALayoutManager : IObjCObject {
    public open fun preferredSizeOfLayer(layer: CALayer): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredSizeOfLayer:", layer)

    public open fun invalidateLayoutOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "invalidateLayoutOfLayer:", layer)
    }

    public open fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    trait metaclass : IObjCObject
}

trait NSObject_CALayerDelegate : IObjCObject {
    public open fun displayLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "displayLayer:", layer)
    }

    public open fun drawLayer_inContext(layer: CALayer, ctx: Pointer<Any>): Unit {
        Native.objc_msgSend("void", this, "drawLayer:inContext:", layer, ctx)
    }

    public open fun layoutSublayersOfLayer(layer: CALayer): Unit {
        Native.objc_msgSend("void", this, "layoutSublayersOfLayer:", layer)
    }

    public open fun actionForLayer_forKey(layer: CALayer, event: NSString): Any =
        Native.objc_msgSend("class objc.Any", this, "actionForLayer:forKey:", layer, event)

    trait metaclass : IObjCObject
}

trait NSView_NSOpenGLSurfaceResolution : IObjCObject {
    public open fun wantsBestResolutionOpenGLSurface(): Boolean =
        Native.objc_msgSend("boolean", this, "wantsBestResolutionOpenGLSurface") as Boolean

    public open fun setWantsBestResolutionOpenGLSurface(wantsBestResolutionOpenGLSurface: Boolean): Unit {
        Native.objc_msgSend("void", this, "setWantsBestResolutionOpenGLSurface:", wantsBestResolutionOpenGLSurface)
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSScripting : IObjCObject {
    public open fun orderedDocuments(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "orderedDocuments") as NSArray

    public open fun orderedWindows(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "orderedWindows") as NSArray

    trait metaclass : IObjCObject
}

trait NSObject_NSApplicationScriptingDelegation : IObjCObject {
    public open fun application_delegateHandlesKey(sender: NSApplication, key: NSString): Boolean =
        Native.objc_msgSend("boolean", this, "application:delegateHandlesKey:", sender, key) as Boolean

    trait metaclass : IObjCObject
}

trait NSDocument_NSScripting : IObjCObject {
    public open fun lastComponentOfFileName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "lastComponentOfFileName") as NSString

    public open fun setLastComponentOfFileName(lastComponentOfFileName: NSString): Unit {
        Native.objc_msgSend("void", this, "setLastComponentOfFileName:", lastComponentOfFileName)
    }

    public open fun handleSaveScriptCommand(command: NSScriptCommand): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "handleSaveScriptCommand:", command) as ObjCObject

    public open fun handleCloseScriptCommand(command: NSCloseCommand): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "handleCloseScriptCommand:", command) as ObjCObject

    public open fun handlePrintScriptCommand(command: NSScriptCommand): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "handlePrintScriptCommand:", command) as ObjCObject

    public open fun objectSpecifier(): NSScriptObjectSpecifier =
        Native.objc_msgSend("class objc.NSScriptObjectSpecifier", this, "objectSpecifier") as NSScriptObjectSpecifier

    trait metaclass : IObjCObject
}

trait NSTextStorage_Scripting : IObjCObject {
    public open fun attributeRuns(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "attributeRuns") as NSArray

    public open fun setAttributeRuns(attributeRuns: NSArray): Unit {
        Native.objc_msgSend("void", this, "setAttributeRuns:", attributeRuns)
    }

    public open fun paragraphs(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "paragraphs") as NSArray

    public open fun setParagraphs(paragraphs: NSArray): Unit {
        Native.objc_msgSend("void", this, "setParagraphs:", paragraphs)
    }

    public open fun words(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "words") as NSArray

    public open fun setWords(words: NSArray): Unit {
        Native.objc_msgSend("void", this, "setWords:", words)
    }

    public open fun characters(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "characters") as NSArray

    public open fun setCharacters(characters: NSArray): Unit {
        Native.objc_msgSend("void", this, "setCharacters:", characters)
    }

    public open fun font(): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "font") as NSFont

    public open fun setFont(font: NSFont): Unit {
        Native.objc_msgSend("void", this, "setFont:", font)
    }

    public open fun foregroundColor(): NSColor =
        Native.objc_msgSend("class objc.NSColor", this, "foregroundColor") as NSColor

    public open fun setForegroundColor(foregroundColor: NSColor): Unit {
        Native.objc_msgSend("void", this, "setForegroundColor:", foregroundColor)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSToolbarItemValidation : IObjCObject {
    public open fun validateToolbarItem(theItem: NSToolbarItem): Boolean =
        Native.objc_msgSend("boolean", this, "validateToolbarItem:", theItem) as Boolean

    trait metaclass : IObjCObject
}

trait NSWindow_NSScripting : IObjCObject {
    public open fun hasCloseBox(): Boolean =
        Native.objc_msgSend("boolean", this, "hasCloseBox") as Boolean

    public open fun hasTitleBar(): Boolean =
        Native.objc_msgSend("boolean", this, "hasTitleBar") as Boolean

    public open fun isFloatingPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "isFloatingPanel") as Boolean

    public open fun isMiniaturizable(): Boolean =
        Native.objc_msgSend("boolean", this, "isMiniaturizable") as Boolean

    public open fun isModalPanel(): Boolean =
        Native.objc_msgSend("boolean", this, "isModalPanel") as Boolean

    public open fun isResizable(): Boolean =
        Native.objc_msgSend("boolean", this, "isResizable") as Boolean

    public open fun isZoomable(): Boolean =
        Native.objc_msgSend("boolean", this, "isZoomable") as Boolean

    public open fun orderedIndex(): Int =
        Native.objc_msgSend("int", this, "orderedIndex") as Int

    public open fun setOrderedIndex(orderedIndex: Int): Unit {
        Native.objc_msgSend("void", this, "setOrderedIndex:", orderedIndex)
    }

    public open fun setIsMiniaturized(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIsMiniaturized:", flag)
    }

    public open fun setIsVisible(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIsVisible:", flag)
    }

    public open fun setIsZoomed(flag: Boolean): Unit {
        Native.objc_msgSend("void", this, "setIsZoomed:", flag)
    }

    public open fun handleCloseScriptCommand(command: NSCloseCommand): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "handleCloseScriptCommand:", command) as ObjCObject

    public open fun handlePrintScriptCommand(command: NSScriptCommand): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "handlePrintScriptCommand:", command) as ObjCObject

    public open fun handleSaveScriptCommand(command: NSScriptCommand): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "handleSaveScriptCommand:", command) as ObjCObject

    trait metaclass : IObjCObject
}

trait NSTypesetter_NSLayoutPhaseInterface : IObjCObject {
    public open fun willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset(lineRect: Pointer<Any>, glyphRange: Any, usedRect: Pointer<Any>, baselineOffset: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:", lineRect, glyphRange, usedRect, baselineOffset)
    }

    public open fun shouldBreakLineByWordBeforeCharacterAtIndex(charIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBreakLineByWordBeforeCharacterAtIndex:", charIndex) as Boolean

    public open fun shouldBreakLineByHyphenatingBeforeCharacterAtIndex(charIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBreakLineByHyphenatingBeforeCharacterAtIndex:", charIndex) as Boolean

    public open fun hyphenationFactorForGlyphAtIndex(glyphIndex: Int): Float =
        Native.objc_msgSend("float", this, "hyphenationFactorForGlyphAtIndex:", glyphIndex) as Float

    public open fun hyphenCharacterForGlyphAtIndex(glyphIndex: Int): Int =
        Native.objc_msgSend("int", this, "hyphenCharacterForGlyphAtIndex:", glyphIndex) as Int

    public open fun boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(glyphIndex: Int, textContainer: NSTextContainer, proposedRect: Any, glyphPosition: Any, charIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:", glyphIndex, textContainer, proposedRect, glyphPosition, charIndex)

    trait metaclass : IObjCObject
}

trait NSTypesetter_NSGlyphStorageInterface : IObjCObject {
    public open fun characterRangeForGlyphRange_actualGlyphRange(glyphRange: Any, actualGlyphRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "characterRangeForGlyphRange:actualGlyphRange:", glyphRange, actualGlyphRange)

    public open fun glyphRangeForCharacterRange_actualCharacterRange(charRange: Any, actualCharRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "glyphRangeForCharacterRange:actualCharacterRange:", charRange, actualCharRange)

    public open fun getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits_bidiLevels(glyphsRange: Any, glyphBuffer: Pointer<Int>, charIndexBuffer: Pointer<Int>, inscribeBuffer: Pointer<Any>, elasticBuffer: Pointer<Boolean>, bidiLevelBuffer: Pointer<Byte>): Int =
        Native.objc_msgSend("int", this, "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:", glyphsRange, glyphBuffer, charIndexBuffer, inscribeBuffer, elasticBuffer, bidiLevelBuffer) as Int

    public open fun getLineFragmentRect_usedRect_remainingRect_forStartingGlyphAtIndex_proposedRect_lineSpacing_paragraphSpacingBefore_paragraphSpacingAfter(lineFragmentRect: Pointer<Any>, lineFragmentUsedRect: Pointer<Any>, remainingRect: Pointer<Any>, startingGlyphIndex: Int, proposedRect: Any, lineSpacing: Double, paragraphSpacingBefore: Double, paragraphSpacingAfter: Double): Unit {
        Native.objc_msgSend("void", this, "getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:", lineFragmentRect, lineFragmentUsedRect, remainingRect, startingGlyphIndex, proposedRect, lineSpacing, paragraphSpacingBefore, paragraphSpacingAfter)
    }

    public open fun setLineFragmentRect_forGlyphRange_usedRect_baselineOffset(fragmentRect: Any, glyphRange: Any, usedRect: Any, baselineOffset: Double): Unit {
        Native.objc_msgSend("void", this, "setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:", fragmentRect, glyphRange, usedRect, baselineOffset)
    }

    public open fun substituteGlyphsInRange_withGlyphs(glyphRange: Any, glyphs: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "substituteGlyphsInRange:withGlyphs:", glyphRange, glyphs)
    }

    public open fun insertGlyph_atGlyphIndex_characterIndex(glyph: Int, glyphIndex: Int, characterIndex: Int): Unit {
        Native.objc_msgSend("void", this, "insertGlyph:atGlyphIndex:characterIndex:", glyph, glyphIndex, characterIndex)
    }

    public open fun deleteGlyphsInRange(glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "deleteGlyphsInRange:", glyphRange)
    }

    public open fun setNotShownAttribute_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setNotShownAttribute:forGlyphRange:", flag, glyphRange)
    }

    public open fun setDrawsOutsideLineFragment_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setDrawsOutsideLineFragment:forGlyphRange:", flag, glyphRange)
    }

    public open fun setLocation_withAdvancements_forStartOfGlyphRange(location: Any, advancements: Pointer<Double>, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setLocation:withAdvancements:forStartOfGlyphRange:", location, advancements, glyphRange)
    }

    public open fun setAttachmentSize_forGlyphRange(attachmentSize: Any, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setAttachmentSize:forGlyphRange:", attachmentSize, glyphRange)
    }

    public open fun setBidiLevels_forGlyphRange(levels: Pointer<Byte>, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setBidiLevels:forGlyphRange:", levels, glyphRange)
    }

    trait metaclass : IObjCObject
}

trait NSATSTypesetter_NSPantherCompatibility : IObjCObject {
    public open fun lineFragmentRectForProposedRect_remainingRect(proposedRect: Any, remainingRect: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "lineFragmentRectForProposedRect:remainingRect:", proposedRect, remainingRect)

    trait metaclass : IObjCObject
}

trait NSATSTypesetter_NSPrimitiveInterface : IObjCObject {
    public open fun usesFontLeading(): Boolean =
        Native.objc_msgSend("boolean", this, "usesFontLeading") as Boolean

    public open fun setUsesFontLeading(usesFontLeading: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesFontLeading:", usesFontLeading)
    }

    public open fun typesetterBehavior(): Any =
        Native.objc_msgSend("class objc.Any", this, "typesetterBehavior")

    public open fun setTypesetterBehavior(typesetterBehavior: Any): Unit {
        Native.objc_msgSend("void", this, "setTypesetterBehavior:", typesetterBehavior)
    }

    public open fun hyphenationFactor(): Float =
        Native.objc_msgSend("float", this, "hyphenationFactor") as Float

    public open fun setHyphenationFactor(hyphenationFactor: Float): Unit {
        Native.objc_msgSend("void", this, "setHyphenationFactor:", hyphenationFactor)
    }

    public open fun lineFragmentPadding(): Double =
        Native.objc_msgSend("double", this, "lineFragmentPadding") as Double

    public open fun setLineFragmentPadding(lineFragmentPadding: Double): Unit {
        Native.objc_msgSend("void", this, "setLineFragmentPadding:", lineFragmentPadding)
    }

    public open fun substituteFontForFont(originalFont: NSFont): NSFont =
        Native.objc_msgSend("class objc.NSFont", this, "substituteFontForFont:", originalFont) as NSFont

    public open fun textTabForGlyphLocation_writingDirection_maxLocation(glyphLocation: Double, direction: Any, maxLocation: Double): NSTextTab =
        Native.objc_msgSend("class objc.NSTextTab", this, "textTabForGlyphLocation:writingDirection:maxLocation:", glyphLocation, direction, maxLocation) as NSTextTab

    public open fun bidiProcessingEnabled(): Boolean =
        Native.objc_msgSend("boolean", this, "bidiProcessingEnabled") as Boolean

    public open fun setBidiProcessingEnabled(bidiProcessingEnabled: Boolean): Unit {
        Native.objc_msgSend("void", this, "setBidiProcessingEnabled:", bidiProcessingEnabled)
    }

    public open fun attributedString(): NSAttributedString =
        Native.objc_msgSend("class objc.NSAttributedString", this, "attributedString") as NSAttributedString

    public open fun setAttributedString(attributedString: NSAttributedString): Unit {
        Native.objc_msgSend("void", this, "setAttributedString:", attributedString)
    }

    public open fun setParagraphGlyphRange_separatorGlyphRange(paragraphRange: Any, paragraphSeparatorRange: Any): Unit {
        Native.objc_msgSend("void", this, "setParagraphGlyphRange:separatorGlyphRange:", paragraphRange, paragraphSeparatorRange)
    }

    public open fun paragraphGlyphRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphGlyphRange")

    public open fun paragraphSeparatorGlyphRange(): Any =
        Native.objc_msgSend("class objc.Any", this, "paragraphSeparatorGlyphRange")

    public open fun layoutParagraphAtPoint(lineFragmentOrigin: Pointer<Any>): Int =
        Native.objc_msgSend("int", this, "layoutParagraphAtPoint:", lineFragmentOrigin) as Int

    public open fun lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    public open fun paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    public open fun paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: Int, rect: Any): Double =
        Native.objc_msgSend("double", this, "paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:", glyphIndex, rect) as Double

    public open fun layoutManager(): NSLayoutManager =
        Native.objc_msgSend("class objc.NSLayoutManager", this, "layoutManager") as NSLayoutManager

    public open fun currentTextContainer(): NSTextContainer =
        Native.objc_msgSend("class objc.NSTextContainer", this, "currentTextContainer") as NSTextContainer

    public open fun setHardInvalidation_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setHardInvalidation:forGlyphRange:", flag, glyphRange)
    }

    public open fun getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin(lineFragmentRect: Pointer<Any>, lineFragmentUsedRect: Pointer<Any>, paragraphSeparatorGlyphRange: Any, lineOrigin: Any): Unit {
        Native.objc_msgSend("void", this, "getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:", lineFragmentRect, lineFragmentUsedRect, paragraphSeparatorGlyphRange, lineOrigin)
    }

    trait metaclass : IObjCObject
}

trait NSATSTypesetter_NSLayoutPhaseInterface : IObjCObject {
    public open fun willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset(lineRect: Pointer<Any>, glyphRange: Any, usedRect: Pointer<Any>, baselineOffset: Pointer<Double>): Unit {
        Native.objc_msgSend("void", this, "willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:", lineRect, glyphRange, usedRect, baselineOffset)
    }

    public open fun shouldBreakLineByWordBeforeCharacterAtIndex(charIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBreakLineByWordBeforeCharacterAtIndex:", charIndex) as Boolean

    public open fun shouldBreakLineByHyphenatingBeforeCharacterAtIndex(charIndex: Int): Boolean =
        Native.objc_msgSend("boolean", this, "shouldBreakLineByHyphenatingBeforeCharacterAtIndex:", charIndex) as Boolean

    public open fun hyphenationFactorForGlyphAtIndex(glyphIndex: Int): Float =
        Native.objc_msgSend("float", this, "hyphenationFactorForGlyphAtIndex:", glyphIndex) as Float

    public open fun hyphenCharacterForGlyphAtIndex(glyphIndex: Int): Int =
        Native.objc_msgSend("int", this, "hyphenCharacterForGlyphAtIndex:", glyphIndex) as Int

    public open fun boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(glyphIndex: Int, textContainer: NSTextContainer, proposedRect: Any, glyphPosition: Any, charIndex: Int): Any =
        Native.objc_msgSend("class objc.Any", this, "boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:", glyphIndex, textContainer, proposedRect, glyphPosition, charIndex)

    trait metaclass : IObjCObject
}

trait NSATSTypesetter_NSGlyphStorageInterface : IObjCObject {
    public open fun characterRangeForGlyphRange_actualGlyphRange(glyphRange: Any, actualGlyphRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "characterRangeForGlyphRange:actualGlyphRange:", glyphRange, actualGlyphRange)

    public open fun glyphRangeForCharacterRange_actualCharacterRange(charRange: Any, actualCharRange: Pointer<Any>): Any =
        Native.objc_msgSend("class objc.Any", this, "glyphRangeForCharacterRange:actualCharacterRange:", charRange, actualCharRange)

    public open fun getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits(glyphsRange: Any, glyphBuffer: Pointer<Int>, charIndexBuffer: Pointer<Int>, inscribeBuffer: Pointer<Any>, elasticBuffer: Pointer<Boolean>): Int =
        Native.objc_msgSend("int", this, "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:", glyphsRange, glyphBuffer, charIndexBuffer, inscribeBuffer, elasticBuffer) as Int

    public open fun setLineFragmentRect_forGlyphRange_usedRect_baselineOffset(fragmentRect: Any, glyphRange: Any, usedRect: Any, baselineOffset: Double): Unit {
        Native.objc_msgSend("void", this, "setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:", fragmentRect, glyphRange, usedRect, baselineOffset)
    }

    public open fun substituteGlyphsInRange_withGlyphs(glyphRange: Any, glyphs: Pointer<Int>): Unit {
        Native.objc_msgSend("void", this, "substituteGlyphsInRange:withGlyphs:", glyphRange, glyphs)
    }

    public open fun insertGlyph_atGlyphIndex_characterIndex(glyph: Int, glyphIndex: Int, characterIndex: Int): Unit {
        Native.objc_msgSend("void", this, "insertGlyph:atGlyphIndex:characterIndex:", glyph, glyphIndex, characterIndex)
    }

    public open fun deleteGlyphsInRange(glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "deleteGlyphsInRange:", glyphRange)
    }

    public open fun setNotShownAttribute_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setNotShownAttribute:forGlyphRange:", flag, glyphRange)
    }

    public open fun setDrawsOutsideLineFragment_forGlyphRange(flag: Boolean, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setDrawsOutsideLineFragment:forGlyphRange:", flag, glyphRange)
    }

    public open fun setLocation_withAdvancements_forStartOfGlyphRange(location: Any, advancements: Pointer<Double>, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setLocation:withAdvancements:forStartOfGlyphRange:", location, advancements, glyphRange)
    }

    public open fun setAttachmentSize_forGlyphRange(attachmentSize: Any, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setAttachmentSize:forGlyphRange:", attachmentSize, glyphRange)
    }

    public open fun setBidiLevels_forGlyphRange(levels: Pointer<Byte>, glyphRange: Any): Unit {
        Native.objc_msgSend("void", this, "setBidiLevels:forGlyphRange:", levels, glyphRange)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSKeyValueBindingCreation : IObjCObject {
    public open fun exposedBindings(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "exposedBindings") as NSArray

    public open fun valueClassForBinding(binding: NSString): ObjCClass =
        Native.objc_msgSend("interface kni.objc.ObjCClass", this, "valueClassForBinding:", binding) as ObjCClass

    public open fun bind_toObject_withKeyPath_options(binding: NSString, observable: ObjCObject, keyPath: NSString, options: NSDictionary): Unit {
        Native.objc_msgSend("void", this, "bind:toObject:withKeyPath:options:", binding, observable, keyPath, options)
    }

    public open fun unbind(binding: NSString): Unit {
        Native.objc_msgSend("void", this, "unbind:", binding)
    }

    public open fun infoForBinding(binding: NSString): NSDictionary =
        Native.objc_msgSend("class objc.NSDictionary", this, "infoForBinding:", binding) as NSDictionary

    public open fun optionDescriptionsForBinding(aBinding: NSString): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "optionDescriptionsForBinding:", aBinding) as NSArray

    trait metaclass : IObjCObject {
        public open fun exposeBinding(binding: NSString): Unit {
            Native.objc_msgSend("void", this, "exposeBinding:", binding)
        }
    }
}

trait NSObject_NSPlaceholders : IObjCObject {
    trait metaclass : IObjCObject {
        public open fun setDefaultPlaceholder_forMarker_withBinding(placeholder: ObjCObject, marker: ObjCObject, binding: NSString): Unit {
            Native.objc_msgSend("void", this, "setDefaultPlaceholder:forMarker:withBinding:", placeholder, marker, binding)
        }

        public open fun defaultPlaceholderForMarker_withBinding(marker: ObjCObject, binding: NSString): ObjCObject =
            Native.objc_msgSend("class kni.objc.ObjCObject", this, "defaultPlaceholderForMarker:withBinding:", marker, binding) as ObjCObject
    }
}

trait NSObject_NSEditorRegistration : IObjCObject {
    public open fun objectDidBeginEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidBeginEditing:", editor)
    }

    public open fun objectDidEndEditing(editor: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "objectDidEndEditing:", editor)
    }

    trait metaclass : IObjCObject
}

trait NSObject_NSEditor : IObjCObject {
    public open fun discardEditing(): Unit {
        Native.objc_msgSend("void", this, "discardEditing")
    }

    public open fun commitEditing(): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditing") as Boolean

    public open fun commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: ObjCObject, didCommitSelector: ObjCSelector, contextInfo: Pointer<*>): Unit {
        Native.objc_msgSend("void", this, "commitEditingWithDelegate:didCommitSelector:contextInfo:", delegate, didCommitSelector, contextInfo)
    }

    public open fun commitEditingAndReturnError(error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "commitEditingAndReturnError:", error) as Boolean

    trait metaclass : IObjCObject
}

trait NSObjectController_NSManagedController : IObjCObject {
    public open fun managedObjectContext(): NSManagedObjectContext =
        Native.objc_msgSend("class objc.NSManagedObjectContext", this, "managedObjectContext") as NSManagedObjectContext

    public open fun setManagedObjectContext(managedObjectContext: NSManagedObjectContext): Unit {
        Native.objc_msgSend("void", this, "setManagedObjectContext:", managedObjectContext)
    }

    public open fun entityName(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "entityName") as NSString

    public open fun setEntityName(entityName: NSString): Unit {
        Native.objc_msgSend("void", this, "setEntityName:", entityName)
    }

    public open fun fetchPredicate(): NSPredicate =
        Native.objc_msgSend("class objc.NSPredicate", this, "fetchPredicate") as NSPredicate

    public open fun setFetchPredicate(fetchPredicate: NSPredicate): Unit {
        Native.objc_msgSend("void", this, "setFetchPredicate:", fetchPredicate)
    }

    public open fun fetchWithRequest_merge_error(fetchRequest: NSFetchRequest, merge: Boolean, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "fetchWithRequest:merge:error:", fetchRequest, merge, error) as Boolean

    public open fun fetch(sender: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "fetch:", sender)
    }

    public open fun usesLazyFetching(): Boolean =
        Native.objc_msgSend("boolean", this, "usesLazyFetching") as Boolean

    public open fun setUsesLazyFetching(usesLazyFetching: Boolean): Unit {
        Native.objc_msgSend("void", this, "setUsesLazyFetching:", usesLazyFetching)
    }

    public open fun defaultFetchRequest(): NSFetchRequest =
        Native.objc_msgSend("class objc.NSFetchRequest", this, "defaultFetchRequest") as NSFetchRequest

    trait metaclass : IObjCObject
}

trait NSObject_NSDictionaryControllerKeyValuePair : IObjCObject {
    public open fun setLocalizedKey(localizedKey: NSString): Unit {
        Native.objc_msgSend("void", this, "setLocalizedKey:", localizedKey)
    }

    public open fun localizedKey(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "localizedKey") as NSString

    public open fun setKey(key: NSString): Unit {
        Native.objc_msgSend("void", this, "setKey:", key)
    }

    public open fun key(): NSString =
        Native.objc_msgSend("class objc.NSString", this, "key") as NSString

    public open fun setValue(value: ObjCObject): Unit {
        Native.objc_msgSend("void", this, "setValue:", value)
    }

    public open fun value(): ObjCObject =
        Native.objc_msgSend("class kni.objc.ObjCObject", this, "value") as ObjCObject

    public open fun isExplicitlyIncluded(): Boolean =
        Native.objc_msgSend("boolean", this, "isExplicitlyIncluded") as Boolean

    trait metaclass : IObjCObject
}

trait NSPersistentDocument_NSDeprecated : IObjCObject {
    public open fun configurePersistentStoreCoordinatorForURL_ofType_error(url: NSURL, fileType: NSString, error: Pointer<NSError>): Boolean =
        Native.objc_msgSend("boolean", this, "configurePersistentStoreCoordinatorForURL:ofType:error:", url, fileType, error) as Boolean

    trait metaclass : IObjCObject
}

trait NSPathControl_NSDeprecated : IObjCObject {
    public open fun clickedPathComponentCell(): NSPathComponentCell =
        Native.objc_msgSend("class objc.NSPathComponentCell", this, "clickedPathComponentCell") as NSPathComponentCell

    public open fun pathComponentCells(): NSArray =
        Native.objc_msgSend("class objc.NSArray", this, "pathComponentCells") as NSArray

    public open fun setPathComponentCells(cells: NSArray): Unit {
        Native.objc_msgSend("void", this, "setPathComponentCells:", cells)
    }

    trait metaclass : IObjCObject
}

trait NSApplication_NSUserInterfaceItemSearching : IObjCObject {
    public open fun registerUserInterfaceItemSearchHandler(handler: Any): Unit {
        Native.objc_msgSend("void", this, "registerUserInterfaceItemSearchHandler:", handler)
    }

    public open fun unregisterUserInterfaceItemSearchHandler(handler: Any): Unit {
        Native.objc_msgSend("void", this, "unregisterUserInterfaceItemSearchHandler:", handler)
    }

    public open fun searchString_inUserInterfaceItemString_searchRange_foundRange(searchString: NSString, stringToSearch: NSString, searchRange: Any, foundRange: Pointer<Any>): Boolean =
        Native.objc_msgSend("boolean", this, "searchString:inUserInterfaceItemString:searchRange:foundRange:", searchString, stringToSearch, searchRange, foundRange) as Boolean

    trait metaclass : IObjCObject
}

trait NSDocumentController_NSWindowRestoration : IObjCObject {
    trait metaclass : IObjCObject
}

trait NSApplication_NSWindowRestoration : IObjCObject {
    public open fun restoreWindowWithIdentifier_state_completionHandler(identifier: NSString, state: NSCoder, completionHandler: Any): Boolean =
        Native.objc_msgSend("boolean", this, "restoreWindowWithIdentifier:state:completionHandler:", identifier, state, completionHandler) as Boolean

    trait metaclass : IObjCObject
}

trait NSWindow_NSUserInterfaceRestoration : IObjCObject {
    public open fun isRestorable(): Boolean =
        Native.objc_msgSend("boolean", this, "isRestorable") as Boolean

    public open fun setRestorable(restorable: Boolean): Unit {
        Native.objc_msgSend("void", this, "setRestorable:", restorable)
    }

    public open fun restorationClass(): Any =
        Native.objc_msgSend("class objc.Any", this, "restorationClass")

    public open fun setRestorationClass(restorationClass: Any): Unit {
        Native.objc_msgSend("void", this, "setRestorationClass:", restorationClass)
    }

    public open fun disableSnapshotRestoration(): Unit {
        Native.objc_msgSend("void", this, "disableSnapshotRestoration")
    }

    public open fun enableSnapshotRestoration(): Unit {
        Native.objc_msgSend("void", this, "enableSnapshotRestoration")
    }

    trait metaclass : IObjCObject
}

trait NSResponder_NSRestorableState : IObjCObject {
    public open fun encodeRestorableStateWithCoder(coder: NSCoder): Unit {
        Native.objc_msgSend("void", this, "encodeRestorableStateWithCoder:", coder)
    }

    public open fun restoreStateWithCoder(coder: NSCoder): Unit {
        Native.objc_msgSend("void", this, "restoreStateWithCoder:", coder)
    }

    public open fun invalidateRestorableState(): Unit {
        Native.objc_msgSend("void", this, "invalidateRestorableState")
    }

    trait metaclass : IObjCObject {
        public open fun restorableStateKeyPaths(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "restorableStateKeyPaths") as NSArray
    }
}

trait NSApplication_NSRestorableStateExtension : IObjCObject {
    public open fun extendStateRestoration(): Unit {
        Native.objc_msgSend("void", this, "extendStateRestoration")
    }

    public open fun completeStateRestoration(): Unit {
        Native.objc_msgSend("void", this, "completeStateRestoration")
    }

    trait metaclass : IObjCObject
}

trait NSDocument_NSRestorableState : IObjCObject {
    public open fun restoreDocumentWindowWithIdentifier_state_completionHandler(identifier: NSString, state: NSCoder, completionHandler: Any): Unit {
        Native.objc_msgSend("void", this, "restoreDocumentWindowWithIdentifier:state:completionHandler:", identifier, state, completionHandler)
    }

    public open fun encodeRestorableStateWithCoder(coder: NSCoder): Unit {
        Native.objc_msgSend("void", this, "encodeRestorableStateWithCoder:", coder)
    }

    public open fun restoreStateWithCoder(coder: NSCoder): Unit {
        Native.objc_msgSend("void", this, "restoreStateWithCoder:", coder)
    }

    public open fun invalidateRestorableState(): Unit {
        Native.objc_msgSend("void", this, "invalidateRestorableState")
    }

    trait metaclass : IObjCObject {
        public open fun restorableStateKeyPaths(): NSArray =
            Native.objc_msgSend("class objc.NSArray", this, "restorableStateKeyPaths") as NSArray
    }
}

trait NSItemProvider_NSItemSourceInfo : IObjCObject {
    public open fun sourceFrame(): Any =
        Native.objc_msgSend("class objc.Any", this, "sourceFrame")

    public open fun containerFrame(): Any =
        Native.objc_msgSend("class objc.Any", this, "containerFrame")

    public open fun preferredPresentationSize(): Any =
        Native.objc_msgSend("class objc.Any", this, "preferredPresentationSize")

    trait metaclass : IObjCObject
}
