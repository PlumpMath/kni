<project name="KNI" default="dist">
    <property name="output" location="${basedir}/dist"/>
    <property name="lib" location="${basedir}/lib"/>

    <property name="kotlinc" location="${lib}/kotlinc"/>
    <property name="protobuf.jar" location="${lib}/protobuf-java-2.6.0.jar"/>

    <property name="indexer.src" location="${basedir}/indexer"/>
    <property name="indexer.target" location="${output}/build/indexer"/>
    <property name="runtime.objc.src" location="${basedir}/runtime-objc"/>
    <property name="runtime.objc.target" location="${output}/build/runtime-objc"/>

    <typedef resource="org/jetbrains/jet/buildtools/ant/antlib.xml"
             classpath="${kotlinc}/lib/kotlin-ant.jar"/>

    <target name="clean">
        <delete dir="${output}"/>
    </target>

    <target name="init">
        <mkdir dir="${output}"/>
        <mkdir dir="${output}/build"/>
    </target>

    <macrodef name="assert-generated-files-are-equal">
        <attribute name="file1"/>
        <attribute name="file2"/>

        <sequential>
            <fail message="Generated files have changed. Run 'ant gen' manually. If .h files are changed, DON'T FORGET TO UPDATE DECLARATIONS in corresponding .cc files">
                <condition>
                    <not>
                        <filesmatch file1="@{file1}" file2="@{file2}"/>
                    </not>
                </condition>
            </fail>
        </sequential>
    </macrodef>

    <macrodef name="protoc-indexer">
        <attribute name="output"/>

        <sequential>
            <mkdir dir="@{output}/native"/>
            <mkdir dir="@{output}/src"/>
            <exec executable="${lib}/protobuf/bin/protoc" failonerror="true">
                <arg value="--cpp_out=@{output}/native"/>
                <arg value="--java_out=@{output}/src"/>
                <arg value="--proto_path=${indexer.src}"/>
                <arg value="${indexer.src}/NativeIndex.proto"/>
            </exec>
        </sequential>
    </macrodef>

    <target name="protoc">
        <protoc-indexer output="${indexer.src}"/>
    </target>

    <macrodef name="javac-and-javah">
        <attribute name="src"/>
        <attribute name="output"/>
        <attribute name="header"/>
        <attribute name="nativeclass"/>
        <element name="additional-classpath" optional="true"/>

        <sequential>
            <local name="header.dir"/>
            <dirname property="header.dir" file="@{header}"/>
            <mkdir dir="${header.dir}"/>

            <javac srcdir="@{src}" destdir="@{output}" includeantruntime="false" source="1.6" target="1.6">
                <withKotlin/>
                <classpath>
                    <pathelement location="${kotlinc}/lib/kotlin-runtime.jar"/>
                    <additional-classpath/>
                </classpath>
            </javac>

            <javah verbose="true" outputfile="@{header}">
                <class name="@{nativeclass}"/>
                <classpath>
                    <pathelement location="@{output}"/>
                    <pathelement location="${kotlinc}/lib/kotlin-runtime.jar"/>
                    <additional-classpath/>
                </classpath>
            </javah>
        </sequential>
    </macrodef>

    <target name="javah-indexer">
        <javac-and-javah src="${indexer.src}/src"
                         output="${indexer.target}"
                         nativeclass="org.jetbrains.kni.indexer.IndexerNative"
                         header="${indexer.src}/native/Indexer.h">
            <additional-classpath>
                <pathelement location="${protobuf.jar}"/>
            </additional-classpath>
        </javac-and-javah>
    </target>

    <target name="indexer">
        <delete dir="${indexer.target}"/>
        <mkdir dir="${indexer.target}"/>

        <protoc-indexer output="${indexer.target}/proto"/>

        <assert-generated-files-are-equal file1="${indexer.target}/proto/native/NativeIndex.pb.cc"
                                          file2="${indexer.src}/native/NativeIndex.pb.cc"/>

        <javac-and-javah src="${indexer.src}/src"
                         output="${indexer.target}"
                         nativeclass="org.jetbrains.kni.indexer.IndexerNative"
                         header="${indexer.target}/headers/Indexer.h">
            <additional-classpath>
                <pathelement location="${protobuf.jar}"/>
            </additional-classpath>
        </javac-and-javah>

        <assert-generated-files-are-equal file1="${indexer.target}/headers/Indexer.h"
                                          file2="${indexer.src}/native/Indexer.h"/>

        <exec dir="${indexer.src}/native" executable="/usr/bin/make" failonerror="true">
            <arg value="clean"/>
            <arg value="all"/>
        </exec>
    </target>
    
    <target name="javah-runtime-objc">
        <delete dir="${runtime.objc.target}"/>
        <mkdir dir="${runtime.objc.target}"/>

        <javac-and-javah src="${runtime.objc.src}/src"
                         output="${runtime.objc.target}"
                         nativeclass="kni.objc.Native"
                         header="${runtime.objc.src}/native/kniobjc.h"/>
    </target>

    <target name="runtime-objc">
        <delete dir="${runtime.objc.target}"/>
        <mkdir dir="${runtime.objc.target}"/>

        <javac-and-javah src="${runtime.objc.src}/src"
                         output="${runtime.objc.target}"
                         nativeclass="kni.objc.Native"
                         header="${runtime.objc.target}/headers/kniobjc.h"/>

        <assert-generated-files-are-equal file1="${runtime.objc.target}/headers/kniobjc.h"
                                          file2="${runtime.objc.src}/native/kniobjc.h"/>

        <exec executable="/usr/bin/c++" failonerror="true">
            <arg line="-O2 -Wall -Wl,-no_compact_unwind"/>
            <arg value="-I${java.home}/../include"/>
            <arg value="-I${java.home}/../include/darwin"/>
            <arg value="-I${lib}/libffi"/>
            <!-- TODO: statically link libffi instead of using path to library here -->
            <arg value="-L${lib}/libffi"/>
            <arg line="-lffi -lobjc -dynamiclib"/>
            <arg value="-o"/>
            <arg value="${runtime.objc.target}/libKNIObjCRuntime.dylib"/>
            <arg value="${runtime.objc.src}/native/kniobjc.cc"/>
        </exec>

        <jar jarfile="${output}/kni-objc-runtime.jar">
            <fileset dir="${runtime.objc.target}">
                <include name="**/*.class"/>
                <include name="**/*.dylib"/>
            </fileset>

            <manifest>
                <attribute name="Built-By" value="JetBrains"/>
                <attribute name="Implementation-Vendor" value="JetBrains"/>
                <attribute name="Implementation-Title" value="KNI Objective-C Runtime"/>
                <attribute name="Implementation-Version" value="0.1-SNAPSHOT"/>
            </manifest>
        </jar>
    </target>

    <target name="gen" depends="protoc,javah-indexer,javah-runtime-objc"/>

    <target name="dist" depends="clean,init,indexer,runtime-objc"/>
</project>
