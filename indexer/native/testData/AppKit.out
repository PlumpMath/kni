name: "/System/Library/Frameworks/AppKit.framework/Headers/AppKit.h"
class {
  name: "NSObject"
  protocol: "NSObject"
  category: "NSObject+NSCoderMethods"
  category: "NSObject+NSDeprecatedMethods"
  category: "NSObject+NSDiscardableContentProxy"
  category: "NSObject+NSErrorRecoveryAttempting"
  category: "NSObject+NSCopyLinkMoveHandler"
  category: "NSObject+NSKeyValueCoding"
  category: "NSObject+NSDeprecatedKeyValueCoding"
  category: "NSObject+NSKeyValueObserving"
  category: "NSObject+NSKeyValueObserverRegistration"
  category: "NSObject+NSKeyValueObserverNotification"
  category: "NSObject+NSKeyValueObservingCustomization"
  category: "NSObject+NSDeprecatedKeyValueObservingCustomization"
  category: "NSObject+NSKeyedArchiverObjectSubstitution"
  category: "NSObject+NSKeyedUnarchiverObjectSubstitution"
  category: "NSObject+NSDelayedPerforming"
  category: "NSObject+NSThreadPerformAdditions"
  category: "NSObject+NSURLClient"
  category: "NSObject+NSArchiverCallback"
  category: "NSObject+NSDistributedObjects"
  category: "NSObject+NSClassDescriptionPrimitives"
  category: "NSObject+NSScripting"
  category: "NSObject+NSScriptClassDescription"
  category: "NSObject+NSScriptKeyValueCoding"
  category: "NSObject+NSScriptObjectSpecifiers"
  category: "NSObject+NSComparisonMethods"
  category: "NSObject+NSScriptingComparisonMethods"
  category: "NSObject+NSAccessibility"
  category: "NSObject+NSAccessibilityAdditions"
  category: "NSObject+NSDraggingSourceDeprecated"
  category: "NSObject+NSLayerDelegateContentsScaleUpdating"
  category: "NSObject+NSToolTipOwner"
  category: "NSObject+NSControlSubclassNotifications"
  category: "NSObject+NSFontManagerDelegate"
  category: "NSObject+NSFontManagerResponderMethod"
  category: "NSObject+NSFontPanelValidationAdditions"
  category: "NSObject+NSMenuValidation"
  category: "NSObject+NSPasteboardOwner"
  category: "NSObject+NSColorPanelResponderMethod"
  category: "NSObject+NSNibAwaking"
  category: "NSObject+NSSavePanelDelegateDeprecated"
  category: "NSObject+NSTableViewDataSourceDeprecated"
  category: "NSObject+CALayoutManager"
  category: "NSObject+CALayerDelegate"
  category: "NSObject+NSApplicationScriptingDelegation"
  category: "NSObject+NSToolbarItemValidation"
  category: "NSObject+NSKeyValueBindingCreation"
  category: "NSObject+NSPlaceholders"
  category: "NSObject+NSEditorRegistration"
  category: "NSObject+NSEditor"
  category: "NSObject+NSDictionaryControllerKeyValuePair"
  method {
    function {
      name: "load"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "initialize"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "new"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "allocWithZone:"
      return_type: "OI"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "alloc"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "dealloc"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "finalize"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "copy"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "mutableCopy"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "copyWithZone:"
      return_type: "OI"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "mutableCopyWithZone:"
      return_type: "OI"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "instancesRespondToSelector:"
      return_type: "Z"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "conformsToProtocol:"
      return_type: "Z"
      parameter {
        name: "protocol"
        type: "LProtocol;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "methodForSelector:"
      return_type: "*(X(Unexposed.id)*OS;.)X(Unexposed.id);"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "instanceMethodForSelector:"
      return_type: "*(X(Unexposed.id)*OS;.)X(Unexposed.id);"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "doesNotRecognizeSelector:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "forwardingTargetForSelector:"
      return_type: "OI"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "forwardInvocation:"
      return_type: "V"
      parameter {
        name: "anInvocation"
        type: "LNSInvocation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "methodSignatureForSelector:"
      return_type: "LNSMethodSignature;"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "instanceMethodSignatureForSelector:"
      return_type: "LNSMethodSignature;"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "allowsWeakReference"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "retainWeakReference"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isSubclassOfClass:"
      return_type: "Z"
      parameter {
        name: "aClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "resolveClassMethod:"
      return_type: "Z"
      parameter {
        name: "sel"
        type: "OS"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "resolveInstanceMethod:"
      return_type: "Z"
      parameter {
        name: "sel"
        type: "OS"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "hash"
      return_type: "UI"
    }
    class_method: true
  }
  method {
    function {
      name: "superclass"
      return_type: "OC"
    }
    class_method: true
  }
  method {
    function {
      name: "class"
      return_type: "OC"
    }
    class_method: true
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: true
  }
  method {
    function {
      name: "debugDescription"
      return_type: "LNSString;"
    }
    class_method: true
  }
  container: ""
  location_file: "/usr/include/objc/NSObject.h"
}
class {
  name: "NSEnumerator"
  base_class: "NSObject"
  protocol: "NSFastEnumeration"
  category: "NSEnumerator+NSExtendedEnumerator"
  method {
    function {
      name: "nextObject"
      return_type: "OI"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSEnumerator.h"
}
class {
  name: "NSValue"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  category: "NSValue+NSValueCreation"
  category: "NSValue+NSValueExtensionMethods"
  category: "NSValue+NSValueRangeExtensions"
  category: "NSValue+NSValueGeometryExtensions"
  category: "NSValue+CATransform3DAdditions"
  method {
    function {
      name: "getValue:"
      return_type: "V"
      parameter {
        name: "value"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objCType"
      return_type: "*cC;"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBytes:objCType:"
      return_type: "OI"
      parameter {
        name: "value"
        type: "*cV;"
      }
      parameter {
        name: "type"
        type: "*cC;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "objCType"
    type: "*cC;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSValue.h"
}
class {
  name: "NSNumber"
  base_class: "NSValue"
  category: "NSNumber+NSNumberCreation"
  category: "NSNumber+NSDecimalNumberExtensions"
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithChar:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "C"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUnsignedChar:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UB"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithShort:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "S"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUnsignedShort:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "US"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithInt:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUnsignedInt:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithLong:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUnsignedLong:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithLongLong:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUnsignedLongLong:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UJ"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFloat:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDouble:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBool:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithInteger:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUnsignedInteger:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "charValue"
      return_type: "C"
    }
    class_method: false
  }
  method {
    function {
      name: "unsignedCharValue"
      return_type: "UB"
    }
    class_method: false
  }
  method {
    function {
      name: "shortValue"
      return_type: "S"
    }
    class_method: false
  }
  method {
    function {
      name: "unsignedShortValue"
      return_type: "US"
    }
    class_method: false
  }
  method {
    function {
      name: "intValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "unsignedIntValue"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "longValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "unsignedLongValue"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "longLongValue"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "unsignedLongLongValue"
      return_type: "UJ"
    }
    class_method: false
  }
  method {
    function {
      name: "floatValue"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "doubleValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "boolValue"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "integerValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "unsignedIntegerValue"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "stringValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "compare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "otherNumber"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToNumber:"
      return_type: "Z"
      parameter {
        name: "number"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "charValue"
    type: "C"
  }
  property {
    name: "unsignedCharValue"
    type: "UB"
  }
  property {
    name: "shortValue"
    type: "S"
  }
  property {
    name: "unsignedShortValue"
    type: "US"
  }
  property {
    name: "intValue"
    type: "I"
  }
  property {
    name: "unsignedIntValue"
    type: "UI"
  }
  property {
    name: "longValue"
    type: "I"
  }
  property {
    name: "unsignedLongValue"
    type: "UI"
  }
  property {
    name: "longLongValue"
    type: "J"
  }
  property {
    name: "unsignedLongLongValue"
    type: "UJ"
  }
  property {
    name: "floatValue"
    type: "F"
  }
  property {
    name: "doubleValue"
    type: "D"
  }
  property {
    name: "boolValue"
    type: "Z"
  }
  property {
    name: "integerValue"
    type: "I"
  }
  property {
    name: "unsignedIntegerValue"
    type: "UI"
  }
  property {
    name: "stringValue"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSValue.h"
}
class {
  name: "NSArray"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  protocol: "NSFastEnumeration"
  category: "NSArray+NSExtendedArray"
  category: "NSArray+NSArrayCreation"
  category: "NSArray+NSDeprecated"
  category: "NSArray+NSArrayPathExtensions"
  category: "NSArray+NSKeyValueCoding"
  category: "NSArray+NSKeyValueObserverRegistration"
  category: "NSArray+NSSortDescriptorSorting"
  category: "NSArray+NSPredicateSupport"
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "objectAtIndex:"
      return_type: "OI"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithObjects:count:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "count"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArray.h"
}
class {
  name: "NSMutableArray"
  base_class: "NSArray"
  category: "NSMutableArray+NSExtendedMutableArray"
  category: "NSMutableArray+NSMutableArrayCreation"
  category: "NSMutableArray+NSSortDescriptorSorting"
  category: "NSMutableArray+NSPredicateSupport"
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertObject:atIndex:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeLastObject"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObjectAtIndex:withObject:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArray.h"
}
class {
  name: "NSAutoreleasePool"
  base_class: "NSObject"
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drain"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAutoreleasePool.h"
}
class {
  name: "NSBundle"
  base_class: "NSObject"
  category: "NSBundle+NSBundleHelpExtension"
  category: "NSBundle+NSBundleImageExtension"
  category: "NSBundle+NSNibLoading"
  category: "NSBundle+NSNibLoadingDeprecated"
  category: "NSBundle+NSBundleSoundExtensions"
  method {
    function {
      name: "mainBundle"
      return_type: "LNSBundle;"
    }
    class_method: true
  }
  method {
    function {
      name: "bundleWithPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bundleWithURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bundleForClass:"
      return_type: "LNSBundle;"
      parameter {
        name: "aClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "bundleWithIdentifier:"
      return_type: "LNSBundle;"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "allBundles"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "allFrameworks"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "load"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isLoaded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "unload"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "preflightAndReturnError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadAndReturnError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bundleURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "resourceURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "executableURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "URLForAuxiliaryExecutable:"
      return_type: "LNSURL;"
      parameter {
        name: "executableName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "privateFrameworksURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "sharedFrameworksURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "sharedSupportURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "builtInPlugInsURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "appStoreReceiptURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "bundlePath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "resourcePath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "executablePath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "pathForAuxiliaryExecutable:"
      return_type: "LNSString;"
      parameter {
        name: "executableName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "privateFrameworksPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "sharedFrameworksPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "sharedSupportPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "builtInPlugInsPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "URLForResource:withExtension:subdirectory:inBundleWithURL:"
      return_type: "LNSURL;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
      parameter {
        name: "bundleURL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:"
      return_type: "LNSArray;"
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
      parameter {
        name: "bundleURL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "URLForResource:withExtension:"
      return_type: "LNSURL;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "ext"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLForResource:withExtension:subdirectory:"
      return_type: "LNSURL;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLForResource:withExtension:subdirectory:localization:"
      return_type: "LNSURL;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
      parameter {
        name: "localizationName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLsForResourcesWithExtension:subdirectory:"
      return_type: "LNSArray;"
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLsForResourcesWithExtension:subdirectory:localization:"
      return_type: "LNSArray;"
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
      parameter {
        name: "localizationName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathForResource:ofType:inDirectory:"
      return_type: "LNSString;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "bundlePath"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pathsForResourcesOfType:inDirectory:"
      return_type: "LNSArray;"
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "bundlePath"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pathForResource:ofType:"
      return_type: "LNSString;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "ext"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathForResource:ofType:inDirectory:"
      return_type: "LNSString;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathForResource:ofType:inDirectory:forLocalization:"
      return_type: "LNSString;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
      parameter {
        name: "localizationName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathsForResourcesOfType:inDirectory:"
      return_type: "LNSArray;"
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathsForResourcesOfType:inDirectory:forLocalization:"
      return_type: "LNSArray;"
      parameter {
        name: "ext"
        type: "LNSString;"
      }
      parameter {
        name: "subpath"
        type: "LNSString;"
      }
      parameter {
        name: "localizationName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedStringForKey:value:table:"
      return_type: "LNSString;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "value"
        type: "LNSString;"
      }
      parameter {
        name: "tableName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bundleIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "infoDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedInfoDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "objectForInfoDictionaryKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classNamed:"
      return_type: "OC"
      parameter {
        name: "className"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "principalClass"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "preferredLocalizations"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizations"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "developmentLocalization"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "preferredLocalizationsFromArray:"
      return_type: "LNSArray;"
      parameter {
        name: "localizationsArray"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "preferredLocalizationsFromArray:forPreferences:"
      return_type: "LNSArray;"
      parameter {
        name: "localizationsArray"
        type: "LNSArray;"
      }
      parameter {
        name: "preferencesArray"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "executableArchitectures"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "loaded"
    type: "Z"
  }
  property {
    name: "bundleURL"
    type: "LNSURL;"
  }
  property {
    name: "resourceURL"
    type: "LNSURL;"
  }
  property {
    name: "executableURL"
    type: "LNSURL;"
  }
  property {
    name: "privateFrameworksURL"
    type: "LNSURL;"
  }
  property {
    name: "sharedFrameworksURL"
    type: "LNSURL;"
  }
  property {
    name: "sharedSupportURL"
    type: "LNSURL;"
  }
  property {
    name: "builtInPlugInsURL"
    type: "LNSURL;"
  }
  property {
    name: "appStoreReceiptURL"
    type: "LNSURL;"
  }
  property {
    name: "bundlePath"
    type: "LNSString;"
  }
  property {
    name: "resourcePath"
    type: "LNSString;"
  }
  property {
    name: "executablePath"
    type: "LNSString;"
  }
  property {
    name: "privateFrameworksPath"
    type: "LNSString;"
  }
  property {
    name: "sharedFrameworksPath"
    type: "LNSString;"
  }
  property {
    name: "sharedSupportPath"
    type: "LNSString;"
  }
  property {
    name: "builtInPlugInsPath"
    type: "LNSString;"
  }
  property {
    name: "bundleIdentifier"
    type: "LNSString;"
  }
  property {
    name: "infoDictionary"
    type: "LNSDictionary;"
  }
  property {
    name: "localizedInfoDictionary"
    type: "LNSDictionary;"
  }
  property {
    name: "principalClass"
    type: "OC"
  }
  property {
    name: "preferredLocalizations"
    type: "LNSArray;"
  }
  property {
    name: "localizations"
    type: "LNSArray;"
  }
  property {
    name: "developmentLocalization"
    type: "LNSString;"
  }
  property {
    name: "executableArchitectures"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSBundle.h"
}
class {
  name: "NSDate"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  category: "NSDate+NSExtendedDate"
  category: "NSDate+NSDateCreation"
  category: "NSDate+NSCalendarDateExtras"
  method {
    function {
      name: "timeIntervalSinceReferenceDate"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithTimeIntervalSinceReferenceDate:"
      return_type: "OI"
      parameter {
        name: "ti"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "timeIntervalSinceReferenceDate"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDate.h"
}
class {
  name: "NSCalendar"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "currentCalendar"
      return_type: "LNSCalendar;"
    }
    class_method: true
  }
  method {
    function {
      name: "autoupdatingCurrentCalendar"
      return_type: "LNSCalendar;"
    }
    class_method: true
  }
  method {
    function {
      name: "calendarWithIdentifier:"
      return_type: "LNSCalendar;"
      parameter {
        name: "calendarIdentifierConstant"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCalendarIdentifier:"
      return_type: "OI"
      parameter {
        name: "ident"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "calendarIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "locale"
      return_type: "LNSLocale;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocale:"
      return_type: "V"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeZone:"
      return_type: "V"
      parameter {
        name: "timeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstWeekday"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setFirstWeekday:"
      return_type: "V"
      parameter {
        name: "firstWeekday"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minimumDaysInFirstWeek"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinimumDaysInFirstWeek:"
      return_type: "V"
      parameter {
        name: "minimumDaysInFirstWeek"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "eraSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "longEraSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "monthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "shortMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "veryShortMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "standaloneMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "shortStandaloneMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "veryShortStandaloneMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "weekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "shortWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "veryShortWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "standaloneWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "shortStandaloneWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "veryShortStandaloneWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "quarterSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "shortQuarterSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "standaloneQuarterSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "shortStandaloneQuarterSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "AMSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "PMSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "minimumRangeOfUnit:"
      return_type: "R_NSRange;"
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumRangeOfUnit:"
      return_type: "R_NSRange;"
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfUnit:inUnit:forDate:"
      return_type: "R_NSRange;"
      parameter {
        name: "smaller"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "larger"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ordinalityOfUnit:inUnit:forDate:"
      return_type: "UI"
      parameter {
        name: "smaller"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "larger"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfUnit:startDate:interval:forDate:"
      return_type: "Z"
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "datep"
        type: "*LNSDate;;"
      }
      parameter {
        name: "tip"
        type: "*D;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateFromComponents:"
      return_type: "LNSDate;"
      parameter {
        name: "comps"
        type: "LNSDateComponents;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "components:fromDate:"
      return_type: "LNSDateComponents;"
      parameter {
        name: "unitFlags"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateByAddingComponents:toDate:options:"
      return_type: "LNSDate;"
      parameter {
        name: "comps"
        type: "LNSDateComponents;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "components:fromDate:toDate:options:"
      return_type: "LNSDateComponents;"
      parameter {
        name: "unitFlags"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "startingDate"
        type: "LNSDate;"
      }
      parameter {
        name: "resultDate"
        type: "LNSDate;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getEra:year:month:day:fromDate:"
      return_type: "V"
      parameter {
        name: "eraValuePointer"
        type: "*I;"
      }
      parameter {
        name: "yearValuePointer"
        type: "*I;"
      }
      parameter {
        name: "monthValuePointer"
        type: "*I;"
      }
      parameter {
        name: "dayValuePointer"
        type: "*I;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:"
      return_type: "V"
      parameter {
        name: "eraValuePointer"
        type: "*I;"
      }
      parameter {
        name: "yearValuePointer"
        type: "*I;"
      }
      parameter {
        name: "weekValuePointer"
        type: "*I;"
      }
      parameter {
        name: "weekdayValuePointer"
        type: "*I;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getHour:minute:second:nanosecond:fromDate:"
      return_type: "V"
      parameter {
        name: "hourValuePointer"
        type: "*I;"
      }
      parameter {
        name: "minuteValuePointer"
        type: "*I;"
      }
      parameter {
        name: "secondValuePointer"
        type: "*I;"
      }
      parameter {
        name: "nanosecondValuePointer"
        type: "*I;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "component:fromDate:"
      return_type: "I"
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateWithEra:year:month:day:hour:minute:second:nanosecond:"
      return_type: "LNSDate;"
      parameter {
        name: "eraValue"
        type: "I"
      }
      parameter {
        name: "yearValue"
        type: "I"
      }
      parameter {
        name: "monthValue"
        type: "I"
      }
      parameter {
        name: "dayValue"
        type: "I"
      }
      parameter {
        name: "hourValue"
        type: "I"
      }
      parameter {
        name: "minuteValue"
        type: "I"
      }
      parameter {
        name: "secondValue"
        type: "I"
      }
      parameter {
        name: "nanosecondValue"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateWithEra:yearForWeekOfYear:weekOfYear:weekday:hour:minute:second:nanosecond:"
      return_type: "LNSDate;"
      parameter {
        name: "eraValue"
        type: "I"
      }
      parameter {
        name: "yearValue"
        type: "I"
      }
      parameter {
        name: "weekValue"
        type: "I"
      }
      parameter {
        name: "weekdayValue"
        type: "I"
      }
      parameter {
        name: "hourValue"
        type: "I"
      }
      parameter {
        name: "minuteValue"
        type: "I"
      }
      parameter {
        name: "secondValue"
        type: "I"
      }
      parameter {
        name: "nanosecondValue"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startOfDayForDate:"
      return_type: "LNSDate;"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "componentsInTimeZone:fromDate:"
      return_type: "LNSDateComponents;"
      parameter {
        name: "timezone"
        type: "LNSTimeZone;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compareDate:toDate:toUnitGranularity:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "date1"
        type: "LNSDate;"
      }
      parameter {
        name: "date2"
        type: "LNSDate;"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDate:equalToDate:toUnitGranularity:"
      return_type: "Z"
      parameter {
        name: "date1"
        type: "LNSDate;"
      }
      parameter {
        name: "date2"
        type: "LNSDate;"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDate:inSameDayAsDate:"
      return_type: "Z"
      parameter {
        name: "date1"
        type: "LNSDate;"
      }
      parameter {
        name: "date2"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDateInToday:"
      return_type: "Z"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDateInYesterday:"
      return_type: "Z"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDateInTomorrow:"
      return_type: "Z"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDateInWeekend:"
      return_type: "Z"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfWeekendStartDate:interval:containingDate:"
      return_type: "Z"
      parameter {
        name: "datep"
        type: "*LNSDate;;"
      }
      parameter {
        name: "tip"
        type: "*D;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextWeekendStartDate:interval:options:afterDate:"
      return_type: "Z"
      parameter {
        name: "datep"
        type: "*LNSDate;;"
      }
      parameter {
        name: "tip"
        type: "*D;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSCalendarOptions)"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "components:fromDateComponents:toDateComponents:options:"
      return_type: "LNSDateComponents;"
      parameter {
        name: "unitFlags"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "startingDateComp"
        type: "LNSDateComponents;"
      }
      parameter {
        name: "resultDateComp"
        type: "LNSDateComponents;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateByAddingUnit:value:toDate:options:"
      return_type: "LNSDate;"
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "value"
        type: "I"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateDatesStartingAfterDate:matchingComponents:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "start"
        type: "LNSDate;"
      }
      parameter {
        name: "comps"
        type: "LNSDateComponents;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSCalendarOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSDate *, BOOL, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextDateAfterDate:matchingComponents:options:"
      return_type: "LNSDate;"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "comps"
        type: "LNSDateComponents;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextDateAfterDate:matchingUnit:value:options:"
      return_type: "LNSDate;"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "value"
        type: "I"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextDateAfterDate:matchingHour:minute:second:options:"
      return_type: "LNSDate;"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "hourValue"
        type: "I"
      }
      parameter {
        name: "minuteValue"
        type: "I"
      }
      parameter {
        name: "secondValue"
        type: "I"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateBySettingUnit:value:ofDate:options:"
      return_type: "LNSDate;"
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
      parameter {
        name: "v"
        type: "I"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateBySettingHour:minute:second:ofDate:options:"
      return_type: "LNSDate;"
      parameter {
        name: "h"
        type: "I"
      }
      parameter {
        name: "m"
        type: "I"
      }
      parameter {
        name: "s"
        type: "I"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSCalendarOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "date:matchesComponents:"
      return_type: "Z"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "components"
        type: "LNSDateComponents;"
      }
    }
    class_method: false
  }
  property {
    name: "calendarIdentifier"
    type: "LNSString;"
  }
  property {
    name: "locale"
    type: "LNSLocale;"
  }
  property {
    name: "timeZone"
    type: "LNSTimeZone;"
  }
  property {
    name: "firstWeekday"
    type: "UI"
  }
  property {
    name: "minimumDaysInFirstWeek"
    type: "UI"
  }
  property {
    name: "eraSymbols"
    type: "LNSArray;"
  }
  property {
    name: "longEraSymbols"
    type: "LNSArray;"
  }
  property {
    name: "monthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "veryShortMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "standaloneMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortStandaloneMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "veryShortStandaloneMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "weekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "veryShortWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "standaloneWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortStandaloneWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "veryShortStandaloneWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "quarterSymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortQuarterSymbols"
    type: "LNSArray;"
  }
  property {
    name: "standaloneQuarterSymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortStandaloneQuarterSymbols"
    type: "LNSArray;"
  }
  property {
    name: "AMSymbol"
    type: "LNSString;"
  }
  property {
    name: "PMSymbol"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCalendar.h"
}
class {
  name: "NSDateComponents"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "calendar"
      return_type: "LNSCalendar;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCalendar:"
      return_type: "V"
      parameter {
        name: "calendar"
        type: "LNSCalendar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeZone:"
      return_type: "V"
      parameter {
        name: "timeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "era"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setEra:"
      return_type: "V"
      parameter {
        name: "era"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "year"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setYear:"
      return_type: "V"
      parameter {
        name: "year"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "month"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setMonth:"
      return_type: "V"
      parameter {
        name: "month"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "day"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setDay:"
      return_type: "V"
      parameter {
        name: "day"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hour"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setHour:"
      return_type: "V"
      parameter {
        name: "hour"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minute"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinute:"
      return_type: "V"
      parameter {
        name: "minute"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "second"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setSecond:"
      return_type: "V"
      parameter {
        name: "second"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nanosecond"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNanosecond:"
      return_type: "V"
      parameter {
        name: "nanosecond"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "weekday"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setWeekday:"
      return_type: "V"
      parameter {
        name: "weekday"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "weekdayOrdinal"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setWeekdayOrdinal:"
      return_type: "V"
      parameter {
        name: "weekdayOrdinal"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "quarter"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setQuarter:"
      return_type: "V"
      parameter {
        name: "quarter"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "weekOfMonth"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setWeekOfMonth:"
      return_type: "V"
      parameter {
        name: "weekOfMonth"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "weekOfYear"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setWeekOfYear:"
      return_type: "V"
      parameter {
        name: "weekOfYear"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "yearForWeekOfYear"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setYearForWeekOfYear:"
      return_type: "V"
      parameter {
        name: "yearForWeekOfYear"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLeapMonth"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setLeapMonth:"
      return_type: "V"
      parameter {
        name: "leapMonth"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "date"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "week"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setWeek:"
      return_type: "V"
      parameter {
        name: "v"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:forComponent:"
      return_type: "V"
      parameter {
        name: "value"
        type: "I"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueForComponent:"
      return_type: "I"
      parameter {
        name: "unit"
        type: "X(Enum.enum NSCalendarUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isValidDate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isValidDateInCalendar:"
      return_type: "Z"
      parameter {
        name: "calendar"
        type: "LNSCalendar;"
      }
    }
    class_method: false
  }
  property {
    name: "calendar"
    type: "LNSCalendar;"
  }
  property {
    name: "timeZone"
    type: "LNSTimeZone;"
  }
  property {
    name: "era"
    type: "I"
  }
  property {
    name: "year"
    type: "I"
  }
  property {
    name: "month"
    type: "I"
  }
  property {
    name: "day"
    type: "I"
  }
  property {
    name: "hour"
    type: "I"
  }
  property {
    name: "minute"
    type: "I"
  }
  property {
    name: "second"
    type: "I"
  }
  property {
    name: "nanosecond"
    type: "I"
  }
  property {
    name: "weekday"
    type: "I"
  }
  property {
    name: "weekdayOrdinal"
    type: "I"
  }
  property {
    name: "quarter"
    type: "I"
  }
  property {
    name: "weekOfMonth"
    type: "I"
  }
  property {
    name: "weekOfYear"
    type: "I"
  }
  property {
    name: "yearForWeekOfYear"
    type: "I"
  }
  property {
    name: "leapMonth"
    type: "Z"
  }
  property {
    name: "date"
    type: "LNSDate;"
  }
  property {
    name: "validDate"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCalendar.h"
}
class {
  name: "NSString"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  category: "NSString+NSStringExtensionMethods"
  category: "NSString+NSStringEncodingDetection"
  category: "NSString+NSExtendedStringPropertyListParsing"
  category: "NSString+NSStringDeprecated"
  category: "NSString+NSStringPathExtensions"
  category: "NSString+NSURLUtilities"
  category: "NSString+NSLinguisticAnalysis"
  category: "NSString+NSPasteboardSupport"
  category: "NSString+NSStringDrawing"
  category: "NSString+NSExtendedStringDrawing"
  method {
    function {
      name: "length"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "characterAtIndex:"
      return_type: "US"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "length"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
class {
  name: "NSMutableString"
  base_class: "NSString"
  category: "NSMutableString+NSMutableStringExtensionMethods"
  method {
    function {
      name: "replaceCharactersInRange:withString:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
class {
  name: "NSSimpleCString"
  base_class: "NSString"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
class {
  name: "NSConstantString"
  base_class: "NSSimpleCString"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
class {
  name: "NSCharacterSet"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSCoding"
  category: "NSCharacterSet+NSURLUtilities"
  method {
    function {
      name: "controlCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "whitespaceCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "whitespaceAndNewlineCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "decimalDigitCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "letterCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "lowercaseLetterCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "uppercaseLetterCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "nonBaseCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "alphanumericCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "decomposableCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "illegalCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "punctuationCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "capitalizedLetterCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "symbolCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "newlineCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "characterSetWithRange:"
      return_type: "LNSCharacterSet;"
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "characterSetWithCharactersInString:"
      return_type: "LNSCharacterSet;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "characterSetWithBitmapRepresentation:"
      return_type: "LNSCharacterSet;"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "characterSetWithContentsOfFile:"
      return_type: "LNSCharacterSet;"
      parameter {
        name: "fName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "characterIsMember:"
      return_type: "Z"
      parameter {
        name: "aCharacter"
        type: "US"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bitmapRepresentation"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "invertedSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "longCharacterIsMember:"
      return_type: "Z"
      parameter {
        name: "theLongChar"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSupersetOfSet:"
      return_type: "Z"
      parameter {
        name: "theOtherSet"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasMemberInPlane:"
      return_type: "Z"
      parameter {
        name: "thePlane"
        type: "UB"
      }
    }
    class_method: false
  }
  property {
    name: "bitmapRepresentation"
    type: "LNSData;"
  }
  property {
    name: "invertedSet"
    type: "LNSCharacterSet;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCharacterSet.h"
}
class {
  name: "NSMutableCharacterSet"
  base_class: "NSCharacterSet"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  method {
    function {
      name: "addCharactersInRange:"
      return_type: "V"
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCharactersInRange:"
      return_type: "V"
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addCharactersInString:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCharactersInString:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formUnionWithCharacterSet:"
      return_type: "V"
      parameter {
        name: "otherSet"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formIntersectionWithCharacterSet:"
      return_type: "V"
      parameter {
        name: "otherSet"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invert"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "controlCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "whitespaceCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "whitespaceAndNewlineCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "decimalDigitCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "letterCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "lowercaseLetterCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "uppercaseLetterCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "nonBaseCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "alphanumericCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "decomposableCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "illegalCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "punctuationCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "capitalizedLetterCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "symbolCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "newlineCharacterSet"
      return_type: "LNSMutableCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "characterSetWithRange:"
      return_type: "LNSMutableCharacterSet;"
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "characterSetWithCharactersInString:"
      return_type: "LNSMutableCharacterSet;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "characterSetWithBitmapRepresentation:"
      return_type: "LNSMutableCharacterSet;"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "characterSetWithContentsOfFile:"
      return_type: "LNSMutableCharacterSet;"
      parameter {
        name: "fName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCharacterSet.h"
}
class {
  name: "NSCoder"
  base_class: "NSObject"
  category: "NSCoder+NSExtendedCoder"
  category: "NSCoder+NSTypedstreamCompatibility"
  category: "NSCoder+NSGeometryCoding"
  category: "NSCoder+NSGeometryKeyedCoding"
  category: "NSCoder+NSAppKitColorExtensions"
  method {
    function {
      name: "encodeValueOfObjCType:at:"
      return_type: "V"
      parameter {
        name: "type"
        type: "*cC;"
      }
      parameter {
        name: "addr"
        type: "*cV;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeDataObject:"
      return_type: "V"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeValueOfObjCType:at:"
      return_type: "V"
      parameter {
        name: "type"
        type: "*cC;"
      }
      parameter {
        name: "data"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeDataObject"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "versionForClassName:"
      return_type: "I"
      parameter {
        name: "className"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCoder.h"
}
class {
  name: "NSData"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  category: "NSData+NSExtendedData"
  category: "NSData+NSDataCreation"
  category: "NSData+NSDataBase64Encoding"
  category: "NSData+NSDeprecated"
  method {
    function {
      name: "length"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "bytes"
      return_type: "*cV;"
    }
    class_method: false
  }
  property {
    name: "length"
    type: "UI"
  }
  property {
    name: "bytes"
    type: "*cV;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
class {
  name: "NSMutableData"
  base_class: "NSData"
  category: "NSMutableData+NSExtendedMutableData"
  category: "NSMutableData+NSMutableDataCreation"
  method {
    function {
      name: "mutableBytes"
      return_type: "*V;"
    }
    class_method: false
  }
  method {
    function {
      name: "length"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setLength:"
      return_type: "V"
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "mutableBytes"
    type: "*V;"
  }
  property {
    name: "length"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
class {
  name: "NSPurgeableData"
  base_class: "NSMutableData"
  protocol: "NSDiscardableContent"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
class {
  name: "NSFormatter"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "stringForObjectValue:"
      return_type: "LNSString;"
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedStringForObjectValue:withDefaultAttributes:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "editingStringForObjectValue:"
      return_type: "LNSString;"
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjectValue:forString:errorDescription:"
      return_type: "Z"
      parameter {
        name: "obj"
        type: "*OI;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isPartialStringValid:newEditingString:errorDescription:"
      return_type: "Z"
      parameter {
        name: "partialString"
        type: "LNSString;"
      }
      parameter {
        name: "newString"
        type: "*LNSString;;"
      }
      parameter {
        name: "error"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:"
      return_type: "Z"
      parameter {
        name: "partialStringPtr"
        type: "*LNSString;;"
      }
      parameter {
        name: "proposedSelRangePtr"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "origString"
        type: "LNSString;"
      }
      parameter {
        name: "origSelRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "error"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFormatter.h"
}
class {
  name: "NSDateFormatter"
  base_class: "NSFormatter"
  category: "NSDateFormatter+NSDateFormatterCompatibility"
  method {
    function {
      name: "formattingContext"
      return_type: "X(Enum.enum NSFormattingContext)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormattingContext:"
      return_type: "V"
      parameter {
        name: "formattingContext"
        type: "X(Enum.enum NSFormattingContext)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjectValue:forString:range:error:"
      return_type: "Z"
      parameter {
        name: "obj"
        type: "*OI;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "rangep"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromDate:"
      return_type: "LNSString;"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateFromString:"
      return_type: "LNSDate;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedStringFromDate:dateStyle:timeStyle:"
      return_type: "LNSString;"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "dstyle"
        type: "X(Enum.enum NSDateFormatterStyle)"
      }
      parameter {
        name: "tstyle"
        type: "X(Enum.enum NSDateFormatterStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateFormatFromTemplate:options:locale:"
      return_type: "LNSString;"
      parameter {
        name: "tmplate"
        type: "LNSString;"
      }
      parameter {
        name: "opts"
        type: "UI"
      }
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultFormatterBehavior"
      return_type: "X(Enum.enum NSDateFormatterBehavior)"
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultFormatterBehavior:"
      return_type: "V"
      parameter {
        name: "behavior"
        type: "X(Enum.enum NSDateFormatterBehavior)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setLocalizedDateFormatFromTemplate:"
      return_type: "V"
      parameter {
        name: "dateFormatTemplate"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateFormat"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDateFormat:"
      return_type: "V"
      parameter {
        name: "dateFormat"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateStyle"
      return_type: "X(Enum.enum NSDateFormatterStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDateStyle:"
      return_type: "V"
      parameter {
        name: "dateStyle"
        type: "X(Enum.enum NSDateFormatterStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeStyle"
      return_type: "X(Enum.enum NSDateFormatterStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeStyle:"
      return_type: "V"
      parameter {
        name: "timeStyle"
        type: "X(Enum.enum NSDateFormatterStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "locale"
      return_type: "LNSLocale;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocale:"
      return_type: "V"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "generatesCalendarDates"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setGeneratesCalendarDates:"
      return_type: "V"
      parameter {
        name: "generatesCalendarDates"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formatterBehavior"
      return_type: "X(Enum.enum NSDateFormatterBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormatterBehavior:"
      return_type: "V"
      parameter {
        name: "formatterBehavior"
        type: "X(Enum.enum NSDateFormatterBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeZone:"
      return_type: "V"
      parameter {
        name: "timeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "calendar"
      return_type: "LNSCalendar;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCalendar:"
      return_type: "V"
      parameter {
        name: "calendar"
        type: "LNSCalendar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLenient"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setLenient:"
      return_type: "V"
      parameter {
        name: "lenient"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "twoDigitStartDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTwoDigitStartDate:"
      return_type: "V"
      parameter {
        name: "twoDigitStartDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultDate:"
      return_type: "V"
      parameter {
        name: "defaultDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "eraSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setEraSymbols:"
      return_type: "V"
      parameter {
        name: "eraSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "monthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMonthSymbols:"
      return_type: "V"
      parameter {
        name: "monthSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shortMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShortMonthSymbols:"
      return_type: "V"
      parameter {
        name: "shortMonthSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "weekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setWeekdaySymbols:"
      return_type: "V"
      parameter {
        name: "weekdaySymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shortWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShortWeekdaySymbols:"
      return_type: "V"
      parameter {
        name: "shortWeekdaySymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "AMSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAMSymbol:"
      return_type: "V"
      parameter {
        name: "AMSymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "PMSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPMSymbol:"
      return_type: "V"
      parameter {
        name: "PMSymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "longEraSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLongEraSymbols:"
      return_type: "V"
      parameter {
        name: "longEraSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "veryShortMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVeryShortMonthSymbols:"
      return_type: "V"
      parameter {
        name: "veryShortMonthSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "standaloneMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandaloneMonthSymbols:"
      return_type: "V"
      parameter {
        name: "standaloneMonthSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shortStandaloneMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShortStandaloneMonthSymbols:"
      return_type: "V"
      parameter {
        name: "shortStandaloneMonthSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "veryShortStandaloneMonthSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVeryShortStandaloneMonthSymbols:"
      return_type: "V"
      parameter {
        name: "veryShortStandaloneMonthSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "veryShortWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVeryShortWeekdaySymbols:"
      return_type: "V"
      parameter {
        name: "veryShortWeekdaySymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "standaloneWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandaloneWeekdaySymbols:"
      return_type: "V"
      parameter {
        name: "standaloneWeekdaySymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shortStandaloneWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShortStandaloneWeekdaySymbols:"
      return_type: "V"
      parameter {
        name: "shortStandaloneWeekdaySymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "veryShortStandaloneWeekdaySymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVeryShortStandaloneWeekdaySymbols:"
      return_type: "V"
      parameter {
        name: "veryShortStandaloneWeekdaySymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "quarterSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setQuarterSymbols:"
      return_type: "V"
      parameter {
        name: "quarterSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shortQuarterSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShortQuarterSymbols:"
      return_type: "V"
      parameter {
        name: "shortQuarterSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "standaloneQuarterSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandaloneQuarterSymbols:"
      return_type: "V"
      parameter {
        name: "standaloneQuarterSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shortStandaloneQuarterSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShortStandaloneQuarterSymbols:"
      return_type: "V"
      parameter {
        name: "shortStandaloneQuarterSymbols"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "gregorianStartDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setGregorianStartDate:"
      return_type: "V"
      parameter {
        name: "gregorianStartDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doesRelativeDateFormatting"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoesRelativeDateFormatting:"
      return_type: "V"
      parameter {
        name: "doesRelativeDateFormatting"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "formattingContext"
    type: "X(Enum.enum NSFormattingContext)"
  }
  property {
    name: "dateFormat"
    type: "LNSString;"
  }
  property {
    name: "dateStyle"
    type: "X(Enum.enum NSDateFormatterStyle)"
  }
  property {
    name: "timeStyle"
    type: "X(Enum.enum NSDateFormatterStyle)"
  }
  property {
    name: "locale"
    type: "LNSLocale;"
  }
  property {
    name: "generatesCalendarDates"
    type: "Z"
  }
  property {
    name: "formatterBehavior"
    type: "X(Enum.enum NSDateFormatterBehavior)"
  }
  property {
    name: "timeZone"
    type: "LNSTimeZone;"
  }
  property {
    name: "calendar"
    type: "LNSCalendar;"
  }
  property {
    name: "lenient"
    type: "Z"
  }
  property {
    name: "twoDigitStartDate"
    type: "LNSDate;"
  }
  property {
    name: "defaultDate"
    type: "LNSDate;"
  }
  property {
    name: "eraSymbols"
    type: "LNSArray;"
  }
  property {
    name: "monthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "weekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "AMSymbol"
    type: "LNSString;"
  }
  property {
    name: "PMSymbol"
    type: "LNSString;"
  }
  property {
    name: "longEraSymbols"
    type: "LNSArray;"
  }
  property {
    name: "veryShortMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "standaloneMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortStandaloneMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "veryShortStandaloneMonthSymbols"
    type: "LNSArray;"
  }
  property {
    name: "veryShortWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "standaloneWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortStandaloneWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "veryShortStandaloneWeekdaySymbols"
    type: "LNSArray;"
  }
  property {
    name: "quarterSymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortQuarterSymbols"
    type: "LNSArray;"
  }
  property {
    name: "standaloneQuarterSymbols"
    type: "LNSArray;"
  }
  property {
    name: "shortStandaloneQuarterSymbols"
    type: "LNSArray;"
  }
  property {
    name: "gregorianStartDate"
    type: "LNSDate;"
  }
  property {
    name: "doesRelativeDateFormatting"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDateFormatter.h"
}
class {
  name: "NSDateIntervalFormatter"
  base_class: "NSFormatter"
  method {
    function {
      name: "locale"
      return_type: "LNSLocale;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocale:"
      return_type: "V"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "calendar"
      return_type: "LNSCalendar;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCalendar:"
      return_type: "V"
      parameter {
        name: "calendar"
        type: "LNSCalendar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeZone:"
      return_type: "V"
      parameter {
        name: "timeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateTemplate"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDateTemplate:"
      return_type: "V"
      parameter {
        name: "dateTemplate"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateStyle"
      return_type: "X(Enum.enum NSDateIntervalFormatterStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDateStyle:"
      return_type: "V"
      parameter {
        name: "dateStyle"
        type: "X(Enum.enum NSDateIntervalFormatterStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeStyle"
      return_type: "X(Enum.enum NSDateIntervalFormatterStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeStyle:"
      return_type: "V"
      parameter {
        name: "timeStyle"
        type: "X(Enum.enum NSDateIntervalFormatterStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromDate:toDate:"
      return_type: "LNSString;"
      parameter {
        name: "fromDate"
        type: "LNSDate;"
      }
      parameter {
        name: "toDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  property {
    name: "locale"
    type: "LNSLocale;"
  }
  property {
    name: "calendar"
    type: "LNSCalendar;"
  }
  property {
    name: "timeZone"
    type: "LNSTimeZone;"
  }
  property {
    name: "dateTemplate"
    type: "LNSString;"
  }
  property {
    name: "dateStyle"
    type: "X(Enum.enum NSDateIntervalFormatterStyle)"
  }
  property {
    name: "timeStyle"
    type: "X(Enum.enum NSDateIntervalFormatterStyle)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDateIntervalFormatter.h"
}
class {
  name: "NSMassFormatter"
  base_class: "NSFormatter"
  method {
    function {
      name: "numberFormatter"
      return_type: "LNSNumberFormatter;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberFormatter:"
      return_type: "V"
      parameter {
        name: "numberFormatter"
        type: "LNSNumberFormatter;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStyle"
      return_type: "X(Enum.enum NSFormattingUnitStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setUnitStyle:"
      return_type: "V"
      parameter {
        name: "unitStyle"
        type: "X(Enum.enum NSFormattingUnitStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isForPersonMassUse"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setForPersonMassUse:"
      return_type: "V"
      parameter {
        name: "forPersonMassUse"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromValue:unit:"
      return_type: "LNSString;"
      parameter {
        name: "value"
        type: "D"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSMassFormatterUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromKilograms:"
      return_type: "LNSString;"
      parameter {
        name: "numberInKilograms"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStringFromValue:unit:"
      return_type: "LNSString;"
      parameter {
        name: "value"
        type: "D"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSMassFormatterUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStringFromKilograms:usedUnit:"
      return_type: "LNSString;"
      parameter {
        name: "numberInKilograms"
        type: "D"
      }
      parameter {
        name: "unitp"
        type: "*X(Enum.enum NSMassFormatterUnit);"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjectValue:forString:errorDescription:"
      return_type: "Z"
      parameter {
        name: "obj"
        type: "*OI;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  property {
    name: "numberFormatter"
    type: "LNSNumberFormatter;"
  }
  property {
    name: "unitStyle"
    type: "X(Enum.enum NSFormattingUnitStyle)"
  }
  property {
    name: "forPersonMassUse"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSMassFormatter.h"
}
class {
  name: "NSLengthFormatter"
  base_class: "NSFormatter"
  method {
    function {
      name: "numberFormatter"
      return_type: "LNSNumberFormatter;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberFormatter:"
      return_type: "V"
      parameter {
        name: "numberFormatter"
        type: "LNSNumberFormatter;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStyle"
      return_type: "X(Enum.enum NSFormattingUnitStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setUnitStyle:"
      return_type: "V"
      parameter {
        name: "unitStyle"
        type: "X(Enum.enum NSFormattingUnitStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isForPersonHeightUse"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setForPersonHeightUse:"
      return_type: "V"
      parameter {
        name: "forPersonHeightUse"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromValue:unit:"
      return_type: "LNSString;"
      parameter {
        name: "value"
        type: "D"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSLengthFormatterUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromMeters:"
      return_type: "LNSString;"
      parameter {
        name: "numberInMeters"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStringFromValue:unit:"
      return_type: "LNSString;"
      parameter {
        name: "value"
        type: "D"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSLengthFormatterUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStringFromMeters:usedUnit:"
      return_type: "LNSString;"
      parameter {
        name: "numberInMeters"
        type: "D"
      }
      parameter {
        name: "unitp"
        type: "*X(Enum.enum NSLengthFormatterUnit);"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjectValue:forString:errorDescription:"
      return_type: "Z"
      parameter {
        name: "obj"
        type: "*OI;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  property {
    name: "numberFormatter"
    type: "LNSNumberFormatter;"
  }
  property {
    name: "unitStyle"
    type: "X(Enum.enum NSFormattingUnitStyle)"
  }
  property {
    name: "forPersonHeightUse"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLengthFormatter.h"
}
class {
  name: "NSEnergyFormatter"
  base_class: "NSFormatter"
  method {
    function {
      name: "numberFormatter"
      return_type: "LNSNumberFormatter;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberFormatter:"
      return_type: "V"
      parameter {
        name: "numberFormatter"
        type: "LNSNumberFormatter;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStyle"
      return_type: "X(Enum.enum NSFormattingUnitStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setUnitStyle:"
      return_type: "V"
      parameter {
        name: "unitStyle"
        type: "X(Enum.enum NSFormattingUnitStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isForFoodEnergyUse"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setForFoodEnergyUse:"
      return_type: "V"
      parameter {
        name: "forFoodEnergyUse"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromValue:unit:"
      return_type: "LNSString;"
      parameter {
        name: "value"
        type: "D"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSEnergyFormatterUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromJoules:"
      return_type: "LNSString;"
      parameter {
        name: "numberInJoules"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStringFromValue:unit:"
      return_type: "LNSString;"
      parameter {
        name: "value"
        type: "D"
      }
      parameter {
        name: "unit"
        type: "X(Enum.enum NSEnergyFormatterUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unitStringFromJoules:usedUnit:"
      return_type: "LNSString;"
      parameter {
        name: "numberInJoules"
        type: "D"
      }
      parameter {
        name: "unitp"
        type: "*X(Enum.enum NSEnergyFormatterUnit);"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjectValue:forString:errorDescription:"
      return_type: "Z"
      parameter {
        name: "obj"
        type: "*OI;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  property {
    name: "numberFormatter"
    type: "LNSNumberFormatter;"
  }
  property {
    name: "unitStyle"
    type: "X(Enum.enum NSFormattingUnitStyle)"
  }
  property {
    name: "forFoodEnergyUse"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSEnergyFormatter.h"
}
class {
  name: "NSScanner"
  base_class: "NSObject"
  protocol: "NSCopying"
  category: "NSScanner+NSExtendedScanner"
  category: "NSScanner+NSDecimalNumberScanning"
  method {
    function {
      name: "string"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "scanLocation"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setScanLocation:"
      return_type: "V"
      parameter {
        name: "scanLocation"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "charactersToBeSkipped"
      return_type: "LNSCharacterSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCharactersToBeSkipped:"
      return_type: "V"
      parameter {
        name: "charactersToBeSkipped"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "caseSensitive"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCaseSensitive:"
      return_type: "V"
      parameter {
        name: "caseSensitive"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "locale"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocale:"
      return_type: "V"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "string"
    type: "LNSString;"
  }
  property {
    name: "scanLocation"
    type: "UI"
  }
  property {
    name: "charactersToBeSkipped"
    type: "LNSCharacterSet;"
  }
  property {
    name: "caseSensitive"
    type: "Z"
  }
  property {
    name: "locale"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScanner.h"
}
class {
  name: "NSDictionary"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  protocol: "NSFastEnumeration"
  category: "NSDictionary+NSExtendedDictionary"
  category: "NSDictionary+NSDictionaryCreation"
  category: "NSDictionary+NSSharedKeySetDictionary"
  category: "NSDictionary+NSFileAttributes"
  category: "NSDictionary+NSKeyValueCoding"
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "objectForKey:"
      return_type: "OI"
      parameter {
        name: "aKey"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithObjects:forKeys:count:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "keys"
        type: "X(IncompleteArray.const id<NSCopying> [])"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "count"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h"
}
class {
  name: "NSMutableDictionary"
  base_class: "NSDictionary"
  category: "NSMutableDictionary+NSExtendedMutableDictionary"
  category: "NSMutableDictionary+NSMutableDictionaryCreation"
  category: "NSMutableDictionary+NSSharedKeySetDictionary"
  category: "NSMutableDictionary+NSKeyValueCoding"
  method {
    function {
      name: "removeObjectForKey:"
      return_type: "V"
      parameter {
        name: "aKey"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:forKey:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "aKey"
        type: "X(Unexposed.id<NSCopying>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h"
}
class {
  name: "NSDecimalNumber"
  base_class: "NSNumber"
  method {
    function {
      name: "initWithMantissa:exponent:isNegative:"
      return_type: "OI"
      parameter {
        name: "mantissa"
        type: "UJ"
      }
      parameter {
        name: "exponent"
        type: "S"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDecimal:"
      return_type: "OI"
      parameter {
        name: "dcm"
        type: "RNSDecimal;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "numberValue"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:locale:"
      return_type: "OI"
      parameter {
        name: "numberValue"
        type: "LNSString;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalValue"
      return_type: "RNSDecimal;"
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberWithMantissa:exponent:isNegative:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "mantissa"
        type: "UJ"
      }
      parameter {
        name: "exponent"
        type: "S"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "decimalNumberWithDecimal:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "dcm"
        type: "RNSDecimal;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "decimalNumberWithString:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "numberValue"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "decimalNumberWithString:locale:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "numberValue"
        type: "LNSString;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "zero"
      return_type: "LNSDecimalNumber;"
    }
    class_method: true
  }
  method {
    function {
      name: "one"
      return_type: "LNSDecimalNumber;"
    }
    class_method: true
  }
  method {
    function {
      name: "minimumDecimalNumber"
      return_type: "LNSDecimalNumber;"
    }
    class_method: true
  }
  method {
    function {
      name: "maximumDecimalNumber"
      return_type: "LNSDecimalNumber;"
    }
    class_method: true
  }
  method {
    function {
      name: "notANumber"
      return_type: "LNSDecimalNumber;"
    }
    class_method: true
  }
  method {
    function {
      name: "decimalNumberByAdding:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "decimalNumber"
        type: "LNSDecimalNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByAdding:withBehavior:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "decimalNumber"
        type: "LNSDecimalNumber;"
      }
      parameter {
        name: "behavior"
        type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberBySubtracting:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "decimalNumber"
        type: "LNSDecimalNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberBySubtracting:withBehavior:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "decimalNumber"
        type: "LNSDecimalNumber;"
      }
      parameter {
        name: "behavior"
        type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByMultiplyingBy:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "decimalNumber"
        type: "LNSDecimalNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByMultiplyingBy:withBehavior:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "decimalNumber"
        type: "LNSDecimalNumber;"
      }
      parameter {
        name: "behavior"
        type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByDividingBy:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "decimalNumber"
        type: "LNSDecimalNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByDividingBy:withBehavior:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "decimalNumber"
        type: "LNSDecimalNumber;"
      }
      parameter {
        name: "behavior"
        type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByRaisingToPower:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "power"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByRaisingToPower:withBehavior:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "power"
        type: "UI"
      }
      parameter {
        name: "behavior"
        type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByMultiplyingByPowerOf10:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "power"
        type: "S"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByMultiplyingByPowerOf10:withBehavior:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "power"
        type: "S"
      }
      parameter {
        name: "behavior"
        type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberByRoundingAccordingToBehavior:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "behavior"
        type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "decimalNumber"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultBehavior:"
      return_type: "V"
      parameter {
        name: "behavior"
        type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultBehavior"
      return_type: "X(Unexposed.id<NSDecimalNumberBehaviors>)"
    }
    class_method: true
  }
  method {
    function {
      name: "objCType"
      return_type: "*cC;"
    }
    class_method: false
  }
  method {
    function {
      name: "doubleValue"
      return_type: "D"
    }
    class_method: false
  }
  property {
    name: "decimalValue"
    type: "RNSDecimal;"
  }
  property {
    name: "objCType"
    type: "*cC;"
  }
  property {
    name: "doubleValue"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDecimalNumber.h"
}
class {
  name: "NSDecimalNumberHandler"
  base_class: "NSObject"
  protocol: "NSDecimalNumberBehaviors"
  protocol: "NSCoding"
  method {
    function {
      name: "defaultDecimalNumberHandler"
      return_type: "LNSDecimalNumberHandler;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"
      return_type: "OI"
      parameter {
        name: "roundingMode"
        type: "X(Enum.enum NSRoundingMode)"
      }
      parameter {
        name: "scale"
        type: "S"
      }
      parameter {
        name: "exact"
        type: "Z"
      }
      parameter {
        name: "overflow"
        type: "Z"
      }
      parameter {
        name: "underflow"
        type: "Z"
      }
      parameter {
        name: "divideByZero"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"
      return_type: "OI"
      parameter {
        name: "roundingMode"
        type: "X(Enum.enum NSRoundingMode)"
      }
      parameter {
        name: "scale"
        type: "S"
      }
      parameter {
        name: "exact"
        type: "Z"
      }
      parameter {
        name: "overflow"
        type: "Z"
      }
      parameter {
        name: "underflow"
        type: "Z"
      }
      parameter {
        name: "divideByZero"
        type: "Z"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDecimalNumber.h"
}
class {
  name: "NSError"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "initWithDomain:code:userInfo:"
      return_type: "OI"
      parameter {
        name: "domain"
        type: "LNSString;"
      }
      parameter {
        name: "code"
        type: "I"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "errorWithDomain:code:userInfo:"
      return_type: "OI"
      parameter {
        name: "domain"
        type: "LNSString;"
      }
      parameter {
        name: "code"
        type: "I"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "domain"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "code"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedFailureReason"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedRecoverySuggestion"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedRecoveryOptions"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "recoveryAttempter"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "helpAnchor"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "domain"
    type: "LNSString;"
  }
  property {
    name: "code"
    type: "I"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  property {
    name: "localizedDescription"
    type: "LNSString;"
  }
  property {
    name: "localizedFailureReason"
    type: "LNSString;"
  }
  property {
    name: "localizedRecoverySuggestion"
    type: "LNSString;"
  }
  property {
    name: "localizedRecoveryOptions"
    type: "LNSArray;"
  }
  property {
    name: "recoveryAttempter"
    type: "OI"
  }
  property {
    name: "helpAnchor"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSError.h"
}
class {
  name: "NSException"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSException+NSExceptionRaisingConveniences"
  method {
    function {
      name: "exceptionWithName:reason:userInfo:"
      return_type: "LNSException;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "reason"
        type: "LNSString;"
      }
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithName:reason:userInfo:"
      return_type: "OI"
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "aReason"
        type: "LNSString;"
      }
      parameter {
        name: "aUserInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "reason"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "callStackReturnAddresses"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "callStackSymbols"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "raise"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "reason"
    type: "LNSString;"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  property {
    name: "callStackReturnAddresses"
    type: "LNSArray;"
  }
  property {
    name: "callStackSymbols"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSException.h"
}
class {
  name: "NSAssertionHandler"
  base_class: "NSObject"
  method {
    function {
      name: "currentHandler"
      return_type: "LNSAssertionHandler;"
    }
    class_method: true
  }
  method {
    function {
      name: "handleFailureInMethod:object:file:lineNumber:description:"
      return_type: "V"
      parameter {
        name: "selector"
        type: "OS"
      }
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "line"
        type: "I"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handleFailureInFunction:file:lineNumber:description:"
      return_type: "V"
      parameter {
        name: "functionName"
        type: "LNSString;"
      }
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "line"
        type: "I"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSException.h"
}
class {
  name: "NSFileHandle"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  category: "NSFileHandle+NSFileHandleCreation"
  category: "NSFileHandle+NSFileHandleAsynchronousAccess"
  category: "NSFileHandle+NSFileHandlePlatformSpecific"
  method {
    function {
      name: "availableData"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "readDataToEndOfFile"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "readDataOfLength:"
      return_type: "LNSData;"
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeData:"
      return_type: "V"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "offsetInFile"
      return_type: "UJ"
    }
    class_method: false
  }
  method {
    function {
      name: "seekToEndOfFile"
      return_type: "UJ"
    }
    class_method: false
  }
  method {
    function {
      name: "seekToFileOffset:"
      return_type: "V"
      parameter {
        name: "offset"
        type: "UJ"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "truncateFileAtOffset:"
      return_type: "V"
      parameter {
        name: "offset"
        type: "UJ"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "synchronizeFile"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "closeFile"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFileDescriptor:closeOnDealloc:"
      return_type: "OI"
      parameter {
        name: "fd"
        type: "I"
      }
      parameter {
        name: "closeopt"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "availableData"
    type: "LNSData;"
  }
  property {
    name: "offsetInFile"
    type: "UJ"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileHandle.h"
}
class {
  name: "NSPipe"
  base_class: "NSObject"
  method {
    function {
      name: "fileHandleForReading"
      return_type: "LNSFileHandle;"
    }
    class_method: false
  }
  method {
    function {
      name: "fileHandleForWriting"
      return_type: "LNSFileHandle;"
    }
    class_method: false
  }
  method {
    function {
      name: "pipe"
      return_type: "LNSPipe;"
    }
    class_method: true
  }
  property {
    name: "fileHandleForReading"
    type: "LNSFileHandle;"
  }
  property {
    name: "fileHandleForWriting"
    type: "LNSFileHandle;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileHandle.h"
}
class {
  name: "NSFileManager"
  base_class: "NSObject"
  method {
    function {
      name: "defaultManager"
      return_type: "LNSFileManager;"
    }
    class_method: true
  }
  method {
    function {
      name: "mountedVolumeURLsIncludingResourceValuesForKeys:options:"
      return_type: "LNSArray;"
      parameter {
        name: "propertyKeys"
        type: "LNSArray;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSVolumeEnumerationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:"
      return_type: "LNSArray;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSDirectoryEnumerationOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLsForDirectory:inDomains:"
      return_type: "LNSArray;"
      parameter {
        name: "directory"
        type: "X(Enum.enum NSSearchPathDirectory)"
      }
      parameter {
        name: "domainMask"
        type: "X(Enum.enum NSSearchPathDomainMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLForDirectory:inDomain:appropriateForURL:create:error:"
      return_type: "LNSURL;"
      parameter {
        name: "directory"
        type: "X(Enum.enum NSSearchPathDirectory)"
      }
      parameter {
        name: "domain"
        type: "X(Enum.enum NSSearchPathDomainMask)"
      }
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "shouldCreate"
        type: "Z"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getRelationship:ofDirectoryAtURL:toItemAtURL:error:"
      return_type: "Z"
      parameter {
        name: "outRelationship"
        type: "*X(Enum.enum NSURLRelationship);"
      }
      parameter {
        name: "directoryURL"
        type: "LNSURL;"
      }
      parameter {
        name: "otherURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getRelationship:ofDirectory:inDomain:toItemAtURL:error:"
      return_type: "Z"
      parameter {
        name: "outRelationship"
        type: "*X(Enum.enum NSURLRelationship);"
      }
      parameter {
        name: "directory"
        type: "X(Enum.enum NSSearchPathDirectory)"
      }
      parameter {
        name: "domainMask"
        type: "X(Enum.enum NSSearchPathDomainMask)"
      }
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createDirectoryAtURL:withIntermediateDirectories:attributes:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "createIntermediates"
        type: "Z"
      }
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createSymbolicLinkAtURL:withDestinationURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "destURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSFileManagerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSFileManagerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributes:ofItemAtPath:error:"
      return_type: "Z"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createDirectoryAtPath:withIntermediateDirectories:attributes:error:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "createIntermediates"
        type: "Z"
      }
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsOfDirectoryAtPath:error:"
      return_type: "LNSArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subpathsOfDirectoryAtPath:error:"
      return_type: "LNSArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributesOfItemAtPath:error:"
      return_type: "LNSDictionary;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributesOfFileSystemForPath:error:"
      return_type: "LNSDictionary;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createSymbolicLinkAtPath:withDestinationPath:error:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "destPath"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "destinationOfSymbolicLinkAtPath:error:"
      return_type: "LNSString;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copyItemAtPath:toPath:error:"
      return_type: "Z"
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveItemAtPath:toPath:error:"
      return_type: "Z"
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "linkItemAtPath:toPath:error:"
      return_type: "Z"
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemAtPath:error:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copyItemAtURL:toURL:error:"
      return_type: "Z"
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveItemAtURL:toURL:error:"
      return_type: "Z"
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "linkItemAtURL:toURL:error:"
      return_type: "Z"
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemAtURL:error:"
      return_type: "Z"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trashItemAtURL:resultingItemURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "outResultingURL"
        type: "*LNSURL;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileAttributesAtPath:traverseLink:"
      return_type: "LNSDictionary;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "yorn"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeFileAttributes:atPath:"
      return_type: "Z"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "directoryContentsAtPath:"
      return_type: "LNSArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileSystemAttributesAtPath:"
      return_type: "LNSDictionary;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathContentOfSymbolicLinkAtPath:"
      return_type: "LNSString;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createSymbolicLinkAtPath:pathContent:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "otherpath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createDirectoryAtPath:attributes:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "linkPath:toPath:handler:"
      return_type: "Z"
      parameter {
        name: "src"
        type: "LNSString;"
      }
      parameter {
        name: "dest"
        type: "LNSString;"
      }
      parameter {
        name: "handler"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copyPath:toPath:handler:"
      return_type: "Z"
      parameter {
        name: "src"
        type: "LNSString;"
      }
      parameter {
        name: "dest"
        type: "LNSString;"
      }
      parameter {
        name: "handler"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "movePath:toPath:handler:"
      return_type: "Z"
      parameter {
        name: "src"
        type: "LNSString;"
      }
      parameter {
        name: "dest"
        type: "LNSString;"
      }
      parameter {
        name: "handler"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFileAtPath:handler:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "handler"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentDirectoryPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "changeCurrentDirectoryPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileExistsAtPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileExistsAtPath:isDirectory:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "isDirectory"
        type: "*Z;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isReadableFileAtPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isWritableFileAtPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isExecutableFileAtPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDeletableFileAtPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsEqualAtPath:andPath:"
      return_type: "Z"
      parameter {
        name: "path1"
        type: "LNSString;"
      }
      parameter {
        name: "path2"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayNameAtPath:"
      return_type: "LNSString;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "componentsToDisplayForPath:"
      return_type: "LNSArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumeratorAtPath:"
      return_type: "LNSDirectoryEnumerator;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:"
      return_type: "LNSDirectoryEnumerator;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSDirectoryEnumerationOptions)"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.BOOL (^)(NSURL *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subpathsAtPath:"
      return_type: "LNSArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsAtPath:"
      return_type: "LNSData;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createFileAtPath:contents:attributes:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "attr"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileSystemRepresentationWithPath:"
      return_type: "*cC;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringWithFileSystemRepresentation:length:"
      return_type: "LNSString;"
      parameter {
        name: "str"
        type: "*cC;"
      }
      parameter {
        name: "len"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:"
      return_type: "Z"
      parameter {
        name: "originalItemURL"
        type: "LNSURL;"
      }
      parameter {
        name: "newItemURL"
        type: "LNSURL;"
      }
      parameter {
        name: "backupItemName"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileManagerItemReplacementOptions)"
      }
      parameter {
        name: "resultingURL"
        type: "*LNSURL;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setUbiquitous:itemAtURL:destinationURL:error:"
      return_type: "Z"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "destinationURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isUbiquitousItemAtURL:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startDownloadingUbiquitousItemAtURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "evictUbiquitousItemAtURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLForUbiquityContainerIdentifier:"
      return_type: "LNSURL;"
      parameter {
        name: "containerIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLForPublishingUbiquitousItemAtURL:expirationDate:error:"
      return_type: "LNSURL;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "outDate"
        type: "*LNSDate;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ubiquityIdentityToken"
      return_type: "X(Unexposed.id<NSObject,NSCopying,NSCoding>)"
    }
    class_method: false
  }
  method {
    function {
      name: "containerURLForSecurityApplicationGroupIdentifier:"
      return_type: "LNSURL;"
      parameter {
        name: "groupIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSFileManagerDelegate>)"
  }
  property {
    name: "currentDirectoryPath"
    type: "LNSString;"
  }
  property {
    name: "ubiquityIdentityToken"
    type: "X(Unexposed.id<NSObject,NSCopying,NSCoding>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileManager.h"
}
class {
  name: "NSDirectoryEnumerator"
  base_class: "NSEnumerator"
  method {
    function {
      name: "fileAttributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "directoryAttributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "skipDescendents"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "level"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "skipDescendants"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "fileAttributes"
    type: "LNSDictionary;"
  }
  property {
    name: "directoryAttributes"
    type: "LNSDictionary;"
  }
  property {
    name: "level"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileManager.h"
}
class {
  name: "NSPointerFunctions"
  base_class: "NSObject"
  protocol: "NSCopying"
  method {
    function {
      name: "initWithOptions:"
      return_type: "OI"
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pointerFunctionsWithOptions:"
      return_type: "LNSPointerFunctions;"
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "hashFunction"
      return_type: "*(*cV;*(*cV;)UI;)UI;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHashFunction:"
      return_type: "V"
      parameter {
        name: "hashFunction"
        type: "*(*cV;*(*cV;)UI;)UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualFunction"
      return_type: "*(*cV;*cV;*(*cV;)UI;)Z;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIsEqualFunction:"
      return_type: "V"
      parameter {
        name: "isEqualFunction"
        type: "*(*cV;*cV;*(*cV;)UI;)Z;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeFunction"
      return_type: "*(*cV;)UI;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSizeFunction:"
      return_type: "V"
      parameter {
        name: "sizeFunction"
        type: "*(*cV;)UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionFunction"
      return_type: "*(*cV;)LNSString;;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDescriptionFunction:"
      return_type: "V"
      parameter {
        name: "descriptionFunction"
        type: "*(*cV;)LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "relinquishFunction"
      return_type: "*(*cV;*(*cV;)UI;)V;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRelinquishFunction:"
      return_type: "V"
      parameter {
        name: "relinquishFunction"
        type: "*(*cV;*(*cV;)UI;)V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acquireFunction"
      return_type: "*(*cV;*(*cV;)UI;Z)*V;;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAcquireFunction:"
      return_type: "V"
      parameter {
        name: "acquireFunction"
        type: "*(*cV;*(*cV;)UI;Z)*V;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesStrongWriteBarrier"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesStrongWriteBarrier:"
      return_type: "V"
      parameter {
        name: "usesStrongWriteBarrier"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesWeakReadAndWriteBarriers"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesWeakReadAndWriteBarriers:"
      return_type: "V"
      parameter {
        name: "usesWeakReadAndWriteBarriers"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "hashFunction"
    type: "*(*cV;*(*cV;)UI;)UI;"
  }
  property {
    name: "isEqualFunction"
    type: "*(*cV;*cV;*(*cV;)UI;)Z;"
  }
  property {
    name: "sizeFunction"
    type: "*(*cV;)UI;"
  }
  property {
    name: "descriptionFunction"
    type: "*(*cV;)LNSString;;"
  }
  property {
    name: "relinquishFunction"
    type: "*(*cV;*(*cV;)UI;)V;"
  }
  property {
    name: "acquireFunction"
    type: "*(*cV;*(*cV;)UI;Z)*V;;"
  }
  property {
    name: "usesStrongWriteBarrier"
    type: "Z"
  }
  property {
    name: "usesWeakReadAndWriteBarriers"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPointerFunctions.h"
}
class {
  name: "NSHashTable"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  protocol: "NSFastEnumeration"
  method {
    function {
      name: "initWithOptions:capacity:"
      return_type: "OI"
      parameter {
        name: "options"
        type: "UI"
      }
      parameter {
        name: "initialCapacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithPointerFunctions:capacity:"
      return_type: "OI"
      parameter {
        name: "functions"
        type: "LNSPointerFunctions;"
      }
      parameter {
        name: "initialCapacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hashTableWithOptions:"
      return_type: "LNSHashTable;"
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "hashTableWithWeakObjects"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "weakObjectsHashTable"
      return_type: "LNSHashTable;"
    }
    class_method: true
  }
  method {
    function {
      name: "pointerFunctions"
      return_type: "LNSPointerFunctions;"
    }
    class_method: false
  }
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "member:"
      return_type: "OI"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "allObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "anyObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "containsObject:"
      return_type: "Z"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectsHashTable:"
      return_type: "Z"
      parameter {
        name: "other"
        type: "LNSHashTable;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToHashTable:"
      return_type: "Z"
      parameter {
        name: "other"
        type: "LNSHashTable;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSubsetOfHashTable:"
      return_type: "Z"
      parameter {
        name: "other"
        type: "LNSHashTable;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectHashTable:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSHashTable;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unionHashTable:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSHashTable;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minusHashTable:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSHashTable;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setRepresentation"
      return_type: "LNSSet;"
    }
    class_method: false
  }
  property {
    name: "pointerFunctions"
    type: "LNSPointerFunctions;"
  }
  property {
    name: "count"
    type: "UI"
  }
  property {
    name: "allObjects"
    type: "LNSArray;"
  }
  property {
    name: "anyObject"
    type: "OI"
  }
  property {
    name: "setRepresentation"
    type: "LNSSet;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSHashTable.h"
}
class {
  name: "NSHTTPCookie"
  base_class: "NSObject"
  method {
    function {
      name: "initWithProperties:"
      return_type: "OI"
      parameter {
        name: "properties"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cookieWithProperties:"
      return_type: "LNSHTTPCookie;"
      parameter {
        name: "properties"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "requestHeaderFieldsWithCookies:"
      return_type: "LNSDictionary;"
      parameter {
        name: "cookies"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "cookiesWithResponseHeaderFields:forURL:"
      return_type: "LNSArray;"
      parameter {
        name: "headerFields"
        type: "LNSDictionary;"
      }
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "properties"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "version"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "value"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "expiresDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "isSessionOnly"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "domain"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "path"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "isSecure"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isHTTPOnly"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "comment"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "commentURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "portList"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "properties"
    type: "LNSDictionary;"
  }
  property {
    name: "version"
    type: "UI"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "value"
    type: "LNSString;"
  }
  property {
    name: "expiresDate"
    type: "LNSDate;"
  }
  property {
    name: "sessionOnly"
    type: "Z"
  }
  property {
    name: "domain"
    type: "LNSString;"
  }
  property {
    name: "path"
    type: "LNSString;"
  }
  property {
    name: "secure"
    type: "Z"
  }
  property {
    name: "HTTPOnly"
    type: "Z"
  }
  property {
    name: "comment"
    type: "LNSString;"
  }
  property {
    name: "commentURL"
    type: "LNSURL;"
  }
  property {
    name: "portList"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSHTTPCookie.h"
}
class {
  name: "NSHTTPCookieStorage"
  base_class: "NSObject"
  category: "NSHTTPCookieStorage+NSURLSessionTaskAdditions"
  method {
    function {
      name: "sharedHTTPCookieStorage"
      return_type: "LNSHTTPCookieStorage;"
    }
    class_method: true
  }
  method {
    function {
      name: "cookies"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCookie:"
      return_type: "V"
      parameter {
        name: "cookie"
        type: "LNSHTTPCookie;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteCookie:"
      return_type: "V"
      parameter {
        name: "cookie"
        type: "LNSHTTPCookie;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCookiesSinceDate:"
      return_type: "V"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cookiesForURL:"
      return_type: "LNSArray;"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCookies:forURL:mainDocumentURL:"
      return_type: "V"
      parameter {
        name: "cookies"
        type: "LNSArray;"
      }
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
      parameter {
        name: "mainDocumentURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cookieAcceptPolicy"
      return_type: "X(Enum.enum NSHTTPCookieAcceptPolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "setCookieAcceptPolicy:"
      return_type: "V"
      parameter {
        name: "cookieAcceptPolicy"
        type: "X(Enum.enum NSHTTPCookieAcceptPolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortedCookiesUsingDescriptors:"
      return_type: "LNSArray;"
      parameter {
        name: "sortOrder"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "cookies"
    type: "LNSArray;"
  }
  property {
    name: "cookieAcceptPolicy"
    type: "X(Enum.enum NSHTTPCookieAcceptPolicy)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSHTTPCookieStorage.h"
}
class {
  name: "NSIndexPath"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "indexPathWithIndex:"
      return_type: "OI"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "indexPathWithIndexes:length:"
      return_type: "OI"
      parameter {
        name: "indexes"
        type: "X(IncompleteArray.const NSUInteger [])"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithIndexes:length:"
      return_type: "OI"
      parameter {
        name: "indexes"
        type: "X(IncompleteArray.const NSUInteger [])"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithIndex:"
      return_type: "OI"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexPathByAddingIndex:"
      return_type: "LNSIndexPath;"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexPathByRemovingLastIndex"
      return_type: "LNSIndexPath;"
    }
    class_method: false
  }
  method {
    function {
      name: "indexAtPosition:"
      return_type: "UI"
      parameter {
        name: "position"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "length"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "getIndexes:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "otherObject"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  property {
    name: "length"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSIndexPath.h"
}
class {
  name: "NSIndexSet"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "indexSet"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "indexSetWithIndex:"
      return_type: "OI"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "indexSetWithIndexesInRange:"
      return_type: "OI"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithIndexesInRange:"
      return_type: "OI"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithIndexSet:"
      return_type: "OI"
      parameter {
        name: "indexSet"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithIndex:"
      return_type: "OI"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToIndexSet:"
      return_type: "Z"
      parameter {
        name: "indexSet"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "firstIndex"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "lastIndex"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "indexGreaterThanIndex:"
      return_type: "UI"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexLessThanIndex:"
      return_type: "UI"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexGreaterThanOrEqualToIndex:"
      return_type: "UI"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexLessThanOrEqualToIndex:"
      return_type: "UI"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getIndexes:maxCount:inIndexRange:"
      return_type: "UI"
      parameter {
        name: "indexBuffer"
        type: "*UI;"
      }
      parameter {
        name: "bufferSize"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "countOfIndexesInRange:"
      return_type: "UI"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsIndex:"
      return_type: "Z"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsIndexesInRange:"
      return_type: "Z"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsIndexes:"
      return_type: "Z"
      parameter {
        name: "indexSet"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectsIndexesInRange:"
      return_type: "Z"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateIndexesUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateIndexesWithOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateIndexesInRange:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexPassingTest:"
      return_type: "UI"
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexWithOptions:passingTest:"
      return_type: "UI"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexInRange:options:passingTest:"
      return_type: "UI"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesPassingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesWithOptions:passingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesInRange:options:passingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateRangesUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateRangesWithOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateRangesInRange:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  property {
    name: "count"
    type: "UI"
  }
  property {
    name: "firstIndex"
    type: "UI"
  }
  property {
    name: "lastIndex"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSIndexSet.h"
}
class {
  name: "NSMutableIndexSet"
  base_class: "NSIndexSet"
  method {
    function {
      name: "addIndexes:"
      return_type: "V"
      parameter {
        name: "indexSet"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeIndexes:"
      return_type: "V"
      parameter {
        name: "indexSet"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllIndexes"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "addIndex:"
      return_type: "V"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeIndex:"
      return_type: "V"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addIndexesInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeIndexesInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shiftIndexesStartingAtIndex:by:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "delta"
        type: "I"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSIndexSet.h"
}
class {
  name: "NSInvocation"
  base_class: "NSObject"
  method {
    function {
      name: "invocationWithMethodSignature:"
      return_type: "LNSInvocation;"
      parameter {
        name: "sig"
        type: "LNSMethodSignature;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "methodSignature"
      return_type: "LNSMethodSignature;"
    }
    class_method: false
  }
  method {
    function {
      name: "retainArguments"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "argumentsRetained"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selector"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelector:"
      return_type: "V"
      parameter {
        name: "selector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getReturnValue:"
      return_type: "V"
      parameter {
        name: "retLoc"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setReturnValue:"
      return_type: "V"
      parameter {
        name: "retLoc"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getArgument:atIndex:"
      return_type: "V"
      parameter {
        name: "argumentLocation"
        type: "*V;"
      }
      parameter {
        name: "idx"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setArgument:atIndex:"
      return_type: "V"
      parameter {
        name: "argumentLocation"
        type: "*V;"
      }
      parameter {
        name: "idx"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invoke"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "invokeWithTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "methodSignature"
    type: "LNSMethodSignature;"
  }
  property {
    name: "argumentsRetained"
    type: "Z"
  }
  property {
    name: "target"
    type: "OI"
  }
  property {
    name: "selector"
    type: "OS"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSInvocation.h"
}
class {
  name: "NSJSONSerialization"
  base_class: "NSObject"
  method {
    function {
      name: "isValidJSONObject:"
      return_type: "Z"
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithJSONObject:options:error:"
      return_type: "LNSData;"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "opt"
        type: "X(Enum.enum NSJSONWritingOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "JSONObjectWithData:options:error:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "opt"
        type: "X(Enum.enum NSJSONReadingOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "writeJSONObject:toStream:options:error:"
      return_type: "I"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "stream"
        type: "LNSOutputStream;"
      }
      parameter {
        name: "opt"
        type: "X(Enum.enum NSJSONWritingOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "JSONObjectWithStream:options:error:"
      return_type: "OI"
      parameter {
        name: "stream"
        type: "LNSInputStream;"
      }
      parameter {
        name: "opt"
        type: "X(Enum.enum NSJSONReadingOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSJSONSerialization.h"
}
class {
  name: "NSOrderedSet"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  protocol: "NSFastEnumeration"
  category: "NSOrderedSet+NSExtendedOrderedSet"
  category: "NSOrderedSet+NSOrderedSetCreation"
  category: "NSOrderedSet+NSKeyValueCoding"
  category: "NSOrderedSet+NSKeyValueObserverRegistration"
  category: "NSOrderedSet+NSKeyValueSorting"
  category: "NSOrderedSet+NSPredicateSupport"
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "objectAtIndex:"
      return_type: "OI"
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObject:"
      return_type: "UI"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithObjects:count:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "count"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrderedSet.h"
}
class {
  name: "NSMutableOrderedSet"
  base_class: "NSOrderedSet"
  category: "NSMutableOrderedSet+NSExtendedMutableOrderedSet"
  category: "NSMutableOrderedSet+NSMutableOrderedSetCreation"
  category: "NSMutableOrderedSet+NSKeyValueSorting"
  category: "NSMutableOrderedSet+NSPredicateSupport"
  method {
    function {
      name: "insertObject:atIndex:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectAtIndex:"
      return_type: "V"
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObjectAtIndex:withObject:"
      return_type: "V"
      parameter {
        name: "idx"
        type: "UI"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrderedSet.h"
}
class {
  name: "NSSet"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  protocol: "NSFastEnumeration"
  category: "NSSet+NSExtendedSet"
  category: "NSSet+NSSetCreation"
  category: "NSSet+NSKeyValueCoding"
  category: "NSSet+NSKeyValueObserverRegistration"
  category: "NSSet+NSSortDescriptorSorting"
  category: "NSSet+NSPredicateSupport"
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "member:"
      return_type: "OI"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithObjects:count:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "count"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSet.h"
}
class {
  name: "NSMutableSet"
  base_class: "NSSet"
  category: "NSMutableSet+NSExtendedMutableSet"
  category: "NSMutableSet+NSMutableSetCreation"
  category: "NSMutableSet+NSPredicateSupport"
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSet.h"
}
class {
  name: "NSCountedSet"
  base_class: "NSMutableSet"
  method {
    function {
      name: "initWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithArray:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSet:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "countForObject:"
      return_type: "UI"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSet.h"
}
class {
  name: "NSPropertyListSerialization"
  base_class: "NSObject"
  method {
    function {
      name: "propertyList:isValidForFormat:"
      return_type: "Z"
      parameter {
        name: "plist"
        type: "OI"
      }
      parameter {
        name: "format"
        type: "X(Enum.enum NSPropertyListFormat)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithPropertyList:format:options:error:"
      return_type: "LNSData;"
      parameter {
        name: "plist"
        type: "OI"
      }
      parameter {
        name: "format"
        type: "X(Enum.enum NSPropertyListFormat)"
      }
      parameter {
        name: "opt"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "writePropertyList:toStream:format:options:error:"
      return_type: "I"
      parameter {
        name: "plist"
        type: "OI"
      }
      parameter {
        name: "stream"
        type: "LNSOutputStream;"
      }
      parameter {
        name: "format"
        type: "X(Enum.enum NSPropertyListFormat)"
      }
      parameter {
        name: "opt"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "propertyListWithData:options:format:error:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "opt"
        type: "UI"
      }
      parameter {
        name: "format"
        type: "*X(Enum.enum NSPropertyListFormat);"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "propertyListWithStream:options:format:error:"
      return_type: "OI"
      parameter {
        name: "stream"
        type: "LNSInputStream;"
      }
      parameter {
        name: "opt"
        type: "UI"
      }
      parameter {
        name: "format"
        type: "*X(Enum.enum NSPropertyListFormat);"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataFromPropertyList:format:errorDescription:"
      return_type: "LNSData;"
      parameter {
        name: "plist"
        type: "OI"
      }
      parameter {
        name: "format"
        type: "X(Enum.enum NSPropertyListFormat)"
      }
      parameter {
        name: "errorString"
        type: "*LNSString;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "propertyListFromData:mutabilityOption:format:errorDescription:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "opt"
        type: "X(Enum.enum NSPropertyListMutabilityOptions)"
      }
      parameter {
        name: "format"
        type: "*X(Enum.enum NSPropertyListFormat);"
      }
      parameter {
        name: "errorString"
        type: "*LNSString;;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPropertyList.h"
}
class {
  name: "NSKeyedArchiver"
  base_class: "NSCoder"
  method {
    function {
      name: "archivedDataWithRootObject:"
      return_type: "LNSData;"
      parameter {
        name: "rootObject"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "archiveRootObject:toFile:"
      return_type: "Z"
      parameter {
        name: "rootObject"
        type: "OI"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initForWritingWithMutableData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSMutableData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSKeyedArchiverDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSKeyedArchiverDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outputFormat"
      return_type: "X(Enum.enum NSPropertyListFormat)"
    }
    class_method: false
  }
  method {
    function {
      name: "setOutputFormat:"
      return_type: "V"
      parameter {
        name: "outputFormat"
        type: "X(Enum.enum NSPropertyListFormat)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "finishEncoding"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setClassName:forClass:"
      return_type: "V"
      parameter {
        name: "codedName"
        type: "LNSString;"
      }
      parameter {
        name: "cls"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setClassName:forClass:"
      return_type: "V"
      parameter {
        name: "codedName"
        type: "LNSString;"
      }
      parameter {
        name: "cls"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classNameForClass:"
      return_type: "LNSString;"
      parameter {
        name: "cls"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "classNameForClass:"
      return_type: "LNSString;"
      parameter {
        name: "cls"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeObject:forKey:"
      return_type: "V"
      parameter {
        name: "objv"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeConditionalObject:forKey:"
      return_type: "V"
      parameter {
        name: "objv"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeBool:forKey:"
      return_type: "V"
      parameter {
        name: "boolv"
        type: "Z"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeInt:forKey:"
      return_type: "V"
      parameter {
        name: "intv"
        type: "I"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeInt32:forKey:"
      return_type: "V"
      parameter {
        name: "intv"
        type: "I"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeInt64:forKey:"
      return_type: "V"
      parameter {
        name: "intv"
        type: "J"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeFloat:forKey:"
      return_type: "V"
      parameter {
        name: "realv"
        type: "F"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeDouble:forKey:"
      return_type: "V"
      parameter {
        name: "realv"
        type: "D"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeBytes:length:forKey:"
      return_type: "V"
      parameter {
        name: "bytesp"
        type: "*cUB;"
      }
      parameter {
        name: "lenv"
        type: "UI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setRequiresSecureCoding:"
      return_type: "V"
      parameter {
        name: "b"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSKeyedArchiverDelegate>)"
  }
  property {
    name: "outputFormat"
    type: "X(Enum.enum NSPropertyListFormat)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyedArchiver.h"
}
class {
  name: "NSKeyedUnarchiver"
  base_class: "NSCoder"
  method {
    function {
      name: "unarchiveObjectWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "unarchiveObjectWithFile:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initForReadingWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSKeyedUnarchiverDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSKeyedUnarchiverDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "finishDecoding"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setClass:forClassName:"
      return_type: "V"
      parameter {
        name: "cls"
        type: "OC"
      }
      parameter {
        name: "codedName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setClass:forClassName:"
      return_type: "V"
      parameter {
        name: "cls"
        type: "OC"
      }
      parameter {
        name: "codedName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classForClassName:"
      return_type: "OC"
      parameter {
        name: "codedName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "classForClassName:"
      return_type: "OC"
      parameter {
        name: "codedName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsValueForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeObjectForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeBoolForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeIntForKey:"
      return_type: "I"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeInt32ForKey:"
      return_type: "I"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeInt64ForKey:"
      return_type: "J"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeFloatForKey:"
      return_type: "F"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeDoubleForKey:"
      return_type: "D"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeBytesForKey:returnedLength:"
      return_type: "*cUB;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "lengthp"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setRequiresSecureCoding:"
      return_type: "V"
      parameter {
        name: "b"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSKeyedUnarchiverDelegate>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyedArchiver.h"
}
class {
  name: "NSLocale"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  category: "NSLocale+NSExtendedLocale"
  category: "NSLocale+NSLocaleCreation"
  category: "NSLocale+NSLocaleGeneralInfo"
  method {
    function {
      name: "objectForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayNameForKey:value:"
      return_type: "LNSString;"
      parameter {
        name: "key"
        type: "OI"
      }
      parameter {
        name: "value"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithLocaleIdentifier:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLocale.h"
}
class {
  name: "NSLock"
  base_class: "NSObject"
  protocol: "NSLocking"
  method {
    function {
      name: "tryLock"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "lockBeforeDate:"
      return_type: "Z"
      parameter {
        name: "limit"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLock.h"
}
class {
  name: "NSConditionLock"
  base_class: "NSObject"
  protocol: "NSLocking"
  method {
    function {
      name: "initWithCondition:"
      return_type: "OI"
      parameter {
        name: "condition"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "condition"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "lockWhenCondition:"
      return_type: "V"
      parameter {
        name: "condition"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tryLock"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "tryLockWhenCondition:"
      return_type: "Z"
      parameter {
        name: "condition"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unlockWithCondition:"
      return_type: "V"
      parameter {
        name: "condition"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lockBeforeDate:"
      return_type: "Z"
      parameter {
        name: "limit"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lockWhenCondition:beforeDate:"
      return_type: "Z"
      parameter {
        name: "condition"
        type: "I"
      }
      parameter {
        name: "limit"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "condition"
    type: "I"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLock.h"
}
class {
  name: "NSRecursiveLock"
  base_class: "NSObject"
  protocol: "NSLocking"
  method {
    function {
      name: "tryLock"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "lockBeforeDate:"
      return_type: "Z"
      parameter {
        name: "limit"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLock.h"
}
class {
  name: "NSCondition"
  base_class: "NSObject"
  protocol: "NSLocking"
  method {
    function {
      name: "wait"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "waitUntilDate:"
      return_type: "Z"
      parameter {
        name: "limit"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "signal"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "broadcast"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLock.h"
}
class {
  name: "NSMapTable"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  protocol: "NSFastEnumeration"
  method {
    function {
      name: "initWithKeyOptions:valueOptions:capacity:"
      return_type: "OI"
      parameter {
        name: "keyOptions"
        type: "UI"
      }
      parameter {
        name: "valueOptions"
        type: "UI"
      }
      parameter {
        name: "initialCapacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithKeyPointerFunctions:valuePointerFunctions:capacity:"
      return_type: "OI"
      parameter {
        name: "keyFunctions"
        type: "LNSPointerFunctions;"
      }
      parameter {
        name: "valueFunctions"
        type: "LNSPointerFunctions;"
      }
      parameter {
        name: "initialCapacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mapTableWithKeyOptions:valueOptions:"
      return_type: "LNSMapTable;"
      parameter {
        name: "keyOptions"
        type: "UI"
      }
      parameter {
        name: "valueOptions"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "mapTableWithStrongToStrongObjects"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "mapTableWithWeakToStrongObjects"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "mapTableWithStrongToWeakObjects"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "mapTableWithWeakToWeakObjects"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "strongToStrongObjectsMapTable"
      return_type: "LNSMapTable;"
    }
    class_method: true
  }
  method {
    function {
      name: "weakToStrongObjectsMapTable"
      return_type: "LNSMapTable;"
    }
    class_method: true
  }
  method {
    function {
      name: "strongToWeakObjectsMapTable"
      return_type: "LNSMapTable;"
    }
    class_method: true
  }
  method {
    function {
      name: "weakToWeakObjectsMapTable"
      return_type: "LNSMapTable;"
    }
    class_method: true
  }
  method {
    function {
      name: "keyPointerFunctions"
      return_type: "LNSPointerFunctions;"
    }
    class_method: false
  }
  method {
    function {
      name: "valuePointerFunctions"
      return_type: "LNSPointerFunctions;"
    }
    class_method: false
  }
  method {
    function {
      name: "objectForKey:"
      return_type: "OI"
      parameter {
        name: "aKey"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectForKey:"
      return_type: "V"
      parameter {
        name: "aKey"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:forKey:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "aKey"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "keyEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "objectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "dictionaryRepresentation"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  property {
    name: "keyPointerFunctions"
    type: "LNSPointerFunctions;"
  }
  property {
    name: "valuePointerFunctions"
    type: "LNSPointerFunctions;"
  }
  property {
    name: "count"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSMapTable.h"
}
class {
  name: "NSMethodSignature"
  base_class: "NSObject"
  method {
    function {
      name: "signatureWithObjCTypes:"
      return_type: "LNSMethodSignature;"
      parameter {
        name: "types"
        type: "*cC;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberOfArguments"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "getArgumentTypeAtIndex:"
      return_type: "*cC;"
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameLength"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "isOneway"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "methodReturnType"
      return_type: "*cC;"
    }
    class_method: false
  }
  method {
    function {
      name: "methodReturnLength"
      return_type: "UI"
    }
    class_method: false
  }
  property {
    name: "numberOfArguments"
    type: "UI"
  }
  property {
    name: "frameLength"
    type: "UI"
  }
  property {
    name: "methodReturnType"
    type: "*cC;"
  }
  property {
    name: "methodReturnLength"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSMethodSignature.h"
}
class {
  name: "NSNotification"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSNotification+NSNotificationCreation"
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "object"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithName:object:userInfo:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "object"
    type: "OI"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNotification.h"
}
class {
  name: "NSNotificationCenter"
  base_class: "NSObject"
  method {
    function {
      name: "defaultCenter"
      return_type: "LNSNotificationCenter;"
    }
    class_method: true
  }
  method {
    function {
      name: "addObserver:selector:name:object:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "OI"
      }
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postNotification:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postNotificationName:object:"
      return_type: "V"
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postNotificationName:object:userInfo:"
      return_type: "V"
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "aUserInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:name:object:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "OI"
      }
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addObserverForName:object:queue:usingBlock:"
      return_type: "X(Unexposed.id<NSObject>)"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "queue"
        type: "LNSOperationQueue;"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSNotification *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNotification.h"
}
class {
  name: "NSNotificationQueue"
  base_class: "NSObject"
  method {
    function {
      name: "defaultQueue"
      return_type: "LNSNotificationQueue;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithNotificationCenter:"
      return_type: "OI"
      parameter {
        name: "notificationCenter"
        type: "LNSNotificationCenter;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enqueueNotification:postingStyle:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
      parameter {
        name: "postingStyle"
        type: "X(Enum.enum NSPostingStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enqueueNotification:postingStyle:coalesceMask:forModes:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
      parameter {
        name: "postingStyle"
        type: "X(Enum.enum NSPostingStyle)"
      }
      parameter {
        name: "coalesceMask"
        type: "UI"
      }
      parameter {
        name: "modes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dequeueNotificationsMatching:coalesceMask:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
      parameter {
        name: "coalesceMask"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNotificationQueue.h"
}
class {
  name: "NSNull"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "null"
      return_type: "LNSNull;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNull.h"
}
class {
  name: "NSNumberFormatter"
  base_class: "NSFormatter"
  category: "NSNumberFormatter+NSNumberFormatterCompatibility"
  method {
    function {
      name: "formattingContext"
      return_type: "X(Enum.enum NSFormattingContext)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormattingContext:"
      return_type: "V"
      parameter {
        name: "formattingContext"
        type: "X(Enum.enum NSFormattingContext)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjectValue:forString:range:error:"
      return_type: "Z"
      parameter {
        name: "obj"
        type: "*OI;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "rangep"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromNumber:"
      return_type: "LNSString;"
      parameter {
        name: "number"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberFromString:"
      return_type: "LNSNumber;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedStringFromNumber:numberStyle:"
      return_type: "LNSString;"
      parameter {
        name: "num"
        type: "LNSNumber;"
      }
      parameter {
        name: "nstyle"
        type: "X(Enum.enum NSNumberFormatterStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultFormatterBehavior"
      return_type: "X(Enum.enum NSNumberFormatterBehavior)"
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultFormatterBehavior:"
      return_type: "V"
      parameter {
        name: "behavior"
        type: "X(Enum.enum NSNumberFormatterBehavior)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberStyle"
      return_type: "X(Enum.enum NSNumberFormatterStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberStyle:"
      return_type: "V"
      parameter {
        name: "numberStyle"
        type: "X(Enum.enum NSNumberFormatterStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "locale"
      return_type: "LNSLocale;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocale:"
      return_type: "V"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "generatesDecimalNumbers"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setGeneratesDecimalNumbers:"
      return_type: "V"
      parameter {
        name: "generatesDecimalNumbers"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formatterBehavior"
      return_type: "X(Enum.enum NSNumberFormatterBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormatterBehavior:"
      return_type: "V"
      parameter {
        name: "formatterBehavior"
        type: "X(Enum.enum NSNumberFormatterBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "negativeFormat"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNegativeFormat:"
      return_type: "V"
      parameter {
        name: "negativeFormat"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textAttributesForNegativeValues"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextAttributesForNegativeValues:"
      return_type: "V"
      parameter {
        name: "textAttributesForNegativeValues"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "positiveFormat"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPositiveFormat:"
      return_type: "V"
      parameter {
        name: "positiveFormat"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textAttributesForPositiveValues"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextAttributesForPositiveValues:"
      return_type: "V"
      parameter {
        name: "textAttributesForPositiveValues"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsFloats"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsFloats:"
      return_type: "V"
      parameter {
        name: "allowsFloats"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decimalSeparator"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDecimalSeparator:"
      return_type: "V"
      parameter {
        name: "decimalSeparator"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alwaysShowsDecimalSeparator"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlwaysShowsDecimalSeparator:"
      return_type: "V"
      parameter {
        name: "alwaysShowsDecimalSeparator"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currencyDecimalSeparator"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrencyDecimalSeparator:"
      return_type: "V"
      parameter {
        name: "currencyDecimalSeparator"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesGroupingSeparator"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesGroupingSeparator:"
      return_type: "V"
      parameter {
        name: "usesGroupingSeparator"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "groupingSeparator"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setGroupingSeparator:"
      return_type: "V"
      parameter {
        name: "groupingSeparator"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "zeroSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setZeroSymbol:"
      return_type: "V"
      parameter {
        name: "zeroSymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textAttributesForZero"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextAttributesForZero:"
      return_type: "V"
      parameter {
        name: "textAttributesForZero"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nilSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNilSymbol:"
      return_type: "V"
      parameter {
        name: "nilSymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textAttributesForNil"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextAttributesForNil:"
      return_type: "V"
      parameter {
        name: "textAttributesForNil"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "notANumberSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNotANumberSymbol:"
      return_type: "V"
      parameter {
        name: "notANumberSymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textAttributesForNotANumber"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextAttributesForNotANumber:"
      return_type: "V"
      parameter {
        name: "textAttributesForNotANumber"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "positiveInfinitySymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPositiveInfinitySymbol:"
      return_type: "V"
      parameter {
        name: "positiveInfinitySymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textAttributesForPositiveInfinity"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextAttributesForPositiveInfinity:"
      return_type: "V"
      parameter {
        name: "textAttributesForPositiveInfinity"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "negativeInfinitySymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNegativeInfinitySymbol:"
      return_type: "V"
      parameter {
        name: "negativeInfinitySymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textAttributesForNegativeInfinity"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextAttributesForNegativeInfinity:"
      return_type: "V"
      parameter {
        name: "textAttributesForNegativeInfinity"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "positivePrefix"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPositivePrefix:"
      return_type: "V"
      parameter {
        name: "positivePrefix"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "positiveSuffix"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPositiveSuffix:"
      return_type: "V"
      parameter {
        name: "positiveSuffix"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "negativePrefix"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNegativePrefix:"
      return_type: "V"
      parameter {
        name: "negativePrefix"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "negativeSuffix"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNegativeSuffix:"
      return_type: "V"
      parameter {
        name: "negativeSuffix"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currencyCode"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrencyCode:"
      return_type: "V"
      parameter {
        name: "currencyCode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currencySymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrencySymbol:"
      return_type: "V"
      parameter {
        name: "currencySymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "internationalCurrencySymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInternationalCurrencySymbol:"
      return_type: "V"
      parameter {
        name: "internationalCurrencySymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "percentSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPercentSymbol:"
      return_type: "V"
      parameter {
        name: "percentSymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "perMillSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPerMillSymbol:"
      return_type: "V"
      parameter {
        name: "perMillSymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minusSign"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinusSign:"
      return_type: "V"
      parameter {
        name: "minusSign"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "plusSign"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlusSign:"
      return_type: "V"
      parameter {
        name: "plusSign"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "exponentSymbol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setExponentSymbol:"
      return_type: "V"
      parameter {
        name: "exponentSymbol"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "groupingSize"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setGroupingSize:"
      return_type: "V"
      parameter {
        name: "groupingSize"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "secondaryGroupingSize"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setSecondaryGroupingSize:"
      return_type: "V"
      parameter {
        name: "secondaryGroupingSize"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "multiplier"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMultiplier:"
      return_type: "V"
      parameter {
        name: "multiplier"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formatWidth"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormatWidth:"
      return_type: "V"
      parameter {
        name: "formatWidth"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paddingCharacter"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPaddingCharacter:"
      return_type: "V"
      parameter {
        name: "paddingCharacter"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paddingPosition"
      return_type: "X(Enum.enum NSNumberFormatterPadPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setPaddingPosition:"
      return_type: "V"
      parameter {
        name: "paddingPosition"
        type: "X(Enum.enum NSNumberFormatterPadPosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "roundingMode"
      return_type: "X(Enum.enum NSNumberFormatterRoundingMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setRoundingMode:"
      return_type: "V"
      parameter {
        name: "roundingMode"
        type: "X(Enum.enum NSNumberFormatterRoundingMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "roundingIncrement"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRoundingIncrement:"
      return_type: "V"
      parameter {
        name: "roundingIncrement"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minimumIntegerDigits"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinimumIntegerDigits:"
      return_type: "V"
      parameter {
        name: "minimumIntegerDigits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumIntegerDigits"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaximumIntegerDigits:"
      return_type: "V"
      parameter {
        name: "maximumIntegerDigits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minimumFractionDigits"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinimumFractionDigits:"
      return_type: "V"
      parameter {
        name: "minimumFractionDigits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumFractionDigits"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaximumFractionDigits:"
      return_type: "V"
      parameter {
        name: "maximumFractionDigits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minimum"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinimum:"
      return_type: "V"
      parameter {
        name: "minimum"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximum"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaximum:"
      return_type: "V"
      parameter {
        name: "maximum"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currencyGroupingSeparator"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrencyGroupingSeparator:"
      return_type: "V"
      parameter {
        name: "currencyGroupingSeparator"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLenient"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setLenient:"
      return_type: "V"
      parameter {
        name: "lenient"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesSignificantDigits"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesSignificantDigits:"
      return_type: "V"
      parameter {
        name: "usesSignificantDigits"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minimumSignificantDigits"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinimumSignificantDigits:"
      return_type: "V"
      parameter {
        name: "minimumSignificantDigits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumSignificantDigits"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaximumSignificantDigits:"
      return_type: "V"
      parameter {
        name: "maximumSignificantDigits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isPartialStringValidationEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPartialStringValidationEnabled:"
      return_type: "V"
      parameter {
        name: "partialStringValidationEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "formattingContext"
    type: "X(Enum.enum NSFormattingContext)"
  }
  property {
    name: "numberStyle"
    type: "X(Enum.enum NSNumberFormatterStyle)"
  }
  property {
    name: "locale"
    type: "LNSLocale;"
  }
  property {
    name: "generatesDecimalNumbers"
    type: "Z"
  }
  property {
    name: "formatterBehavior"
    type: "X(Enum.enum NSNumberFormatterBehavior)"
  }
  property {
    name: "negativeFormat"
    type: "LNSString;"
  }
  property {
    name: "textAttributesForNegativeValues"
    type: "LNSDictionary;"
  }
  property {
    name: "positiveFormat"
    type: "LNSString;"
  }
  property {
    name: "textAttributesForPositiveValues"
    type: "LNSDictionary;"
  }
  property {
    name: "allowsFloats"
    type: "Z"
  }
  property {
    name: "decimalSeparator"
    type: "LNSString;"
  }
  property {
    name: "alwaysShowsDecimalSeparator"
    type: "Z"
  }
  property {
    name: "currencyDecimalSeparator"
    type: "LNSString;"
  }
  property {
    name: "usesGroupingSeparator"
    type: "Z"
  }
  property {
    name: "groupingSeparator"
    type: "LNSString;"
  }
  property {
    name: "zeroSymbol"
    type: "LNSString;"
  }
  property {
    name: "textAttributesForZero"
    type: "LNSDictionary;"
  }
  property {
    name: "nilSymbol"
    type: "LNSString;"
  }
  property {
    name: "textAttributesForNil"
    type: "LNSDictionary;"
  }
  property {
    name: "notANumberSymbol"
    type: "LNSString;"
  }
  property {
    name: "textAttributesForNotANumber"
    type: "LNSDictionary;"
  }
  property {
    name: "positiveInfinitySymbol"
    type: "LNSString;"
  }
  property {
    name: "textAttributesForPositiveInfinity"
    type: "LNSDictionary;"
  }
  property {
    name: "negativeInfinitySymbol"
    type: "LNSString;"
  }
  property {
    name: "textAttributesForNegativeInfinity"
    type: "LNSDictionary;"
  }
  property {
    name: "positivePrefix"
    type: "LNSString;"
  }
  property {
    name: "positiveSuffix"
    type: "LNSString;"
  }
  property {
    name: "negativePrefix"
    type: "LNSString;"
  }
  property {
    name: "negativeSuffix"
    type: "LNSString;"
  }
  property {
    name: "currencyCode"
    type: "LNSString;"
  }
  property {
    name: "currencySymbol"
    type: "LNSString;"
  }
  property {
    name: "internationalCurrencySymbol"
    type: "LNSString;"
  }
  property {
    name: "percentSymbol"
    type: "LNSString;"
  }
  property {
    name: "perMillSymbol"
    type: "LNSString;"
  }
  property {
    name: "minusSign"
    type: "LNSString;"
  }
  property {
    name: "plusSign"
    type: "LNSString;"
  }
  property {
    name: "exponentSymbol"
    type: "LNSString;"
  }
  property {
    name: "groupingSize"
    type: "UI"
  }
  property {
    name: "secondaryGroupingSize"
    type: "UI"
  }
  property {
    name: "multiplier"
    type: "LNSNumber;"
  }
  property {
    name: "formatWidth"
    type: "UI"
  }
  property {
    name: "paddingCharacter"
    type: "LNSString;"
  }
  property {
    name: "paddingPosition"
    type: "X(Enum.enum NSNumberFormatterPadPosition)"
  }
  property {
    name: "roundingMode"
    type: "X(Enum.enum NSNumberFormatterRoundingMode)"
  }
  property {
    name: "roundingIncrement"
    type: "LNSNumber;"
  }
  property {
    name: "minimumIntegerDigits"
    type: "UI"
  }
  property {
    name: "maximumIntegerDigits"
    type: "UI"
  }
  property {
    name: "minimumFractionDigits"
    type: "UI"
  }
  property {
    name: "maximumFractionDigits"
    type: "UI"
  }
  property {
    name: "minimum"
    type: "LNSNumber;"
  }
  property {
    name: "maximum"
    type: "LNSNumber;"
  }
  property {
    name: "currencyGroupingSeparator"
    type: "LNSString;"
  }
  property {
    name: "lenient"
    type: "Z"
  }
  property {
    name: "usesSignificantDigits"
    type: "Z"
  }
  property {
    name: "minimumSignificantDigits"
    type: "UI"
  }
  property {
    name: "maximumSignificantDigits"
    type: "UI"
  }
  property {
    name: "partialStringValidationEnabled"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNumberFormatter.h"
}
class {
  name: "NSOperation"
  base_class: "NSObject"
  method {
    function {
      name: "start"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "main"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isCancelled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "cancel"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isExecuting"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isFinished"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isConcurrent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isAsynchronous"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isReady"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "addDependency:"
      return_type: "V"
      parameter {
        name: "op"
        type: "LNSOperation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeDependency:"
      return_type: "V"
      parameter {
        name: "op"
        type: "LNSOperation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dependencies"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "queuePriority"
      return_type: "X(Enum.enum NSOperationQueuePriority)"
    }
    class_method: false
  }
  method {
    function {
      name: "setQueuePriority:"
      return_type: "V"
      parameter {
        name: "queuePriority"
        type: "X(Enum.enum NSOperationQueuePriority)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completionBlock"
      return_type: "X(BlockPointer.void (^)(void))"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompletionBlock:"
      return_type: "V"
      parameter {
        name: "completionBlock"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "waitUntilFinished"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "threadPriority"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setThreadPriority:"
      return_type: "V"
      parameter {
        name: "threadPriority"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "qualityOfService"
      return_type: "X(Enum.enum NSQualityOfService)"
    }
    class_method: false
  }
  method {
    function {
      name: "setQualityOfService:"
      return_type: "V"
      parameter {
        name: "qualityOfService"
        type: "X(Enum.enum NSQualityOfService)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "cancelled"
    type: "Z"
  }
  property {
    name: "executing"
    type: "Z"
  }
  property {
    name: "finished"
    type: "Z"
  }
  property {
    name: "concurrent"
    type: "Z"
  }
  property {
    name: "asynchronous"
    type: "Z"
  }
  property {
    name: "ready"
    type: "Z"
  }
  property {
    name: "dependencies"
    type: "LNSArray;"
  }
  property {
    name: "queuePriority"
    type: "X(Enum.enum NSOperationQueuePriority)"
  }
  property {
    name: "completionBlock"
    type: "X(BlockPointer.void (^)(void))"
  }
  property {
    name: "threadPriority"
    type: "D"
  }
  property {
    name: "qualityOfService"
    type: "X(Enum.enum NSQualityOfService)"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOperation.h"
}
class {
  name: "NSBlockOperation"
  base_class: "NSOperation"
  method {
    function {
      name: "blockOperationWithBlock:"
      return_type: "OI"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "addExecutionBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "executionBlocks"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "executionBlocks"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOperation.h"
}
class {
  name: "NSInvocationOperation"
  base_class: "NSOperation"
  method {
    function {
      name: "initWithTarget:selector:object:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "sel"
        type: "OS"
      }
      parameter {
        name: "arg"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithInvocation:"
      return_type: "OI"
      parameter {
        name: "inv"
        type: "LNSInvocation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invocation"
      return_type: "LNSInvocation;"
    }
    class_method: false
  }
  method {
    function {
      name: "result"
      return_type: "OI"
    }
    class_method: false
  }
  property {
    name: "invocation"
    type: "LNSInvocation;"
  }
  property {
    name: "result"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOperation.h"
}
class {
  name: "NSOperationQueue"
  base_class: "NSObject"
  method {
    function {
      name: "addOperation:"
      return_type: "V"
      parameter {
        name: "op"
        type: "LNSOperation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addOperations:waitUntilFinished:"
      return_type: "V"
      parameter {
        name: "ops"
        type: "LNSArray;"
      }
      parameter {
        name: "wait"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addOperationWithBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "operations"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "operationCount"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "maxConcurrentOperationCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxConcurrentOperationCount:"
      return_type: "V"
      parameter {
        name: "maxConcurrentOperationCount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSuspended"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSuspended:"
      return_type: "V"
      parameter {
        name: "suspended"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "qualityOfService"
      return_type: "X(Enum.enum NSQualityOfService)"
    }
    class_method: false
  }
  method {
    function {
      name: "setQualityOfService:"
      return_type: "V"
      parameter {
        name: "qualityOfService"
        type: "X(Enum.enum NSQualityOfService)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "underlyingQueue"
      return_type: "X(Unexposed.NSObject<OS_dispatch_queue>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setUnderlyingQueue:"
      return_type: "V"
      parameter {
        name: "underlyingQueue"
        type: "X(Unexposed.NSObject<OS_dispatch_queue>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelAllOperations"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "waitUntilAllOperationsAreFinished"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "currentQueue"
      return_type: "LNSOperationQueue;"
    }
    class_method: true
  }
  method {
    function {
      name: "mainQueue"
      return_type: "LNSOperationQueue;"
    }
    class_method: true
  }
  property {
    name: "operations"
    type: "LNSArray;"
  }
  property {
    name: "operationCount"
    type: "UI"
  }
  property {
    name: "maxConcurrentOperationCount"
    type: "I"
  }
  property {
    name: "suspended"
    type: "Z"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "qualityOfService"
    type: "X(Enum.enum NSQualityOfService)"
  }
  property {
    name: "underlyingQueue"
    type: "X(Unexposed.NSObject<OS_dispatch_queue>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOperation.h"
}
class {
  name: "NSOrthography"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSOrthography+NSOrthographyExtended"
  category: "NSOrthography+NSOrthographyCreation"
  method {
    function {
      name: "dominantScript"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "languageMap"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDominantScript:languageMap:"
      return_type: "OI"
      parameter {
        name: "script"
        type: "LNSString;"
      }
      parameter {
        name: "map"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "dominantScript"
    type: "LNSString;"
  }
  property {
    name: "languageMap"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrthography.h"
}
class {
  name: "NSPointerArray"
  base_class: "NSObject"
  protocol: "NSFastEnumeration"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSPointerArray+NSPointerArrayConveniences"
  method {
    function {
      name: "initWithOptions:"
      return_type: "OI"
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithPointerFunctions:"
      return_type: "OI"
      parameter {
        name: "functions"
        type: "LNSPointerFunctions;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pointerArrayWithOptions:"
      return_type: "LNSPointerArray;"
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pointerArrayWithPointerFunctions:"
      return_type: "LNSPointerArray;"
      parameter {
        name: "functions"
        type: "LNSPointerFunctions;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pointerFunctions"
      return_type: "LNSPointerFunctions;"
    }
    class_method: false
  }
  method {
    function {
      name: "pointerAtIndex:"
      return_type: "*V;"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addPointer:"
      return_type: "V"
      parameter {
        name: "pointer"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removePointerAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertPointer:atIndex:"
      return_type: "V"
      parameter {
        name: "item"
        type: "*V;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replacePointerAtIndex:withPointer:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "item"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compact"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setCount:"
      return_type: "V"
      parameter {
        name: "count"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "pointerFunctions"
    type: "LNSPointerFunctions;"
  }
  property {
    name: "count"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPointerArray.h"
}
class {
  name: "NSPort"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "port"
      return_type: "LNSPort;"
    }
    class_method: true
  }
  method {
    function {
      name: "invalidate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isValid"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "X(Unexposed.id<NSPortDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSPortDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleInRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "runLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "runLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reservedSpaceLength"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "sendBeforeDate:components:from:reserved:"
      return_type: "Z"
      parameter {
        name: "limitDate"
        type: "LNSDate;"
      }
      parameter {
        name: "components"
        type: "LNSMutableArray;"
      }
      parameter {
        name: "receivePort"
        type: "LNSPort;"
      }
      parameter {
        name: "headerSpaceReserved"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendBeforeDate:msgid:components:from:reserved:"
      return_type: "Z"
      parameter {
        name: "limitDate"
        type: "LNSDate;"
      }
      parameter {
        name: "msgID"
        type: "UI"
      }
      parameter {
        name: "components"
        type: "LNSMutableArray;"
      }
      parameter {
        name: "receivePort"
        type: "LNSPort;"
      }
      parameter {
        name: "headerSpaceReserved"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addConnection:toRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "conn"
        type: "LNSConnection;"
      }
      parameter {
        name: "runLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeConnection:fromRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "conn"
        type: "LNSConnection;"
      }
      parameter {
        name: "runLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "valid"
    type: "Z"
  }
  property {
    name: "reservedSpaceLength"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPort.h"
}
class {
  name: "NSMachPort"
  base_class: "NSPort"
  method {
    function {
      name: "portWithMachPort:"
      return_type: "LNSPort;"
      parameter {
        name: "machPort"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithMachPort:"
      return_type: "OI"
      parameter {
        name: "machPort"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "X(Unexposed.id<NSMachPortDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSMachPortDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "portWithMachPort:options:"
      return_type: "LNSPort;"
      parameter {
        name: "machPort"
        type: "UI"
      }
      parameter {
        name: "f"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithMachPort:options:"
      return_type: "OI"
      parameter {
        name: "machPort"
        type: "UI"
      }
      parameter {
        name: "f"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "machPort"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleInRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "runLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "runLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "machPort"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPort.h"
}
class {
  name: "NSMessagePort"
  base_class: "NSPort"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPort.h"
}
class {
  name: "NSSocketPort"
  base_class: "NSPort"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithTCPPort:"
      return_type: "OI"
      parameter {
        name: "port"
        type: "US"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithProtocolFamily:socketType:protocol:address:"
      return_type: "OI"
      parameter {
        name: "family"
        type: "I"
      }
      parameter {
        name: "type"
        type: "I"
      }
      parameter {
        name: "protocol"
        type: "I"
      }
      parameter {
        name: "address"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithProtocolFamily:socketType:protocol:socket:"
      return_type: "OI"
      parameter {
        name: "family"
        type: "I"
      }
      parameter {
        name: "type"
        type: "I"
      }
      parameter {
        name: "protocol"
        type: "I"
      }
      parameter {
        name: "sock"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initRemoteWithTCPPort:host:"
      return_type: "OI"
      parameter {
        name: "port"
        type: "US"
      }
      parameter {
        name: "hostName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initRemoteWithProtocolFamily:socketType:protocol:address:"
      return_type: "OI"
      parameter {
        name: "family"
        type: "I"
      }
      parameter {
        name: "type"
        type: "I"
      }
      parameter {
        name: "protocol"
        type: "I"
      }
      parameter {
        name: "address"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "protocolFamily"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "socketType"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "protocol"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "address"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "socket"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "protocolFamily"
    type: "I"
  }
  property {
    name: "socketType"
    type: "I"
  }
  property {
    name: "protocol"
    type: "I"
  }
  property {
    name: "address"
    type: "LNSData;"
  }
  property {
    name: "socket"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPort.h"
}
class {
  name: "NSProcessInfo"
  base_class: "NSObject"
  category: "NSProcessInfo+"
  category: "NSProcessInfo+"
  method {
    function {
      name: "processInfo"
      return_type: "LNSProcessInfo;"
    }
    class_method: true
  }
  method {
    function {
      name: "environment"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "arguments"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "hostName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "processName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setProcessName:"
      return_type: "V"
      parameter {
        name: "processName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "processIdentifier"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "globallyUniqueString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "operatingSystem"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "operatingSystemName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "operatingSystemVersionString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "operatingSystemVersion"
      return_type: "RNSOperatingSystemVersion;"
    }
    class_method: false
  }
  method {
    function {
      name: "processorCount"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "activeProcessorCount"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "physicalMemory"
      return_type: "UJ"
    }
    class_method: false
  }
  method {
    function {
      name: "isOperatingSystemAtLeastVersion:"
      return_type: "Z"
      parameter {
        name: "version"
        type: "RNSOperatingSystemVersion;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "systemUptime"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "disableSuddenTermination"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enableSuddenTermination"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "disableAutomaticTermination:"
      return_type: "V"
      parameter {
        name: "reason"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enableAutomaticTermination:"
      return_type: "V"
      parameter {
        name: "reason"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "automaticTerminationSupportEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticTerminationSupportEnabled:"
      return_type: "V"
      parameter {
        name: "automaticTerminationSupportEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "thermalState"
      return_type: "X(Enum.enum NSProcessInfoThermalState)"
    }
    class_method: false
  }
  property {
    name: "environment"
    type: "LNSDictionary;"
  }
  property {
    name: "arguments"
    type: "LNSArray;"
  }
  property {
    name: "hostName"
    type: "LNSString;"
  }
  property {
    name: "processName"
    type: "LNSString;"
  }
  property {
    name: "processIdentifier"
    type: "I"
  }
  property {
    name: "globallyUniqueString"
    type: "LNSString;"
  }
  property {
    name: "operatingSystemVersionString"
    type: "LNSString;"
  }
  property {
    name: "operatingSystemVersion"
    type: "RNSOperatingSystemVersion;"
  }
  property {
    name: "processorCount"
    type: "UI"
  }
  property {
    name: "activeProcessorCount"
    type: "UI"
  }
  property {
    name: "physicalMemory"
    type: "UJ"
  }
  property {
    name: "systemUptime"
    type: "D"
  }
  property {
    name: "automaticTerminationSupportEnabled"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSProcessInfo.h"
}
class {
  name: "NSProxy"
  protocol: "NSObject"
  method {
    function {
      name: "alloc"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "allocWithZone:"
      return_type: "OI"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "class"
      return_type: "OC"
    }
    class_method: true
  }
  method {
    function {
      name: "forwardInvocation:"
      return_type: "V"
      parameter {
        name: "invocation"
        type: "LNSInvocation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "methodSignatureForSelector:"
      return_type: "LNSMethodSignature;"
      parameter {
        name: "sel"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dealloc"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "finalize"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "debugDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "respondsToSelector:"
      return_type: "Z"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "allowsWeakReference"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "retainWeakReference"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  property {
    name: "debugDescription"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSProxy.h"
}
class {
  name: "NSTextCheckingResult"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSTextCheckingResult+NSTextCheckingResultOptional"
  category: "NSTextCheckingResult+NSTextCheckingResultCreation"
  method {
    function {
      name: "resultType"
      return_type: "X(Enum.enum NSTextCheckingType)"
    }
    class_method: false
  }
  method {
    function {
      name: "range"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  property {
    name: "resultType"
    type: "X(Enum.enum NSTextCheckingType)"
  }
  property {
    name: "range"
    type: "R_NSRange;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTextCheckingResult.h"
}
class {
  name: "NSRegularExpression"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSRegularExpression+NSMatching"
  category: "NSRegularExpression+NSReplacement"
  method {
    function {
      name: "regularExpressionWithPattern:options:error:"
      return_type: "LNSRegularExpression;"
      parameter {
        name: "pattern"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSRegularExpressionOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithPattern:options:error:"
      return_type: "OI"
      parameter {
        name: "pattern"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSRegularExpressionOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pattern"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "options"
      return_type: "X(Enum.enum NSRegularExpressionOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfCaptureGroups"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "escapedPatternForString:"
      return_type: "LNSString;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  property {
    name: "pattern"
    type: "LNSString;"
  }
  property {
    name: "options"
    type: "X(Enum.enum NSRegularExpressionOptions)"
  }
  property {
    name: "numberOfCaptureGroups"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRegularExpression.h"
}
class {
  name: "NSDataDetector"
  base_class: "NSRegularExpression"
  method {
    function {
      name: "dataDetectorWithTypes:error:"
      return_type: "LNSDataDetector;"
      parameter {
        name: "checkingTypes"
        type: "UJ"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithTypes:error:"
      return_type: "OI"
      parameter {
        name: "checkingTypes"
        type: "UJ"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkingTypes"
      return_type: "UJ"
    }
    class_method: false
  }
  property {
    name: "checkingTypes"
    type: "UJ"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRegularExpression.h"
}
class {
  name: "NSRunLoop"
  base_class: "NSObject"
  category: "NSRunLoop+NSRunLoopConveniences"
  category: "NSRunLoop+NSOrderedPerform"
  method {
    function {
      name: "currentRunLoop"
      return_type: "LNSRunLoop;"
    }
    class_method: true
  }
  method {
    function {
      name: "mainRunLoop"
      return_type: "LNSRunLoop;"
    }
    class_method: true
  }
  method {
    function {
      name: "currentMode"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "getCFRunLoop"
      return_type: "*R__CFRunLoop;;"
    }
    class_method: false
  }
  method {
    function {
      name: "addTimer:forMode:"
      return_type: "V"
      parameter {
        name: "timer"
        type: "LNSTimer;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addPort:forMode:"
      return_type: "V"
      parameter {
        name: "aPort"
        type: "LNSPort;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removePort:forMode:"
      return_type: "V"
      parameter {
        name: "aPort"
        type: "LNSPort;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "limitDateForMode:"
      return_type: "LNSDate;"
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptInputForMode:beforeDate:"
      return_type: "V"
      parameter {
        name: "mode"
        type: "LNSString;"
      }
      parameter {
        name: "limitDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  property {
    name: "currentMode"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRunLoop.h"
}
class {
  name: "NSSortDescriptor"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "sortDescriptorWithKey:ascending:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "ascending"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "sortDescriptorWithKey:ascending:selector:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "ascending"
        type: "Z"
      }
      parameter {
        name: "selector"
        type: "OS"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithKey:ascending:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "ascending"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithKey:ascending:selector:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "ascending"
        type: "Z"
      }
      parameter {
        name: "selector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "key"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "ascending"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "selector"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "allowEvaluation"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "sortDescriptorWithKey:ascending:comparator:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "ascending"
        type: "Z"
      }
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithKey:ascending:comparator:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "ascending"
        type: "Z"
      }
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comparator"
      return_type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
    }
    class_method: false
  }
  method {
    function {
      name: "compareObject:toObject:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "object1"
        type: "OI"
      }
      parameter {
        name: "object2"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reversedSortDescriptor"
      return_type: "OI"
    }
    class_method: false
  }
  property {
    name: "key"
    type: "LNSString;"
  }
  property {
    name: "ascending"
    type: "Z"
  }
  property {
    name: "selector"
    type: "OS"
  }
  property {
    name: "comparator"
    type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
  }
  property {
    name: "reversedSortDescriptor"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSortDescriptor.h"
}
class {
  name: "NSStream"
  base_class: "NSObject"
  category: "NSStream+NSSocketStreamCreationExtensions"
  category: "NSStream+NSStreamBoundPairCreationExtensions"
  method {
    function {
      name: "open"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "close"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSStreamDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSStreamDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "propertyForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setProperty:forKey:"
      return_type: "Z"
      parameter {
        name: "property"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleInRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "aRunLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "aRunLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "streamStatus"
      return_type: "X(Enum.enum NSStreamStatus)"
    }
    class_method: false
  }
  method {
    function {
      name: "streamError"
      return_type: "LNSError;"
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSStreamDelegate>)"
  }
  property {
    name: "streamStatus"
    type: "X(Enum.enum NSStreamStatus)"
  }
  property {
    name: "streamError"
    type: "LNSError;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSStream.h"
}
class {
  name: "NSInputStream"
  base_class: "NSStream"
  category: "NSInputStream+NSInputStreamExtensions"
  method {
    function {
      name: "read:maxLength:"
      return_type: "I"
      parameter {
        name: "buffer"
        type: "*UB;"
      }
      parameter {
        name: "len"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getBuffer:length:"
      return_type: "Z"
      parameter {
        name: "buffer"
        type: "**UB;;"
      }
      parameter {
        name: "len"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasBytesAvailable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  property {
    name: "hasBytesAvailable"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSStream.h"
}
class {
  name: "NSOutputStream"
  base_class: "NSStream"
  category: "NSOutputStream+NSOutputStreamExtensions"
  method {
    function {
      name: "write:maxLength:"
      return_type: "I"
      parameter {
        name: "buffer"
        type: "*cUB;"
      }
      parameter {
        name: "len"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasSpaceAvailable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "initToMemory"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initToBuffer:capacity:"
      return_type: "OI"
      parameter {
        name: "buffer"
        type: "*UB;"
      }
      parameter {
        name: "capacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithURL:append:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "shouldAppend"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "hasSpaceAvailable"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSStream.h"
}
class {
  name: "NSThread"
  base_class: "NSObject"
  method {
    function {
      name: "currentThread"
      return_type: "LNSThread;"
    }
    class_method: true
  }
  method {
    function {
      name: "detachNewThreadSelector:toTarget:withObject:"
      return_type: "V"
      parameter {
        name: "selector"
        type: "OS"
      }
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "argument"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "isMultiThreaded"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "threadDictionary"
      return_type: "LNSMutableDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "sleepUntilDate:"
      return_type: "V"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "sleepForTimeInterval:"
      return_type: "V"
      parameter {
        name: "ti"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "exit"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "threadPriority"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "setThreadPriority:"
      return_type: "Z"
      parameter {
        name: "p"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "threadPriority"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setThreadPriority:"
      return_type: "V"
      parameter {
        name: "threadPriority"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "qualityOfService"
      return_type: "X(Enum.enum NSQualityOfService)"
    }
    class_method: false
  }
  method {
    function {
      name: "setQualityOfService:"
      return_type: "V"
      parameter {
        name: "qualityOfService"
        type: "X(Enum.enum NSQualityOfService)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "callStackReturnAddresses"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "callStackSymbols"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stackSize"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setStackSize:"
      return_type: "V"
      parameter {
        name: "stackSize"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isMainThread"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isMainThread"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "mainThread"
      return_type: "LNSThread;"
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithTarget:selector:object:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "selector"
        type: "OS"
      }
      parameter {
        name: "argument"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isExecuting"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isFinished"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isCancelled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "cancel"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "start"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "main"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "threadDictionary"
    type: "LNSMutableDictionary;"
  }
  property {
    name: "threadPriority"
    type: "D"
  }
  property {
    name: "qualityOfService"
    type: "X(Enum.enum NSQualityOfService)"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "stackSize"
    type: "UI"
  }
  property {
    name: "isMainThread"
    type: "Z"
  }
  property {
    name: "executing"
    type: "Z"
  }
  property {
    name: "finished"
    type: "Z"
  }
  property {
    name: "cancelled"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSThread.h"
}
class {
  name: "NSTimeZone"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  category: "NSTimeZone+NSExtendedTimeZone"
  category: "NSTimeZone+NSTimeZoneCreation"
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "data"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "secondsFromGMTForDate:"
      return_type: "I"
      parameter {
        name: "aDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "abbreviationForDate:"
      return_type: "LNSString;"
      parameter {
        name: "aDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDaylightSavingTimeForDate:"
      return_type: "Z"
      parameter {
        name: "aDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "daylightSavingTimeOffsetForDate:"
      return_type: "D"
      parameter {
        name: "aDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextDaylightSavingTimeTransitionAfterDate:"
      return_type: "LNSDate;"
      parameter {
        name: "aDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "data"
    type: "LNSData;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTimeZone.h"
}
class {
  name: "NSTimer"
  base_class: "NSObject"
  method {
    function {
      name: "timerWithTimeInterval:invocation:repeats:"
      return_type: "LNSTimer;"
      parameter {
        name: "ti"
        type: "D"
      }
      parameter {
        name: "invocation"
        type: "LNSInvocation;"
      }
      parameter {
        name: "yesOrNo"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "scheduledTimerWithTimeInterval:invocation:repeats:"
      return_type: "LNSTimer;"
      parameter {
        name: "ti"
        type: "D"
      }
      parameter {
        name: "invocation"
        type: "LNSInvocation;"
      }
      parameter {
        name: "yesOrNo"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "timerWithTimeInterval:target:selector:userInfo:repeats:"
      return_type: "LNSTimer;"
      parameter {
        name: "ti"
        type: "D"
      }
      parameter {
        name: "aTarget"
        type: "OI"
      }
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "userInfo"
        type: "OI"
      }
      parameter {
        name: "yesOrNo"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:"
      return_type: "LNSTimer;"
      parameter {
        name: "ti"
        type: "D"
      }
      parameter {
        name: "aTarget"
        type: "OI"
      }
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "userInfo"
        type: "OI"
      }
      parameter {
        name: "yesOrNo"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithFireDate:interval:target:selector:userInfo:repeats:"
      return_type: "OI"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "ti"
        type: "D"
      }
      parameter {
        name: "t"
        type: "OI"
      }
      parameter {
        name: "s"
        type: "OS"
      }
      parameter {
        name: "ui"
        type: "OI"
      }
      parameter {
        name: "rep"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fire"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "fireDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFireDate:"
      return_type: "V"
      parameter {
        name: "fireDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeInterval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "tolerance"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTolerance:"
      return_type: "V"
      parameter {
        name: "tolerance"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isValid"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "OI"
    }
    class_method: false
  }
  property {
    name: "fireDate"
    type: "LNSDate;"
  }
  property {
    name: "timeInterval"
    type: "D"
  }
  property {
    name: "tolerance"
    type: "D"
  }
  property {
    name: "valid"
    type: "Z"
  }
  property {
    name: "userInfo"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTimer.h"
}
class {
  name: "NSURLHandle"
  base_class: "NSObject"
  method {
    function {
      name: "registerURLHandleClass:"
      return_type: "V"
      parameter {
        name: "anURLHandleSubclass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "URLHandleClassForURL:"
      return_type: "OC"
      parameter {
        name: "anURL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "status"
      return_type: "X(Enum.enum NSURLHandleStatus)"
    }
    class_method: false
  }
  method {
    function {
      name: "failureReason"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "addClient:"
      return_type: "V"
      parameter {
        name: "client"
        type: "X(Unexposed.id<NSURLHandleClient>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeClient:"
      return_type: "V"
      parameter {
        name: "client"
        type: "X(Unexposed.id<NSURLHandleClient>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadInBackground"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "cancelLoadInBackground"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resourceData"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "availableResourceData"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "expectedResourceDataSize"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "flushCachedData"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundLoadDidFailWithReason:"
      return_type: "V"
      parameter {
        name: "reason"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "didLoadBytes:loadComplete:"
      return_type: "V"
      parameter {
        name: "newBytes"
        type: "LNSData;"
      }
      parameter {
        name: "yorn"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canInitWithURL:"
      return_type: "Z"
      parameter {
        name: "anURL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "cachedHandleForURL:"
      return_type: "LNSURLHandle;"
      parameter {
        name: "anURL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithURL:cached:"
      return_type: "OI"
      parameter {
        name: "anURL"
        type: "LNSURL;"
      }
      parameter {
        name: "willCache"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "propertyForKey:"
      return_type: "OI"
      parameter {
        name: "propertyKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "propertyForKeyIfAvailable:"
      return_type: "OI"
      parameter {
        name: "propertyKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeProperty:forKey:"
      return_type: "Z"
      parameter {
        name: "propertyValue"
        type: "OI"
      }
      parameter {
        name: "propertyKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeData:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadInForeground"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "beginLoadInBackground"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "endLoadInBackground"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLHandle.h"
}
class {
  name: "NSURL"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  protocol: "NSURLHandleClient"
  category: "NSURL+NSPromisedItems"
  category: "NSURL+NSURLPathUtilities"
  category: "NSURL+NSURLLoading"
  category: "NSURL+NSPasteboardSupport"
  method {
    function {
      name: "initWithScheme:host:path:"
      return_type: "OI"
      parameter {
        name: "scheme"
        type: "LNSString;"
      }
      parameter {
        name: "host"
        type: "LNSString;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initFileURLWithPath:isDirectory:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "isDir"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initFileURLWithPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileURLWithPath:isDirectory:"
      return_type: "LNSURL;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "isDir"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fileURLWithPath:"
      return_type: "LNSURL;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "*cC;"
      }
      parameter {
        name: "isDir"
        type: "Z"
      }
      parameter {
        name: "baseURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:"
      return_type: "LNSURL;"
      parameter {
        name: "path"
        type: "*cC;"
      }
      parameter {
        name: "isDir"
        type: "Z"
      }
      parameter {
        name: "baseURL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "URLString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:relativeToURL:"
      return_type: "OI"
      parameter {
        name: "URLString"
        type: "LNSString;"
      }
      parameter {
        name: "baseURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLWithString:"
      return_type: "OI"
      parameter {
        name: "URLString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "URLWithString:relativeToURL:"
      return_type: "OI"
      parameter {
        name: "URLString"
        type: "LNSString;"
      }
      parameter {
        name: "baseURL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "absoluteString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "relativeString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "baseURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "absoluteURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "scheme"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "resourceSpecifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "host"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "port"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  method {
    function {
      name: "user"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "password"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "path"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "fragment"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "parameterString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "query"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "relativePath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "getFileSystemRepresentation:maxLength:"
      return_type: "Z"
      parameter {
        name: "buffer"
        type: "*C;"
      }
      parameter {
        name: "maxBufferLength"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileSystemRepresentation"
      return_type: "*cC;"
    }
    class_method: false
  }
  method {
    function {
      name: "isFileURL"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "standardizedURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "checkResourceIsReachableAndReturnError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFileReferenceURL"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "fileReferenceURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "filePathURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "getResourceValue:forKey:error:"
      return_type: "Z"
      parameter {
        name: "value"
        type: "*OI;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resourceValuesForKeys:error:"
      return_type: "LNSDictionary;"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setResourceValue:forKey:error:"
      return_type: "Z"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setResourceValues:error:"
      return_type: "Z"
      parameter {
        name: "keyedValues"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCachedResourceValueForKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllCachedResourceValues"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setTemporaryResourceValue:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:"
      return_type: "LNSData;"
      parameter {
        name: "options"
        type: "X(Enum.enum NSURLBookmarkCreationOptions)"
      }
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
      parameter {
        name: "relativeURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:"
      return_type: "OI"
      parameter {
        name: "bookmarkData"
        type: "LNSData;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSURLBookmarkResolutionOptions)"
      }
      parameter {
        name: "relativeURL"
        type: "LNSURL;"
      }
      parameter {
        name: "isStale"
        type: "*Z;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:"
      return_type: "OI"
      parameter {
        name: "bookmarkData"
        type: "LNSData;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSURLBookmarkResolutionOptions)"
      }
      parameter {
        name: "relativeURL"
        type: "LNSURL;"
      }
      parameter {
        name: "isStale"
        type: "*Z;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "resourceValuesForKeys:fromBookmarkData:"
      return_type: "LNSDictionary;"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
      parameter {
        name: "bookmarkData"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "writeBookmarkData:toURL:options:error:"
      return_type: "Z"
      parameter {
        name: "bookmarkData"
        type: "LNSData;"
      }
      parameter {
        name: "bookmarkFileURL"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "bookmarkDataWithContentsOfURL:error:"
      return_type: "LNSData;"
      parameter {
        name: "bookmarkFileURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "URLByResolvingAliasFileAtURL:options:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSURLBookmarkResolutionOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "startAccessingSecurityScopedResource"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "stopAccessingSecurityScopedResource"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "absoluteString"
    type: "LNSString;"
  }
  property {
    name: "relativeString"
    type: "LNSString;"
  }
  property {
    name: "baseURL"
    type: "LNSURL;"
  }
  property {
    name: "absoluteURL"
    type: "LNSURL;"
  }
  property {
    name: "scheme"
    type: "LNSString;"
  }
  property {
    name: "resourceSpecifier"
    type: "LNSString;"
  }
  property {
    name: "host"
    type: "LNSString;"
  }
  property {
    name: "port"
    type: "LNSNumber;"
  }
  property {
    name: "user"
    type: "LNSString;"
  }
  property {
    name: "password"
    type: "LNSString;"
  }
  property {
    name: "path"
    type: "LNSString;"
  }
  property {
    name: "fragment"
    type: "LNSString;"
  }
  property {
    name: "parameterString"
    type: "LNSString;"
  }
  property {
    name: "query"
    type: "LNSString;"
  }
  property {
    name: "relativePath"
    type: "LNSString;"
  }
  property {
    name: "fileSystemRepresentation"
    type: "*cC;"
  }
  property {
    name: "fileURL"
    type: "Z"
  }
  property {
    name: "standardizedURL"
    type: "LNSURL;"
  }
  property {
    name: "filePathURL"
    type: "LNSURL;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
class {
  name: "NSURLQueryItem"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "initWithName:value:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "value"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "queryItemWithName:value:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "value"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "value"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "value"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
class {
  name: "NSURLComponents"
  base_class: "NSObject"
  protocol: "NSCopying"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithURL:resolvingAgainstBaseURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "resolve"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "componentsWithURL:resolvingAgainstBaseURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "resolve"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "URLString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "componentsWithString:"
      return_type: "OI"
      parameter {
        name: "URLString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "URLRelativeToURL:"
      return_type: "LNSURL;"
      parameter {
        name: "baseURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "string"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "scheme"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setScheme:"
      return_type: "V"
      parameter {
        name: "scheme"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "user"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setUser:"
      return_type: "V"
      parameter {
        name: "user"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "password"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPassword:"
      return_type: "V"
      parameter {
        name: "password"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "host"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHost:"
      return_type: "V"
      parameter {
        name: "host"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "port"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPort:"
      return_type: "V"
      parameter {
        name: "port"
        type: "LNSNumber;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "path"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPath:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "query"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setQuery:"
      return_type: "V"
      parameter {
        name: "query"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fragment"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFragment:"
      return_type: "V"
      parameter {
        name: "fragment"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "percentEncodedUser"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPercentEncodedUser:"
      return_type: "V"
      parameter {
        name: "percentEncodedUser"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "percentEncodedPassword"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPercentEncodedPassword:"
      return_type: "V"
      parameter {
        name: "percentEncodedPassword"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "percentEncodedHost"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPercentEncodedHost:"
      return_type: "V"
      parameter {
        name: "percentEncodedHost"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "percentEncodedPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPercentEncodedPath:"
      return_type: "V"
      parameter {
        name: "percentEncodedPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "percentEncodedQuery"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPercentEncodedQuery:"
      return_type: "V"
      parameter {
        name: "percentEncodedQuery"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "percentEncodedFragment"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPercentEncodedFragment:"
      return_type: "V"
      parameter {
        name: "percentEncodedFragment"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "queryItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setQueryItems:"
      return_type: "V"
      parameter {
        name: "queryItems"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "string"
    type: "LNSString;"
  }
  property {
    name: "scheme"
    type: "LNSString;"
  }
  property {
    name: "user"
    type: "LNSString;"
  }
  property {
    name: "password"
    type: "LNSString;"
  }
  property {
    name: "host"
    type: "LNSString;"
  }
  property {
    name: "port"
    type: "LNSNumber;"
  }
  property {
    name: "path"
    type: "LNSString;"
  }
  property {
    name: "query"
    type: "LNSString;"
  }
  property {
    name: "fragment"
    type: "LNSString;"
  }
  property {
    name: "percentEncodedUser"
    type: "LNSString;"
  }
  property {
    name: "percentEncodedPassword"
    type: "LNSString;"
  }
  property {
    name: "percentEncodedHost"
    type: "LNSString;"
  }
  property {
    name: "percentEncodedPath"
    type: "LNSString;"
  }
  property {
    name: "percentEncodedQuery"
    type: "LNSString;"
  }
  property {
    name: "percentEncodedFragment"
    type: "LNSString;"
  }
  property {
    name: "queryItems"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
class {
  name: "NSFileSecurity"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
class {
  name: "NSURLAuthenticationChallenge"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:"
      return_type: "OI"
      parameter {
        name: "space"
        type: "LNSURLProtectionSpace;"
      }
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "previousFailureCount"
        type: "I"
      }
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSURLAuthenticationChallengeSender>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithAuthenticationChallenge:sender:"
      return_type: "OI"
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSURLAuthenticationChallengeSender>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "protectionSpace"
      return_type: "LNSURLProtectionSpace;"
    }
    class_method: false
  }
  method {
    function {
      name: "proposedCredential"
      return_type: "LNSURLCredential;"
    }
    class_method: false
  }
  method {
    function {
      name: "previousFailureCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "failureResponse"
      return_type: "LNSURLResponse;"
    }
    class_method: false
  }
  method {
    function {
      name: "error"
      return_type: "LNSError;"
    }
    class_method: false
  }
  method {
    function {
      name: "sender"
      return_type: "X(Unexposed.id<NSURLAuthenticationChallengeSender>)"
    }
    class_method: false
  }
  property {
    name: "protectionSpace"
    type: "LNSURLProtectionSpace;"
  }
  property {
    name: "proposedCredential"
    type: "LNSURLCredential;"
  }
  property {
    name: "previousFailureCount"
    type: "I"
  }
  property {
    name: "failureResponse"
    type: "LNSURLResponse;"
  }
  property {
    name: "error"
    type: "LNSError;"
  }
  property {
    name: "sender"
    type: "X(Unexposed.id<NSURLAuthenticationChallengeSender>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLAuthenticationChallenge.h"
}
class {
  name: "NSCachedURLResponse"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "initWithResponse:data:"
      return_type: "OI"
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithResponse:data:userInfo:storagePolicy:"
      return_type: "OI"
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
      parameter {
        name: "storagePolicy"
        type: "X(Enum.enum NSURLCacheStoragePolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "response"
      return_type: "LNSURLResponse;"
    }
    class_method: false
  }
  method {
    function {
      name: "data"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "storagePolicy"
      return_type: "X(Enum.enum NSURLCacheStoragePolicy)"
    }
    class_method: false
  }
  property {
    name: "response"
    type: "LNSURLResponse;"
  }
  property {
    name: "data"
    type: "LNSData;"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  property {
    name: "storagePolicy"
    type: "X(Enum.enum NSURLCacheStoragePolicy)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCache.h"
}
class {
  name: "NSURLCache"
  base_class: "NSObject"
  category: "NSURLCache+NSURLSessionTaskAdditions"
  method {
    function {
      name: "sharedURLCache"
      return_type: "LNSURLCache;"
    }
    class_method: true
  }
  method {
    function {
      name: "setSharedURLCache:"
      return_type: "V"
      parameter {
        name: "cache"
        type: "LNSURLCache;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithMemoryCapacity:diskCapacity:diskPath:"
      return_type: "OI"
      parameter {
        name: "memoryCapacity"
        type: "UI"
      }
      parameter {
        name: "diskCapacity"
        type: "UI"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cachedResponseForRequest:"
      return_type: "LNSCachedURLResponse;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "storeCachedResponse:forRequest:"
      return_type: "V"
      parameter {
        name: "cachedResponse"
        type: "LNSCachedURLResponse;"
      }
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCachedResponseForRequest:"
      return_type: "V"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllCachedResponses"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "removeCachedResponsesSinceDate:"
      return_type: "V"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "memoryCapacity"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMemoryCapacity:"
      return_type: "V"
      parameter {
        name: "memoryCapacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "diskCapacity"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDiskCapacity:"
      return_type: "V"
      parameter {
        name: "diskCapacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentMemoryUsage"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "currentDiskUsage"
      return_type: "UI"
    }
    class_method: false
  }
  property {
    name: "memoryCapacity"
    type: "UI"
  }
  property {
    name: "diskCapacity"
    type: "UI"
  }
  property {
    name: "currentMemoryUsage"
    type: "UI"
  }
  property {
    name: "currentDiskUsage"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCache.h"
}
class {
  name: "NSURLConnection"
  base_class: "NSObject"
  category: "NSURLConnection+NSURLConnectionSynchronousLoading"
  category: "NSURLConnection+NSURLConnectionQueuedLoading"
  method {
    function {
      name: "initWithRequest:delegate:startImmediately:"
      return_type: "OI"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "startImmediately"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithRequest:delegate:"
      return_type: "OI"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connectionWithRequest:delegate:"
      return_type: "LNSURLConnection;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "originalRequest"
      return_type: "LNSURLRequest;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentRequest"
      return_type: "LNSURLRequest;"
    }
    class_method: false
  }
  method {
    function {
      name: "start"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "cancel"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleInRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "aRunLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unscheduleFromRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "aRunLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegateQueue:"
      return_type: "V"
      parameter {
        name: "queue"
        type: "LNSOperationQueue;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canHandleRequest:"
      return_type: "Z"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: true
  }
  property {
    name: "originalRequest"
    type: "LNSURLRequest;"
  }
  property {
    name: "currentRequest"
    type: "LNSURLRequest;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLConnection.h"
}
class {
  name: "NSURLCredential"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  category: "NSURLCredential+NSInternetPassword"
  category: "NSURLCredential+NSClientCertificate"
  category: "NSURLCredential+NSServerTrust"
  method {
    function {
      name: "persistence"
      return_type: "X(Enum.enum NSURLCredentialPersistence)"
    }
    class_method: false
  }
  property {
    name: "persistence"
    type: "X(Enum.enum NSURLCredentialPersistence)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCredential.h"
}
class {
  name: "NSURLCredentialStorage"
  base_class: "NSObject"
  category: "NSURLCredentialStorage+NSURLSessionTaskAdditions"
  method {
    function {
      name: "sharedCredentialStorage"
      return_type: "LNSURLCredentialStorage;"
    }
    class_method: true
  }
  method {
    function {
      name: "credentialsForProtectionSpace:"
      return_type: "LNSDictionary;"
      parameter {
        name: "space"
        type: "LNSURLProtectionSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allCredentials"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCredential:forProtectionSpace:"
      return_type: "V"
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "space"
        type: "LNSURLProtectionSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCredential:forProtectionSpace:"
      return_type: "V"
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "space"
        type: "LNSURLProtectionSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCredential:forProtectionSpace:options:"
      return_type: "V"
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "space"
        type: "LNSURLProtectionSpace;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultCredentialForProtectionSpace:"
      return_type: "LNSURLCredential;"
      parameter {
        name: "space"
        type: "LNSURLProtectionSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultCredential:forProtectionSpace:"
      return_type: "V"
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "space"
        type: "LNSURLProtectionSpace;"
      }
    }
    class_method: false
  }
  property {
    name: "allCredentials"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCredentialStorage.h"
}
class {
  name: "NSURLProtectionSpace"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  category: "NSURLProtectionSpace+NSClientCertificateSpace"
  category: "NSURLProtectionSpace+NSServerTrustValidationSpace"
  method {
    function {
      name: "initWithHost:port:protocol:realm:authenticationMethod:"
      return_type: "OI"
      parameter {
        name: "host"
        type: "LNSString;"
      }
      parameter {
        name: "port"
        type: "I"
      }
      parameter {
        name: "protocol"
        type: "LNSString;"
      }
      parameter {
        name: "realm"
        type: "LNSString;"
      }
      parameter {
        name: "authenticationMethod"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithProxyHost:port:type:realm:authenticationMethod:"
      return_type: "OI"
      parameter {
        name: "host"
        type: "LNSString;"
      }
      parameter {
        name: "port"
        type: "I"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "realm"
        type: "LNSString;"
      }
      parameter {
        name: "authenticationMethod"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "realm"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "receivesCredentialSecurely"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isProxy"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "host"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "port"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "proxyType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "protocol"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "authenticationMethod"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "realm"
    type: "LNSString;"
  }
  property {
    name: "receivesCredentialSecurely"
    type: "Z"
  }
  property {
    name: "isProxy"
    type: "Z"
  }
  property {
    name: "host"
    type: "LNSString;"
  }
  property {
    name: "port"
    type: "I"
  }
  property {
    name: "proxyType"
    type: "LNSString;"
  }
  property {
    name: "protocol"
    type: "LNSString;"
  }
  property {
    name: "authenticationMethod"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLProtectionSpace.h"
}
class {
  name: "NSURLProtocol"
  base_class: "NSObject"
  category: "NSURLProtocol+NSURLSessionTaskAdditions"
  method {
    function {
      name: "initWithRequest:cachedResponse:client:"
      return_type: "OI"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "cachedResponse"
        type: "LNSCachedURLResponse;"
      }
      parameter {
        name: "client"
        type: "X(Unexposed.id<NSURLProtocolClient>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "client"
      return_type: "X(Unexposed.id<NSURLProtocolClient>)"
    }
    class_method: false
  }
  method {
    function {
      name: "request"
      return_type: "LNSURLRequest;"
    }
    class_method: false
  }
  method {
    function {
      name: "cachedResponse"
      return_type: "LNSCachedURLResponse;"
    }
    class_method: false
  }
  method {
    function {
      name: "canInitWithRequest:"
      return_type: "Z"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "canonicalRequestForRequest:"
      return_type: "LNSURLRequest;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "requestIsCacheEquivalent:toRequest:"
      return_type: "Z"
      parameter {
        name: "a"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "b"
        type: "LNSURLRequest;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "startLoading"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "stopLoading"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "propertyForKey:inRequest:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setProperty:forKey:inRequest:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "request"
        type: "LNSMutableURLRequest;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "removePropertyForKey:inRequest:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "request"
        type: "LNSMutableURLRequest;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "registerClass:"
      return_type: "Z"
      parameter {
        name: "protocolClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "unregisterClass:"
      return_type: "V"
      parameter {
        name: "protocolClass"
        type: "OC"
      }
    }
    class_method: true
  }
  property {
    name: "client"
    type: "X(Unexposed.id<NSURLProtocolClient>)"
  }
  property {
    name: "request"
    type: "LNSURLRequest;"
  }
  property {
    name: "cachedResponse"
    type: "LNSCachedURLResponse;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLProtocol.h"
}
class {
  name: "NSURLRequest"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  category: "NSURLRequest+NSHTTPURLRequest"
  method {
    function {
      name: "requestWithURL:"
      return_type: "OI"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "supportsSecureCoding"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "requestWithURL:cachePolicy:timeoutInterval:"
      return_type: "OI"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
      parameter {
        name: "cachePolicy"
        type: "X(Enum.enum NSURLRequestCachePolicy)"
      }
      parameter {
        name: "timeoutInterval"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithURL:"
      return_type: "OI"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithURL:cachePolicy:timeoutInterval:"
      return_type: "OI"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
      parameter {
        name: "cachePolicy"
        type: "X(Enum.enum NSURLRequestCachePolicy)"
      }
      parameter {
        name: "timeoutInterval"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "cachePolicy"
      return_type: "X(Enum.enum NSURLRequestCachePolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "timeoutInterval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "mainDocumentURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "networkServiceType"
      return_type: "X(Enum.enum NSURLRequestNetworkServiceType)"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsCellularAccess"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "cachePolicy"
    type: "X(Enum.enum NSURLRequestCachePolicy)"
  }
  property {
    name: "timeoutInterval"
    type: "D"
  }
  property {
    name: "mainDocumentURL"
    type: "LNSURL;"
  }
  property {
    name: "networkServiceType"
    type: "X(Enum.enum NSURLRequestNetworkServiceType)"
  }
  property {
    name: "allowsCellularAccess"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLRequest.h"
}
class {
  name: "NSMutableURLRequest"
  base_class: "NSURLRequest"
  category: "NSMutableURLRequest+NSMutableHTTPURLRequest"
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setURL:"
      return_type: "V"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cachePolicy"
      return_type: "X(Enum.enum NSURLRequestCachePolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "setCachePolicy:"
      return_type: "V"
      parameter {
        name: "cachePolicy"
        type: "X(Enum.enum NSURLRequestCachePolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeoutInterval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeoutInterval:"
      return_type: "V"
      parameter {
        name: "timeoutInterval"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mainDocumentURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMainDocumentURL:"
      return_type: "V"
      parameter {
        name: "mainDocumentURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "networkServiceType"
      return_type: "X(Enum.enum NSURLRequestNetworkServiceType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setNetworkServiceType:"
      return_type: "V"
      parameter {
        name: "networkServiceType"
        type: "X(Enum.enum NSURLRequestNetworkServiceType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsCellularAccess"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsCellularAccess:"
      return_type: "V"
      parameter {
        name: "allowsCellularAccess"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "cachePolicy"
    type: "X(Enum.enum NSURLRequestCachePolicy)"
  }
  property {
    name: "timeoutInterval"
    type: "D"
  }
  property {
    name: "mainDocumentURL"
    type: "LNSURL;"
  }
  property {
    name: "networkServiceType"
    type: "X(Enum.enum NSURLRequestNetworkServiceType)"
  }
  property {
    name: "allowsCellularAccess"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLRequest.h"
}
class {
  name: "NSURLResponse"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "initWithURL:MIMEType:expectedContentLength:textEncodingName:"
      return_type: "OI"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
      parameter {
        name: "MIMEType"
        type: "LNSString;"
      }
      parameter {
        name: "length"
        type: "I"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "MIMEType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "expectedContentLength"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "textEncodingName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "suggestedFilename"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "MIMEType"
    type: "LNSString;"
  }
  property {
    name: "expectedContentLength"
    type: "J"
  }
  property {
    name: "textEncodingName"
    type: "LNSString;"
  }
  property {
    name: "suggestedFilename"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLResponse.h"
}
class {
  name: "NSHTTPURLResponse"
  base_class: "NSURLResponse"
  method {
    function {
      name: "initWithURL:statusCode:HTTPVersion:headerFields:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "statusCode"
        type: "I"
      }
      parameter {
        name: "HTTPVersion"
        type: "LNSString;"
      }
      parameter {
        name: "headerFields"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "statusCode"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "allHeaderFields"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedStringForStatusCode:"
      return_type: "LNSString;"
      parameter {
        name: "statusCode"
        type: "I"
      }
    }
    class_method: true
  }
  property {
    name: "statusCode"
    type: "I"
  }
  property {
    name: "allHeaderFields"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLResponse.h"
}
class {
  name: "NSUserDefaults"
  base_class: "NSObject"
  method {
    function {
      name: "standardUserDefaults"
      return_type: "LNSUserDefaults;"
    }
    class_method: true
  }
  method {
    function {
      name: "resetStandardUserDefaults"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSuiteName:"
      return_type: "OI"
      parameter {
        name: "suitename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUser:"
      return_type: "OI"
      parameter {
        name: "username"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectForKey:"
      return_type: "OI"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectForKey:"
      return_type: "V"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringForKey:"
      return_type: "LNSString;"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrayForKey:"
      return_type: "LNSArray;"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dictionaryForKey:"
      return_type: "LNSDictionary;"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataForKey:"
      return_type: "LNSData;"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringArrayForKey:"
      return_type: "LNSArray;"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "integerForKey:"
      return_type: "I"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "floatForKey:"
      return_type: "F"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleForKey:"
      return_type: "D"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boolForKey:"
      return_type: "Z"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLForKey:"
      return_type: "LNSURL;"
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setInteger:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "I"
      }
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFloat:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "F"
      }
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDouble:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "D"
      }
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBool:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "Z"
      }
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setURL:forKey:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "defaultName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerDefaults:"
      return_type: "V"
      parameter {
        name: "registrationDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addSuiteNamed:"
      return_type: "V"
      parameter {
        name: "suiteName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeSuiteNamed:"
      return_type: "V"
      parameter {
        name: "suiteName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dictionaryRepresentation"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "volatileDomainNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "volatileDomainForName:"
      return_type: "LNSDictionary;"
      parameter {
        name: "domainName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setVolatileDomain:forName:"
      return_type: "V"
      parameter {
        name: "domain"
        type: "LNSDictionary;"
      }
      parameter {
        name: "domainName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeVolatileDomainForName:"
      return_type: "V"
      parameter {
        name: "domainName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "persistentDomainNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "persistentDomainForName:"
      return_type: "LNSDictionary;"
      parameter {
        name: "domainName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPersistentDomain:forName:"
      return_type: "V"
      parameter {
        name: "domain"
        type: "LNSDictionary;"
      }
      parameter {
        name: "domainName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removePersistentDomainForName:"
      return_type: "V"
      parameter {
        name: "domainName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "synchronize"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "objectIsForcedForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectIsForcedForKey:inDomain:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "domain"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "volatileDomainNames"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserDefaults.h"
}
class {
  name: "NSValueTransformer"
  base_class: "NSObject"
  method {
    function {
      name: "setValueTransformer:forName:"
      return_type: "V"
      parameter {
        name: "transformer"
        type: "LNSValueTransformer;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "valueTransformerForName:"
      return_type: "LNSValueTransformer;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "valueTransformerNames"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "transformedValueClass"
      return_type: "OC"
    }
    class_method: true
  }
  method {
    function {
      name: "allowsReverseTransformation"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "transformedValue:"
      return_type: "OI"
      parameter {
        name: "value"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reverseTransformedValue:"
      return_type: "OI"
      parameter {
        name: "value"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSValueTransformer.h"
}
class {
  name: "NSXMLParser"
  base_class: "NSObject"
  category: "NSXMLParser+NSXMLParserLocatorAdditions"
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithStream:"
      return_type: "OI"
      parameter {
        name: "stream"
        type: "LNSInputStream;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSXMLParserDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSXMLParserDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldProcessNamespaces"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldProcessNamespaces:"
      return_type: "V"
      parameter {
        name: "shouldProcessNamespaces"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldReportNamespacePrefixes"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldReportNamespacePrefixes:"
      return_type: "V"
      parameter {
        name: "shouldReportNamespacePrefixes"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "externalEntityResolvingPolicy"
      return_type: "X(Enum.enum NSXMLParserExternalEntityResolvingPolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "setExternalEntityResolvingPolicy:"
      return_type: "V"
      parameter {
        name: "externalEntityResolvingPolicy"
        type: "X(Enum.enum NSXMLParserExternalEntityResolvingPolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedExternalEntityURLs"
      return_type: "LNSSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedExternalEntityURLs:"
      return_type: "V"
      parameter {
        name: "allowedExternalEntityURLs"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parse"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "abortParsing"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "parserError"
      return_type: "LNSError;"
    }
    class_method: false
  }
  method {
    function {
      name: "shouldResolveExternalEntities"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldResolveExternalEntities:"
      return_type: "V"
      parameter {
        name: "shouldResolveExternalEntities"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSXMLParserDelegate>)"
  }
  property {
    name: "shouldProcessNamespaces"
    type: "Z"
  }
  property {
    name: "shouldReportNamespacePrefixes"
    type: "Z"
  }
  property {
    name: "externalEntityResolvingPolicy"
    type: "X(Enum.enum NSXMLParserExternalEntityResolvingPolicy)"
  }
  property {
    name: "allowedExternalEntityURLs"
    type: "LNSSet;"
  }
  property {
    name: "parserError"
    type: "LNSError;"
  }
  property {
    name: "shouldResolveExternalEntities"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLParser.h"
}
class {
  name: "NSAttributedString"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  category: "NSAttributedString+NSExtendedAttributedString"
  category: "NSAttributedString+NSAttributedStringKitAdditions"
  category: "NSAttributedString+NSAttributedStringPasteboardAdditions"
  category: "NSAttributedString+NSDeprecatedKitAdditions"
  category: "NSAttributedString+NSAttributedStringAttachmentConveniences"
  category: "NSAttributedString+NSStringDrawing"
  category: "NSAttributedString+NSExtendedStringDrawing"
  method {
    function {
      name: "string"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "attributesAtIndex:effectiveRange:"
      return_type: "LNSDictionary;"
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  property {
    name: "string"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAttributedString.h"
}
class {
  name: "NSMutableAttributedString"
  base_class: "NSAttributedString"
  category: "NSMutableAttributedString+NSExtendedMutableAttributedString"
  category: "NSMutableAttributedString+NSMutableAttributedStringKitAdditions"
  category: "NSMutableAttributedString+NSMutableAttributedStringAttachmentConveniences"
  method {
    function {
      name: "replaceCharactersInRange:withString:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "str"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributes:range:"
      return_type: "V"
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAttributedString.h"
}
class {
  name: "NSByteCountFormatter"
  base_class: "NSFormatter"
  method {
    function {
      name: "stringFromByteCount:countStyle:"
      return_type: "LNSString;"
      parameter {
        name: "byteCount"
        type: "J"
      }
      parameter {
        name: "countStyle"
        type: "X(Enum.enum NSByteCountFormatterCountStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stringFromByteCount:"
      return_type: "LNSString;"
      parameter {
        name: "byteCount"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedUnits"
      return_type: "X(Enum.enum NSByteCountFormatterUnits)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedUnits:"
      return_type: "V"
      parameter {
        name: "allowedUnits"
        type: "X(Enum.enum NSByteCountFormatterUnits)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "countStyle"
      return_type: "X(Enum.enum NSByteCountFormatterCountStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setCountStyle:"
      return_type: "V"
      parameter {
        name: "countStyle"
        type: "X(Enum.enum NSByteCountFormatterCountStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsNonnumericFormatting"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsNonnumericFormatting:"
      return_type: "V"
      parameter {
        name: "allowsNonnumericFormatting"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "includesUnit"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncludesUnit:"
      return_type: "V"
      parameter {
        name: "includesUnit"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "includesCount"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncludesCount:"
      return_type: "V"
      parameter {
        name: "includesCount"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "includesActualByteCount"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncludesActualByteCount:"
      return_type: "V"
      parameter {
        name: "includesActualByteCount"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAdaptive"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAdaptive:"
      return_type: "V"
      parameter {
        name: "adaptive"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "zeroPadsFractionDigits"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setZeroPadsFractionDigits:"
      return_type: "V"
      parameter {
        name: "zeroPadsFractionDigits"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formattingContext"
      return_type: "X(Enum.enum NSFormattingContext)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormattingContext:"
      return_type: "V"
      parameter {
        name: "formattingContext"
        type: "X(Enum.enum NSFormattingContext)"
      }
    }
    class_method: false
  }
  property {
    name: "allowedUnits"
    type: "X(Enum.enum NSByteCountFormatterUnits)"
  }
  property {
    name: "countStyle"
    type: "X(Enum.enum NSByteCountFormatterCountStyle)"
  }
  property {
    name: "allowsNonnumericFormatting"
    type: "Z"
  }
  property {
    name: "includesUnit"
    type: "Z"
  }
  property {
    name: "includesCount"
    type: "Z"
  }
  property {
    name: "includesActualByteCount"
    type: "Z"
  }
  property {
    name: "adaptive"
    type: "Z"
  }
  property {
    name: "zeroPadsFractionDigits"
    type: "Z"
  }
  property {
    name: "formattingContext"
    type: "X(Enum.enum NSFormattingContext)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSByteCountFormatter.h"
}
class {
  name: "NSCache"
  base_class: "NSObject"
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSCacheDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSCacheDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:forKey:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:forKey:cost:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "OI"
      }
      parameter {
        name: "g"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectForKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "totalCostLimit"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTotalCostLimit:"
      return_type: "V"
      parameter {
        name: "totalCostLimit"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "countLimit"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setCountLimit:"
      return_type: "V"
      parameter {
        name: "countLimit"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "evictsObjectsWithDiscardedContent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEvictsObjectsWithDiscardedContent:"
      return_type: "V"
      parameter {
        name: "evictsObjectsWithDiscardedContent"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSCacheDelegate>)"
  }
  property {
    name: "totalCostLimit"
    type: "UI"
  }
  property {
    name: "countLimit"
    type: "UI"
  }
  property {
    name: "evictsObjectsWithDiscardedContent"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCache.h"
}
class {
  name: "NSPredicate"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "predicateWithFormat:argumentArray:"
      return_type: "LNSPredicate;"
      parameter {
        name: "predicateFormat"
        type: "LNSString;"
      }
      parameter {
        name: "arguments"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "predicateWithFormat:"
      return_type: "LNSPredicate;"
      parameter {
        name: "predicateFormat"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "predicateWithFormat:arguments:"
      return_type: "LNSPredicate;"
      parameter {
        name: "predicateFormat"
        type: "LNSString;"
      }
      parameter {
        name: "argList"
        type: "X(ConstantArray.__va_list_tag [1])"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "predicateFromMetadataQueryString:"
      return_type: "LNSPredicate;"
      parameter {
        name: "queryString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "predicateWithValue:"
      return_type: "LNSPredicate;"
      parameter {
        name: "value"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "predicateWithBlock:"
      return_type: "LNSPredicate;"
      parameter {
        name: "block"
        type: "X(BlockPointer.BOOL (^)(id, NSDictionary *))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "predicateFormat"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "predicateWithSubstitutionVariables:"
      return_type: "OI"
      parameter {
        name: "variables"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "evaluateWithObject:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "evaluateWithObject:substitutionVariables:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "bindings"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowEvaluation"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "predicateFormat"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPredicate.h"
}
class {
  name: "NSComparisonPredicate"
  base_class: "NSPredicate"
  method {
    function {
      name: "predicateWithLeftExpression:rightExpression:modifier:type:options:"
      return_type: "LNSComparisonPredicate;"
      parameter {
        name: "lhs"
        type: "LNSExpression;"
      }
      parameter {
        name: "rhs"
        type: "LNSExpression;"
      }
      parameter {
        name: "modifier"
        type: "X(Enum.enum NSComparisonPredicateModifier)"
      }
      parameter {
        name: "type"
        type: "X(Enum.enum NSPredicateOperatorType)"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSComparisonPredicateOptions)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "predicateWithLeftExpression:rightExpression:customSelector:"
      return_type: "LNSComparisonPredicate;"
      parameter {
        name: "lhs"
        type: "LNSExpression;"
      }
      parameter {
        name: "rhs"
        type: "LNSExpression;"
      }
      parameter {
        name: "selector"
        type: "OS"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithLeftExpression:rightExpression:modifier:type:options:"
      return_type: "OI"
      parameter {
        name: "lhs"
        type: "LNSExpression;"
      }
      parameter {
        name: "rhs"
        type: "LNSExpression;"
      }
      parameter {
        name: "modifier"
        type: "X(Enum.enum NSComparisonPredicateModifier)"
      }
      parameter {
        name: "type"
        type: "X(Enum.enum NSPredicateOperatorType)"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSComparisonPredicateOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithLeftExpression:rightExpression:customSelector:"
      return_type: "OI"
      parameter {
        name: "lhs"
        type: "LNSExpression;"
      }
      parameter {
        name: "rhs"
        type: "LNSExpression;"
      }
      parameter {
        name: "selector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "predicateOperatorType"
      return_type: "X(Enum.enum NSPredicateOperatorType)"
    }
    class_method: false
  }
  method {
    function {
      name: "comparisonPredicateModifier"
      return_type: "X(Enum.enum NSComparisonPredicateModifier)"
    }
    class_method: false
  }
  method {
    function {
      name: "leftExpression"
      return_type: "LNSExpression;"
    }
    class_method: false
  }
  method {
    function {
      name: "rightExpression"
      return_type: "LNSExpression;"
    }
    class_method: false
  }
  method {
    function {
      name: "customSelector"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "options"
      return_type: "X(Enum.enum NSComparisonPredicateOptions)"
    }
    class_method: false
  }
  property {
    name: "predicateOperatorType"
    type: "X(Enum.enum NSPredicateOperatorType)"
  }
  property {
    name: "comparisonPredicateModifier"
    type: "X(Enum.enum NSComparisonPredicateModifier)"
  }
  property {
    name: "leftExpression"
    type: "LNSExpression;"
  }
  property {
    name: "rightExpression"
    type: "LNSExpression;"
  }
  property {
    name: "customSelector"
    type: "OS"
  }
  property {
    name: "options"
    type: "X(Enum.enum NSComparisonPredicateOptions)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSComparisonPredicate.h"
}
class {
  name: "NSCompoundPredicate"
  base_class: "NSPredicate"
  method {
    function {
      name: "initWithType:subpredicates:"
      return_type: "OI"
      parameter {
        name: "type"
        type: "X(Enum.enum NSCompoundPredicateType)"
      }
      parameter {
        name: "subpredicates"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compoundPredicateType"
      return_type: "X(Enum.enum NSCompoundPredicateType)"
    }
    class_method: false
  }
  method {
    function {
      name: "subpredicates"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "andPredicateWithSubpredicates:"
      return_type: "LNSCompoundPredicate;"
      parameter {
        name: "subpredicates"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orPredicateWithSubpredicates:"
      return_type: "LNSCompoundPredicate;"
      parameter {
        name: "subpredicates"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "notPredicateWithSubpredicate:"
      return_type: "LNSCompoundPredicate;"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: true
  }
  property {
    name: "compoundPredicateType"
    type: "X(Enum.enum NSCompoundPredicateType)"
  }
  property {
    name: "subpredicates"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCompoundPredicate.h"
}
class {
  name: "NSDateComponentsFormatter"
  base_class: "NSFormatter"
  method {
    function {
      name: "stringForObjectValue:"
      return_type: "LNSString;"
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromDateComponents:"
      return_type: "LNSString;"
      parameter {
        name: "components"
        type: "LNSDateComponents;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromDate:toDate:"
      return_type: "LNSString;"
      parameter {
        name: "startDate"
        type: "LNSDate;"
      }
      parameter {
        name: "endDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringFromTimeInterval:"
      return_type: "LNSString;"
      parameter {
        name: "ti"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedStringFromDateComponents:unitsStyle:"
      return_type: "LNSString;"
      parameter {
        name: "components"
        type: "LNSDateComponents;"
      }
      parameter {
        name: "unitsStyle"
        type: "X(Enum.enum NSDateComponentsFormatterUnitsStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "unitsStyle"
      return_type: "X(Enum.enum NSDateComponentsFormatterUnitsStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setUnitsStyle:"
      return_type: "V"
      parameter {
        name: "unitsStyle"
        type: "X(Enum.enum NSDateComponentsFormatterUnitsStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedUnits"
      return_type: "X(Enum.enum NSCalendarUnit)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedUnits:"
      return_type: "V"
      parameter {
        name: "allowedUnits"
        type: "X(Enum.enum NSCalendarUnit)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "zeroFormattingBehavior"
      return_type: "X(Enum.enum NSDateComponentsFormatterZeroFormattingBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setZeroFormattingBehavior:"
      return_type: "V"
      parameter {
        name: "zeroFormattingBehavior"
        type: "X(Enum.enum NSDateComponentsFormatterZeroFormattingBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "calendar"
      return_type: "LNSCalendar;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCalendar:"
      return_type: "V"
      parameter {
        name: "calendar"
        type: "LNSCalendar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsFractionalUnits"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsFractionalUnits:"
      return_type: "V"
      parameter {
        name: "allowsFractionalUnits"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumUnitCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaximumUnitCount:"
      return_type: "V"
      parameter {
        name: "maximumUnitCount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collapsesLargestUnit"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCollapsesLargestUnit:"
      return_type: "V"
      parameter {
        name: "collapsesLargestUnit"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "includesApproximationPhrase"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncludesApproximationPhrase:"
      return_type: "V"
      parameter {
        name: "includesApproximationPhrase"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "includesTimeRemainingPhrase"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncludesTimeRemainingPhrase:"
      return_type: "V"
      parameter {
        name: "includesTimeRemainingPhrase"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formattingContext"
      return_type: "X(Enum.enum NSFormattingContext)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormattingContext:"
      return_type: "V"
      parameter {
        name: "formattingContext"
        type: "X(Enum.enum NSFormattingContext)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjectValue:forString:errorDescription:"
      return_type: "Z"
      parameter {
        name: "obj"
        type: "*OI;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  property {
    name: "unitsStyle"
    type: "X(Enum.enum NSDateComponentsFormatterUnitsStyle)"
  }
  property {
    name: "allowedUnits"
    type: "X(Enum.enum NSCalendarUnit)"
  }
  property {
    name: "zeroFormattingBehavior"
    type: "X(Enum.enum NSDateComponentsFormatterZeroFormattingBehavior)"
  }
  property {
    name: "calendar"
    type: "LNSCalendar;"
  }
  property {
    name: "allowsFractionalUnits"
    type: "Z"
  }
  property {
    name: "maximumUnitCount"
    type: "I"
  }
  property {
    name: "collapsesLargestUnit"
    type: "Z"
  }
  property {
    name: "includesApproximationPhrase"
    type: "Z"
  }
  property {
    name: "includesTimeRemainingPhrase"
    type: "Z"
  }
  property {
    name: "formattingContext"
    type: "X(Enum.enum NSFormattingContext)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDateComponentsFormatter.h"
}
class {
  name: "NSExpression"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "expressionWithFormat:argumentArray:"
      return_type: "LNSExpression;"
      parameter {
        name: "expressionFormat"
        type: "LNSString;"
      }
      parameter {
        name: "arguments"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionWithFormat:"
      return_type: "LNSExpression;"
      parameter {
        name: "expressionFormat"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionWithFormat:arguments:"
      return_type: "LNSExpression;"
      parameter {
        name: "expressionFormat"
        type: "LNSString;"
      }
      parameter {
        name: "argList"
        type: "X(ConstantArray.__va_list_tag [1])"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForConstantValue:"
      return_type: "LNSExpression;"
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForEvaluatedObject"
      return_type: "LNSExpression;"
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForVariable:"
      return_type: "LNSExpression;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForKeyPath:"
      return_type: "LNSExpression;"
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForFunction:arguments:"
      return_type: "LNSExpression;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "parameters"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForAggregate:"
      return_type: "LNSExpression;"
      parameter {
        name: "subexpressions"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForUnionSet:with:"
      return_type: "LNSExpression;"
      parameter {
        name: "left"
        type: "LNSExpression;"
      }
      parameter {
        name: "right"
        type: "LNSExpression;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForIntersectSet:with:"
      return_type: "LNSExpression;"
      parameter {
        name: "left"
        type: "LNSExpression;"
      }
      parameter {
        name: "right"
        type: "LNSExpression;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForMinusSet:with:"
      return_type: "LNSExpression;"
      parameter {
        name: "left"
        type: "LNSExpression;"
      }
      parameter {
        name: "right"
        type: "LNSExpression;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForSubquery:usingIteratorVariable:predicate:"
      return_type: "LNSExpression;"
      parameter {
        name: "expression"
        type: "LNSExpression;"
      }
      parameter {
        name: "variable"
        type: "LNSString;"
      }
      parameter {
        name: "predicate"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForFunction:selectorName:arguments:"
      return_type: "LNSExpression;"
      parameter {
        name: "target"
        type: "LNSExpression;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "parameters"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForAnyKey"
      return_type: "LNSExpression;"
    }
    class_method: true
  }
  method {
    function {
      name: "expressionForBlock:arguments:"
      return_type: "LNSExpression;"
      parameter {
        name: "block"
        type: "X(BlockPointer.id (^)(id, NSArray *, NSMutableDictionary *))"
      }
      parameter {
        name: "arguments"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithExpressionType:"
      return_type: "OI"
      parameter {
        name: "type"
        type: "X(Enum.enum NSExpressionType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "expressionType"
      return_type: "X(Enum.enum NSExpressionType)"
    }
    class_method: false
  }
  method {
    function {
      name: "constantValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "keyPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "function"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "variable"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "operand"
      return_type: "LNSExpression;"
    }
    class_method: false
  }
  method {
    function {
      name: "arguments"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "collection"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "predicate"
      return_type: "LNSPredicate;"
    }
    class_method: false
  }
  method {
    function {
      name: "leftExpression"
      return_type: "LNSExpression;"
    }
    class_method: false
  }
  method {
    function {
      name: "rightExpression"
      return_type: "LNSExpression;"
    }
    class_method: false
  }
  method {
    function {
      name: "expressionBlock"
      return_type: "X(BlockPointer.id (^)(id, NSArray *, NSMutableDictionary *))"
    }
    class_method: false
  }
  method {
    function {
      name: "expressionValueWithObject:context:"
      return_type: "OI"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "context"
        type: "LNSMutableDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowEvaluation"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "expressionType"
    type: "X(Enum.enum NSExpressionType)"
  }
  property {
    name: "constantValue"
    type: "OI"
  }
  property {
    name: "keyPath"
    type: "LNSString;"
  }
  property {
    name: "function"
    type: "LNSString;"
  }
  property {
    name: "variable"
    type: "LNSString;"
  }
  property {
    name: "operand"
    type: "LNSExpression;"
  }
  property {
    name: "arguments"
    type: "LNSArray;"
  }
  property {
    name: "collection"
    type: "OI"
  }
  property {
    name: "predicate"
    type: "LNSPredicate;"
  }
  property {
    name: "leftExpression"
    type: "LNSExpression;"
  }
  property {
    name: "rightExpression"
    type: "LNSExpression;"
  }
  property {
    name: "expressionBlock"
    type: "X(BlockPointer.id (^)(id, NSArray *, NSMutableDictionary *))"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSExpression.h"
}
class {
  name: "NSExtensionContext"
  base_class: "NSObject"
  method {
    function {
      name: "inputItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "completeRequestReturningItems:completionHandler:"
      return_type: "V"
      parameter {
        name: "items"
        type: "LNSArray;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(BOOL))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelRequestWithError:"
      return_type: "V"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openURL:completionHandler:"
      return_type: "V"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(BOOL))"
      }
    }
    class_method: false
  }
  property {
    name: "inputItems"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSExtensionContext.h"
}
class {
  name: "NSItemProvider"
  base_class: "NSObject"
  protocol: "NSCopying"
  category: "NSItemProvider+NSPreviewSupport"
  category: "NSItemProvider+NSItemSourceInfo"
  method {
    function {
      name: "initWithItem:typeIdentifier:"
      return_type: "OI"
      parameter {
        name: "item"
        type: "X(Unexposed.id<NSSecureCoding>)"
      }
      parameter {
        name: "typeIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "fileURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerItemForTypeIdentifier:loadHandler:"
      return_type: "V"
      parameter {
        name: "typeIdentifier"
        type: "LNSString;"
      }
      parameter {
        name: "loadHandler"
        type: "X(BlockPointer.void (^)(NSItemProviderCompletionHandler, Class, NSDictionary *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registeredTypeIdentifiers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "hasItemConformingToTypeIdentifier:"
      return_type: "Z"
      parameter {
        name: "typeIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadItemForTypeIdentifier:options:completionHandler:"
      return_type: "V"
      parameter {
        name: "typeIdentifier"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(id<NSSecureCoding>, NSError *))"
      }
    }
    class_method: false
  }
  property {
    name: "registeredTypeIdentifiers"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSItemProvider.h"
}
class {
  name: "NSExtensionItem"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "attributedTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedTitle:"
      return_type: "V"
      parameter {
        name: "attributedTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedContentText"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedContentText:"
      return_type: "V"
      parameter {
        name: "attributedContentText"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attachments"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttachments:"
      return_type: "V"
      parameter {
        name: "attachments"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserInfo:"
      return_type: "V"
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  property {
    name: "attributedTitle"
    type: "LNSAttributedString;"
  }
  property {
    name: "attributedContentText"
    type: "LNSAttributedString;"
  }
  property {
    name: "attachments"
    type: "LNSArray;"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSExtensionItem.h"
}
class {
  name: "NSFileAccessIntent"
  base_class: "NSObject"
  method {
    function {
      name: "readingIntentWithURL:options:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileCoordinatorReadingOptions)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "writingIntentWithURL:options:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileCoordinatorWritingOptions)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileCoordinator.h"
}
class {
  name: "NSFileCoordinator"
  base_class: "NSObject"
  method {
    function {
      name: "addFilePresenter:"
      return_type: "V"
      parameter {
        name: "filePresenter"
        type: "X(Unexposed.id<NSFilePresenter>)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "removeFilePresenter:"
      return_type: "V"
      parameter {
        name: "filePresenter"
        type: "X(Unexposed.id<NSFilePresenter>)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "filePresenters"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithFilePresenter:"
      return_type: "OI"
      parameter {
        name: "filePresenterOrNil"
        type: "X(Unexposed.id<NSFilePresenter>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "purposeIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPurposeIdentifier:"
      return_type: "V"
      parameter {
        name: "purposeIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "coordinateAccessWithIntents:queue:byAccessor:"
      return_type: "V"
      parameter {
        name: "intents"
        type: "LNSArray;"
      }
      parameter {
        name: "queue"
        type: "LNSOperationQueue;"
      }
      parameter {
        name: "accessor"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "coordinateReadingItemAtURL:options:error:byAccessor:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileCoordinatorReadingOptions)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
      parameter {
        name: "reader"
        type: "X(BlockPointer.void (^)(NSURL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "coordinateWritingItemAtURL:options:error:byAccessor:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileCoordinatorWritingOptions)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
      parameter {
        name: "writer"
        type: "X(BlockPointer.void (^)(NSURL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:"
      return_type: "V"
      parameter {
        name: "readingURL"
        type: "LNSURL;"
      }
      parameter {
        name: "readingOptions"
        type: "X(Enum.enum NSFileCoordinatorReadingOptions)"
      }
      parameter {
        name: "writingURL"
        type: "LNSURL;"
      }
      parameter {
        name: "writingOptions"
        type: "X(Enum.enum NSFileCoordinatorWritingOptions)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
      parameter {
        name: "readerWriter"
        type: "X(BlockPointer.void (^)(NSURL *, NSURL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:"
      return_type: "V"
      parameter {
        name: "url1"
        type: "LNSURL;"
      }
      parameter {
        name: "options1"
        type: "X(Enum.enum NSFileCoordinatorWritingOptions)"
      }
      parameter {
        name: "url2"
        type: "LNSURL;"
      }
      parameter {
        name: "options2"
        type: "X(Enum.enum NSFileCoordinatorWritingOptions)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
      parameter {
        name: "writer"
        type: "X(BlockPointer.void (^)(NSURL *, NSURL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:"
      return_type: "V"
      parameter {
        name: "readingURLs"
        type: "LNSArray;"
      }
      parameter {
        name: "readingOptions"
        type: "X(Enum.enum NSFileCoordinatorReadingOptions)"
      }
      parameter {
        name: "writingURLs"
        type: "LNSArray;"
      }
      parameter {
        name: "writingOptions"
        type: "X(Enum.enum NSFileCoordinatorWritingOptions)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
      parameter {
        name: "batchAccessor"
        type: "X(BlockPointer.void (^)(void (^)(void)))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtURL:willMoveToURL:"
      return_type: "V"
      parameter {
        name: "oldURL"
        type: "LNSURL;"
      }
      parameter {
        name: "newURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtURL:didMoveToURL:"
      return_type: "V"
      parameter {
        name: "oldURL"
        type: "LNSURL;"
      }
      parameter {
        name: "newURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancel"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "purposeIdentifier"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileCoordinator.h"
}
class {
  name: "NSFileVersion"
  base_class: "NSObject"
  method {
    function {
      name: "currentVersionOfItemAtURL:"
      return_type: "LNSFileVersion;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "otherVersionsOfItemAtURL:"
      return_type: "LNSArray;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "unresolvedConflictVersionsOfItemAtURL:"
      return_type: "LNSArray;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "getNonlocalVersionsOfItemAtURL:completionHandler:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSArray *, NSError *))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "versionOfItemAtURL:forPersistentIdentifier:"
      return_type: "LNSFileVersion;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "persistentIdentifier"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "addVersionOfItemAtURL:withContentsOfURL:options:error:"
      return_type: "LNSFileVersion;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "contentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileVersionAddingOptions)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "temporaryDirectoryURLForNewVersionOfItemAtURL:"
      return_type: "LNSURL;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedNameOfSavingComputer"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "modificationDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "persistentIdentifier"
      return_type: "X(Unexposed.id<NSCoding>)"
    }
    class_method: false
  }
  method {
    function {
      name: "isConflict"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isResolved"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setResolved:"
      return_type: "V"
      parameter {
        name: "resolved"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDiscardable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDiscardable:"
      return_type: "V"
      parameter {
        name: "discardable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasLocalContents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "hasThumbnail"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "replaceItemAtURL:options:error:"
      return_type: "LNSURL;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileVersionReplacingOptions)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAndReturnError:"
      return_type: "Z"
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeOtherVersionsOfItemAtURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "localizedName"
    type: "LNSString;"
  }
  property {
    name: "localizedNameOfSavingComputer"
    type: "LNSString;"
  }
  property {
    name: "modificationDate"
    type: "LNSDate;"
  }
  property {
    name: "persistentIdentifier"
    type: "X(Unexposed.id<NSCoding>)"
  }
  property {
    name: "conflict"
    type: "Z"
  }
  property {
    name: "resolved"
    type: "Z"
  }
  property {
    name: "discardable"
    type: "Z"
  }
  property {
    name: "hasLocalContents"
    type: "Z"
  }
  property {
    name: "hasThumbnail"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileVersion.h"
}
class {
  name: "NSFileWrapper"
  base_class: "NSObject"
  protocol: "NSCoding"
  category: "NSFileWrapper+NSDeprecated"
  category: "NSFileWrapper+NSExtensions"
  method {
    function {
      name: "initWithURL:options:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileWrapperReadingOptions)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initDirectoryWithFileWrappers:"
      return_type: "OI"
      parameter {
        name: "childrenByPreferredName"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initRegularFileWithContents:"
      return_type: "OI"
      parameter {
        name: "contents"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initSymbolicLinkWithDestinationURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSerializedRepresentation:"
      return_type: "OI"
      parameter {
        name: "serializeRepresentation"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDirectory"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isRegularFile"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isSymbolicLink"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "preferredFilename"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredFilename:"
      return_type: "V"
      parameter {
        name: "preferredFilename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "filename"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFilename:"
      return_type: "V"
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileAttributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFileAttributes:"
      return_type: "V"
      parameter {
        name: "fileAttributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matchesContentsOfURL:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromURL:options:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileWrapperReadingOptions)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:options:originalContentsURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSFileWrapperWritingOptions)"
      }
      parameter {
        name: "originalContentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "serializedRepresentation"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "addFileWrapper:"
      return_type: "LNSString;"
      parameter {
        name: "child"
        type: "LNSFileWrapper;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addRegularFileWithContents:preferredFilename:"
      return_type: "LNSString;"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFileWrapper:"
      return_type: "V"
      parameter {
        name: "child"
        type: "LNSFileWrapper;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileWrappers"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "keyForFileWrapper:"
      return_type: "LNSString;"
      parameter {
        name: "child"
        type: "LNSFileWrapper;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "regularFileContents"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "symbolicLinkDestinationURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  property {
    name: "directory"
    type: "Z"
  }
  property {
    name: "regularFile"
    type: "Z"
  }
  property {
    name: "symbolicLink"
    type: "Z"
  }
  property {
    name: "preferredFilename"
    type: "LNSString;"
  }
  property {
    name: "filename"
    type: "LNSString;"
  }
  property {
    name: "fileAttributes"
    type: "LNSDictionary;"
  }
  property {
    name: "serializedRepresentation"
    type: "LNSData;"
  }
  property {
    name: "fileWrappers"
    type: "LNSDictionary;"
  }
  property {
    name: "regularFileContents"
    type: "LNSData;"
  }
  property {
    name: "symbolicLinkDestinationURL"
    type: "LNSURL;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileWrapper.h"
}
class {
  name: "NSLinguisticTagger"
  base_class: "NSObject"
  method {
    function {
      name: "initWithTagSchemes:options:"
      return_type: "OI"
      parameter {
        name: "tagSchemes"
        type: "LNSArray;"
      }
      parameter {
        name: "opts"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tagSchemes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "string"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setString:"
      return_type: "V"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "availableTagSchemesForLanguage:"
      return_type: "LNSArray;"
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setOrthography:range:"
      return_type: "V"
      parameter {
        name: "orthography"
        type: "LNSOrthography;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orthographyAtIndex:effectiveRange:"
      return_type: "LNSOrthography;"
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringEditedInRange:changeInLength:"
      return_type: "V"
      parameter {
        name: "newRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "delta"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateTagsInRange:scheme:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "tagScheme"
        type: "LNSString;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSLinguisticTaggerOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSString *, NSRange, NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sentenceRangeForRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tagAtIndex:scheme:tokenRange:sentenceRange:"
      return_type: "LNSString;"
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "tagScheme"
        type: "LNSString;"
      }
      parameter {
        name: "tokenRange"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "sentenceRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tagsInRange:scheme:options:tokenRanges:"
      return_type: "LNSArray;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "tagScheme"
        type: "LNSString;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSLinguisticTaggerOptions)"
      }
      parameter {
        name: "tokenRanges"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:"
      return_type: "LNSArray;"
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "tagScheme"
        type: "LNSString;"
      }
      parameter {
        name: "tokenRange"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "sentenceRange"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "scores"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  property {
    name: "tagSchemes"
    type: "LNSArray;"
  }
  property {
    name: "string"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLinguisticTagger.h"
}
class {
  name: "NSMetadataQuery"
  base_class: "NSObject"
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSMetadataQueryDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSMetadataQueryDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "predicate"
      return_type: "LNSPredicate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPredicate:"
      return_type: "V"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSortDescriptors:"
      return_type: "V"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueListAttributes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setValueListAttributes:"
      return_type: "V"
      parameter {
        name: "valueListAttributes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "groupingAttributes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setGroupingAttributes:"
      return_type: "V"
      parameter {
        name: "groupingAttributes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "notificationBatchingInterval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setNotificationBatchingInterval:"
      return_type: "V"
      parameter {
        name: "notificationBatchingInterval"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "searchScopes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSearchScopes:"
      return_type: "V"
      parameter {
        name: "searchScopes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "searchItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSearchItems:"
      return_type: "V"
      parameter {
        name: "searchItems"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "operationQueue"
      return_type: "LNSOperationQueue;"
    }
    class_method: false
  }
  method {
    function {
      name: "setOperationQueue:"
      return_type: "V"
      parameter {
        name: "operationQueue"
        type: "LNSOperationQueue;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startQuery"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "stopQuery"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isStarted"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isGathering"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isStopped"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "disableUpdates"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enableUpdates"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resultCount"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "resultAtIndex:"
      return_type: "OI"
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateResultsUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateResultsWithOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "results"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfResult:"
      return_type: "UI"
      parameter {
        name: "result"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueLists"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "groupedResults"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "valueOfAttribute:forResultAtIndex:"
      return_type: "OI"
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSMetadataQueryDelegate>)"
  }
  property {
    name: "predicate"
    type: "LNSPredicate;"
  }
  property {
    name: "sortDescriptors"
    type: "LNSArray;"
  }
  property {
    name: "valueListAttributes"
    type: "LNSArray;"
  }
  property {
    name: "groupingAttributes"
    type: "LNSArray;"
  }
  property {
    name: "notificationBatchingInterval"
    type: "D"
  }
  property {
    name: "searchScopes"
    type: "LNSArray;"
  }
  property {
    name: "searchItems"
    type: "LNSArray;"
  }
  property {
    name: "operationQueue"
    type: "LNSOperationQueue;"
  }
  property {
    name: "started"
    type: "Z"
  }
  property {
    name: "gathering"
    type: "Z"
  }
  property {
    name: "stopped"
    type: "Z"
  }
  property {
    name: "resultCount"
    type: "UI"
  }
  property {
    name: "results"
    type: "LNSArray;"
  }
  property {
    name: "valueLists"
    type: "LNSDictionary;"
  }
  property {
    name: "groupedResults"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSMetadata.h"
}
class {
  name: "NSMetadataItem"
  base_class: "NSObject"
  method {
    function {
      name: "initWithURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueForAttribute:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valuesForAttributes:"
      return_type: "LNSDictionary;"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "attributes"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSMetadata.h"
}
class {
  name: "NSMetadataQueryAttributeValueTuple"
  base_class: "NSObject"
  method {
    function {
      name: "attribute"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "value"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  property {
    name: "attribute"
    type: "LNSString;"
  }
  property {
    name: "value"
    type: "OI"
  }
  property {
    name: "count"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSMetadata.h"
}
class {
  name: "NSMetadataQueryResultGroup"
  base_class: "NSObject"
  method {
    function {
      name: "attribute"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "value"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "subgroups"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "resultCount"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "resultAtIndex:"
      return_type: "OI"
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "results"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "attribute"
    type: "LNSString;"
  }
  property {
    name: "value"
    type: "OI"
  }
  property {
    name: "subgroups"
    type: "LNSArray;"
  }
  property {
    name: "resultCount"
    type: "UI"
  }
  property {
    name: "results"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSMetadata.h"
}
class {
  name: "NSNetService"
  base_class: "NSObject"
  category: "NSNetService+NSDeprecated"
  method {
    function {
      name: "initWithDomain:type:name:port:"
      return_type: "OI"
      parameter {
        name: "domain"
        type: "LNSString;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "port"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDomain:type:name:"
      return_type: "OI"
      parameter {
        name: "domain"
        type: "LNSString;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleInRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "aRunLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "aRunLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSNetServiceDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSNetServiceDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "includesPeerToPeer"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncludesPeerToPeer:"
      return_type: "V"
      parameter {
        name: "includesPeerToPeer"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "type"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "domain"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "hostName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "addresses"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "port"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "publish"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "publishWithOptions:"
      return_type: "V"
      parameter {
        name: "options"
        type: "X(Enum.enum NSNetServiceOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resolve"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "stop"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "dictionaryFromTXTRecordData:"
      return_type: "LNSDictionary;"
      parameter {
        name: "txtData"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataFromTXTRecordDictionary:"
      return_type: "LNSData;"
      parameter {
        name: "txtDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "resolveWithTimeout:"
      return_type: "V"
      parameter {
        name: "timeout"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getInputStream:outputStream:"
      return_type: "Z"
      parameter {
        name: "inputStream"
        type: "*LNSInputStream;;"
      }
      parameter {
        name: "outputStream"
        type: "*LNSOutputStream;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTXTRecordData:"
      return_type: "Z"
      parameter {
        name: "recordData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "TXTRecordData"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "startMonitoring"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "stopMonitoring"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSNetServiceDelegate>)"
  }
  property {
    name: "includesPeerToPeer"
    type: "Z"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "type"
    type: "LNSString;"
  }
  property {
    name: "domain"
    type: "LNSString;"
  }
  property {
    name: "hostName"
    type: "LNSString;"
  }
  property {
    name: "addresses"
    type: "LNSArray;"
  }
  property {
    name: "port"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNetServices.h"
}
class {
  name: "NSNetServiceBrowser"
  base_class: "NSObject"
  category: "NSNetServiceBrowser+NSDeprecated"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSNetServiceBrowserDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSNetServiceBrowserDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "includesPeerToPeer"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncludesPeerToPeer:"
      return_type: "V"
      parameter {
        name: "includesPeerToPeer"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleInRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "aRunLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromRunLoop:forMode:"
      return_type: "V"
      parameter {
        name: "aRunLoop"
        type: "LNSRunLoop;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "searchForBrowsableDomains"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "searchForRegistrationDomains"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "searchForServicesOfType:inDomain:"
      return_type: "V"
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "domainString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stop"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSNetServiceBrowserDelegate>)"
  }
  property {
    name: "includesPeerToPeer"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNetServices.h"
}
class {
  name: "NSProgress"
  base_class: "NSObject"
  method {
    function {
      name: "currentProgress"
      return_type: "LNSProgress;"
    }
    class_method: true
  }
  method {
    function {
      name: "progressWithTotalUnitCount:"
      return_type: "LNSProgress;"
      parameter {
        name: "unitCount"
        type: "J"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithParent:userInfo:"
      return_type: "OI"
      parameter {
        name: "parentProgressOrNil"
        type: "LNSProgress;"
      }
      parameter {
        name: "userInfoOrNil"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "becomeCurrentWithPendingUnitCount:"
      return_type: "V"
      parameter {
        name: "unitCount"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resignCurrent"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "totalUnitCount"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "setTotalUnitCount:"
      return_type: "V"
      parameter {
        name: "totalUnitCount"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completedUnitCount"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompletedUnitCount:"
      return_type: "V"
      parameter {
        name: "completedUnitCount"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocalizedDescription:"
      return_type: "V"
      parameter {
        name: "localizedDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedAdditionalDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocalizedAdditionalDescription:"
      return_type: "V"
      parameter {
        name: "localizedAdditionalDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isCancellable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCancellable:"
      return_type: "V"
      parameter {
        name: "cancellable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isPausable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPausable:"
      return_type: "V"
      parameter {
        name: "pausable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isCancelled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isPaused"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "cancellationHandler"
      return_type: "X(BlockPointer.void (^)(void))"
    }
    class_method: false
  }
  method {
    function {
      name: "setCancellationHandler:"
      return_type: "V"
      parameter {
        name: "cancellationHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pausingHandler"
      return_type: "X(BlockPointer.void (^)(void))"
    }
    class_method: false
  }
  method {
    function {
      name: "setPausingHandler:"
      return_type: "V"
      parameter {
        name: "pausingHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setUserInfoObject:forKey:"
      return_type: "V"
      parameter {
        name: "objectOrNil"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isIndeterminate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "fractionCompleted"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "cancel"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "pause"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "kind"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setKind:"
      return_type: "V"
      parameter {
        name: "kind"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "publish"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "unpublish"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "addSubscriberForFileURL:withPublishingHandler:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "publishingHandler"
        type: "X(BlockPointer.NSProgressUnpublishingHandler (^)(NSProgress *))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "removeSubscriber:"
      return_type: "V"
      parameter {
        name: "subscriber"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "isOld"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "totalUnitCount"
    type: "J"
  }
  property {
    name: "completedUnitCount"
    type: "J"
  }
  property {
    name: "localizedDescription"
    type: "LNSString;"
  }
  property {
    name: "localizedAdditionalDescription"
    type: "LNSString;"
  }
  property {
    name: "cancellable"
    type: "Z"
  }
  property {
    name: "pausable"
    type: "Z"
  }
  property {
    name: "cancelled"
    type: "Z"
  }
  property {
    name: "paused"
    type: "Z"
  }
  property {
    name: "cancellationHandler"
    type: "X(BlockPointer.void (^)(void))"
  }
  property {
    name: "pausingHandler"
    type: "X(BlockPointer.void (^)(void))"
  }
  property {
    name: "indeterminate"
    type: "Z"
  }
  property {
    name: "fractionCompleted"
    type: "D"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  property {
    name: "kind"
    type: "LNSString;"
  }
  property {
    name: "old"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSProgress.h"
}
class {
  name: "NSUbiquitousKeyValueStore"
  base_class: "NSObject"
  method {
    function {
      name: "defaultStore"
      return_type: "LNSUbiquitousKeyValueStore;"
    }
    class_method: true
  }
  method {
    function {
      name: "objectForKey:"
      return_type: "OI"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:forKey:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectForKey:"
      return_type: "V"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringForKey:"
      return_type: "LNSString;"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrayForKey:"
      return_type: "LNSArray;"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dictionaryForKey:"
      return_type: "LNSDictionary;"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataForKey:"
      return_type: "LNSData;"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "longLongForKey:"
      return_type: "J"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleForKey:"
      return_type: "D"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boolForKey:"
      return_type: "Z"
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setString:forKey:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setData:forKey:"
      return_type: "V"
      parameter {
        name: "aData"
        type: "LNSData;"
      }
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setArray:forKey:"
      return_type: "V"
      parameter {
        name: "anArray"
        type: "LNSArray;"
      }
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDictionary:forKey:"
      return_type: "V"
      parameter {
        name: "aDictionary"
        type: "LNSDictionary;"
      }
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLongLong:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "J"
      }
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDouble:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "D"
      }
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBool:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "Z"
      }
      parameter {
        name: "aKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dictionaryRepresentation"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "synchronize"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "dictionaryRepresentation"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUbiquitousKeyValueStore.h"
}
class {
  name: "NSUndoManager"
  base_class: "NSObject"
  method {
    function {
      name: "beginUndoGrouping"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "endUndoGrouping"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "groupingLevel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "disableUndoRegistration"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enableUndoRegistration"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isUndoRegistrationEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "groupsByEvent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setGroupsByEvent:"
      return_type: "V"
      parameter {
        name: "groupsByEvent"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "levelsOfUndo"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setLevelsOfUndo:"
      return_type: "V"
      parameter {
        name: "levelsOfUndo"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runLoopModes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRunLoopModes:"
      return_type: "V"
      parameter {
        name: "runLoopModes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "undo"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "redo"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "undoNestedGroup"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "canUndo"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "canRedo"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isUndoing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isRedoing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllActions"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllActionsWithTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerUndoWithTarget:selector:object:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "selector"
        type: "OS"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prepareWithInvocationTarget:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setActionIsDiscardable:"
      return_type: "V"
      parameter {
        name: "discardable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "undoActionIsDiscardable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "redoActionIsDiscardable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "undoActionName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "redoActionName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setActionName:"
      return_type: "V"
      parameter {
        name: "actionName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "undoMenuItemTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "redoMenuItemTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "undoMenuTitleForUndoActionName:"
      return_type: "LNSString;"
      parameter {
        name: "actionName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "redoMenuTitleForUndoActionName:"
      return_type: "LNSString;"
      parameter {
        name: "actionName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "groupingLevel"
    type: "I"
  }
  property {
    name: "undoRegistrationEnabled"
    type: "Z"
  }
  property {
    name: "groupsByEvent"
    type: "Z"
  }
  property {
    name: "levelsOfUndo"
    type: "UI"
  }
  property {
    name: "runLoopModes"
    type: "LNSArray;"
  }
  property {
    name: "canUndo"
    type: "Z"
  }
  property {
    name: "canRedo"
    type: "Z"
  }
  property {
    name: "undoing"
    type: "Z"
  }
  property {
    name: "redoing"
    type: "Z"
  }
  property {
    name: "undoActionIsDiscardable"
    type: "Z"
  }
  property {
    name: "redoActionIsDiscardable"
    type: "Z"
  }
  property {
    name: "undoActionName"
    type: "LNSString;"
  }
  property {
    name: "redoActionName"
    type: "LNSString;"
  }
  property {
    name: "undoMenuItemTitle"
    type: "LNSString;"
  }
  property {
    name: "redoMenuItemTitle"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUndoManager.h"
}
class {
  name: "NSURLSession"
  base_class: "NSObject"
  category: "NSURLSession+NSURLSessionAsynchronousConvenience"
  category: "NSURLSession+NSURLSessionDeprecated"
  method {
    function {
      name: "sharedSession"
      return_type: "LNSURLSession;"
    }
    class_method: true
  }
  method {
    function {
      name: "sessionWithConfiguration:"
      return_type: "LNSURLSession;"
      parameter {
        name: "configuration"
        type: "LNSURLSessionConfiguration;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "sessionWithConfiguration:delegate:delegateQueue:"
      return_type: "LNSURLSession;"
      parameter {
        name: "configuration"
        type: "LNSURLSessionConfiguration;"
      }
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSURLSessionDelegate>)"
      }
      parameter {
        name: "queue"
        type: "LNSOperationQueue;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "delegateQueue"
      return_type: "LNSOperationQueue;"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSURLSessionDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "configuration"
      return_type: "LNSURLSessionConfiguration;"
    }
    class_method: false
  }
  method {
    function {
      name: "sessionDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSessionDescription:"
      return_type: "V"
      parameter {
        name: "sessionDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "finishTasksAndInvalidate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateAndCancel"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resetWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "flushWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getTasksWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSArray *, NSArray *, NSArray *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataTaskWithRequest:"
      return_type: "LNSURLSessionDataTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataTaskWithURL:"
      return_type: "LNSURLSessionDataTask;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "uploadTaskWithRequest:fromFile:"
      return_type: "LNSURLSessionUploadTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "fileURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "uploadTaskWithRequest:fromData:"
      return_type: "LNSURLSessionUploadTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "bodyData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "uploadTaskWithStreamedRequest:"
      return_type: "LNSURLSessionUploadTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "downloadTaskWithRequest:"
      return_type: "LNSURLSessionDownloadTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "downloadTaskWithURL:"
      return_type: "LNSURLSessionDownloadTask;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "downloadTaskWithResumeData:"
      return_type: "LNSURLSessionDownloadTask;"
      parameter {
        name: "resumeData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  property {
    name: "delegateQueue"
    type: "LNSOperationQueue;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSURLSessionDelegate>)"
  }
  property {
    name: "configuration"
    type: "LNSURLSessionConfiguration;"
  }
  property {
    name: "sessionDescription"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
class {
  name: "NSURLSessionTask"
  base_class: "NSObject"
  protocol: "NSCopying"
  method {
    function {
      name: "taskIdentifier"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "originalRequest"
      return_type: "LNSURLRequest;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentRequest"
      return_type: "LNSURLRequest;"
    }
    class_method: false
  }
  method {
    function {
      name: "response"
      return_type: "LNSURLResponse;"
    }
    class_method: false
  }
  method {
    function {
      name: "countOfBytesReceived"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "countOfBytesSent"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "countOfBytesExpectedToSend"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "countOfBytesExpectedToReceive"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "taskDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTaskDescription:"
      return_type: "V"
      parameter {
        name: "taskDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancel"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "state"
      return_type: "X(Enum.enum NSURLSessionTaskState)"
    }
    class_method: false
  }
  method {
    function {
      name: "error"
      return_type: "LNSError;"
    }
    class_method: false
  }
  method {
    function {
      name: "suspend"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resume"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "priority"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setPriority:"
      return_type: "V"
      parameter {
        name: "priority"
        type: "F"
      }
    }
    class_method: false
  }
  property {
    name: "taskIdentifier"
    type: "UI"
  }
  property {
    name: "originalRequest"
    type: "LNSURLRequest;"
  }
  property {
    name: "currentRequest"
    type: "LNSURLRequest;"
  }
  property {
    name: "response"
    type: "LNSURLResponse;"
  }
  property {
    name: "countOfBytesReceived"
    type: "J"
  }
  property {
    name: "countOfBytesSent"
    type: "J"
  }
  property {
    name: "countOfBytesExpectedToSend"
    type: "J"
  }
  property {
    name: "countOfBytesExpectedToReceive"
    type: "J"
  }
  property {
    name: "taskDescription"
    type: "LNSString;"
  }
  property {
    name: "state"
    type: "X(Enum.enum NSURLSessionTaskState)"
  }
  property {
    name: "error"
    type: "LNSError;"
  }
  property {
    name: "priority"
    type: "F"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
class {
  name: "NSURLSessionDataTask"
  base_class: "NSURLSessionTask"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
class {
  name: "NSURLSessionUploadTask"
  base_class: "NSURLSessionDataTask"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
class {
  name: "NSURLSessionDownloadTask"
  base_class: "NSURLSessionTask"
  method {
    function {
      name: "cancelByProducingResumeData:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSData *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
class {
  name: "NSURLSessionConfiguration"
  base_class: "NSObject"
  protocol: "NSCopying"
  category: "NSURLSessionConfiguration+NSURLSessionDeprecated"
  method {
    function {
      name: "defaultSessionConfiguration"
      return_type: "LNSURLSessionConfiguration;"
    }
    class_method: true
  }
  method {
    function {
      name: "ephemeralSessionConfiguration"
      return_type: "LNSURLSessionConfiguration;"
    }
    class_method: true
  }
  method {
    function {
      name: "backgroundSessionConfigurationWithIdentifier:"
      return_type: "LNSURLSessionConfiguration;"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "requestCachePolicy"
      return_type: "X(Enum.enum NSURLRequestCachePolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "setRequestCachePolicy:"
      return_type: "V"
      parameter {
        name: "requestCachePolicy"
        type: "X(Enum.enum NSURLRequestCachePolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeoutIntervalForRequest"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeoutIntervalForRequest:"
      return_type: "V"
      parameter {
        name: "timeoutIntervalForRequest"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeoutIntervalForResource"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeoutIntervalForResource:"
      return_type: "V"
      parameter {
        name: "timeoutIntervalForResource"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "networkServiceType"
      return_type: "X(Enum.enum NSURLRequestNetworkServiceType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setNetworkServiceType:"
      return_type: "V"
      parameter {
        name: "networkServiceType"
        type: "X(Enum.enum NSURLRequestNetworkServiceType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsCellularAccess"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsCellularAccess:"
      return_type: "V"
      parameter {
        name: "allowsCellularAccess"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDiscretionary"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDiscretionary:"
      return_type: "V"
      parameter {
        name: "discretionary"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharedContainerIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSharedContainerIdentifier:"
      return_type: "V"
      parameter {
        name: "sharedContainerIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sessionSendsLaunchEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSessionSendsLaunchEvents:"
      return_type: "V"
      parameter {
        name: "sessionSendsLaunchEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connectionProxyDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setConnectionProxyDictionary:"
      return_type: "V"
      parameter {
        name: "connectionProxyDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "TLSMinimumSupportedProtocol"
      return_type: "X(Enum.SSLProtocol)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTLSMinimumSupportedProtocol:"
      return_type: "V"
      parameter {
        name: "TLSMinimumSupportedProtocol"
        type: "X(Enum.SSLProtocol)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "TLSMaximumSupportedProtocol"
      return_type: "X(Enum.SSLProtocol)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTLSMaximumSupportedProtocol:"
      return_type: "V"
      parameter {
        name: "TLSMaximumSupportedProtocol"
        type: "X(Enum.SSLProtocol)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPShouldUsePipelining"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPShouldUsePipelining:"
      return_type: "V"
      parameter {
        name: "HTTPShouldUsePipelining"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPShouldSetCookies"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPShouldSetCookies:"
      return_type: "V"
      parameter {
        name: "HTTPShouldSetCookies"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPCookieAcceptPolicy"
      return_type: "X(Enum.enum NSHTTPCookieAcceptPolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPCookieAcceptPolicy:"
      return_type: "V"
      parameter {
        name: "HTTPCookieAcceptPolicy"
        type: "X(Enum.enum NSHTTPCookieAcceptPolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPAdditionalHeaders"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPAdditionalHeaders:"
      return_type: "V"
      parameter {
        name: "HTTPAdditionalHeaders"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPMaximumConnectionsPerHost"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPMaximumConnectionsPerHost:"
      return_type: "V"
      parameter {
        name: "HTTPMaximumConnectionsPerHost"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPCookieStorage"
      return_type: "LNSHTTPCookieStorage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPCookieStorage:"
      return_type: "V"
      parameter {
        name: "HTTPCookieStorage"
        type: "LNSHTTPCookieStorage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLCredentialStorage"
      return_type: "LNSURLCredentialStorage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setURLCredentialStorage:"
      return_type: "V"
      parameter {
        name: "URLCredentialStorage"
        type: "LNSURLCredentialStorage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLCache"
      return_type: "LNSURLCache;"
    }
    class_method: false
  }
  method {
    function {
      name: "setURLCache:"
      return_type: "V"
      parameter {
        name: "URLCache"
        type: "LNSURLCache;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "protocolClasses"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setProtocolClasses:"
      return_type: "V"
      parameter {
        name: "protocolClasses"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  property {
    name: "requestCachePolicy"
    type: "X(Enum.enum NSURLRequestCachePolicy)"
  }
  property {
    name: "timeoutIntervalForRequest"
    type: "D"
  }
  property {
    name: "timeoutIntervalForResource"
    type: "D"
  }
  property {
    name: "networkServiceType"
    type: "X(Enum.enum NSURLRequestNetworkServiceType)"
  }
  property {
    name: "allowsCellularAccess"
    type: "Z"
  }
  property {
    name: "discretionary"
    type: "Z"
  }
  property {
    name: "sharedContainerIdentifier"
    type: "LNSString;"
  }
  property {
    name: "sessionSendsLaunchEvents"
    type: "Z"
  }
  property {
    name: "connectionProxyDictionary"
    type: "LNSDictionary;"
  }
  property {
    name: "TLSMinimumSupportedProtocol"
    type: "X(Enum.SSLProtocol)"
  }
  property {
    name: "TLSMaximumSupportedProtocol"
    type: "X(Enum.SSLProtocol)"
  }
  property {
    name: "HTTPShouldUsePipelining"
    type: "Z"
  }
  property {
    name: "HTTPShouldSetCookies"
    type: "Z"
  }
  property {
    name: "HTTPCookieAcceptPolicy"
    type: "X(Enum.enum NSHTTPCookieAcceptPolicy)"
  }
  property {
    name: "HTTPAdditionalHeaders"
    type: "LNSDictionary;"
  }
  property {
    name: "HTTPMaximumConnectionsPerHost"
    type: "I"
  }
  property {
    name: "HTTPCookieStorage"
    type: "LNSHTTPCookieStorage;"
  }
  property {
    name: "URLCredentialStorage"
    type: "LNSURLCredentialStorage;"
  }
  property {
    name: "URLCache"
    type: "LNSURLCache;"
  }
  property {
    name: "protocolClasses"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
class {
  name: "NSUserActivity"
  base_class: "NSObject"
  method {
    function {
      name: "initWithActivityType:"
      return_type: "OI"
      parameter {
        name: "activityType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "activityType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserInfo:"
      return_type: "V"
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addUserInfoEntriesFromDictionary:"
      return_type: "V"
      parameter {
        name: "otherDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "needsSave"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsSave:"
      return_type: "V"
      parameter {
        name: "needsSave"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "webpageURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setWebpageURL:"
      return_type: "V"
      parameter {
        name: "webpageURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "supportsContinuationStreams"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSupportsContinuationStreams:"
      return_type: "V"
      parameter {
        name: "supportsContinuationStreams"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSUserActivityDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSUserActivityDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "becomeCurrent"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "getContinuationStreamsWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSInputStream *, NSOutputStream *, NSError *))"
      }
    }
    class_method: false
  }
  property {
    name: "activityType"
    type: "LNSString;"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  property {
    name: "needsSave"
    type: "Z"
  }
  property {
    name: "webpageURL"
    type: "LNSURL;"
  }
  property {
    name: "supportsContinuationStreams"
    type: "Z"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSUserActivityDelegate>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserActivity.h"
}
class {
  name: "NSUUID"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "UUID"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUUIDString:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUUIDBytes:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "cX(ConstantArray.unsigned char [16])"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getUUIDBytes:"
      return_type: "V"
      parameter {
        name: "uuid"
        type: "X(ConstantArray.unsigned char [16])"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "UUIDString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "UUIDString"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUUID.h"
}
class {
  name: "NSArchiver"
  base_class: "NSCoder"
  method {
    function {
      name: "initForWritingWithMutableData:"
      return_type: "OI"
      parameter {
        name: "mdata"
        type: "LNSMutableData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "archiverData"
      return_type: "LNSMutableData;"
    }
    class_method: false
  }
  method {
    function {
      name: "encodeRootObject:"
      return_type: "V"
      parameter {
        name: "rootObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeConditionalObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "archivedDataWithRootObject:"
      return_type: "LNSData;"
      parameter {
        name: "rootObject"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "archiveRootObject:toFile:"
      return_type: "Z"
      parameter {
        name: "rootObject"
        type: "OI"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "encodeClassName:intoClassName:"
      return_type: "V"
      parameter {
        name: "trueName"
        type: "LNSString;"
      }
      parameter {
        name: "inArchiveName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classNameEncodedForTrueClassName:"
      return_type: "LNSString;"
      parameter {
        name: "trueName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObject:withObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "newObject"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "archiverData"
    type: "LNSMutableData;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArchiver.h"
}
class {
  name: "NSUnarchiver"
  base_class: "NSCoder"
  method {
    function {
      name: "initForReadingWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectZone:"
      return_type: "V"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectZone"
      return_type: "*R_NSZone;;"
    }
    class_method: false
  }
  method {
    function {
      name: "isAtEnd"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "systemVersion"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "unarchiveObjectWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "unarchiveObjectWithFile:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "decodeClassName:asClassName:"
      return_type: "V"
      parameter {
        name: "inArchiveName"
        type: "LNSString;"
      }
      parameter {
        name: "trueName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "decodeClassName:asClassName:"
      return_type: "V"
      parameter {
        name: "inArchiveName"
        type: "LNSString;"
      }
      parameter {
        name: "trueName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classNameDecodedForArchiveClassName:"
      return_type: "LNSString;"
      parameter {
        name: "inArchiveName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "classNameDecodedForArchiveClassName:"
      return_type: "LNSString;"
      parameter {
        name: "inArchiveName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObject:withObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "newObject"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "atEnd"
    type: "Z"
  }
  property {
    name: "systemVersion"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArchiver.h"
}
class {
  name: "NSBackgroundActivityScheduler"
  base_class: "NSObject"
  method {
    function {
      name: "initWithIdentifier:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "qualityOfService"
      return_type: "X(Enum.enum NSQualityOfService)"
    }
    class_method: false
  }
  method {
    function {
      name: "setQualityOfService:"
      return_type: "V"
      parameter {
        name: "qualityOfService"
        type: "X(Enum.enum NSQualityOfService)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "repeats"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepeats:"
      return_type: "V"
      parameter {
        name: "repeats"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "interval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setInterval:"
      return_type: "V"
      parameter {
        name: "interval"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tolerance"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTolerance:"
      return_type: "V"
      parameter {
        name: "tolerance"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleWithBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSBackgroundActivityCompletionHandler))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "shouldDefer"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  property {
    name: "qualityOfService"
    type: "X(Enum.enum NSQualityOfService)"
  }
  property {
    name: "repeats"
    type: "Z"
  }
  property {
    name: "interval"
    type: "D"
  }
  property {
    name: "tolerance"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSBackgroundActivityScheduler.h"
}
class {
  name: "NSCalendarDate"
  base_class: "NSDate"
  method {
    function {
      name: "calendarDate"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithString:calendarFormat:locale:"
      return_type: "OI"
      parameter {
        name: "description"
        type: "LNSString;"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithString:calendarFormat:"
      return_type: "OI"
      parameter {
        name: "description"
        type: "LNSString;"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithYear:month:day:hour:minute:second:timeZone:"
      return_type: "OI"
      parameter {
        name: "year"
        type: "I"
      }
      parameter {
        name: "month"
        type: "UI"
      }
      parameter {
        name: "day"
        type: "UI"
      }
      parameter {
        name: "hour"
        type: "UI"
      }
      parameter {
        name: "minute"
        type: "UI"
      }
      parameter {
        name: "second"
        type: "UI"
      }
      parameter {
        name: "aTimeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateByAddingYears:months:days:hours:minutes:seconds:"
      return_type: "LNSCalendarDate;"
      parameter {
        name: "year"
        type: "I"
      }
      parameter {
        name: "month"
        type: "I"
      }
      parameter {
        name: "day"
        type: "I"
      }
      parameter {
        name: "hour"
        type: "I"
      }
      parameter {
        name: "minute"
        type: "I"
      }
      parameter {
        name: "second"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dayOfCommonEra"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "dayOfMonth"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "dayOfWeek"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "dayOfYear"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "hourOfDay"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "minuteOfHour"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "monthOfYear"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "secondOfMinute"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "yearOfCommonEra"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "calendarFormat"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithCalendarFormat:locale:"
      return_type: "LNSString;"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithCalendarFormat:"
      return_type: "LNSString;"
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:calendarFormat:locale:"
      return_type: "OI"
      parameter {
        name: "description"
        type: "LNSString;"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:calendarFormat:"
      return_type: "OI"
      parameter {
        name: "description"
        type: "LNSString;"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "description"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithYear:month:day:hour:minute:second:timeZone:"
      return_type: "OI"
      parameter {
        name: "year"
        type: "I"
      }
      parameter {
        name: "month"
        type: "UI"
      }
      parameter {
        name: "day"
        type: "UI"
      }
      parameter {
        name: "hour"
        type: "UI"
      }
      parameter {
        name: "minute"
        type: "UI"
      }
      parameter {
        name: "second"
        type: "UI"
      }
      parameter {
        name: "aTimeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCalendarFormat:"
      return_type: "V"
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeZone:"
      return_type: "V"
      parameter {
        name: "aTimeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "years:months:days:hours:minutes:seconds:sinceDate:"
      return_type: "V"
      parameter {
        name: "yp"
        type: "*I;"
      }
      parameter {
        name: "mop"
        type: "*I;"
      }
      parameter {
        name: "dp"
        type: "*I;"
      }
      parameter {
        name: "hp"
        type: "*I;"
      }
      parameter {
        name: "mip"
        type: "*I;"
      }
      parameter {
        name: "sp"
        type: "*I;"
      }
      parameter {
        name: "date"
        type: "LNSCalendarDate;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCalendarDate.h"
}
class {
  name: "NSConnection"
  base_class: "NSObject"
  method {
    function {
      name: "statistics"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "allConnections"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "defaultConnection"
      return_type: "LNSConnection;"
    }
    class_method: true
  }
  method {
    function {
      name: "connectionWithRegisteredName:host:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "hostName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "connectionWithRegisteredName:host:usingNameServer:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "hostName"
        type: "LNSString;"
      }
      parameter {
        name: "server"
        type: "LNSPortNameServer;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "rootProxyForConnectionWithRegisteredName:host:"
      return_type: "LNSDistantObject;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "hostName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "rootProxyForConnectionWithRegisteredName:host:usingNameServer:"
      return_type: "LNSDistantObject;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "hostName"
        type: "LNSString;"
      }
      parameter {
        name: "server"
        type: "LNSPortNameServer;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "serviceConnectionWithName:rootObject:usingNameServer:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "root"
        type: "OI"
      }
      parameter {
        name: "server"
        type: "LNSPortNameServer;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "serviceConnectionWithName:rootObject:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "root"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "requestTimeout"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRequestTimeout:"
      return_type: "V"
      parameter {
        name: "requestTimeout"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replyTimeout"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setReplyTimeout:"
      return_type: "V"
      parameter {
        name: "replyTimeout"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rootObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setRootObject:"
      return_type: "V"
      parameter {
        name: "rootObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSConnectionDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSConnectionDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "independentConversationQueueing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndependentConversationQueueing:"
      return_type: "V"
      parameter {
        name: "independentConversationQueueing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isValid"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "rootProxy"
      return_type: "LNSDistantObject;"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "addRequestMode:"
      return_type: "V"
      parameter {
        name: "rmode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeRequestMode:"
      return_type: "V"
      parameter {
        name: "rmode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "requestModes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "registerName:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerName:withNameServer:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "server"
        type: "LNSPortNameServer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connectionWithReceivePort:sendPort:"
      return_type: "OI"
      parameter {
        name: "receivePort"
        type: "LNSPort;"
      }
      parameter {
        name: "sendPort"
        type: "LNSPort;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "currentConversation"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithReceivePort:sendPort:"
      return_type: "OI"
      parameter {
        name: "receivePort"
        type: "LNSPort;"
      }
      parameter {
        name: "sendPort"
        type: "LNSPort;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendPort"
      return_type: "LNSPort;"
    }
    class_method: false
  }
  method {
    function {
      name: "receivePort"
      return_type: "LNSPort;"
    }
    class_method: false
  }
  method {
    function {
      name: "enableMultipleThreads"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "multipleThreadsEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "addRunLoop:"
      return_type: "V"
      parameter {
        name: "runloop"
        type: "LNSRunLoop;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeRunLoop:"
      return_type: "V"
      parameter {
        name: "runloop"
        type: "LNSRunLoop;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runInNewThread"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "remoteObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "localObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "dispatchWithComponents:"
      return_type: "V"
      parameter {
        name: "components"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "statistics"
    type: "LNSDictionary;"
  }
  property {
    name: "requestTimeout"
    type: "D"
  }
  property {
    name: "replyTimeout"
    type: "D"
  }
  property {
    name: "rootObject"
    type: "OI"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSConnectionDelegate>)"
  }
  property {
    name: "independentConversationQueueing"
    type: "Z"
  }
  property {
    name: "valid"
    type: "Z"
  }
  property {
    name: "rootProxy"
    type: "LNSDistantObject;"
  }
  property {
    name: "requestModes"
    type: "LNSArray;"
  }
  property {
    name: "sendPort"
    type: "LNSPort;"
  }
  property {
    name: "receivePort"
    type: "LNSPort;"
  }
  property {
    name: "multipleThreadsEnabled"
    type: "Z"
  }
  property {
    name: "remoteObjects"
    type: "LNSArray;"
  }
  property {
    name: "localObjects"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSConnection.h"
}
class {
  name: "NSDistantObjectRequest"
  base_class: "NSObject"
  method {
    function {
      name: "invocation"
      return_type: "LNSInvocation;"
    }
    class_method: false
  }
  method {
    function {
      name: "connection"
      return_type: "LNSConnection;"
    }
    class_method: false
  }
  method {
    function {
      name: "conversation"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "replyWithException:"
      return_type: "V"
      parameter {
        name: "exception"
        type: "LNSException;"
      }
    }
    class_method: false
  }
  property {
    name: "invocation"
    type: "LNSInvocation;"
  }
  property {
    name: "connection"
    type: "LNSConnection;"
  }
  property {
    name: "conversation"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSConnection.h"
}
class {
  name: "NSDistantObject"
  base_class: "NSProxy"
  protocol: "NSCoding"
  method {
    function {
      name: "proxyWithTarget:connection:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "connection"
        type: "LNSConnection;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithTarget:connection:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "connection"
        type: "LNSConnection;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "proxyWithLocal:connection:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "connection"
        type: "LNSConnection;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithLocal:connection:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "connection"
        type: "LNSConnection;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setProtocolForProxy:"
      return_type: "V"
      parameter {
        name: "proto"
        type: "LProtocol;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connectionForProxy"
      return_type: "LNSConnection;"
    }
    class_method: false
  }
  property {
    name: "connectionForProxy"
    type: "LNSConnection;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDistantObject.h"
}
class {
  name: "NSDistributedNotificationCenter"
  base_class: "NSNotificationCenter"
  method {
    function {
      name: "notificationCenterForType:"
      return_type: "LNSDistributedNotificationCenter;"
      parameter {
        name: "notificationCenterType"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultCenter"
      return_type: "LNSDistributedNotificationCenter;"
    }
    class_method: true
  }
  method {
    function {
      name: "addObserver:selector:name:object:suspensionBehavior:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "OI"
      }
      parameter {
        name: "selector"
        type: "OS"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "object"
        type: "LNSString;"
      }
      parameter {
        name: "suspensionBehavior"
        type: "X(Enum.enum NSNotificationSuspensionBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postNotificationName:object:userInfo:deliverImmediately:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "object"
        type: "LNSString;"
      }
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
      parameter {
        name: "deliverImmediately"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postNotificationName:object:userInfo:options:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "object"
        type: "LNSString;"
      }
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "suspended"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSuspended:"
      return_type: "V"
      parameter {
        name: "suspended"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addObserver:selector:name:object:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "OI"
      }
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postNotificationName:object:"
      return_type: "V"
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postNotificationName:object:userInfo:"
      return_type: "V"
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "LNSString;"
      }
      parameter {
        name: "aUserInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:name:object:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "OI"
      }
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "suspended"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDistributedNotificationCenter.h"
}
class {
  name: "NSPortCoder"
  base_class: "NSCoder"
  method {
    function {
      name: "isBycopy"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isByref"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "encodePortObject:"
      return_type: "V"
      parameter {
        name: "aport"
        type: "LNSPort;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodePortObject"
      return_type: "LNSPort;"
    }
    class_method: false
  }
  method {
    function {
      name: "connection"
      return_type: "LNSConnection;"
    }
    class_method: false
  }
  method {
    function {
      name: "portCoderWithReceivePort:sendPort:components:"
      return_type: "OI"
      parameter {
        name: "rcvPort"
        type: "LNSPort;"
      }
      parameter {
        name: "sndPort"
        type: "LNSPort;"
      }
      parameter {
        name: "comps"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithReceivePort:sendPort:components:"
      return_type: "OI"
      parameter {
        name: "rcvPort"
        type: "LNSPort;"
      }
      parameter {
        name: "sndPort"
        type: "LNSPort;"
      }
      parameter {
        name: "comps"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dispatch"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPortCoder.h"
}
class {
  name: "NSPortMessage"
  base_class: "NSObject"
  method {
    function {
      name: "initWithSendPort:receivePort:components:"
      return_type: "OI"
      parameter {
        name: "sendPort"
        type: "LNSPort;"
      }
      parameter {
        name: "replyPort"
        type: "LNSPort;"
      }
      parameter {
        name: "components"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "components"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "receivePort"
      return_type: "LNSPort;"
    }
    class_method: false
  }
  method {
    function {
      name: "sendPort"
      return_type: "LNSPort;"
    }
    class_method: false
  }
  method {
    function {
      name: "sendBeforeDate:"
      return_type: "Z"
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "msgid"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMsgid:"
      return_type: "V"
      parameter {
        name: "msgid"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "components"
    type: "LNSArray;"
  }
  property {
    name: "receivePort"
    type: "LNSPort;"
  }
  property {
    name: "sendPort"
    type: "LNSPort;"
  }
  property {
    name: "msgid"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPortMessage.h"
}
class {
  name: "NSPortNameServer"
  base_class: "NSObject"
  method {
    function {
      name: "systemDefaultPortNameServer"
      return_type: "LNSPortNameServer;"
    }
    class_method: true
  }
  method {
    function {
      name: "portForName:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "portForName:host:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "host"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerPort:name:"
      return_type: "Z"
      parameter {
        name: "port"
        type: "LNSPort;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removePortForName:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPortNameServer.h"
}
class {
  name: "NSMachBootstrapServer"
  base_class: "NSPortNameServer"
  method {
    function {
      name: "sharedInstance"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "portForName:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "portForName:host:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "host"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerPort:name:"
      return_type: "Z"
      parameter {
        name: "port"
        type: "LNSPort;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "servicePortWithName:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPortNameServer.h"
}
class {
  name: "NSMessagePortNameServer"
  base_class: "NSPortNameServer"
  method {
    function {
      name: "sharedInstance"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "portForName:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "portForName:host:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "host"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPortNameServer.h"
}
class {
  name: "NSSocketPortNameServer"
  base_class: "NSPortNameServer"
  method {
    function {
      name: "sharedInstance"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "portForName:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "portForName:host:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "host"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerPort:name:"
      return_type: "Z"
      parameter {
        name: "port"
        type: "LNSPort;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removePortForName:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "portForName:host:nameServerPortNumber:"
      return_type: "LNSPort;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "host"
        type: "LNSString;"
      }
      parameter {
        name: "portNumber"
        type: "US"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerPort:name:nameServerPortNumber:"
      return_type: "Z"
      parameter {
        name: "port"
        type: "LNSPort;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "portNumber"
        type: "US"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultNameServerPortNumber"
      return_type: "US"
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultNameServerPortNumber:"
      return_type: "V"
      parameter {
        name: "defaultNameServerPortNumber"
        type: "US"
      }
    }
    class_method: false
  }
  property {
    name: "defaultNameServerPortNumber"
    type: "US"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPortNameServer.h"
}
class {
  name: "NSProtocolChecker"
  base_class: "NSProxy"
  category: "NSProtocolChecker+NSProtocolCheckerCreation"
  method {
    function {
      name: "protocol"
      return_type: "LProtocol;"
    }
    class_method: false
  }
  method {
    function {
      name: "target"
      return_type: "LNSObject;"
    }
    class_method: false
  }
  property {
    name: "protocol"
    type: "LProtocol;"
  }
  property {
    name: "target"
    type: "LNSObject;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSProtocolChecker.h"
}
class {
  name: "NSTask"
  base_class: "NSObject"
  category: "NSTask+NSTaskConveniences"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "launchPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLaunchPath:"
      return_type: "V"
      parameter {
        name: "launchPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arguments"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setArguments:"
      return_type: "V"
      parameter {
        name: "arguments"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "environment"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnvironment:"
      return_type: "V"
      parameter {
        name: "environment"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentDirectoryPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrentDirectoryPath:"
      return_type: "V"
      parameter {
        name: "currentDirectoryPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "standardInput"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandardInput:"
      return_type: "V"
      parameter {
        name: "standardInput"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "standardOutput"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandardOutput:"
      return_type: "V"
      parameter {
        name: "standardOutput"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "standardError"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandardError:"
      return_type: "V"
      parameter {
        name: "standardError"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "launch"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "interrupt"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "terminate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "suspend"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "resume"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "processIdentifier"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "isRunning"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "terminationStatus"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "terminationReason"
      return_type: "X(Enum.enum NSTaskTerminationReason)"
    }
    class_method: false
  }
  method {
    function {
      name: "terminationHandler"
      return_type: "X(BlockPointer.void (^)(NSTask *))"
    }
    class_method: false
  }
  method {
    function {
      name: "setTerminationHandler:"
      return_type: "V"
      parameter {
        name: "terminationHandler"
        type: "X(BlockPointer.void (^)(NSTask *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "qualityOfService"
      return_type: "X(Enum.enum NSQualityOfService)"
    }
    class_method: false
  }
  method {
    function {
      name: "setQualityOfService:"
      return_type: "V"
      parameter {
        name: "qualityOfService"
        type: "X(Enum.enum NSQualityOfService)"
      }
    }
    class_method: false
  }
  property {
    name: "launchPath"
    type: "LNSString;"
  }
  property {
    name: "arguments"
    type: "LNSArray;"
  }
  property {
    name: "environment"
    type: "LNSDictionary;"
  }
  property {
    name: "currentDirectoryPath"
    type: "LNSString;"
  }
  property {
    name: "standardInput"
    type: "OI"
  }
  property {
    name: "standardOutput"
    type: "OI"
  }
  property {
    name: "standardError"
    type: "OI"
  }
  property {
    name: "processIdentifier"
    type: "I"
  }
  property {
    name: "running"
    type: "Z"
  }
  property {
    name: "terminationStatus"
    type: "I"
  }
  property {
    name: "terminationReason"
    type: "X(Enum.enum NSTaskTerminationReason)"
  }
  property {
    name: "terminationHandler"
    type: "X(BlockPointer.void (^)(NSTask *))"
  }
  property {
    name: "qualityOfService"
    type: "X(Enum.enum NSQualityOfService)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTask.h"
}
class {
  name: "NSXMLNode"
  base_class: "NSObject"
  protocol: "NSCopying"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithKind:"
      return_type: "OI"
      parameter {
        name: "kind"
        type: "X(Enum.enum NSXMLNodeKind)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithKind:options:"
      return_type: "OI"
      parameter {
        name: "kind"
        type: "X(Enum.enum NSXMLNodeKind)"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "document"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "documentWithRootElement:"
      return_type: "OI"
      parameter {
        name: "element"
        type: "LNSXMLElement;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "elementWithName:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "elementWithName:URI:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "URI"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "elementWithName:stringValue:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "elementWithName:children:attributes:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "children"
        type: "LNSArray;"
      }
      parameter {
        name: "attributes"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "attributeWithName:stringValue:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "attributeWithName:URI:stringValue:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "URI"
        type: "LNSString;"
      }
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "namespaceWithName:stringValue:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "processingInstructionWithName:stringValue:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "commentWithStringValue:"
      return_type: "OI"
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "textWithStringValue:"
      return_type: "OI"
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "DTDNodeWithXMLString:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "kind"
      return_type: "X(Enum.enum NSXMLNodeKind)"
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectValue:"
      return_type: "V"
      parameter {
        name: "objectValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStringValue:"
      return_type: "V"
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setStringValue:resolvingEntities:"
      return_type: "V"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "resolve"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "index"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "level"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "rootDocument"
      return_type: "LNSXMLDocument;"
    }
    class_method: false
  }
  method {
    function {
      name: "parent"
      return_type: "LNSXMLNode;"
    }
    class_method: false
  }
  method {
    function {
      name: "childCount"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "children"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "childAtIndex:"
      return_type: "LNSXMLNode;"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "previousSibling"
      return_type: "LNSXMLNode;"
    }
    class_method: false
  }
  method {
    function {
      name: "nextSibling"
      return_type: "LNSXMLNode;"
    }
    class_method: false
  }
  method {
    function {
      name: "previousNode"
      return_type: "LNSXMLNode;"
    }
    class_method: false
  }
  method {
    function {
      name: "nextNode"
      return_type: "LNSXMLNode;"
    }
    class_method: false
  }
  method {
    function {
      name: "detach"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "XPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "localName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "prefix"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "URI"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setURI:"
      return_type: "V"
      parameter {
        name: "URI"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localNameForName:"
      return_type: "LNSString;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "prefixForName:"
      return_type: "LNSString;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "predefinedNamespaceForPrefix:"
      return_type: "LNSXMLNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "XMLString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "XMLStringWithOptions:"
      return_type: "LNSString;"
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canonicalXMLStringPreservingComments:"
      return_type: "LNSString;"
      parameter {
        name: "comments"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nodesForXPath:error:"
      return_type: "LNSArray;"
      parameter {
        name: "xpath"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectsForXQuery:constants:error:"
      return_type: "LNSArray;"
      parameter {
        name: "xquery"
        type: "LNSString;"
      }
      parameter {
        name: "constants"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectsForXQuery:error:"
      return_type: "LNSArray;"
      parameter {
        name: "xquery"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  property {
    name: "kind"
    type: "X(Enum.enum NSXMLNodeKind)"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "objectValue"
    type: "OI"
  }
  property {
    name: "stringValue"
    type: "LNSString;"
  }
  property {
    name: "index"
    type: "UI"
  }
  property {
    name: "level"
    type: "UI"
  }
  property {
    name: "rootDocument"
    type: "LNSXMLDocument;"
  }
  property {
    name: "parent"
    type: "LNSXMLNode;"
  }
  property {
    name: "childCount"
    type: "UI"
  }
  property {
    name: "children"
    type: "LNSArray;"
  }
  property {
    name: "previousSibling"
    type: "LNSXMLNode;"
  }
  property {
    name: "nextSibling"
    type: "LNSXMLNode;"
  }
  property {
    name: "previousNode"
    type: "LNSXMLNode;"
  }
  property {
    name: "nextNode"
    type: "LNSXMLNode;"
  }
  property {
    name: "XPath"
    type: "LNSString;"
  }
  property {
    name: "localName"
    type: "LNSString;"
  }
  property {
    name: "prefix"
    type: "LNSString;"
  }
  property {
    name: "URI"
    type: "LNSString;"
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  property {
    name: "XMLString"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLNode.h"
}
class {
  name: "NSXMLDTD"
  base_class: "NSXMLNode"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithKind:options:"
      return_type: "OI"
      parameter {
        name: "kind"
        type: "X(Enum.enum NSXMLNodeKind)"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:options:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:options:error:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "publicID"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPublicID:"
      return_type: "V"
      parameter {
        name: "publicID"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "systemID"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSystemID:"
      return_type: "V"
      parameter {
        name: "systemID"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertChild:atIndex:"
      return_type: "V"
      parameter {
        name: "child"
        type: "LNSXMLNode;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertChildren:atIndex:"
      return_type: "V"
      parameter {
        name: "children"
        type: "LNSArray;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeChildAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setChildren:"
      return_type: "V"
      parameter {
        name: "children"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addChild:"
      return_type: "V"
      parameter {
        name: "child"
        type: "LNSXMLNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceChildAtIndex:withNode:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "node"
        type: "LNSXMLNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "entityDeclarationForName:"
      return_type: "LNSXMLDTDNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "notationDeclarationForName:"
      return_type: "LNSXMLDTDNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "elementDeclarationForName:"
      return_type: "LNSXMLDTDNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributeDeclarationForName:elementName:"
      return_type: "LNSXMLDTDNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "elementName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "predefinedEntityDeclarationForName:"
      return_type: "LNSXMLDTDNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  property {
    name: "publicID"
    type: "LNSString;"
  }
  property {
    name: "systemID"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLDTD.h"
}
class {
  name: "NSXMLDTDNode"
  base_class: "NSXMLNode"
  method {
    function {
      name: "initWithXMLString:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithKind:options:"
      return_type: "OI"
      parameter {
        name: "kind"
        type: "X(Enum.enum NSXMLNodeKind)"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "DTDKind"
      return_type: "X(Enum.enum NSXMLDTDNodeKind)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDTDKind:"
      return_type: "V"
      parameter {
        name: "DTDKind"
        type: "X(Enum.enum NSXMLDTDNodeKind)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isExternal"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "publicID"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPublicID:"
      return_type: "V"
      parameter {
        name: "publicID"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "systemID"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSystemID:"
      return_type: "V"
      parameter {
        name: "systemID"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "notationName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNotationName:"
      return_type: "V"
      parameter {
        name: "notationName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "DTDKind"
    type: "X(Enum.enum NSXMLDTDNodeKind)"
  }
  property {
    name: "external"
    type: "Z"
  }
  property {
    name: "publicID"
    type: "LNSString;"
  }
  property {
    name: "systemID"
    type: "LNSString;"
  }
  property {
    name: "notationName"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLDTDNode.h"
}
class {
  name: "NSXMLDocument"
  base_class: "NSXMLNode"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithXMLString:options:error:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:options:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:options:error:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithRootElement:"
      return_type: "OI"
      parameter {
        name: "element"
        type: "LNSXMLElement;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replacementClassForClass:"
      return_type: "OC"
      parameter {
        name: "cls"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "characterEncoding"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCharacterEncoding:"
      return_type: "V"
      parameter {
        name: "characterEncoding"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "version"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVersion:"
      return_type: "V"
      parameter {
        name: "version"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isStandalone"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandalone:"
      return_type: "V"
      parameter {
        name: "standalone"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documentContentKind"
      return_type: "X(Enum.enum NSXMLDocumentContentKind)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDocumentContentKind:"
      return_type: "V"
      parameter {
        name: "documentContentKind"
        type: "X(Enum.enum NSXMLDocumentContentKind)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "MIMEType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMIMEType:"
      return_type: "V"
      parameter {
        name: "MIMEType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "DTD"
      return_type: "LNSXMLDTD;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDTD:"
      return_type: "V"
      parameter {
        name: "DTD"
        type: "LNSXMLDTD;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setRootElement:"
      return_type: "V"
      parameter {
        name: "root"
        type: "LNSXMLElement;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rootElement"
      return_type: "LNSXMLElement;"
    }
    class_method: false
  }
  method {
    function {
      name: "insertChild:atIndex:"
      return_type: "V"
      parameter {
        name: "child"
        type: "LNSXMLNode;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertChildren:atIndex:"
      return_type: "V"
      parameter {
        name: "children"
        type: "LNSArray;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeChildAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setChildren:"
      return_type: "V"
      parameter {
        name: "children"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addChild:"
      return_type: "V"
      parameter {
        name: "child"
        type: "LNSXMLNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceChildAtIndex:withNode:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "node"
        type: "LNSXMLNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "XMLData"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "XMLDataWithOptions:"
      return_type: "LNSData;"
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectByApplyingXSLT:arguments:error:"
      return_type: "OI"
      parameter {
        name: "xslt"
        type: "LNSData;"
      }
      parameter {
        name: "arguments"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectByApplyingXSLTString:arguments:error:"
      return_type: "OI"
      parameter {
        name: "xslt"
        type: "LNSString;"
      }
      parameter {
        name: "arguments"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectByApplyingXSLTAtURL:arguments:error:"
      return_type: "OI"
      parameter {
        name: "xsltURL"
        type: "LNSURL;"
      }
      parameter {
        name: "argument"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validateAndReturnError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  property {
    name: "characterEncoding"
    type: "LNSString;"
  }
  property {
    name: "version"
    type: "LNSString;"
  }
  property {
    name: "standalone"
    type: "Z"
  }
  property {
    name: "documentContentKind"
    type: "X(Enum.enum NSXMLDocumentContentKind)"
  }
  property {
    name: "MIMEType"
    type: "LNSString;"
  }
  property {
    name: "DTD"
    type: "LNSXMLDTD;"
  }
  property {
    name: "XMLData"
    type: "LNSData;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLDocument.h"
}
class {
  name: "NSXMLElement"
  base_class: "NSXMLNode"
  category: "NSXMLElement+NSDeprecated"
  method {
    function {
      name: "initWithName:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithName:URI:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "URI"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithName:stringValue:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithXMLString:error:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithKind:options:"
      return_type: "OI"
      parameter {
        name: "kind"
        type: "X(Enum.enum NSXMLNodeKind)"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "elementsForName:"
      return_type: "LNSArray;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "elementsForLocalName:URI:"
      return_type: "LNSArray;"
      parameter {
        name: "localName"
        type: "LNSString;"
      }
      parameter {
        name: "URI"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addAttribute:"
      return_type: "V"
      parameter {
        name: "attribute"
        type: "LNSXMLNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAttributeForName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributes:"
      return_type: "V"
      parameter {
        name: "attributes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributesWithDictionary:"
      return_type: "V"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributeForName:"
      return_type: "LNSXMLNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributeForLocalName:URI:"
      return_type: "LNSXMLNode;"
      parameter {
        name: "localName"
        type: "LNSString;"
      }
      parameter {
        name: "URI"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addNamespace:"
      return_type: "V"
      parameter {
        name: "aNamespace"
        type: "LNSXMLNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeNamespaceForPrefix:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "namespaces"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNamespaces:"
      return_type: "V"
      parameter {
        name: "namespaces"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "namespaceForPrefix:"
      return_type: "LNSXMLNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resolveNamespaceForName:"
      return_type: "LNSXMLNode;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resolvePrefixForNamespaceURI:"
      return_type: "LNSString;"
      parameter {
        name: "namespaceURI"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertChild:atIndex:"
      return_type: "V"
      parameter {
        name: "child"
        type: "LNSXMLNode;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertChildren:atIndex:"
      return_type: "V"
      parameter {
        name: "children"
        type: "LNSArray;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeChildAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setChildren:"
      return_type: "V"
      parameter {
        name: "children"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addChild:"
      return_type: "V"
      parameter {
        name: "child"
        type: "LNSXMLNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceChildAtIndex:withNode:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "node"
        type: "LNSXMLNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "normalizeAdjacentTextNodesPreservingCDATA:"
      return_type: "V"
      parameter {
        name: "preserve"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "attributes"
    type: "LNSArray;"
  }
  property {
    name: "namespaces"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLElement.h"
}
class {
  name: "NSURLDownload"
  base_class: "NSObject"
  method {
    function {
      name: "canResumeDownloadDecodedWithEncodingMIMEType:"
      return_type: "Z"
      parameter {
        name: "MIMEType"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithRequest:delegate:"
      return_type: "OI"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSURLDownloadDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithResumeData:delegate:path:"
      return_type: "OI"
      parameter {
        name: "resumeData"
        type: "LNSData;"
      }
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSURLDownloadDelegate>)"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancel"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setDestination:allowOverwrite:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "allowOverwrite"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "request"
      return_type: "LNSURLRequest;"
    }
    class_method: false
  }
  method {
    function {
      name: "resumeData"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "deletesFileUponFailure"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDeletesFileUponFailure:"
      return_type: "V"
      parameter {
        name: "deletesFileUponFailure"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "request"
    type: "LNSURLRequest;"
  }
  property {
    name: "resumeData"
    type: "LNSData;"
  }
  property {
    name: "deletesFileUponFailure"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLDownload.h"
}
class {
  name: "NSAffineTransform"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSAffineTransform+NSAppKitAdditons"
  method {
    function {
      name: "transform"
      return_type: "LNSAffineTransform;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithTransform:"
      return_type: "OI"
      parameter {
        name: "transform"
        type: "LNSAffineTransform;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "translateXBy:yBy:"
      return_type: "V"
      parameter {
        name: "deltaX"
        type: "D"
      }
      parameter {
        name: "deltaY"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rotateByDegrees:"
      return_type: "V"
      parameter {
        name: "angle"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rotateByRadians:"
      return_type: "V"
      parameter {
        name: "angle"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scaleBy:"
      return_type: "V"
      parameter {
        name: "scale"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scaleXBy:yBy:"
      return_type: "V"
      parameter {
        name: "scaleX"
        type: "D"
      }
      parameter {
        name: "scaleY"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invert"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "appendTransform:"
      return_type: "V"
      parameter {
        name: "transform"
        type: "LNSAffineTransform;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prependTransform:"
      return_type: "V"
      parameter {
        name: "transform"
        type: "LNSAffineTransform;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "transformPoint:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "transformSize:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "transformStruct"
      return_type: "RNSAffineTransformStruct;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTransformStruct:"
      return_type: "V"
      parameter {
        name: "transformStruct"
        type: "RNSAffineTransformStruct;"
      }
    }
    class_method: false
  }
  property {
    name: "transformStruct"
    type: "RNSAffineTransformStruct;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAffineTransform.h"
}
class {
  name: "NSAppleEventDescriptor"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "nullDescriptor"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: true
  }
  method {
    function {
      name: "descriptorWithDescriptorType:bytes:length:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "descriptorType"
        type: "UI"
      }
      parameter {
        name: "bytes"
        type: "*cV;"
      }
      parameter {
        name: "byteCount"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "descriptorWithDescriptorType:data:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "descriptorType"
        type: "UI"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "descriptorWithBoolean:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "boolean"
        type: "UB"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "descriptorWithEnumCode:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "enumerator"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "descriptorWithInt32:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "signedInt"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "descriptorWithTypeCode:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "typeCode"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "descriptorWithString:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "eventClass"
        type: "UI"
      }
      parameter {
        name: "eventID"
        type: "UI"
      }
      parameter {
        name: "targetDescriptor"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "returnID"
        type: "S"
      }
      parameter {
        name: "transactionID"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "listDescriptor"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: true
  }
  method {
    function {
      name: "recordDescriptor"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithAEDescNoCopy:"
      return_type: "OI"
      parameter {
        name: "aeDesc"
        type: "*cRAEDesc;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDescriptorType:bytes:length:"
      return_type: "OI"
      parameter {
        name: "descriptorType"
        type: "UI"
      }
      parameter {
        name: "bytes"
        type: "*cV;"
      }
      parameter {
        name: "byteCount"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDescriptorType:data:"
      return_type: "OI"
      parameter {
        name: "descriptorType"
        type: "UI"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithEventClass:eventID:targetDescriptor:returnID:transactionID:"
      return_type: "OI"
      parameter {
        name: "eventClass"
        type: "UI"
      }
      parameter {
        name: "eventID"
        type: "UI"
      }
      parameter {
        name: "targetDescriptor"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "returnID"
        type: "S"
      }
      parameter {
        name: "transactionID"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initListDescriptor"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initRecordDescriptor"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "aeDesc"
      return_type: "*cRAEDesc;;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptorType"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "data"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "booleanValue"
      return_type: "UB"
    }
    class_method: false
  }
  method {
    function {
      name: "enumCodeValue"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "int32Value"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "typeCodeValue"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "stringValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "eventClass"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "eventID"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "returnID"
      return_type: "S"
    }
    class_method: false
  }
  method {
    function {
      name: "transactionID"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setParamDescriptor:forKeyword:"
      return_type: "V"
      parameter {
        name: "descriptor"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "keyword"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paramDescriptorForKeyword:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "keyword"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeParamDescriptorWithKeyword:"
      return_type: "V"
      parameter {
        name: "keyword"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributeDescriptor:forKeyword:"
      return_type: "V"
      parameter {
        name: "descriptor"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "keyword"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributeDescriptorForKeyword:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "keyword"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "insertDescriptor:atIndex:"
      return_type: "V"
      parameter {
        name: "descriptor"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptorAtIndex:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeDescriptorAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDescriptor:forKeyword:"
      return_type: "V"
      parameter {
        name: "descriptor"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "keyword"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptorForKeyword:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "keyword"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeDescriptorWithKeyword:"
      return_type: "V"
      parameter {
        name: "keyword"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keywordForDescriptorAtIndex:"
      return_type: "UI"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "coerceToDescriptorType:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "descriptorType"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "aeDesc"
    type: "*cRAEDesc;;"
  }
  property {
    name: "descriptorType"
    type: "UI"
  }
  property {
    name: "data"
    type: "LNSData;"
  }
  property {
    name: "booleanValue"
    type: "UB"
  }
  property {
    name: "enumCodeValue"
    type: "UI"
  }
  property {
    name: "int32Value"
    type: "I"
  }
  property {
    name: "typeCodeValue"
    type: "UI"
  }
  property {
    name: "stringValue"
    type: "LNSString;"
  }
  property {
    name: "eventClass"
    type: "UI"
  }
  property {
    name: "eventID"
    type: "UI"
  }
  property {
    name: "returnID"
    type: "S"
  }
  property {
    name: "transactionID"
    type: "I"
  }
  property {
    name: "numberOfItems"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAppleEventDescriptor.h"
}
class {
  name: "NSAppleEventManager"
  base_class: "NSObject"
  method {
    function {
      name: "sharedAppleEventManager"
      return_type: "LNSAppleEventManager;"
    }
    class_method: true
  }
  method {
    function {
      name: "setEventHandler:andSelector:forEventClass:andEventID:"
      return_type: "V"
      parameter {
        name: "handler"
        type: "OI"
      }
      parameter {
        name: "handleEventSelector"
        type: "OS"
      }
      parameter {
        name: "eventClass"
        type: "UI"
      }
      parameter {
        name: "eventID"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeEventHandlerForEventClass:andEventID:"
      return_type: "V"
      parameter {
        name: "eventClass"
        type: "UI"
      }
      parameter {
        name: "eventID"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dispatchRawAppleEvent:withRawReply:handlerRefCon:"
      return_type: "S"
      parameter {
        name: "theAppleEvent"
        type: "*cRAEDesc;;"
      }
      parameter {
        name: "theReply"
        type: "*RAEDesc;;"
      }
      parameter {
        name: "handlerRefCon"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentAppleEvent"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentReplyAppleEvent"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: false
  }
  method {
    function {
      name: "suspendCurrentAppleEvent"
      return_type: "*cR__NSAppleEventManagerSuspension;;"
    }
    class_method: false
  }
  method {
    function {
      name: "appleEventForSuspensionID:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "suspensionID"
        type: "*cR__NSAppleEventManagerSuspension;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replyAppleEventForSuspensionID:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "suspensionID"
        type: "*cR__NSAppleEventManagerSuspension;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrentAppleEventAndReplyEventWithSuspensionID:"
      return_type: "V"
      parameter {
        name: "suspensionID"
        type: "*cR__NSAppleEventManagerSuspension;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resumeWithSuspensionID:"
      return_type: "V"
      parameter {
        name: "suspensionID"
        type: "*cR__NSAppleEventManagerSuspension;;"
      }
    }
    class_method: false
  }
  property {
    name: "currentAppleEvent"
    type: "LNSAppleEventDescriptor;"
  }
  property {
    name: "currentReplyAppleEvent"
    type: "LNSAppleEventDescriptor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAppleEventManager.h"
}
class {
  name: "NSAppleScript"
  base_class: "NSObject"
  protocol: "NSCopying"
  category: "NSAppleScript+NSExtensions"
  method {
    function {
      name: "initWithContentsOfURL:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "errorInfo"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSource:"
      return_type: "OI"
      parameter {
        name: "source"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "source"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "isCompiled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "compileAndReturnError:"
      return_type: "Z"
      parameter {
        name: "errorInfo"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "executeAndReturnError:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "errorInfo"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "executeAppleEvent:error:"
      return_type: "LNSAppleEventDescriptor;"
      parameter {
        name: "event"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "errorInfo"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  property {
    name: "source"
    type: "LNSString;"
  }
  property {
    name: "compiled"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAppleScript.h"
}
class {
  name: "NSClassDescription"
  base_class: "NSObject"
  method {
    function {
      name: "registerClassDescription:forClass:"
      return_type: "V"
      parameter {
        name: "description"
        type: "LNSClassDescription;"
      }
      parameter {
        name: "aClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "invalidateClassDescriptionCache"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "classDescriptionForClass:"
      return_type: "LNSClassDescription;"
      parameter {
        name: "aClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "attributeKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "toOneRelationshipKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "toManyRelationshipKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "inverseForRelationshipKey:"
      return_type: "LNSString;"
      parameter {
        name: "relationshipKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "attributeKeys"
    type: "LNSArray;"
  }
  property {
    name: "toOneRelationshipKeys"
    type: "LNSArray;"
  }
  property {
    name: "toManyRelationshipKeys"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSClassDescription.h"
}
class {
  name: "NSDistributedLock"
  base_class: "NSObject"
  method {
    function {
      name: "lockWithPath:"
      return_type: "LNSDistributedLock;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tryLock"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "unlock"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "breakLock"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "lockDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  property {
    name: "lockDate"
    type: "LNSDate;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDistributedLock.h"
}
class {
  name: "NSGarbageCollector"
  base_class: "NSObject"
  method {
    function {
      name: "defaultCollector"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "isCollecting"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "disable"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enable"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "collectIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "collectExhaustively"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "disableCollectorForPointer:"
      return_type: "V"
      parameter {
        name: "ptr"
        type: "*cV;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enableCollectorForPointer:"
      return_type: "V"
      parameter {
        name: "ptr"
        type: "*cV;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "zone"
      return_type: "*R_NSZone;;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSGarbageCollector.h"
}
class {
  name: "NSHost"
  base_class: "NSObject"
  method {
    function {
      name: "currentHost"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "hostWithName:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "hostWithAddress:"
      return_type: "OI"
      parameter {
        name: "address"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "isEqualToHost:"
      return_type: "Z"
      parameter {
        name: "aHost"
        type: "LNSHost;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "names"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "address"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "addresses"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHostCacheEnabled:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "isHostCacheEnabled"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "flushHostCache"
      return_type: "V"
    }
    class_method: true
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "names"
    type: "LNSArray;"
  }
  property {
    name: "address"
    type: "LNSString;"
  }
  property {
    name: "addresses"
    type: "LNSArray;"
  }
  property {
    name: "localizedName"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSHost.h"
}
class {
  name: "NSScriptClassDescription"
  base_class: "NSClassDescription"
  category: "NSScriptClassDescription+NSDeprecated"
  method {
    function {
      name: "classDescriptionForClass:"
      return_type: "LNSScriptClassDescription;"
      parameter {
        name: "aClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithSuiteName:className:dictionary:"
      return_type: "OI"
      parameter {
        name: "suiteName"
        type: "LNSString;"
      }
      parameter {
        name: "className"
        type: "LNSString;"
      }
      parameter {
        name: "classDeclaration"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "suiteName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "className"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "implementationClassName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "superclassDescription"
      return_type: "LNSScriptClassDescription;"
    }
    class_method: false
  }
  method {
    function {
      name: "appleEventCode"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "matchesAppleEventCode:"
      return_type: "Z"
      parameter {
        name: "appleEventCode"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "supportsCommand:"
      return_type: "Z"
      parameter {
        name: "commandDescription"
        type: "LNSScriptCommandDescription;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectorForCommand:"
      return_type: "OS"
      parameter {
        name: "commandDescription"
        type: "LNSScriptCommandDescription;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "typeForKey:"
      return_type: "LNSString;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classDescriptionForKey:"
      return_type: "LNSScriptClassDescription;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appleEventCodeForKey:"
      return_type: "UI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyWithAppleEventCode:"
      return_type: "LNSString;"
      parameter {
        name: "appleEventCode"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultSubcontainerAttributeKey"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "isLocationRequiredToCreateForKey:"
      return_type: "Z"
      parameter {
        name: "toManyRelationshipKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasPropertyForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasOrderedToManyRelationshipForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasReadablePropertyForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasWritablePropertyForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "suiteName"
    type: "LNSString;"
  }
  property {
    name: "className"
    type: "LNSString;"
  }
  property {
    name: "implementationClassName"
    type: "LNSString;"
  }
  property {
    name: "superclassDescription"
    type: "LNSScriptClassDescription;"
  }
  property {
    name: "appleEventCode"
    type: "UI"
  }
  property {
    name: "defaultSubcontainerAttributeKey"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptClassDescription.h"
}
class {
  name: "NSScriptCoercionHandler"
  base_class: "NSObject"
  method {
    function {
      name: "sharedCoercionHandler"
      return_type: "LNSScriptCoercionHandler;"
    }
    class_method: true
  }
  method {
    function {
      name: "coerceValue:toClass:"
      return_type: "OI"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "toClass"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerCoercer:selector:toConvertFromClass:toClass:"
      return_type: "V"
      parameter {
        name: "coercer"
        type: "OI"
      }
      parameter {
        name: "selector"
        type: "OS"
      }
      parameter {
        name: "fromClass"
        type: "OC"
      }
      parameter {
        name: "toClass"
        type: "OC"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptCoercionHandler.h"
}
class {
  name: "NSScriptCommand"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithCommandDescription:"
      return_type: "OI"
      parameter {
        name: "commandDef"
        type: "LNSScriptCommandDescription;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "commandDescription"
      return_type: "LNSScriptCommandDescription;"
    }
    class_method: false
  }
  method {
    function {
      name: "directParameter"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDirectParameter:"
      return_type: "V"
      parameter {
        name: "directParameter"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "receiversSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "setReceiversSpecifier:"
      return_type: "V"
      parameter {
        name: "receiversSpecifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "evaluatedReceivers"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "arguments"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setArguments:"
      return_type: "V"
      parameter {
        name: "arguments"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "evaluatedArguments"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "isWellFormed"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "performDefaultImplementation"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "executeCommand"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "scriptErrorNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setScriptErrorNumber:"
      return_type: "V"
      parameter {
        name: "scriptErrorNumber"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptErrorOffendingObjectDescriptor"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setScriptErrorOffendingObjectDescriptor:"
      return_type: "V"
      parameter {
        name: "scriptErrorOffendingObjectDescriptor"
        type: "LNSAppleEventDescriptor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptErrorExpectedTypeDescriptor"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setScriptErrorExpectedTypeDescriptor:"
      return_type: "V"
      parameter {
        name: "scriptErrorExpectedTypeDescriptor"
        type: "LNSAppleEventDescriptor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptErrorString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setScriptErrorString:"
      return_type: "V"
      parameter {
        name: "scriptErrorString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentCommand"
      return_type: "LNSScriptCommand;"
    }
    class_method: true
  }
  method {
    function {
      name: "appleEvent"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: false
  }
  method {
    function {
      name: "suspendExecution"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resumeExecutionWithResult:"
      return_type: "V"
      parameter {
        name: "result"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "commandDescription"
    type: "LNSScriptCommandDescription;"
  }
  property {
    name: "directParameter"
    type: "OI"
  }
  property {
    name: "receiversSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  property {
    name: "evaluatedReceivers"
    type: "OI"
  }
  property {
    name: "arguments"
    type: "LNSDictionary;"
  }
  property {
    name: "evaluatedArguments"
    type: "LNSDictionary;"
  }
  property {
    name: "wellFormed"
    type: "Z"
  }
  property {
    name: "scriptErrorNumber"
    type: "I"
  }
  property {
    name: "scriptErrorOffendingObjectDescriptor"
    type: "LNSAppleEventDescriptor;"
  }
  property {
    name: "scriptErrorExpectedTypeDescriptor"
    type: "LNSAppleEventDescriptor;"
  }
  property {
    name: "scriptErrorString"
    type: "LNSString;"
  }
  property {
    name: "appleEvent"
    type: "LNSAppleEventDescriptor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptCommand.h"
}
class {
  name: "NSScriptCommandDescription"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSuiteName:commandName:dictionary:"
      return_type: "OI"
      parameter {
        name: "suiteName"
        type: "LNSString;"
      }
      parameter {
        name: "commandName"
        type: "LNSString;"
      }
      parameter {
        name: "commandDeclaration"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "suiteName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "commandName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "appleEventClassCode"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "appleEventCode"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "commandClassName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "returnType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "appleEventCodeForReturnType"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "argumentNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "typeForArgumentWithName:"
      return_type: "LNSString;"
      parameter {
        name: "argumentName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appleEventCodeForArgumentWithName:"
      return_type: "UI"
      parameter {
        name: "argumentName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOptionalArgumentWithName:"
      return_type: "Z"
      parameter {
        name: "argumentName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createCommandInstance"
      return_type: "LNSScriptCommand;"
    }
    class_method: false
  }
  method {
    function {
      name: "createCommandInstanceWithZone:"
      return_type: "LNSScriptCommand;"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: false
  }
  property {
    name: "suiteName"
    type: "LNSString;"
  }
  property {
    name: "commandName"
    type: "LNSString;"
  }
  property {
    name: "appleEventClassCode"
    type: "UI"
  }
  property {
    name: "appleEventCode"
    type: "UI"
  }
  property {
    name: "commandClassName"
    type: "LNSString;"
  }
  property {
    name: "returnType"
    type: "LNSString;"
  }
  property {
    name: "appleEventCodeForReturnType"
    type: "UI"
  }
  property {
    name: "argumentNames"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptCommandDescription.h"
}
class {
  name: "NSScriptExecutionContext"
  base_class: "NSObject"
  method {
    function {
      name: "sharedScriptExecutionContext"
      return_type: "LNSScriptExecutionContext;"
    }
    class_method: true
  }
  method {
    function {
      name: "topLevelObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTopLevelObject:"
      return_type: "V"
      parameter {
        name: "topLevelObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectBeingTested"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectBeingTested:"
      return_type: "V"
      parameter {
        name: "objectBeingTested"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeContainerObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setRangeContainerObject:"
      return_type: "V"
      parameter {
        name: "rangeContainerObject"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "topLevelObject"
    type: "OI"
  }
  property {
    name: "objectBeingTested"
    type: "OI"
  }
  property {
    name: "rangeContainerObject"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptExecutionContext.h"
}
class {
  name: "NSScriptObjectSpecifier"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "objectSpecifierWithDescriptor:"
      return_type: "LNSScriptObjectSpecifier;"
      parameter {
        name: "descriptor"
        type: "LNSAppleEventDescriptor;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContainerSpecifier:key:"
      return_type: "OI"
      parameter {
        name: "container"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContainerClassDescription:containerSpecifier:key:"
      return_type: "OI"
      parameter {
        name: "classDesc"
        type: "LNSScriptClassDescription;"
      }
      parameter {
        name: "container"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "childSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "setChildSpecifier:"
      return_type: "V"
      parameter {
        name: "childSpecifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containerSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContainerSpecifier:"
      return_type: "V"
      parameter {
        name: "containerSpecifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containerIsObjectBeingTested"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setContainerIsObjectBeingTested:"
      return_type: "V"
      parameter {
        name: "containerIsObjectBeingTested"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containerIsRangeContainerObject"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setContainerIsRangeContainerObject:"
      return_type: "V"
      parameter {
        name: "containerIsRangeContainerObject"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "key"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containerClassDescription"
      return_type: "LNSScriptClassDescription;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContainerClassDescription:"
      return_type: "V"
      parameter {
        name: "containerClassDescription"
        type: "LNSScriptClassDescription;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyClassDescription"
      return_type: "LNSScriptClassDescription;"
    }
    class_method: false
  }
  method {
    function {
      name: "indicesOfObjectsByEvaluatingWithContainer:count:"
      return_type: "*I;"
      parameter {
        name: "container"
        type: "OI"
      }
      parameter {
        name: "count"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectsByEvaluatingWithContainers:"
      return_type: "OI"
      parameter {
        name: "containers"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectsByEvaluatingSpecifier"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "evaluationErrorNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setEvaluationErrorNumber:"
      return_type: "V"
      parameter {
        name: "evaluationErrorNumber"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "evaluationErrorSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptor"
      return_type: "LNSAppleEventDescriptor;"
    }
    class_method: false
  }
  property {
    name: "childSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  property {
    name: "containerSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  property {
    name: "containerIsObjectBeingTested"
    type: "Z"
  }
  property {
    name: "containerIsRangeContainerObject"
    type: "Z"
  }
  property {
    name: "key"
    type: "LNSString;"
  }
  property {
    name: "containerClassDescription"
    type: "LNSScriptClassDescription;"
  }
  property {
    name: "keyClassDescription"
    type: "LNSScriptClassDescription;"
  }
  property {
    name: "objectsByEvaluatingSpecifier"
    type: "OI"
  }
  property {
    name: "evaluationErrorNumber"
    type: "I"
  }
  property {
    name: "evaluationErrorSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  property {
    name: "descriptor"
    type: "LNSAppleEventDescriptor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSIndexSpecifier"
  base_class: "NSScriptObjectSpecifier"
  method {
    function {
      name: "initWithContainerClassDescription:containerSpecifier:key:index:"
      return_type: "OI"
      parameter {
        name: "classDesc"
        type: "LNSScriptClassDescription;"
      }
      parameter {
        name: "container"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "index"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "index"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSMiddleSpecifier"
  base_class: "NSScriptObjectSpecifier"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSNameSpecifier"
  base_class: "NSScriptObjectSpecifier"
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContainerClassDescription:containerSpecifier:key:name:"
      return_type: "OI"
      parameter {
        name: "classDesc"
        type: "LNSScriptClassDescription;"
      }
      parameter {
        name: "container"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSPositionalSpecifier"
  base_class: "NSObject"
  method {
    function {
      name: "initWithPosition:objectSpecifier:"
      return_type: "OI"
      parameter {
        name: "position"
        type: "X(Enum.enum NSInsertionPosition)"
      }
      parameter {
        name: "specifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "position"
      return_type: "X(Enum.enum NSInsertionPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "objectSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInsertionClassDescription:"
      return_type: "V"
      parameter {
        name: "classDescription"
        type: "LNSScriptClassDescription;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "evaluate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "insertionContainer"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "insertionKey"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "insertionIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "insertionReplaces"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "position"
    type: "X(Enum.enum NSInsertionPosition)"
  }
  property {
    name: "objectSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  property {
    name: "insertionContainer"
    type: "OI"
  }
  property {
    name: "insertionKey"
    type: "LNSString;"
  }
  property {
    name: "insertionIndex"
    type: "I"
  }
  property {
    name: "insertionReplaces"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSPropertySpecifier"
  base_class: "NSScriptObjectSpecifier"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSRandomSpecifier"
  base_class: "NSScriptObjectSpecifier"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSRangeSpecifier"
  base_class: "NSScriptObjectSpecifier"
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:"
      return_type: "OI"
      parameter {
        name: "classDesc"
        type: "LNSScriptClassDescription;"
      }
      parameter {
        name: "container"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "startSpec"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "endSpec"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStartSpecifier:"
      return_type: "V"
      parameter {
        name: "startSpecifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "setEndSpecifier:"
      return_type: "V"
      parameter {
        name: "endSpecifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  property {
    name: "startSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  property {
    name: "endSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSRelativeSpecifier"
  base_class: "NSScriptObjectSpecifier"
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:"
      return_type: "OI"
      parameter {
        name: "classDesc"
        type: "LNSScriptClassDescription;"
      }
      parameter {
        name: "container"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "relPos"
        type: "X(Enum.enum NSRelativePosition)"
      }
      parameter {
        name: "baseSpecifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "relativePosition"
      return_type: "X(Enum.enum NSRelativePosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setRelativePosition:"
      return_type: "V"
      parameter {
        name: "relativePosition"
        type: "X(Enum.enum NSRelativePosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "baseSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBaseSpecifier:"
      return_type: "V"
      parameter {
        name: "baseSpecifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  property {
    name: "relativePosition"
    type: "X(Enum.enum NSRelativePosition)"
  }
  property {
    name: "baseSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSUniqueIDSpecifier"
  base_class: "NSScriptObjectSpecifier"
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContainerClassDescription:containerSpecifier:key:uniqueID:"
      return_type: "OI"
      parameter {
        name: "classDesc"
        type: "LNSScriptClassDescription;"
      }
      parameter {
        name: "container"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "uniqueID"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "uniqueID"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setUniqueID:"
      return_type: "V"
      parameter {
        name: "uniqueID"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "uniqueID"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSWhoseSpecifier"
  base_class: "NSScriptObjectSpecifier"
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContainerClassDescription:containerSpecifier:key:test:"
      return_type: "OI"
      parameter {
        name: "classDesc"
        type: "LNSScriptClassDescription;"
      }
      parameter {
        name: "container"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "test"
        type: "LNSScriptWhoseTest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "test"
      return_type: "LNSScriptWhoseTest;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTest:"
      return_type: "V"
      parameter {
        name: "test"
        type: "LNSScriptWhoseTest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startSubelementIdentifier"
      return_type: "X(Enum.enum NSWhoseSubelementIdentifier)"
    }
    class_method: false
  }
  method {
    function {
      name: "setStartSubelementIdentifier:"
      return_type: "V"
      parameter {
        name: "startSubelementIdentifier"
        type: "X(Enum.enum NSWhoseSubelementIdentifier)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startSubelementIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setStartSubelementIndex:"
      return_type: "V"
      parameter {
        name: "startSubelementIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endSubelementIdentifier"
      return_type: "X(Enum.enum NSWhoseSubelementIdentifier)"
    }
    class_method: false
  }
  method {
    function {
      name: "setEndSubelementIdentifier:"
      return_type: "V"
      parameter {
        name: "endSubelementIdentifier"
        type: "X(Enum.enum NSWhoseSubelementIdentifier)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endSubelementIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setEndSubelementIndex:"
      return_type: "V"
      parameter {
        name: "endSubelementIndex"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "test"
    type: "LNSScriptWhoseTest;"
  }
  property {
    name: "startSubelementIdentifier"
    type: "X(Enum.enum NSWhoseSubelementIdentifier)"
  }
  property {
    name: "startSubelementIndex"
    type: "I"
  }
  property {
    name: "endSubelementIdentifier"
    type: "X(Enum.enum NSWhoseSubelementIdentifier)"
  }
  property {
    name: "endSubelementIndex"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
class {
  name: "NSCloneCommand"
  base_class: "NSScriptCommand"
  method {
    function {
      name: "setReceiversSpecifier:"
      return_type: "V"
      parameter {
        name: "receiversRef"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keySpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  property {
    name: "keySpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSCloseCommand"
  base_class: "NSScriptCommand"
  method {
    function {
      name: "saveOptions"
      return_type: "X(Enum.enum NSSaveOptions)"
    }
    class_method: false
  }
  property {
    name: "saveOptions"
    type: "X(Enum.enum NSSaveOptions)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSCountCommand"
  base_class: "NSScriptCommand"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSCreateCommand"
  base_class: "NSScriptCommand"
  method {
    function {
      name: "createClassDescription"
      return_type: "LNSScriptClassDescription;"
    }
    class_method: false
  }
  method {
    function {
      name: "resolvedKeyDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  property {
    name: "createClassDescription"
    type: "LNSScriptClassDescription;"
  }
  property {
    name: "resolvedKeyDictionary"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSDeleteCommand"
  base_class: "NSScriptCommand"
  method {
    function {
      name: "setReceiversSpecifier:"
      return_type: "V"
      parameter {
        name: "receiversRef"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keySpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  property {
    name: "keySpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSExistsCommand"
  base_class: "NSScriptCommand"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSGetCommand"
  base_class: "NSScriptCommand"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSMoveCommand"
  base_class: "NSScriptCommand"
  method {
    function {
      name: "setReceiversSpecifier:"
      return_type: "V"
      parameter {
        name: "receiversRef"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keySpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  property {
    name: "keySpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSQuitCommand"
  base_class: "NSScriptCommand"
  method {
    function {
      name: "saveOptions"
      return_type: "X(Enum.enum NSSaveOptions)"
    }
    class_method: false
  }
  property {
    name: "saveOptions"
    type: "X(Enum.enum NSSaveOptions)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSSetCommand"
  base_class: "NSScriptCommand"
  method {
    function {
      name: "setReceiversSpecifier:"
      return_type: "V"
      parameter {
        name: "receiversRef"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keySpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  property {
    name: "keySpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptStandardSuiteCommands.h"
}
class {
  name: "NSScriptSuiteRegistry"
  base_class: "NSObject"
  method {
    function {
      name: "sharedScriptSuiteRegistry"
      return_type: "LNSScriptSuiteRegistry;"
    }
    class_method: true
  }
  method {
    function {
      name: "setSharedScriptSuiteRegistry:"
      return_type: "V"
      parameter {
        name: "registry"
        type: "LNSScriptSuiteRegistry;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "loadSuitesFromBundle:"
      return_type: "V"
      parameter {
        name: "bundle"
        type: "LNSBundle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadSuiteWithDictionary:fromBundle:"
      return_type: "V"
      parameter {
        name: "suiteDeclaration"
        type: "LNSDictionary;"
      }
      parameter {
        name: "bundle"
        type: "LNSBundle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerClassDescription:"
      return_type: "V"
      parameter {
        name: "classDescription"
        type: "LNSScriptClassDescription;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerCommandDescription:"
      return_type: "V"
      parameter {
        name: "commandDescription"
        type: "LNSScriptCommandDescription;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "suiteNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "appleEventCodeForSuite:"
      return_type: "UI"
      parameter {
        name: "suiteName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bundleForSuite:"
      return_type: "LNSBundle;"
      parameter {
        name: "suiteName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classDescriptionsInSuite:"
      return_type: "LNSDictionary;"
      parameter {
        name: "suiteName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "commandDescriptionsInSuite:"
      return_type: "LNSDictionary;"
      parameter {
        name: "suiteName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "suiteForAppleEventCode:"
      return_type: "LNSString;"
      parameter {
        name: "appleEventCode"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classDescriptionWithAppleEventCode:"
      return_type: "LNSScriptClassDescription;"
      parameter {
        name: "appleEventCode"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "commandDescriptionWithAppleEventClass:andAppleEventCode:"
      return_type: "LNSScriptCommandDescription;"
      parameter {
        name: "appleEventClassCode"
        type: "UI"
      }
      parameter {
        name: "appleEventIDCode"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "aeteResource:"
      return_type: "LNSData;"
      parameter {
        name: "languageName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "suiteNames"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptSuiteRegistry.h"
}
class {
  name: "NSScriptWhoseTest"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "isTrue"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptWhoseTests.h"
}
class {
  name: "NSLogicalTest"
  base_class: "NSScriptWhoseTest"
  method {
    function {
      name: "initAndTestWithTests:"
      return_type: "OI"
      parameter {
        name: "subTests"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initOrTestWithTests:"
      return_type: "OI"
      parameter {
        name: "subTests"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initNotTestWithTest:"
      return_type: "OI"
      parameter {
        name: "subTest"
        type: "LNSScriptWhoseTest;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptWhoseTests.h"
}
class {
  name: "NSSpecifierTest"
  base_class: "NSScriptWhoseTest"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "inCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithObjectSpecifier:comparisonOperator:testObject:"
      return_type: "OI"
      parameter {
        name: "obj1"
        type: "LNSScriptObjectSpecifier;"
      }
      parameter {
        name: "compOp"
        type: "X(Enum.enum NSTestComparisonOperation)"
      }
      parameter {
        name: "obj2"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptWhoseTests.h"
}
class {
  name: "NSSpellServer"
  base_class: "NSObject"
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSSpellServerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSSpellServerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerLanguage:byVendor:"
      return_type: "Z"
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "vendor"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isWordInUserDictionaries:caseSensitive:"
      return_type: "Z"
      parameter {
        name: "word"
        type: "LNSString;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "run"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSSpellServerDelegate>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSpellServer.h"
}
class {
  name: "NSUserNotification"
  base_class: "NSObject"
  protocol: "NSCopying"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subtitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSubtitle:"
      return_type: "V"
      parameter {
        name: "subtitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "informativeText"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInformativeText:"
      return_type: "V"
      parameter {
        name: "informativeText"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "actionButtonTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setActionButtonTitle:"
      return_type: "V"
      parameter {
        name: "actionButtonTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserInfo:"
      return_type: "V"
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deliveryDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDeliveryDate:"
      return_type: "V"
      parameter {
        name: "deliveryDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deliveryTimeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDeliveryTimeZone:"
      return_type: "V"
      parameter {
        name: "deliveryTimeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deliveryRepeatInterval"
      return_type: "LNSDateComponents;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDeliveryRepeatInterval:"
      return_type: "V"
      parameter {
        name: "deliveryRepeatInterval"
        type: "LNSDateComponents;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "actualDeliveryDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "isPresented"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isRemote"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "soundName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSoundName:"
      return_type: "V"
      parameter {
        name: "soundName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasActionButton"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasActionButton:"
      return_type: "V"
      parameter {
        name: "hasActionButton"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "activationType"
      return_type: "X(Enum.enum NSUserNotificationActivationType)"
    }
    class_method: false
  }
  method {
    function {
      name: "otherButtonTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setOtherButtonTitle:"
      return_type: "V"
      parameter {
        name: "otherButtonTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIdentifier:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentImage:"
      return_type: "V"
      parameter {
        name: "contentImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasReplyButton"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasReplyButton:"
      return_type: "V"
      parameter {
        name: "hasReplyButton"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "responsePlaceholder"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setResponsePlaceholder:"
      return_type: "V"
      parameter {
        name: "responsePlaceholder"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "response"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "additionalActions"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAdditionalActions:"
      return_type: "V"
      parameter {
        name: "additionalActions"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "additionalActivationAction"
      return_type: "LNSUserNotificationAction;"
    }
    class_method: false
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "subtitle"
    type: "LNSString;"
  }
  property {
    name: "informativeText"
    type: "LNSString;"
  }
  property {
    name: "actionButtonTitle"
    type: "LNSString;"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  property {
    name: "deliveryDate"
    type: "LNSDate;"
  }
  property {
    name: "deliveryTimeZone"
    type: "LNSTimeZone;"
  }
  property {
    name: "deliveryRepeatInterval"
    type: "LNSDateComponents;"
  }
  property {
    name: "actualDeliveryDate"
    type: "LNSDate;"
  }
  property {
    name: "presented"
    type: "Z"
  }
  property {
    name: "remote"
    type: "Z"
  }
  property {
    name: "soundName"
    type: "LNSString;"
  }
  property {
    name: "hasActionButton"
    type: "Z"
  }
  property {
    name: "activationType"
    type: "X(Enum.enum NSUserNotificationActivationType)"
  }
  property {
    name: "otherButtonTitle"
    type: "LNSString;"
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  property {
    name: "contentImage"
    type: "LNSImage;"
  }
  property {
    name: "hasReplyButton"
    type: "Z"
  }
  property {
    name: "responsePlaceholder"
    type: "LNSString;"
  }
  property {
    name: "response"
    type: "LNSAttributedString;"
  }
  property {
    name: "additionalActions"
    type: "LNSArray;"
  }
  property {
    name: "additionalActivationAction"
    type: "LNSUserNotificationAction;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserNotification.h"
}
class {
  name: "NSUserNotificationAction"
  base_class: "NSObject"
  protocol: "NSCopying"
  method {
    function {
      name: "actionWithIdentifier:title:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserNotification.h"
}
class {
  name: "NSUserNotificationCenter"
  base_class: "NSObject"
  method {
    function {
      name: "defaultUserNotificationCenter"
      return_type: "LNSUserNotificationCenter;"
    }
    class_method: true
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSUserNotificationCenterDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSUserNotificationCenterDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scheduledNotifications"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setScheduledNotifications:"
      return_type: "V"
      parameter {
        name: "scheduledNotifications"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleNotification:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSUserNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeScheduledNotification:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSUserNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deliveredNotifications"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "deliverNotification:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSUserNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeDeliveredNotification:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSUserNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllDeliveredNotifications"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSUserNotificationCenterDelegate>)"
  }
  property {
    name: "scheduledNotifications"
    type: "LNSArray;"
  }
  property {
    name: "deliveredNotifications"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserNotification.h"
}
class {
  name: "NSUserScriptTask"
  base_class: "NSObject"
  method {
    function {
      name: "initWithURL:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "executeWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  property {
    name: "scriptURL"
    type: "LNSURL;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserScriptTask.h"
}
class {
  name: "NSUserUnixTask"
  base_class: "NSUserScriptTask"
  method {
    function {
      name: "standardInput"
      return_type: "LNSFileHandle;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandardInput:"
      return_type: "V"
      parameter {
        name: "standardInput"
        type: "LNSFileHandle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "standardOutput"
      return_type: "LNSFileHandle;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandardOutput:"
      return_type: "V"
      parameter {
        name: "standardOutput"
        type: "LNSFileHandle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "standardError"
      return_type: "LNSFileHandle;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStandardError:"
      return_type: "V"
      parameter {
        name: "standardError"
        type: "LNSFileHandle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "executeWithArguments:completionHandler:"
      return_type: "V"
      parameter {
        name: "arguments"
        type: "LNSArray;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  property {
    name: "standardInput"
    type: "LNSFileHandle;"
  }
  property {
    name: "standardOutput"
    type: "LNSFileHandle;"
  }
  property {
    name: "standardError"
    type: "LNSFileHandle;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserScriptTask.h"
}
class {
  name: "NSUserAppleScriptTask"
  base_class: "NSUserScriptTask"
  method {
    function {
      name: "executeWithAppleEvent:completionHandler:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSAppleEventDescriptor *, NSError *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserScriptTask.h"
}
class {
  name: "NSUserAutomatorTask"
  base_class: "NSUserScriptTask"
  method {
    function {
      name: "variables"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVariables:"
      return_type: "V"
      parameter {
        name: "variables"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "executeWithInput:completionHandler:"
      return_type: "V"
      parameter {
        name: "input"
        type: "X(Unexposed.id<NSSecureCoding>)"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(id, NSError *))"
      }
    }
    class_method: false
  }
  property {
    name: "variables"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserScriptTask.h"
}
class {
  name: "NSXPCConnection"
  base_class: "NSObject"
  protocol: "NSXPCProxyCreating"
  method {
    function {
      name: "initWithServiceName:"
      return_type: "OI"
      parameter {
        name: "serviceName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "serviceName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithMachServiceName:options:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSXPCConnectionOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithListenerEndpoint:"
      return_type: "OI"
      parameter {
        name: "endpoint"
        type: "LNSXPCListenerEndpoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endpoint"
      return_type: "LNSXPCListenerEndpoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "exportedInterface"
      return_type: "LNSXPCInterface;"
    }
    class_method: false
  }
  method {
    function {
      name: "setExportedInterface:"
      return_type: "V"
      parameter {
        name: "exportedInterface"
        type: "LNSXPCInterface;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "exportedObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setExportedObject:"
      return_type: "V"
      parameter {
        name: "exportedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "remoteObjectInterface"
      return_type: "LNSXPCInterface;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRemoteObjectInterface:"
      return_type: "V"
      parameter {
        name: "remoteObjectInterface"
        type: "LNSXPCInterface;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "remoteObjectProxy"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "remoteObjectProxyWithErrorHandler:"
      return_type: "OI"
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "interruptionHandler"
      return_type: "X(BlockPointer.void (^)(void))"
    }
    class_method: false
  }
  method {
    function {
      name: "setInterruptionHandler:"
      return_type: "V"
      parameter {
        name: "interruptionHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidationHandler"
      return_type: "X(BlockPointer.void (^)(void))"
    }
    class_method: false
  }
  method {
    function {
      name: "setInvalidationHandler:"
      return_type: "V"
      parameter {
        name: "invalidationHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resume"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "suspend"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "auditSessionIdentifier"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "processIdentifier"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "effectiveUserIdentifier"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "effectiveGroupIdentifier"
      return_type: "UI"
    }
    class_method: false
  }
  property {
    name: "serviceName"
    type: "LNSString;"
  }
  property {
    name: "endpoint"
    type: "LNSXPCListenerEndpoint;"
  }
  property {
    name: "exportedInterface"
    type: "LNSXPCInterface;"
  }
  property {
    name: "exportedObject"
    type: "OI"
  }
  property {
    name: "remoteObjectInterface"
    type: "LNSXPCInterface;"
  }
  property {
    name: "remoteObjectProxy"
    type: "OI"
  }
  property {
    name: "interruptionHandler"
    type: "X(BlockPointer.void (^)(void))"
  }
  property {
    name: "invalidationHandler"
    type: "X(BlockPointer.void (^)(void))"
  }
  property {
    name: "auditSessionIdentifier"
    type: "I"
  }
  property {
    name: "processIdentifier"
    type: "I"
  }
  property {
    name: "effectiveUserIdentifier"
    type: "UI"
  }
  property {
    name: "effectiveGroupIdentifier"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXPCConnection.h"
}
class {
  name: "NSXPCListener"
  base_class: "NSObject"
  method {
    function {
      name: "serviceListener"
      return_type: "LNSXPCListener;"
    }
    class_method: true
  }
  method {
    function {
      name: "anonymousListener"
      return_type: "LNSXPCListener;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithMachServiceName:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSXPCListenerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSXPCListenerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endpoint"
      return_type: "LNSXPCListenerEndpoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "resume"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "suspend"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidate"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSXPCListenerDelegate>)"
  }
  property {
    name: "endpoint"
    type: "LNSXPCListenerEndpoint;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXPCConnection.h"
}
class {
  name: "NSXPCInterface"
  base_class: "NSObject"
  method {
    function {
      name: "interfaceWithProtocol:"
      return_type: "LNSXPCInterface;"
      parameter {
        name: "protocol"
        type: "LProtocol;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "protocol"
      return_type: "LProtocol;"
    }
    class_method: false
  }
  method {
    function {
      name: "setProtocol:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LProtocol;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setClasses:forSelector:argumentIndex:ofReply:"
      return_type: "V"
      parameter {
        name: "classes"
        type: "LNSSet;"
      }
      parameter {
        name: "sel"
        type: "OS"
      }
      parameter {
        name: "arg"
        type: "UI"
      }
      parameter {
        name: "ofReply"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classesForSelector:argumentIndex:ofReply:"
      return_type: "LNSSet;"
      parameter {
        name: "sel"
        type: "OS"
      }
      parameter {
        name: "arg"
        type: "UI"
      }
      parameter {
        name: "ofReply"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setInterface:forSelector:argumentIndex:ofReply:"
      return_type: "V"
      parameter {
        name: "ifc"
        type: "LNSXPCInterface;"
      }
      parameter {
        name: "sel"
        type: "OS"
      }
      parameter {
        name: "arg"
        type: "UI"
      }
      parameter {
        name: "ofReply"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "interfaceForSelector:argumentIndex:ofReply:"
      return_type: "LNSXPCInterface;"
      parameter {
        name: "sel"
        type: "OS"
      }
      parameter {
        name: "arg"
        type: "UI"
      }
      parameter {
        name: "ofReply"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "protocol"
    type: "LProtocol;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXPCConnection.h"
}
class {
  name: "NSXPCListenerEndpoint"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXPCConnection.h"
}
class {
  name: "NSGraphicsContext"
  base_class: "NSObject"
  category: "NSGraphicsContext+NSGraphicsContext_RenderingOptions"
  category: "NSGraphicsContext+NSQuartzCoreAdditions"
  category: "NSGraphicsContext+NSGraphicsContextDeprecated"
  method {
    function {
      name: "graphicsContextWithAttributes:"
      return_type: "LNSGraphicsContext;"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "graphicsContextWithWindow:"
      return_type: "LNSGraphicsContext;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "graphicsContextWithBitmapImageRep:"
      return_type: "LNSGraphicsContext;"
      parameter {
        name: "bitmapRep"
        type: "LNSBitmapImageRep;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "graphicsContextWithCGContext:flipped:"
      return_type: "LNSGraphicsContext;"
      parameter {
        name: "graphicsPort"
        type: "*RCGContext;;"
      }
      parameter {
        name: "initialFlippedState"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "currentContext"
      return_type: "LNSGraphicsContext;"
    }
    class_method: true
  }
  method {
    function {
      name: "setCurrentContext:"
      return_type: "V"
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "currentContextDrawingToScreen"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "saveGraphicsState"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "restoreGraphicsState"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "attributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "isDrawingToScreen"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "saveGraphicsState"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "restoreGraphicsState"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "flushGraphics"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "CGContext"
      return_type: "*RCGContext;;"
    }
    class_method: false
  }
  method {
    function {
      name: "isFlipped"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "attributes"
    type: "LNSDictionary;"
  }
  property {
    name: "drawingToScreen"
    type: "Z"
  }
  property {
    name: "CGContext"
    type: "*RCGContext;;"
  }
  property {
    name: "flipped"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGraphicsContext.h"
}
class {
  name: "NSAccessibilityElement"
  base_class: "NSObject"
  protocol: "NSAccessibility"
  method {
    function {
      name: "accessibilityElementWithRole:frame:label:parent:"
      return_type: "OI"
      parameter {
        name: "role"
        type: "LNSString;"
      }
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "label"
        type: "LNSString;"
      }
      parameter {
        name: "parent"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "accessibilityAddChildElement:"
      return_type: "V"
      parameter {
        name: "childElement"
        type: "LNSAccessibilityElement;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFrameInParentSpace"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityFrameInParentSpace:"
      return_type: "V"
      parameter {
        name: "accessibilityFrameInParentSpace"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  property {
    name: "accessibilityFrameInParentSpace"
    type: "RCGRect;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityElement.h"
}
class {
  name: "NSWorkspace"
  base_class: "NSObject"
  category: "NSWorkspace+NSDesktopImages"
  category: "NSWorkspace+NSDeprecated"
  category: "NSWorkspace+NSWorkspaceAccessibilityDisplay"
  category: "NSWorkspace+NSWorkspaceRunningApplications"
  method {
    function {
      name: "sharedWorkspace"
      return_type: "LNSWorkspace;"
    }
    class_method: true
  }
  method {
    function {
      name: "notificationCenter"
      return_type: "LNSNotificationCenter;"
    }
    class_method: false
  }
  method {
    function {
      name: "openFile:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openFile:withApplication:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
      parameter {
        name: "appName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openFile:withApplication:andDeactivate:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
      parameter {
        name: "appName"
        type: "LNSString;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openFile:fromImage:at:inView:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
      parameter {
        name: "anImage"
        type: "LNSImage;"
      }
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openURL:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "launchApplication:"
      return_type: "Z"
      parameter {
        name: "appName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "launchApplicationAtURL:options:configuration:error:"
      return_type: "LNSRunningApplication;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSWorkspaceLaunchOptions)"
      }
      parameter {
        name: "configuration"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openURL:options:configuration:error:"
      return_type: "LNSRunningApplication;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSWorkspaceLaunchOptions)"
      }
      parameter {
        name: "configuration"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openURLs:withApplicationAtURL:options:configuration:error:"
      return_type: "LNSRunningApplication;"
      parameter {
        name: "urls"
        type: "LNSArray;"
      }
      parameter {
        name: "applicationURL"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSWorkspaceLaunchOptions)"
      }
      parameter {
        name: "configuration"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "launchApplication:showIcon:autolaunch:"
      return_type: "Z"
      parameter {
        name: "appName"
        type: "LNSString;"
      }
      parameter {
        name: "showIcon"
        type: "Z"
      }
      parameter {
        name: "autolaunch"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fullPathForApplication:"
      return_type: "LNSString;"
      parameter {
        name: "appName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectFile:inFileViewerRootedAtPath:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
      parameter {
        name: "rootFullPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "activateFileViewerSelectingURLs:"
      return_type: "V"
      parameter {
        name: "fileURLs"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showSearchResultsForQueryString:"
      return_type: "Z"
      parameter {
        name: "queryString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "noteFileSystemChanged:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getInfoForFile:application:type:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
      parameter {
        name: "appName"
        type: "*LNSString;;"
      }
      parameter {
        name: "type"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFilePackageAtPath:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "iconForFile:"
      return_type: "LNSImage;"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "iconForFiles:"
      return_type: "LNSImage;"
      parameter {
        name: "fullPaths"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "iconForFileType:"
      return_type: "LNSImage;"
      parameter {
        name: "fileType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setIcon:forFile:options:"
      return_type: "Z"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSWorkspaceIconCreationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileLabels"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "fileLabelColors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "recycleURLs:completionHandler:"
      return_type: "V"
      parameter {
        name: "URLs"
        type: "LNSArray;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSDictionary *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "duplicateURLs:completionHandler:"
      return_type: "V"
      parameter {
        name: "URLs"
        type: "LNSArray;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSDictionary *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
      parameter {
        name: "removableFlag"
        type: "*Z;"
      }
      parameter {
        name: "writableFlag"
        type: "*Z;"
      }
      parameter {
        name: "unmountableFlag"
        type: "*Z;"
      }
      parameter {
        name: "description"
        type: "*LNSString;;"
      }
      parameter {
        name: "fileSystemType"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performFileOperation:source:destination:files:tag:"
      return_type: "Z"
      parameter {
        name: "operation"
        type: "LNSString;"
      }
      parameter {
        name: "source"
        type: "LNSString;"
      }
      parameter {
        name: "destination"
        type: "LNSString;"
      }
      parameter {
        name: "files"
        type: "LNSArray;"
      }
      parameter {
        name: "tag"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unmountAndEjectDeviceAtPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unmountAndEjectDeviceAtURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "extendPowerOffBy:"
      return_type: "I"
      parameter {
        name: "requested"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hideOtherApplications"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "URLForApplicationWithBundleIdentifier:"
      return_type: "LNSURL;"
      parameter {
        name: "bundleIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLForApplicationToOpenURL:"
      return_type: "LNSURL;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "absolutePathForAppBundleWithIdentifier:"
      return_type: "LNSString;"
      parameter {
        name: "bundleIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:"
      return_type: "Z"
      parameter {
        name: "bundleIdentifier"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSWorkspaceLaunchOptions)"
      }
      parameter {
        name: "descriptor"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "identifier"
        type: "*LNSNumber;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:"
      return_type: "Z"
      parameter {
        name: "urls"
        type: "LNSArray;"
      }
      parameter {
        name: "bundleIdentifier"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSWorkspaceLaunchOptions)"
      }
      parameter {
        name: "descriptor"
        type: "LNSAppleEventDescriptor;"
      }
      parameter {
        name: "identifiers"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frontmostApplication"
      return_type: "LNSRunningApplication;"
    }
    class_method: false
  }
  method {
    function {
      name: "menuBarOwningApplication"
      return_type: "LNSRunningApplication;"
    }
    class_method: false
  }
  method {
    function {
      name: "typeOfFile:error:"
      return_type: "LNSString;"
      parameter {
        name: "absoluteFilePath"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedDescriptionForType:"
      return_type: "LNSString;"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredFilenameExtensionForType:"
      return_type: "LNSString;"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "filenameExtension:isValidForType:"
      return_type: "Z"
      parameter {
        name: "filenameExtension"
        type: "LNSString;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "type:conformsToType:"
      return_type: "Z"
      parameter {
        name: "firstTypeName"
        type: "LNSString;"
      }
      parameter {
        name: "secondTypeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "notificationCenter"
    type: "LNSNotificationCenter;"
  }
  property {
    name: "fileLabels"
    type: "LNSArray;"
  }
  property {
    name: "fileLabelColors"
    type: "LNSArray;"
  }
  property {
    name: "frontmostApplication"
    type: "LNSRunningApplication;"
  }
  property {
    name: "menuBarOwningApplication"
    type: "LNSRunningApplication;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWorkspace.h"
}
class {
  name: "NSTouch"
  base_class: "NSObject"
  protocol: "NSCopying"
  method {
    function {
      name: "identity"
      return_type: "X(Unexposed.id<NSObject,NSCopying>)"
    }
    class_method: false
  }
  method {
    function {
      name: "phase"
      return_type: "X(Enum.enum NSTouchPhase)"
    }
    class_method: false
  }
  method {
    function {
      name: "normalizedPosition"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "isResting"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "device"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "deviceSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  property {
    name: "identity"
    type: "X(Unexposed.id<NSObject,NSCopying>)"
  }
  property {
    name: "phase"
    type: "X(Enum.enum NSTouchPhase)"
  }
  property {
    name: "normalizedPosition"
    type: "RCGPoint;"
  }
  property {
    name: "resting"
    type: "Z"
  }
  property {
    name: "device"
    type: "OI"
  }
  property {
    name: "deviceSize"
    type: "RCGSize;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTouch.h"
}
class {
  name: "NSEvent"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "type"
      return_type: "X(Enum.enum NSEventType)"
    }
    class_method: false
  }
  method {
    function {
      name: "modifierFlags"
      return_type: "X(Enum.enum NSEventModifierFlags)"
    }
    class_method: false
  }
  method {
    function {
      name: "timestamp"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "window"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "windowNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "context"
      return_type: "LNSGraphicsContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "clickCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "buttonNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "eventNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "pressure"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "locationInWindow"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "deltaX"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "deltaY"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "deltaZ"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "hasPreciseScrollingDeltas"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "scrollingDeltaX"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "scrollingDeltaY"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "momentumPhase"
      return_type: "X(Enum.enum NSEventPhase)"
    }
    class_method: false
  }
  method {
    function {
      name: "isDirectionInvertedFromDevice"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "characters"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "charactersIgnoringModifiers"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "isARepeat"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "keyCode"
      return_type: "US"
    }
    class_method: false
  }
  method {
    function {
      name: "trackingNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "userData"
      return_type: "*V;"
    }
    class_method: false
  }
  method {
    function {
      name: "trackingArea"
      return_type: "LNSTrackingArea;"
    }
    class_method: false
  }
  method {
    function {
      name: "subtype"
      return_type: "X(Enum.enum NSEventSubtype)"
    }
    class_method: false
  }
  method {
    function {
      name: "data1"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "data2"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "eventRef"
      return_type: "*cV;"
    }
    class_method: false
  }
  method {
    function {
      name: "eventWithEventRef:"
      return_type: "LNSEvent;"
      parameter {
        name: "eventRef"
        type: "*cV;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "CGEvent"
      return_type: "*R__CGEvent;;"
    }
    class_method: false
  }
  method {
    function {
      name: "eventWithCGEvent:"
      return_type: "LNSEvent;"
      parameter {
        name: "cgEvent"
        type: "*R__CGEvent;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setMouseCoalescingEnabled:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "isMouseCoalescingEnabled"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "magnification"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "deviceID"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "rotation"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "absoluteX"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "absoluteY"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "absoluteZ"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "buttonMask"
      return_type: "X(Enum.enum NSEventButtonMask)"
    }
    class_method: false
  }
  method {
    function {
      name: "tilt"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "tangentialPressure"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "vendorDefined"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "vendorID"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "tabletID"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "pointingDeviceID"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "systemTabletID"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "vendorPointingDeviceType"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "pointingDeviceSerialNumber"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "uniqueID"
      return_type: "UJ"
    }
    class_method: false
  }
  method {
    function {
      name: "capabilityMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "pointingDeviceType"
      return_type: "X(Enum.enum NSPointingDeviceType)"
    }
    class_method: false
  }
  method {
    function {
      name: "isEnteringProximity"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "touchesMatchingPhase:inView:"
      return_type: "LNSSet;"
      parameter {
        name: "phase"
        type: "X(Enum.enum NSTouchPhase)"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "phase"
      return_type: "X(Enum.enum NSEventPhase)"
    }
    class_method: false
  }
  method {
    function {
      name: "stage"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "stageTransition"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "associatedEventsMask"
      return_type: "X(Enum.enum NSEventMask)"
    }
    class_method: false
  }
  method {
    function {
      name: "isSwipeTrackingFromScrollEventsEnabled"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:"
      return_type: "V"
      parameter {
        name: "options"
        type: "X(Enum.enum NSEventSwipeTrackingOptions)"
      }
      parameter {
        name: "minDampenThreshold"
        type: "D"
      }
      parameter {
        name: "maxDampenThreshold"
        type: "D"
      }
      parameter {
        name: "trackingHandler"
        type: "X(BlockPointer.void (^)(CGFloat, NSEventPhase, BOOL, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startPeriodicEventsAfterDelay:withPeriod:"
      return_type: "V"
      parameter {
        name: "delay"
        type: "D"
      }
      parameter {
        name: "period"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stopPeriodicEvents"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:"
      return_type: "LNSEvent;"
      parameter {
        name: "type"
        type: "X(Enum.enum NSEventType)"
      }
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "flags"
        type: "X(Enum.enum NSEventModifierFlags)"
      }
      parameter {
        name: "time"
        type: "D"
      }
      parameter {
        name: "wNum"
        type: "I"
      }
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
      parameter {
        name: "eNum"
        type: "I"
      }
      parameter {
        name: "cNum"
        type: "I"
      }
      parameter {
        name: "pressure"
        type: "F"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:"
      return_type: "LNSEvent;"
      parameter {
        name: "type"
        type: "X(Enum.enum NSEventType)"
      }
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "flags"
        type: "X(Enum.enum NSEventModifierFlags)"
      }
      parameter {
        name: "time"
        type: "D"
      }
      parameter {
        name: "wNum"
        type: "I"
      }
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
      parameter {
        name: "keys"
        type: "LNSString;"
      }
      parameter {
        name: "ukeys"
        type: "LNSString;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "code"
        type: "US"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:"
      return_type: "LNSEvent;"
      parameter {
        name: "type"
        type: "X(Enum.enum NSEventType)"
      }
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "flags"
        type: "X(Enum.enum NSEventModifierFlags)"
      }
      parameter {
        name: "time"
        type: "D"
      }
      parameter {
        name: "wNum"
        type: "I"
      }
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
      parameter {
        name: "eNum"
        type: "I"
      }
      parameter {
        name: "tNum"
        type: "I"
      }
      parameter {
        name: "data"
        type: "*V;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:"
      return_type: "LNSEvent;"
      parameter {
        name: "type"
        type: "X(Enum.enum NSEventType)"
      }
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "flags"
        type: "X(Enum.enum NSEventModifierFlags)"
      }
      parameter {
        name: "time"
        type: "D"
      }
      parameter {
        name: "wNum"
        type: "I"
      }
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
      parameter {
        name: "subtype"
        type: "S"
      }
      parameter {
        name: "d1"
        type: "I"
      }
      parameter {
        name: "d2"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "mouseLocation"
      return_type: "RCGPoint;"
    }
    class_method: true
  }
  method {
    function {
      name: "modifierFlags"
      return_type: "X(Enum.enum NSEventModifierFlags)"
    }
    class_method: true
  }
  method {
    function {
      name: "pressedMouseButtons"
      return_type: "UI"
    }
    class_method: true
  }
  method {
    function {
      name: "doubleClickInterval"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "keyRepeatDelay"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "keyRepeatInterval"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "addGlobalMonitorForEventsMatchingMask:handler:"
      return_type: "OI"
      parameter {
        name: "mask"
        type: "X(Enum.enum NSEventMask)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSEvent *))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "addLocalMonitorForEventsMatchingMask:handler:"
      return_type: "OI"
      parameter {
        name: "mask"
        type: "X(Enum.enum NSEventMask)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.NSEvent *(^)(NSEvent *))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "removeMonitor:"
      return_type: "V"
      parameter {
        name: "eventMonitor"
        type: "OI"
      }
    }
    class_method: true
  }
  property {
    name: "type"
    type: "X(Enum.enum NSEventType)"
  }
  property {
    name: "modifierFlags"
    type: "X(Enum.enum NSEventModifierFlags)"
  }
  property {
    name: "timestamp"
    type: "D"
  }
  property {
    name: "window"
    type: "LNSWindow;"
  }
  property {
    name: "windowNumber"
    type: "I"
  }
  property {
    name: "context"
    type: "LNSGraphicsContext;"
  }
  property {
    name: "clickCount"
    type: "I"
  }
  property {
    name: "buttonNumber"
    type: "I"
  }
  property {
    name: "eventNumber"
    type: "I"
  }
  property {
    name: "pressure"
    type: "F"
  }
  property {
    name: "locationInWindow"
    type: "RCGPoint;"
  }
  property {
    name: "deltaX"
    type: "D"
  }
  property {
    name: "deltaY"
    type: "D"
  }
  property {
    name: "deltaZ"
    type: "D"
  }
  property {
    name: "hasPreciseScrollingDeltas"
    type: "Z"
  }
  property {
    name: "scrollingDeltaX"
    type: "D"
  }
  property {
    name: "scrollingDeltaY"
    type: "D"
  }
  property {
    name: "momentumPhase"
    type: "X(Enum.enum NSEventPhase)"
  }
  property {
    name: "directionInvertedFromDevice"
    type: "Z"
  }
  property {
    name: "characters"
    type: "LNSString;"
  }
  property {
    name: "charactersIgnoringModifiers"
    type: "LNSString;"
  }
  property {
    name: "ARepeat"
    type: "Z"
  }
  property {
    name: "keyCode"
    type: "US"
  }
  property {
    name: "trackingNumber"
    type: "I"
  }
  property {
    name: "userData"
    type: "*V;"
  }
  property {
    name: "trackingArea"
    type: "LNSTrackingArea;"
  }
  property {
    name: "subtype"
    type: "X(Enum.enum NSEventSubtype)"
  }
  property {
    name: "data1"
    type: "I"
  }
  property {
    name: "data2"
    type: "I"
  }
  property {
    name: "eventRef"
    type: "*cV;"
  }
  property {
    name: "CGEvent"
    type: "*R__CGEvent;;"
  }
  property {
    name: "magnification"
    type: "D"
  }
  property {
    name: "deviceID"
    type: "UI"
  }
  property {
    name: "rotation"
    type: "F"
  }
  property {
    name: "absoluteX"
    type: "I"
  }
  property {
    name: "absoluteY"
    type: "I"
  }
  property {
    name: "absoluteZ"
    type: "I"
  }
  property {
    name: "buttonMask"
    type: "X(Enum.enum NSEventButtonMask)"
  }
  property {
    name: "tilt"
    type: "RCGPoint;"
  }
  property {
    name: "tangentialPressure"
    type: "F"
  }
  property {
    name: "vendorDefined"
    type: "OI"
  }
  property {
    name: "vendorID"
    type: "UI"
  }
  property {
    name: "tabletID"
    type: "UI"
  }
  property {
    name: "pointingDeviceID"
    type: "UI"
  }
  property {
    name: "systemTabletID"
    type: "UI"
  }
  property {
    name: "vendorPointingDeviceType"
    type: "UI"
  }
  property {
    name: "pointingDeviceSerialNumber"
    type: "UI"
  }
  property {
    name: "uniqueID"
    type: "UJ"
  }
  property {
    name: "capabilityMask"
    type: "UI"
  }
  property {
    name: "pointingDeviceType"
    type: "X(Enum.enum NSPointingDeviceType)"
  }
  property {
    name: "enteringProximity"
    type: "Z"
  }
  property {
    name: "phase"
    type: "X(Enum.enum NSEventPhase)"
  }
  property {
    name: "stage"
    type: "I"
  }
  property {
    name: "stageTransition"
    type: "D"
  }
  property {
    name: "associatedEventsMask"
    type: "X(Enum.enum NSEventMask)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSEvent.h"
}
class {
  name: "NSResponder"
  base_class: "NSObject"
  protocol: "NSCoding"
  category: "NSResponder+NSStandardKeyBindingMethods"
  category: "NSResponder+NSUndoSupport"
  category: "NSResponder+NSControlEditingSupport"
  category: "NSResponder+NSErrorPresentation"
  category: "NSResponder+NSTextFinderSupport"
  category: "NSResponder+NSDeprecated"
  category: "NSResponder+NSUserActivity"
  category: "NSResponder+NSInterfaceStyle"
  category: "NSResponder+NSRestorableState"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextResponder"
      return_type: "LNSResponder;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNextResponder:"
      return_type: "V"
      parameter {
        name: "nextResponder"
        type: "LNSResponder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tryToPerform:with:"
      return_type: "Z"
      parameter {
        name: "anAction"
        type: "OS"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performKeyEquivalent:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validRequestorForSendType:returnType:"
      return_type: "OI"
      parameter {
        name: "sendType"
        type: "LNSString;"
      }
      parameter {
        name: "returnType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDown:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rightMouseDown:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "otherMouseDown:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseUp:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rightMouseUp:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "otherMouseUp:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseMoved:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDragged:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollWheel:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rightMouseDragged:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "otherMouseDragged:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseEntered:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseExited:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyDown:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyUp:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "flagsChanged:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabletPoint:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabletProximity:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cursorUpdate:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "magnifyWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rotateWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "swipeWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginGestureWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endGestureWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "smartMagnifyWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "touchesBeganWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "touchesMovedWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "touchesEndedWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "touchesCancelledWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "quickLookWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pressureChangeWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "noResponderFor:"
      return_type: "V"
      parameter {
        name: "eventSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "becomeFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "resignFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "interpretKeyEvents:"
      return_type: "V"
      parameter {
        name: "eventArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "flushBufferedKeyEvents"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "menu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showContextHelp:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "helpRequested:"
      return_type: "V"
      parameter {
        name: "eventPtr"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldBeTreatedAsInkEvent:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsScrollEventsForSwipeTrackingOnAxis:"
      return_type: "Z"
      parameter {
        name: "axis"
        type: "X(Enum.enum NSEventGestureAxis)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsForwardedScrollEventsForAxis:"
      return_type: "Z"
      parameter {
        name: "axis"
        type: "X(Enum.enum NSEventGestureAxis)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "supplementalTargetForAction:sender:"
      return_type: "OI"
      parameter {
        name: "action"
        type: "OS"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "nextResponder"
    type: "LNSResponder;"
  }
  property {
    name: "acceptsFirstResponder"
    type: "Z"
  }
  property {
    name: "menu"
    type: "LNSMenu;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSResponder.h"
}
class {
  name: "NSRunningApplication"
  base_class: "NSObject"
  method {
    function {
      name: "isTerminated"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isFinishedLaunching"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isActive"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "ownsMenuBar"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "activationPolicy"
      return_type: "X(Enum.enum NSApplicationActivationPolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "bundleIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "bundleURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "executableURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "processIdentifier"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "launchDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "icon"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "executableArchitecture"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "hide"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "unhide"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "activateWithOptions:"
      return_type: "Z"
      parameter {
        name: "options"
        type: "X(Enum.enum NSApplicationActivationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "terminate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "forceTerminate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "runningApplicationsWithBundleIdentifier:"
      return_type: "LNSArray;"
      parameter {
        name: "bundleIdentifier"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "runningApplicationWithProcessIdentifier:"
      return_type: "OI"
      parameter {
        name: "pid"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "currentApplication"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "terminateAutomaticallyTerminableApplications"
      return_type: "V"
    }
    class_method: true
  }
  property {
    name: "terminated"
    type: "Z"
  }
  property {
    name: "finishedLaunching"
    type: "Z"
  }
  property {
    name: "hidden"
    type: "Z"
  }
  property {
    name: "active"
    type: "Z"
  }
  property {
    name: "ownsMenuBar"
    type: "Z"
  }
  property {
    name: "activationPolicy"
    type: "X(Enum.enum NSApplicationActivationPolicy)"
  }
  property {
    name: "localizedName"
    type: "LNSString;"
  }
  property {
    name: "bundleIdentifier"
    type: "LNSString;"
  }
  property {
    name: "bundleURL"
    type: "LNSURL;"
  }
  property {
    name: "executableURL"
    type: "LNSURL;"
  }
  property {
    name: "processIdentifier"
    type: "I"
  }
  property {
    name: "launchDate"
    type: "LNSDate;"
  }
  property {
    name: "icon"
    type: "LNSImage;"
  }
  property {
    name: "executableArchitecture"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSRunningApplication.h"
}
class {
  name: "NSApplication"
  base_class: "NSResponder"
  protocol: "NSUserInterfaceValidations"
  protocol: "NSAccessibilityElement"
  protocol: "NSAccessibility"
  category: "NSApplication+NSWindowsMenu"
  category: "NSApplication+NSFullKeyboardAccess"
  category: "NSApplication+NSServicesMenu"
  category: "NSApplication+NSServicesHandling"
  category: "NSApplication+NSStandardAboutPanel"
  category: "NSApplication+NSApplicationLayoutDirection"
  category: "NSApplication+NSRestorableUserInterface"
  category: "NSApplication+NSRemoteNotifications"
  category: "NSApplication+NSDeprecated"
  category: "NSApplication+NSColorPanel"
  category: "NSApplication+NSApplicationHelpExtension"
  category: "NSApplication+NSPageLayoutPanel"
  category: "NSApplication+NSScripting"
  category: "NSApplication+NSUserInterfaceItemSearching"
  category: "NSApplication+NSWindowRestoration"
  category: "NSApplication+NSRestorableStateExtension"
  method {
    function {
      name: "sharedApplication"
      return_type: "LNSApplication;"
    }
    class_method: true
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSApplicationDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSApplicationDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "context"
      return_type: "LNSGraphicsContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "hide:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unhide:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unhideWithoutActivation"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "windowWithWindowNumber:"
      return_type: "LNSWindow;"
      parameter {
        name: "windowNum"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mainWindow"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "keyWindow"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "isActive"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isRunning"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "deactivate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "activateIgnoringOtherApps:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hideOtherApplications:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unhideAllApplications:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "finishLaunching"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "run"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "runModalForWindow:"
      return_type: "I"
      parameter {
        name: "theWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stop:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stopModal"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "stopModalWithCode:"
      return_type: "V"
      parameter {
        name: "returnCode"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "abortModal"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "modalWindow"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "beginModalSessionForWindow:"
      return_type: "*R_NSModalSession;;"
      parameter {
        name: "theWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalSession:"
      return_type: "I"
      parameter {
        name: "session"
        type: "*R_NSModalSession;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endModalSession:"
      return_type: "V"
      parameter {
        name: "session"
        type: "*R_NSModalSession;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "terminate:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "requestUserAttention:"
      return_type: "I"
      parameter {
        name: "requestType"
        type: "X(Enum.enum NSRequestUserAttentionType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelUserAttentionRequest:"
      return_type: "V"
      parameter {
        name: "request"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextEventMatchingMask:untilDate:inMode:dequeue:"
      return_type: "LNSEvent;"
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "expiration"
        type: "LNSDate;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
      parameter {
        name: "deqFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "discardEventsMatchingMask:beforeEvent:"
      return_type: "V"
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "lastEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postEvent:atStart:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentEvent"
      return_type: "LNSEvent;"
    }
    class_method: false
  }
  method {
    function {
      name: "sendEvent:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preventWindowOrdering"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "makeWindowsPerform:inOrder:"
      return_type: "LNSWindow;"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setWindowsNeedUpdate:"
      return_type: "V"
      parameter {
        name: "needUpdate"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateWindows"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "mainMenu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMainMenu:"
      return_type: "V"
      parameter {
        name: "mainMenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "helpMenu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHelpMenu:"
      return_type: "V"
      parameter {
        name: "helpMenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationIconImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setApplicationIconImage:"
      return_type: "V"
      parameter {
        name: "applicationIconImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "activationPolicy"
      return_type: "X(Enum.enum NSApplicationActivationPolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "setActivationPolicy:"
      return_type: "Z"
      parameter {
        name: "activationPolicy"
        type: "X(Enum.enum NSApplicationActivationPolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dockTile"
      return_type: "LNSDockTile;"
    }
    class_method: false
  }
  method {
    function {
      name: "sendAction:to:from:"
      return_type: "Z"
      parameter {
        name: "theAction"
        type: "OS"
      }
      parameter {
        name: "theTarget"
        type: "OI"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "targetForAction:"
      return_type: "OI"
      parameter {
        name: "theAction"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "targetForAction:to:from:"
      return_type: "OI"
      parameter {
        name: "theAction"
        type: "OS"
      }
      parameter {
        name: "theTarget"
        type: "OI"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tryToPerform:with:"
      return_type: "Z"
      parameter {
        name: "anAction"
        type: "OS"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validRequestorForSendType:returnType:"
      return_type: "OI"
      parameter {
        name: "sendType"
        type: "LNSString;"
      }
      parameter {
        name: "returnType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reportException:"
      return_type: "V"
      parameter {
        name: "theException"
        type: "LNSException;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "detachDrawingThread:toTarget:withObject:"
      return_type: "V"
      parameter {
        name: "selector"
        type: "OS"
      }
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "argument"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "replyToApplicationShouldTerminate:"
      return_type: "V"
      parameter {
        name: "shouldTerminate"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replyToOpenOrPrint:"
      return_type: "V"
      parameter {
        name: "reply"
        type: "X(Enum.enum NSApplicationDelegateReply)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontCharacterPalette:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentationOptions"
      return_type: "X(Enum.enum NSApplicationPresentationOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "setPresentationOptions:"
      return_type: "V"
      parameter {
        name: "presentationOptions"
        type: "X(Enum.enum NSApplicationPresentationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentSystemPresentationOptions"
      return_type: "X(Enum.enum NSApplicationPresentationOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "occlusionState"
      return_type: "X(Enum.enum NSApplicationOcclusionState)"
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSApplicationDelegate>)"
  }
  property {
    name: "context"
    type: "LNSGraphicsContext;"
  }
  property {
    name: "mainWindow"
    type: "LNSWindow;"
  }
  property {
    name: "keyWindow"
    type: "LNSWindow;"
  }
  property {
    name: "active"
    type: "Z"
  }
  property {
    name: "hidden"
    type: "Z"
  }
  property {
    name: "running"
    type: "Z"
  }
  property {
    name: "modalWindow"
    type: "LNSWindow;"
  }
  property {
    name: "currentEvent"
    type: "LNSEvent;"
  }
  property {
    name: "windows"
    type: "LNSArray;"
  }
  property {
    name: "mainMenu"
    type: "LNSMenu;"
  }
  property {
    name: "helpMenu"
    type: "LNSMenu;"
  }
  property {
    name: "applicationIconImage"
    type: "LNSImage;"
  }
  property {
    name: "dockTile"
    type: "LNSDockTile;"
  }
  property {
    name: "presentationOptions"
    type: "X(Enum.enum NSApplicationPresentationOptions)"
  }
  property {
    name: "currentSystemPresentationOptions"
    type: "X(Enum.enum NSApplicationPresentationOptions)"
  }
  property {
    name: "occlusionState"
    type: "X(Enum.enum NSApplicationOcclusionState)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
class {
  name: "NSAnimation"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithDuration:animationCurve:"
      return_type: "OI"
      parameter {
        name: "duration"
        type: "D"
      }
      parameter {
        name: "animationCurve"
        type: "X(Enum.enum NSAnimationCurve)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startAnimation"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "stopAnimation"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isAnimating"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "currentProgress"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrentProgress:"
      return_type: "V"
      parameter {
        name: "currentProgress"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "duration"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setDuration:"
      return_type: "V"
      parameter {
        name: "duration"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animationBlockingMode"
      return_type: "X(Enum.enum NSAnimationBlockingMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimationBlockingMode:"
      return_type: "V"
      parameter {
        name: "animationBlockingMode"
        type: "X(Enum.enum NSAnimationBlockingMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameRate"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameRate:"
      return_type: "V"
      parameter {
        name: "frameRate"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animationCurve"
      return_type: "X(Enum.enum NSAnimationCurve)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimationCurve:"
      return_type: "V"
      parameter {
        name: "animationCurve"
        type: "X(Enum.enum NSAnimationCurve)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentValue"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSAnimationDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSAnimationDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "progressMarks"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setProgressMarks:"
      return_type: "V"
      parameter {
        name: "progressMarks"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addProgressMark:"
      return_type: "V"
      parameter {
        name: "progressMark"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeProgressMark:"
      return_type: "V"
      parameter {
        name: "progressMark"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startWhenAnimation:reachesProgress:"
      return_type: "V"
      parameter {
        name: "animation"
        type: "LNSAnimation;"
      }
      parameter {
        name: "startProgress"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stopWhenAnimation:reachesProgress:"
      return_type: "V"
      parameter {
        name: "animation"
        type: "LNSAnimation;"
      }
      parameter {
        name: "stopProgress"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clearStartAnimation"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "clearStopAnimation"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "runLoopModesForAnimating"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "animating"
    type: "Z"
  }
  property {
    name: "currentProgress"
    type: "F"
  }
  property {
    name: "duration"
    type: "D"
  }
  property {
    name: "animationBlockingMode"
    type: "X(Enum.enum NSAnimationBlockingMode)"
  }
  property {
    name: "frameRate"
    type: "F"
  }
  property {
    name: "animationCurve"
    type: "X(Enum.enum NSAnimationCurve)"
  }
  property {
    name: "currentValue"
    type: "F"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSAnimationDelegate>)"
  }
  property {
    name: "progressMarks"
    type: "LNSArray;"
  }
  property {
    name: "runLoopModesForAnimating"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAnimation.h"
}
class {
  name: "NSViewAnimation"
  base_class: "NSAnimation"
  method {
    function {
      name: "initWithViewAnimations:"
      return_type: "OI"
      parameter {
        name: "viewAnimations"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewAnimations"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setViewAnimations:"
      return_type: "V"
      parameter {
        name: "viewAnimations"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "viewAnimations"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAnimation.h"
}
class {
  name: "NSAppearance"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentAppearance"
      return_type: "LNSAppearance;"
    }
    class_method: true
  }
  method {
    function {
      name: "setCurrentAppearance:"
      return_type: "V"
      parameter {
        name: "appearance"
        type: "LNSAppearance;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "appearanceNamed:"
      return_type: "LNSAppearance;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithAppearanceNamed:bundle:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "bundle"
        type: "LNSBundle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsVibrancy"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "allowsVibrancy"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAppearance.h"
}
class {
  name: "NSView"
  base_class: "NSResponder"
  protocol: "NSAnimatablePropertyContainer"
  protocol: "NSUserInterfaceItemIdentification"
  protocol: "NSDraggingDestination"
  protocol: "NSAppearanceCustomization"
  protocol: "NSAccessibilityElement"
  protocol: "NSAccessibility"
  category: "NSView+NSKeyboardUI"
  category: "NSView+NSPrinting"
  category: "NSView+NSDrag"
  category: "NSView+NSFullScreenMode"
  category: "NSView+NSDefinition"
  category: "NSView+NSFindIndicator"
  category: "NSView+NSGestureRecognizer"
  category: "NSView+NSDeprecated"
  category: "NSView+NSClipViewSuperview"
  category: "NSView+NSViewEnclosingMenuItem"
  category: "NSView+NSConstraintBasedLayoutInstallingConstraints"
  category: "NSView+NSConstraintBasedLayoutCoreMethods"
  category: "NSView+NSConstraintBasedCompatibility"
  category: "NSView+NSConstraintBasedLayoutLayering"
  category: "NSView+NSConstraintBasedLayoutFittingSize"
  category: "NSView+NSConstraintBasedLayoutDebugging"
  category: "NSView+NSRulerMarkerClientViewDelegation"
  category: "NSView+NSOpenGLSurfaceResolution"
  method {
    function {
      name: "initWithFrame:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "superview"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "subviews"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSubviews:"
      return_type: "V"
      parameter {
        name: "newSubviews"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDescendantOf:"
      return_type: "Z"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ancestorSharedWithView:"
      return_type: "LNSView;"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "opaqueAncestor"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "isHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHidden:"
      return_type: "V"
      parameter {
        name: "hidden"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHiddenOrHasHiddenAncestor"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "getRectsBeingDrawn:count:"
      return_type: "V"
      parameter {
        name: "rects"
        type: "**cRCGRect;;;"
      }
      parameter {
        name: "count"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "needsToDrawRect:"
      return_type: "Z"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsDefaultClipping"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidHide"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidUnhide"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "addSubview:"
      return_type: "V"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addSubview:positioned:relativeTo:"
      return_type: "V"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
      parameter {
        name: "place"
        type: "X(Enum.enum NSWindowOrderingMode)"
      }
      parameter {
        name: "otherView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortSubviewsUsingFunction:context:"
      return_type: "V"
      parameter {
        name: "compare"
        type: "*(X(Unexposed.id)X(Unexposed.id)*V;)X(Enum.enum NSComparisonResult);"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillMoveToWindow:"
      return_type: "V"
      parameter {
        name: "newWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidMoveToWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillMoveToSuperview:"
      return_type: "V"
      parameter {
        name: "newSuperview"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidMoveToSuperview"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "didAddSubview:"
      return_type: "V"
      parameter {
        name: "subview"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "willRemoveSubview:"
      return_type: "V"
      parameter {
        name: "subview"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromSuperview"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "replaceSubview:with:"
      return_type: "V"
      parameter {
        name: "oldView"
        type: "LNSView;"
      }
      parameter {
        name: "newView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromSuperviewWithoutNeedingDisplay"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidChangeBackingProperties"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "postsFrameChangedNotifications"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPostsFrameChangedNotifications:"
      return_type: "V"
      parameter {
        name: "postsFrameChangedNotifications"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resizeSubviewsWithOldSize:"
      return_type: "V"
      parameter {
        name: "oldSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resizeWithOldSuperviewSize:"
      return_type: "V"
      parameter {
        name: "oldSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoresizesSubviews"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoresizesSubviews:"
      return_type: "V"
      parameter {
        name: "autoresizesSubviews"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoresizingMask"
      return_type: "X(Enum.enum NSAutoresizingMaskOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoresizingMask:"
      return_type: "V"
      parameter {
        name: "autoresizingMask"
        type: "X(Enum.enum NSAutoresizingMaskOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameOrigin:"
      return_type: "V"
      parameter {
        name: "newOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameSize:"
      return_type: "V"
      parameter {
        name: "newSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFrame:"
      return_type: "V"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameRotation"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameRotation:"
      return_type: "V"
      parameter {
        name: "frameRotation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameCenterRotation"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameCenterRotation:"
      return_type: "V"
      parameter {
        name: "frameCenterRotation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBoundsOrigin:"
      return_type: "V"
      parameter {
        name: "newOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBoundsSize:"
      return_type: "V"
      parameter {
        name: "newSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundsRotation"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setBoundsRotation:"
      return_type: "V"
      parameter {
        name: "boundsRotation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "translateOriginToPoint:"
      return_type: "V"
      parameter {
        name: "translation"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scaleUnitSquareToSize:"
      return_type: "V"
      parameter {
        name: "newUnitSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rotateByAngle:"
      return_type: "V"
      parameter {
        name: "angle"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bounds"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBounds:"
      return_type: "V"
      parameter {
        name: "bounds"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFlipped"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isRotatedFromBase"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isRotatedOrScaledFromBase"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isOpaque"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "convertPoint:fromView:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPoint:toView:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertSize:fromView:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertSize:toView:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRect:fromView:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRect:toView:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backingAlignedRect:options:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSAlignmentOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "centerScanRect:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPointToBacking:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPointFromBacking:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertSizeToBacking:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertSizeFromBacking:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectToBacking:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectFromBacking:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPointToLayer:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPointFromLayer:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertSizeToLayer:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertSizeFromLayer:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectToLayer:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectFromLayer:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPointToBase:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPointFromBase:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertSizeToBase:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertSizeFromBase:"
      return_type: "RCGSize;"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectToBase:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectFromBase:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canDrawConcurrently"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanDrawConcurrently:"
      return_type: "V"
      parameter {
        name: "canDrawConcurrently"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canDraw"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsDisplayInRect:"
      return_type: "V"
      parameter {
        name: "invalidRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "needsDisplay"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsDisplay:"
      return_type: "V"
      parameter {
        name: "needsDisplay"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lockFocus"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "unlockFocus"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "lockFocusIfCanDraw"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "lockFocusIfCanDrawInContext:"
      return_type: "Z"
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "focusView"
      return_type: "LNSView;"
    }
    class_method: true
  }
  method {
    function {
      name: "visibleRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "display"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "displayIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "displayIfNeededIgnoringOpacity"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "displayRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayIfNeededInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayRectIgnoringOpacity:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayIfNeededInRectIgnoringOpacity:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawRect:"
      return_type: "V"
      parameter {
        name: "dirtyRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayRectIgnoringOpacity:inContext:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bitmapImageRepForCachingDisplayInRect:"
      return_type: "LNSBitmapImageRep;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cacheDisplayInRect:toBitmapImageRep:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "bitmapImageRep"
        type: "LNSBitmapImageRep;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillDraw"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "scrollPoint:"
      return_type: "V"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollRectToVisible:"
      return_type: "Z"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoscroll:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "adjustScroll:"
      return_type: "RCGRect;"
      parameter {
        name: "newVisible"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollRect:by:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "delta"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "translateRectsNeedingDisplayInRect:by:"
      return_type: "V"
      parameter {
        name: "clipRect"
        type: "RCGRect;"
      }
      parameter {
        name: "delta"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hitTest:"
      return_type: "LNSView;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouse:inRect:"
      return_type: "Z"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewWithTag:"
      return_type: "OI"
      parameter {
        name: "aTag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "performKeyEquivalent:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsFirstMouse:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldDelayWindowOrderingForEvent:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "needsPanelToBecomeKey"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDownCanMoveWindow"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsTouchEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAcceptsTouchEvents:"
      return_type: "V"
      parameter {
        name: "acceptsTouchEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsRestingTouches"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setWantsRestingTouches:"
      return_type: "V"
      parameter {
        name: "wantsRestingTouches"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addCursorRect:cursor:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "anObj"
        type: "LNSCursor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCursorRect:cursor:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "anObj"
        type: "LNSCursor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "discardCursorRects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resetCursorRects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "addTrackingRect:owner:userData:assumeInside:"
      return_type: "I"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "data"
        type: "*V;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTrackingRect:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeBackingLayer"
      return_type: "LCALayer;"
    }
    class_method: false
  }
  method {
    function {
      name: "layerContentsRedrawPolicy"
      return_type: "X(Enum.enum NSViewLayerContentsRedrawPolicy)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLayerContentsRedrawPolicy:"
      return_type: "V"
      parameter {
        name: "layerContentsRedrawPolicy"
        type: "X(Enum.enum NSViewLayerContentsRedrawPolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layerContentsPlacement"
      return_type: "X(Enum.enum NSViewLayerContentsPlacement)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLayerContentsPlacement:"
      return_type: "V"
      parameter {
        name: "layerContentsPlacement"
        type: "X(Enum.enum NSViewLayerContentsPlacement)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsLayer"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setWantsLayer:"
      return_type: "V"
      parameter {
        name: "wantsLayer"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layer"
      return_type: "LCALayer;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLayer:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsUpdateLayer"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "updateLayer"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "canDrawSubviewsIntoLayer"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanDrawSubviewsIntoLayer:"
      return_type: "V"
      parameter {
        name: "canDrawSubviewsIntoLayer"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alphaValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlphaValue:"
      return_type: "V"
      parameter {
        name: "alphaValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layerUsesCoreImageFilters"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setLayerUsesCoreImageFilters:"
      return_type: "V"
      parameter {
        name: "layerUsesCoreImageFilters"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundFilters"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundFilters:"
      return_type: "V"
      parameter {
        name: "backgroundFilters"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compositingFilter"
      return_type: "LCIFilter;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompositingFilter:"
      return_type: "V"
      parameter {
        name: "compositingFilter"
        type: "LCIFilter;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentFilters"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentFilters:"
      return_type: "V"
      parameter {
        name: "contentFilters"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadow"
      return_type: "LNSShadow;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadow:"
      return_type: "V"
      parameter {
        name: "shadow"
        type: "LNSShadow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addTrackingArea:"
      return_type: "V"
      parameter {
        name: "trackingArea"
        type: "LNSTrackingArea;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTrackingArea:"
      return_type: "V"
      parameter {
        name: "trackingArea"
        type: "LNSTrackingArea;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackingAreas"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "updateTrackingAreas"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "postsBoundsChangedNotifications"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPostsBoundsChangedNotifications:"
      return_type: "V"
      parameter {
        name: "postsBoundsChangedNotifications"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enclosingScrollView"
      return_type: "LNSScrollView;"
    }
    class_method: false
  }
  method {
    function {
      name: "menuForEvent:"
      return_type: "LNSMenu;"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultMenu"
      return_type: "LNSMenu;"
    }
    class_method: true
  }
  method {
    function {
      name: "toolTip"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setToolTip:"
      return_type: "V"
      parameter {
        name: "toolTip"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addToolTipRect:owner:userData:"
      return_type: "I"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "data"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeToolTip:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllToolTips"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillStartLiveResize"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidEndLiveResize"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "inLiveResize"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "preservesContentDuringLiveResize"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "rectPreservedDuringLiveResize"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "getRectsExposedDuringLiveResize:count:"
      return_type: "V"
      parameter {
        name: "exposedRects"
        type: "X(ConstantArray.NSRect [4])"
      }
      parameter {
        name: "count"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "inputContext"
      return_type: "LNSTextInputContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "rectForSmartMagnificationAtPoint:inRect:"
      return_type: "RCGRect;"
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "visibleRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userInterfaceLayoutDirection"
      return_type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserInterfaceLayoutDirection:"
      return_type: "V"
      parameter {
        name: "userInterfaceLayoutDirection"
        type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prepareForReuse"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isCompatibleWithResponsiveScrolling"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "prepareContentInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preparedContentRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreparedContentRect:"
      return_type: "V"
      parameter {
        name: "preparedContentRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsVibrancy"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "window"
    type: "LNSWindow;"
  }
  property {
    name: "superview"
    type: "LNSView;"
  }
  property {
    name: "subviews"
    type: "LNSArray;"
  }
  property {
    name: "opaqueAncestor"
    type: "LNSView;"
  }
  property {
    name: "hidden"
    type: "Z"
  }
  property {
    name: "hiddenOrHasHiddenAncestor"
    type: "Z"
  }
  property {
    name: "wantsDefaultClipping"
    type: "Z"
  }
  property {
    name: "postsFrameChangedNotifications"
    type: "Z"
  }
  property {
    name: "autoresizesSubviews"
    type: "Z"
  }
  property {
    name: "autoresizingMask"
    type: "X(Enum.enum NSAutoresizingMaskOptions)"
  }
  property {
    name: "frame"
    type: "RCGRect;"
  }
  property {
    name: "frameRotation"
    type: "D"
  }
  property {
    name: "frameCenterRotation"
    type: "D"
  }
  property {
    name: "boundsRotation"
    type: "D"
  }
  property {
    name: "bounds"
    type: "RCGRect;"
  }
  property {
    name: "flipped"
    type: "Z"
  }
  property {
    name: "rotatedFromBase"
    type: "Z"
  }
  property {
    name: "rotatedOrScaledFromBase"
    type: "Z"
  }
  property {
    name: "opaque"
    type: "Z"
  }
  property {
    name: "canDrawConcurrently"
    type: "Z"
  }
  property {
    name: "canDraw"
    type: "Z"
  }
  property {
    name: "needsDisplay"
    type: "Z"
  }
  property {
    name: "visibleRect"
    type: "RCGRect;"
  }
  property {
    name: "tag"
    type: "I"
  }
  property {
    name: "needsPanelToBecomeKey"
    type: "Z"
  }
  property {
    name: "mouseDownCanMoveWindow"
    type: "Z"
  }
  property {
    name: "acceptsTouchEvents"
    type: "Z"
  }
  property {
    name: "wantsRestingTouches"
    type: "Z"
  }
  property {
    name: "layerContentsRedrawPolicy"
    type: "X(Enum.enum NSViewLayerContentsRedrawPolicy)"
  }
  property {
    name: "layerContentsPlacement"
    type: "X(Enum.enum NSViewLayerContentsPlacement)"
  }
  property {
    name: "wantsLayer"
    type: "Z"
  }
  property {
    name: "layer"
    type: "LCALayer;"
  }
  property {
    name: "wantsUpdateLayer"
    type: "Z"
  }
  property {
    name: "canDrawSubviewsIntoLayer"
    type: "Z"
  }
  property {
    name: "alphaValue"
    type: "D"
  }
  property {
    name: "layerUsesCoreImageFilters"
    type: "Z"
  }
  property {
    name: "backgroundFilters"
    type: "LNSArray;"
  }
  property {
    name: "compositingFilter"
    type: "LCIFilter;"
  }
  property {
    name: "contentFilters"
    type: "LNSArray;"
  }
  property {
    name: "shadow"
    type: "LNSShadow;"
  }
  property {
    name: "trackingAreas"
    type: "LNSArray;"
  }
  property {
    name: "postsBoundsChangedNotifications"
    type: "Z"
  }
  property {
    name: "enclosingScrollView"
    type: "LNSScrollView;"
  }
  property {
    name: "toolTip"
    type: "LNSString;"
  }
  property {
    name: "inLiveResize"
    type: "Z"
  }
  property {
    name: "preservesContentDuringLiveResize"
    type: "Z"
  }
  property {
    name: "rectPreservedDuringLiveResize"
    type: "RCGRect;"
  }
  property {
    name: "inputContext"
    type: "LNSTextInputContext;"
  }
  property {
    name: "userInterfaceLayoutDirection"
    type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
  }
  property {
    name: "preparedContentRect"
    type: "RCGRect;"
  }
  property {
    name: "allowsVibrancy"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
class {
  name: "NSText"
  base_class: "NSView"
  protocol: "NSChangeSpelling"
  protocol: "NSIgnoreMisspelledWords"
  method {
    function {
      name: "initWithFrame:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "string"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setString:"
      return_type: "V"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceCharactersInRange:withString:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceCharactersInRange:withRTF:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "rtfData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceCharactersInRange:withRTFD:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "rtfdData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "RTFFromRange:"
      return_type: "LNSData;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "RTFDFromRange:"
      return_type: "LNSData;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeRTFDToFile:atomically:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readRTFDFromFile:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSTextDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSTextDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectable:"
      return_type: "V"
      parameter {
        name: "selectable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isRichText"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRichText:"
      return_type: "V"
      parameter {
        name: "richText"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "importsGraphics"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setImportsGraphics:"
      return_type: "V"
      parameter {
        name: "importsGraphics"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFieldEditor"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setFieldEditor:"
      return_type: "V"
      parameter {
        name: "fieldEditor"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesFontPanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesFontPanel:"
      return_type: "V"
      parameter {
        name: "usesFontPanel"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isRulerVisible"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedRange:"
      return_type: "V"
      parameter {
        name: "selectedRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollRangeToVisible:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "font"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFont:"
      return_type: "V"
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextColor:"
      return_type: "V"
      parameter {
        name: "textColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignment"
      return_type: "X(Enum.enum NSTextAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlignment:"
      return_type: "V"
      parameter {
        name: "alignment"
        type: "X(Enum.enum NSTextAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "baseWritingDirection"
      return_type: "X(Enum.enum NSWritingDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBaseWritingDirection:"
      return_type: "V"
      parameter {
        name: "baseWritingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTextColor:range:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFont:range:"
      return_type: "V"
      parameter {
        name: "font"
        type: "LNSFont;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxSize:"
      return_type: "V"
      parameter {
        name: "maxSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinSize:"
      return_type: "V"
      parameter {
        name: "minSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHorizontallyResizable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHorizontallyResizable:"
      return_type: "V"
      parameter {
        name: "horizontallyResizable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isVerticallyResizable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticallyResizable:"
      return_type: "V"
      parameter {
        name: "verticallyResizable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeToFit"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "copy:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copyFont:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copyRuler:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cut:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delete:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paste:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pasteFont:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pasteRuler:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectAll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeFont:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignLeft:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignRight:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignCenter:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subscript:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "superscript:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "underline:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unscript:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showGuessPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkSpelling:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleRuler:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "string"
    type: "LNSString;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSTextDelegate>)"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "selectable"
    type: "Z"
  }
  property {
    name: "richText"
    type: "Z"
  }
  property {
    name: "importsGraphics"
    type: "Z"
  }
  property {
    name: "fieldEditor"
    type: "Z"
  }
  property {
    name: "usesFontPanel"
    type: "Z"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "rulerVisible"
    type: "Z"
  }
  property {
    name: "selectedRange"
    type: "R_NSRange;"
  }
  property {
    name: "font"
    type: "LNSFont;"
  }
  property {
    name: "textColor"
    type: "LNSColor;"
  }
  property {
    name: "alignment"
    type: "X(Enum.enum NSTextAlignment)"
  }
  property {
    name: "baseWritingDirection"
    type: "X(Enum.enum NSWritingDirection)"
  }
  property {
    name: "maxSize"
    type: "RCGSize;"
  }
  property {
    name: "minSize"
    type: "RCGSize;"
  }
  property {
    name: "horizontallyResizable"
    type: "Z"
  }
  property {
    name: "verticallyResizable"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSText.h"
}
class {
  name: "NSTextTab"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithTextAlignment:location:options:"
      return_type: "OI"
      parameter {
        name: "alignment"
        type: "X(Enum.enum NSTextAlignment)"
      }
      parameter {
        name: "loc"
        type: "D"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignment"
      return_type: "X(Enum.enum NSTextAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "options"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithType:location:"
      return_type: "OI"
      parameter {
        name: "type"
        type: "X(Enum.enum NSTextTabType)"
      }
      parameter {
        name: "loc"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "location"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "tabStopType"
      return_type: "X(Enum.enum NSTextTabType)"
    }
    class_method: false
  }
  property {
    name: "alignment"
    type: "X(Enum.enum NSTextAlignment)"
  }
  property {
    name: "options"
    type: "LNSDictionary;"
  }
  property {
    name: "location"
    type: "D"
  }
  property {
    name: "tabStopType"
    type: "X(Enum.enum NSTextTabType)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSParagraphStyle.h"
}
class {
  name: "NSParagraphStyle"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "defaultParagraphStyle"
      return_type: "LNSParagraphStyle;"
    }
    class_method: true
  }
  method {
    function {
      name: "defaultWritingDirectionForLanguage:"
      return_type: "X(Enum.enum NSWritingDirection)"
      parameter {
        name: "languageName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "lineSpacing"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSpacing"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "alignment"
      return_type: "X(Enum.enum NSTextAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "headIndent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "tailIndent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "firstLineHeadIndent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "tabStops"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "minimumLineHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "maximumLineHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "lineBreakMode"
      return_type: "X(Enum.enum NSLineBreakMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "baseWritingDirection"
      return_type: "X(Enum.enum NSWritingDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "lineHeightMultiple"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSpacingBefore"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "defaultTabInterval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "textBlocks"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "textLists"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenationFactor"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "tighteningFactorForTruncation"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "headerLevel"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "lineSpacing"
    type: "D"
  }
  property {
    name: "paragraphSpacing"
    type: "D"
  }
  property {
    name: "alignment"
    type: "X(Enum.enum NSTextAlignment)"
  }
  property {
    name: "headIndent"
    type: "D"
  }
  property {
    name: "tailIndent"
    type: "D"
  }
  property {
    name: "firstLineHeadIndent"
    type: "D"
  }
  property {
    name: "tabStops"
    type: "LNSArray;"
  }
  property {
    name: "minimumLineHeight"
    type: "D"
  }
  property {
    name: "maximumLineHeight"
    type: "D"
  }
  property {
    name: "lineBreakMode"
    type: "X(Enum.enum NSLineBreakMode)"
  }
  property {
    name: "baseWritingDirection"
    type: "X(Enum.enum NSWritingDirection)"
  }
  property {
    name: "lineHeightMultiple"
    type: "D"
  }
  property {
    name: "paragraphSpacingBefore"
    type: "D"
  }
  property {
    name: "defaultTabInterval"
    type: "D"
  }
  property {
    name: "textBlocks"
    type: "LNSArray;"
  }
  property {
    name: "textLists"
    type: "LNSArray;"
  }
  property {
    name: "hyphenationFactor"
    type: "F"
  }
  property {
    name: "tighteningFactorForTruncation"
    type: "F"
  }
  property {
    name: "headerLevel"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSParagraphStyle.h"
}
class {
  name: "NSMutableParagraphStyle"
  base_class: "NSParagraphStyle"
  method {
    function {
      name: "lineSpacing"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineSpacing:"
      return_type: "V"
      parameter {
        name: "lineSpacing"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSpacing"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setParagraphSpacing:"
      return_type: "V"
      parameter {
        name: "paragraphSpacing"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignment"
      return_type: "X(Enum.enum NSTextAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlignment:"
      return_type: "V"
      parameter {
        name: "alignment"
        type: "X(Enum.enum NSTextAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "headIndent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setHeadIndent:"
      return_type: "V"
      parameter {
        name: "headIndent"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tailIndent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTailIndent:"
      return_type: "V"
      parameter {
        name: "tailIndent"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstLineHeadIndent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setFirstLineHeadIndent:"
      return_type: "V"
      parameter {
        name: "firstLineHeadIndent"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addTabStop:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "LNSTextTab;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTabStop:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "LNSTextTab;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabStops"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTabStops:"
      return_type: "V"
      parameter {
        name: "tabStops"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minimumLineHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinimumLineHeight:"
      return_type: "V"
      parameter {
        name: "minimumLineHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumLineHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaximumLineHeight:"
      return_type: "V"
      parameter {
        name: "maximumLineHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineBreakMode"
      return_type: "X(Enum.enum NSLineBreakMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineBreakMode:"
      return_type: "V"
      parameter {
        name: "lineBreakMode"
        type: "X(Enum.enum NSLineBreakMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setParagraphStyle:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "LNSParagraphStyle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "baseWritingDirection"
      return_type: "X(Enum.enum NSWritingDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBaseWritingDirection:"
      return_type: "V"
      parameter {
        name: "baseWritingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineHeightMultiple"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineHeightMultiple:"
      return_type: "V"
      parameter {
        name: "lineHeightMultiple"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSpacingBefore"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setParagraphSpacingBefore:"
      return_type: "V"
      parameter {
        name: "paragraphSpacingBefore"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultTabInterval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultTabInterval:"
      return_type: "V"
      parameter {
        name: "defaultTabInterval"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textBlocks"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextBlocks:"
      return_type: "V"
      parameter {
        name: "textBlocks"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textLists"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextLists:"
      return_type: "V"
      parameter {
        name: "textLists"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenationFactor"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setHyphenationFactor:"
      return_type: "V"
      parameter {
        name: "hyphenationFactor"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tighteningFactorForTruncation"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setTighteningFactorForTruncation:"
      return_type: "V"
      parameter {
        name: "tighteningFactorForTruncation"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "headerLevel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setHeaderLevel:"
      return_type: "V"
      parameter {
        name: "headerLevel"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "lineSpacing"
    type: "D"
  }
  property {
    name: "paragraphSpacing"
    type: "D"
  }
  property {
    name: "alignment"
    type: "X(Enum.enum NSTextAlignment)"
  }
  property {
    name: "headIndent"
    type: "D"
  }
  property {
    name: "tailIndent"
    type: "D"
  }
  property {
    name: "firstLineHeadIndent"
    type: "D"
  }
  property {
    name: "tabStops"
    type: "LNSArray;"
  }
  property {
    name: "minimumLineHeight"
    type: "D"
  }
  property {
    name: "maximumLineHeight"
    type: "D"
  }
  property {
    name: "lineBreakMode"
    type: "X(Enum.enum NSLineBreakMode)"
  }
  property {
    name: "baseWritingDirection"
    type: "X(Enum.enum NSWritingDirection)"
  }
  property {
    name: "lineHeightMultiple"
    type: "D"
  }
  property {
    name: "paragraphSpacingBefore"
    type: "D"
  }
  property {
    name: "defaultTabInterval"
    type: "D"
  }
  property {
    name: "textBlocks"
    type: "LNSArray;"
  }
  property {
    name: "textLists"
    type: "LNSArray;"
  }
  property {
    name: "hyphenationFactor"
    type: "F"
  }
  property {
    name: "tighteningFactorForTruncation"
    type: "F"
  }
  property {
    name: "headerLevel"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSParagraphStyle.h"
}
class {
  name: "NSCell"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  protocol: "NSUserInterfaceItemIdentification"
  protocol: "NSAccessibilityElement"
  protocol: "NSAccessibility"
  category: "NSCell+NSKeyboardUI"
  category: "NSCell+NSCellAttributedStringMethods"
  category: "NSCell+NSCellMixedState"
  category: "NSCell+NSCellHitTest"
  category: "NSCell+NSCellExpansion"
  category: "NSCell+NSCellBackgroundStyle"
  category: "NSCell+NSDeprecated"
  method {
    function {
      name: "prefersTrackingUntilMouseUp"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "initTextCell:"
      return_type: "OI"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initImageCell:"
      return_type: "OI"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlView:"
      return_type: "V"
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "type"
      return_type: "X(Enum.enum NSCellType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setType:"
      return_type: "V"
      parameter {
        name: "type"
        type: "X(Enum.enum NSCellType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "state"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setState:"
      return_type: "V"
      parameter {
        name: "state"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setTag:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOpaque"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendActionOn:"
      return_type: "I"
      parameter {
        name: "mask"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isContinuous"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setContinuous:"
      return_type: "V"
      parameter {
        name: "continuous"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectable:"
      return_type: "V"
      parameter {
        name: "selectable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBordered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBordered:"
      return_type: "V"
      parameter {
        name: "bordered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBezeled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBezeled:"
      return_type: "V"
      parameter {
        name: "bezeled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isScrollable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setScrollable:"
      return_type: "V"
      parameter {
        name: "scrollable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHighlighted"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHighlighted:"
      return_type: "V"
      parameter {
        name: "highlighted"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignment"
      return_type: "X(Enum.enum NSTextAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlignment:"
      return_type: "V"
      parameter {
        name: "alignment"
        type: "X(Enum.enum NSTextAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wraps"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setWraps:"
      return_type: "V"
      parameter {
        name: "wraps"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "font"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFont:"
      return_type: "V"
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "formatter"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormatter:"
      return_type: "V"
      parameter {
        name: "formatter"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectValue:"
      return_type: "V"
      parameter {
        name: "objectValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasValidObjectValue"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "stringValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStringValue:"
      return_type: "V"
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "otherCell"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setIntValue:"
      return_type: "V"
      parameter {
        name: "intValue"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "floatValue"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setFloatValue:"
      return_type: "V"
      parameter {
        name: "floatValue"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleValue:"
      return_type: "V"
      parameter {
        name: "doubleValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeIntValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeFloatValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeDoubleValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeStringValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeObjectValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlTint"
      return_type: "X(Enum.enum NSControlTint)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlTint:"
      return_type: "V"
      parameter {
        name: "controlTint"
        type: "X(Enum.enum NSControlTint)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlSize"
      return_type: "X(Enum.enum NSControlSize)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlSize:"
      return_type: "V"
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "representedObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepresentedObject:"
      return_type: "V"
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellAttribute:"
      return_type: "I"
      parameter {
        name: "aParameter"
        type: "X(Enum.enum NSCellAttribute)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCellAttribute:to:"
      return_type: "V"
      parameter {
        name: "aParameter"
        type: "X(Enum.enum NSCellAttribute)"
      }
      parameter {
        name: "value"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "theRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "theRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawingRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "theRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "cellSizeForBounds:"
      return_type: "RCGSize;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlightColorWithFrame:inView:"
      return_type: "LNSColor;"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "calcDrawInfo:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setUpFieldEditorAttributes:"
      return_type: "LNSText;"
      parameter {
        name: "textObj"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInteriorWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlight:withFrame:inView:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDownFlags"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "getPeriodicDelay:interval:"
      return_type: "V"
      parameter {
        name: "delay"
        type: "*F;"
      }
      parameter {
        name: "interval"
        type: "*F;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startTrackingAt:inView:"
      return_type: "Z"
      parameter {
        name: "startPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "continueTracking:at:inView:"
      return_type: "Z"
      parameter {
        name: "lastPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "currentPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stopTracking:at:inView:mouseIsUp:"
      return_type: "V"
      parameter {
        name: "lastPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "stopPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackMouse:inRect:ofView:untilMouseUp:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "editWithFrame:inView:editor:delegate:event:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "textObj"
        type: "LNSText;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectWithFrame:inView:editor:delegate:start:length:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "textObj"
        type: "LNSText;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "selStart"
        type: "I"
      }
      parameter {
        name: "selLength"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endEditing:"
      return_type: "V"
      parameter {
        name: "textObj"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resetCursorRect:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuForEvent:inRect:ofView:"
      return_type: "LNSMenu;"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultMenu"
      return_type: "LNSMenu;"
    }
    class_method: true
  }
  method {
    function {
      name: "sendsActionOnEndEditing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSendsActionOnEndEditing:"
      return_type: "V"
      parameter {
        name: "sendsActionOnEndEditing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "baseWritingDirection"
      return_type: "X(Enum.enum NSWritingDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBaseWritingDirection:"
      return_type: "V"
      parameter {
        name: "baseWritingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineBreakMode"
      return_type: "X(Enum.enum NSLineBreakMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineBreakMode:"
      return_type: "V"
      parameter {
        name: "lineBreakMode"
        type: "X(Enum.enum NSLineBreakMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsUndo"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsUndo:"
      return_type: "V"
      parameter {
        name: "allowsUndo"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "integerValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setIntegerValue:"
      return_type: "V"
      parameter {
        name: "integerValue"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeIntegerValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "truncatesLastVisibleLine"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTruncatesLastVisibleLine:"
      return_type: "V"
      parameter {
        name: "truncatesLastVisibleLine"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userInterfaceLayoutDirection"
      return_type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserInterfaceLayoutDirection:"
      return_type: "V"
      parameter {
        name: "userInterfaceLayoutDirection"
        type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fieldEditorForView:"
      return_type: "LNSTextView;"
      parameter {
        name: "aControlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesSingleLineMode"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesSingleLineMode:"
      return_type: "V"
      parameter {
        name: "usesSingleLineMode"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingImageComponentsWithFrame:inView:"
      return_type: "LNSArray;"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  property {
    name: "controlView"
    type: "LNSView;"
  }
  property {
    name: "type"
    type: "X(Enum.enum NSCellType)"
  }
  property {
    name: "state"
    type: "I"
  }
  property {
    name: "target"
    type: "OI"
  }
  property {
    name: "action"
    type: "OS"
  }
  property {
    name: "tag"
    type: "I"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "opaque"
    type: "Z"
  }
  property {
    name: "enabled"
    type: "Z"
  }
  property {
    name: "continuous"
    type: "Z"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "selectable"
    type: "Z"
  }
  property {
    name: "bordered"
    type: "Z"
  }
  property {
    name: "bezeled"
    type: "Z"
  }
  property {
    name: "scrollable"
    type: "Z"
  }
  property {
    name: "highlighted"
    type: "Z"
  }
  property {
    name: "alignment"
    type: "X(Enum.enum NSTextAlignment)"
  }
  property {
    name: "wraps"
    type: "Z"
  }
  property {
    name: "font"
    type: "LNSFont;"
  }
  property {
    name: "keyEquivalent"
    type: "LNSString;"
  }
  property {
    name: "formatter"
    type: "OI"
  }
  property {
    name: "objectValue"
    type: "OI"
  }
  property {
    name: "hasValidObjectValue"
    type: "Z"
  }
  property {
    name: "stringValue"
    type: "LNSString;"
  }
  property {
    name: "intValue"
    type: "I"
  }
  property {
    name: "floatValue"
    type: "F"
  }
  property {
    name: "doubleValue"
    type: "D"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "controlTint"
    type: "X(Enum.enum NSControlTint)"
  }
  property {
    name: "controlSize"
    type: "X(Enum.enum NSControlSize)"
  }
  property {
    name: "representedObject"
    type: "OI"
  }
  property {
    name: "cellSize"
    type: "RCGSize;"
  }
  property {
    name: "mouseDownFlags"
    type: "I"
  }
  property {
    name: "menu"
    type: "LNSMenu;"
  }
  property {
    name: "sendsActionOnEndEditing"
    type: "Z"
  }
  property {
    name: "baseWritingDirection"
    type: "X(Enum.enum NSWritingDirection)"
  }
  property {
    name: "lineBreakMode"
    type: "X(Enum.enum NSLineBreakMode)"
  }
  property {
    name: "allowsUndo"
    type: "Z"
  }
  property {
    name: "integerValue"
    type: "I"
  }
  property {
    name: "truncatesLastVisibleLine"
    type: "Z"
  }
  property {
    name: "userInterfaceLayoutDirection"
    type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
  }
  property {
    name: "usesSingleLineMode"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCell.h"
}
class {
  name: "NSActionCell"
  base_class: "NSCell"
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setTag:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "target"
    type: "OI"
  }
  property {
    name: "action"
    type: "OS"
  }
  property {
    name: "tag"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSActionCell.h"
}
class {
  name: "NSAlert"
  base_class: "NSObject"
  method {
    function {
      name: "alertWithError:"
      return_type: "LNSAlert;"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:"
      return_type: "LNSAlert;"
      parameter {
        name: "message"
        type: "LNSString;"
      }
      parameter {
        name: "defaultButton"
        type: "LNSString;"
      }
      parameter {
        name: "alternateButton"
        type: "LNSString;"
      }
      parameter {
        name: "otherButton"
        type: "LNSString;"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "messageText"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMessageText:"
      return_type: "V"
      parameter {
        name: "messageText"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "informativeText"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInformativeText:"
      return_type: "V"
      parameter {
        name: "informativeText"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "icon"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIcon:"
      return_type: "V"
      parameter {
        name: "icon"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addButtonWithTitle:"
      return_type: "LNSButton;"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "buttons"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "showsHelp"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsHelp:"
      return_type: "V"
      parameter {
        name: "showsHelp"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "helpAnchor"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHelpAnchor:"
      return_type: "V"
      parameter {
        name: "helpAnchor"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alertStyle"
      return_type: "X(Enum.enum NSAlertStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlertStyle:"
      return_type: "V"
      parameter {
        name: "alertStyle"
        type: "X(Enum.enum NSAlertStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSAlertDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSAlertDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsSuppressionButton"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsSuppressionButton:"
      return_type: "V"
      parameter {
        name: "showsSuppressionButton"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "suppressionButton"
      return_type: "LNSButton;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "accessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layout"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "runModal"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didEndSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheetModalForWindow:completionHandler:"
      return_type: "V"
      parameter {
        name: "sheetWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSModalResponse))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window"
      return_type: "OI"
    }
    class_method: false
  }
  property {
    name: "messageText"
    type: "LNSString;"
  }
  property {
    name: "informativeText"
    type: "LNSString;"
  }
  property {
    name: "icon"
    type: "LNSImage;"
  }
  property {
    name: "buttons"
    type: "LNSArray;"
  }
  property {
    name: "showsHelp"
    type: "Z"
  }
  property {
    name: "helpAnchor"
    type: "LNSString;"
  }
  property {
    name: "alertStyle"
    type: "X(Enum.enum NSAlertStyle)"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSAlertDelegate>)"
  }
  property {
    name: "showsSuppressionButton"
    type: "Z"
  }
  property {
    name: "suppressionButton"
    type: "LNSButton;"
  }
  property {
    name: "accessoryView"
    type: "LNSView;"
  }
  property {
    name: "window"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAlert.h"
}
class {
  name: "NSAnimationContext"
  base_class: "NSObject"
  method {
    function {
      name: "runAnimationGroup:completionHandler:"
      return_type: "V"
      parameter {
        name: "changes"
        type: "X(BlockPointer.void (^)(NSAnimationContext *))"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "beginGrouping"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "endGrouping"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "currentContext"
      return_type: "LNSAnimationContext;"
    }
    class_method: true
  }
  method {
    function {
      name: "duration"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setDuration:"
      return_type: "V"
      parameter {
        name: "duration"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timingFunction"
      return_type: "LCAMediaTimingFunction;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimingFunction:"
      return_type: "V"
      parameter {
        name: "timingFunction"
        type: "LCAMediaTimingFunction;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completionHandler"
      return_type: "X(BlockPointer.void (^)(void))"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsImplicitAnimation"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsImplicitAnimation:"
      return_type: "V"
      parameter {
        name: "allowsImplicitAnimation"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "duration"
    type: "D"
  }
  property {
    name: "timingFunction"
    type: "LCAMediaTimingFunction;"
  }
  property {
    name: "completionHandler"
    type: "X(BlockPointer.void (^)(void))"
  }
  property {
    name: "allowsImplicitAnimation"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAnimationContext.h"
}
class {
  name: "NSBox"
  base_class: "NSView"
  category: "NSBox+NSDeprecated"
  method {
    function {
      name: "borderType"
      return_type: "X(Enum.enum NSBorderType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBorderType:"
      return_type: "V"
      parameter {
        name: "borderType"
        type: "X(Enum.enum NSBorderType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titlePosition"
      return_type: "X(Enum.enum NSTitlePosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitlePosition:"
      return_type: "V"
      parameter {
        name: "titlePosition"
        type: "X(Enum.enum NSTitlePosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boxType"
      return_type: "X(Enum.enum NSBoxType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBoxType:"
      return_type: "V"
      parameter {
        name: "boxType"
        type: "X(Enum.enum NSBoxType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleFont:"
      return_type: "V"
      parameter {
        name: "titleFont"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "borderRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "titleRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "titleCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "sizeToFit"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "contentViewMargins"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentViewMargins:"
      return_type: "V"
      parameter {
        name: "contentViewMargins"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameFromContentFrame:"
      return_type: "V"
      parameter {
        name: "contentFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentView"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentView:"
      return_type: "V"
      parameter {
        name: "contentView"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isTransparent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTransparent:"
      return_type: "V"
      parameter {
        name: "transparent"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "borderWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setBorderWidth:"
      return_type: "V"
      parameter {
        name: "borderWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cornerRadius"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setCornerRadius:"
      return_type: "V"
      parameter {
        name: "cornerRadius"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "borderColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBorderColor:"
      return_type: "V"
      parameter {
        name: "borderColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fillColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFillColor:"
      return_type: "V"
      parameter {
        name: "fillColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  property {
    name: "borderType"
    type: "X(Enum.enum NSBorderType)"
  }
  property {
    name: "titlePosition"
    type: "X(Enum.enum NSTitlePosition)"
  }
  property {
    name: "boxType"
    type: "X(Enum.enum NSBoxType)"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "titleFont"
    type: "LNSFont;"
  }
  property {
    name: "borderRect"
    type: "RCGRect;"
  }
  property {
    name: "titleRect"
    type: "RCGRect;"
  }
  property {
    name: "titleCell"
    type: "OI"
  }
  property {
    name: "contentViewMargins"
    type: "RCGSize;"
  }
  property {
    name: "contentView"
    type: "OI"
  }
  property {
    name: "transparent"
    type: "Z"
  }
  property {
    name: "borderWidth"
    type: "D"
  }
  property {
    name: "cornerRadius"
    type: "D"
  }
  property {
    name: "borderColor"
    type: "LNSColor;"
  }
  property {
    name: "fillColor"
    type: "LNSColor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBox.h"
}
class {
  name: "NSControl"
  base_class: "NSView"
  category: "NSControl+NSKeyboardUI"
  category: "NSControl+NSControlTextMethods"
  category: "NSControl+NSControlEditableTextMethods"
  category: "NSControl+NSDeprecated"
  category: "NSControl+NSConstraintBasedLayoutLayering"
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setTag:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ignoresMultiClick"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIgnoresMultiClick:"
      return_type: "V"
      parameter {
        name: "ignoresMultiClick"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isContinuous"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setContinuous:"
      return_type: "V"
      parameter {
        name: "continuous"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "refusesFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRefusesFirstResponder:"
      return_type: "V"
      parameter {
        name: "refusesFirstResponder"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHighlighted"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHighlighted:"
      return_type: "V"
      parameter {
        name: "highlighted"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlSize"
      return_type: "X(Enum.enum NSControlSize)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlSize:"
      return_type: "V"
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formatter"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormatter:"
      return_type: "V"
      parameter {
        name: "formatter"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStringValue:"
      return_type: "V"
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedStringValue"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedStringValue:"
      return_type: "V"
      parameter {
        name: "attributedStringValue"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectValue:"
      return_type: "V"
      parameter {
        name: "objectValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setIntValue:"
      return_type: "V"
      parameter {
        name: "intValue"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "integerValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setIntegerValue:"
      return_type: "V"
      parameter {
        name: "integerValue"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "floatValue"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setFloatValue:"
      return_type: "V"
      parameter {
        name: "floatValue"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleValue:"
      return_type: "V"
      parameter {
        name: "doubleValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeThatFits:"
      return_type: "RCGSize;"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFrame:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeToFit"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "sendActionOn:"
      return_type: "I"
      parameter {
        name: "mask"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendAction:to:"
      return_type: "Z"
      parameter {
        name: "theAction"
        type: "OS"
      }
      parameter {
        name: "theTarget"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeIntValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeFloatValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeDoubleValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeStringValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeObjectValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeIntegerValueFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDown:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  property {
    name: "target"
    type: "OI"
  }
  property {
    name: "action"
    type: "OS"
  }
  property {
    name: "tag"
    type: "I"
  }
  property {
    name: "ignoresMultiClick"
    type: "Z"
  }
  property {
    name: "continuous"
    type: "Z"
  }
  property {
    name: "enabled"
    type: "Z"
  }
  property {
    name: "refusesFirstResponder"
    type: "Z"
  }
  property {
    name: "highlighted"
    type: "Z"
  }
  property {
    name: "controlSize"
    type: "X(Enum.enum NSControlSize)"
  }
  property {
    name: "formatter"
    type: "OI"
  }
  property {
    name: "stringValue"
    type: "LNSString;"
  }
  property {
    name: "attributedStringValue"
    type: "LNSAttributedString;"
  }
  property {
    name: "objectValue"
    type: "OI"
  }
  property {
    name: "intValue"
    type: "I"
  }
  property {
    name: "integerValue"
    type: "I"
  }
  property {
    name: "floatValue"
    type: "F"
  }
  property {
    name: "doubleValue"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSControl.h"
}
class {
  name: "NSButtonCell"
  base_class: "NSActionCell"
  category: "NSButtonCell+NSButtonCellExtensions"
  category: "NSButtonCell+NSButtonCellAttributedStringMethods"
  category: "NSButtonCell+NSButtonCellBezelStyles"
  category: "NSButtonCell+NSButtonCellSoundExtensions"
  category: "NSButtonCell+NSKeyboardUI"
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alternateTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternateTitle:"
      return_type: "V"
      parameter {
        name: "alternateTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alternateImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternateImage:"
      return_type: "V"
      parameter {
        name: "alternateImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imagePosition"
      return_type: "X(Enum.enum NSCellImagePosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImagePosition:"
      return_type: "V"
      parameter {
        name: "imagePosition"
        type: "X(Enum.enum NSCellImagePosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageScaling"
      return_type: "X(Enum.enum NSImageScaling)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageScaling:"
      return_type: "V"
      parameter {
        name: "imageScaling"
        type: "X(Enum.enum NSImageScaling)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlightsBy"
      return_type: "X(Enum.enum NSCellStyleMask)"
    }
    class_method: false
  }
  method {
    function {
      name: "setHighlightsBy:"
      return_type: "V"
      parameter {
        name: "highlightsBy"
        type: "X(Enum.enum NSCellStyleMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsStateBy"
      return_type: "X(Enum.enum NSCellStyleMask)"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsStateBy:"
      return_type: "V"
      parameter {
        name: "showsStateBy"
        type: "X(Enum.enum NSCellStyleMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setButtonType:"
      return_type: "V"
      parameter {
        name: "aType"
        type: "X(Enum.enum NSButtonType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOpaque"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isTransparent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTransparent:"
      return_type: "V"
      parameter {
        name: "transparent"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPeriodicDelay:interval:"
      return_type: "V"
      parameter {
        name: "delay"
        type: "F"
      }
      parameter {
        name: "interval"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getPeriodicDelay:interval:"
      return_type: "V"
      parameter {
        name: "delay"
        type: "*F;"
      }
      parameter {
        name: "interval"
        type: "*F;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyEquivalent:"
      return_type: "V"
      parameter {
        name: "keyEquivalent"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalentModifierMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyEquivalentModifierMask:"
      return_type: "V"
      parameter {
        name: "keyEquivalentModifierMask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalentFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyEquivalentFont:"
      return_type: "V"
      parameter {
        name: "keyEquivalentFont"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyEquivalentFont:size:"
      return_type: "V"
      parameter {
        name: "fontName"
        type: "LNSString;"
      }
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performClick:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawImage:withFrame:inView:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawTitle:withFrame:inView:"
      return_type: "RCGRect;"
      parameter {
        name: "title"
        type: "LNSAttributedString;"
      }
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawBezelWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "alternateTitle"
    type: "LNSString;"
  }
  property {
    name: "alternateImage"
    type: "LNSImage;"
  }
  property {
    name: "imagePosition"
    type: "X(Enum.enum NSCellImagePosition)"
  }
  property {
    name: "imageScaling"
    type: "X(Enum.enum NSImageScaling)"
  }
  property {
    name: "highlightsBy"
    type: "X(Enum.enum NSCellStyleMask)"
  }
  property {
    name: "showsStateBy"
    type: "X(Enum.enum NSCellStyleMask)"
  }
  property {
    name: "opaque"
    type: "Z"
  }
  property {
    name: "transparent"
    type: "Z"
  }
  property {
    name: "keyEquivalent"
    type: "LNSString;"
  }
  property {
    name: "keyEquivalentModifierMask"
    type: "UI"
  }
  property {
    name: "keyEquivalentFont"
    type: "LNSFont;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButtonCell.h"
}
class {
  name: "NSButton"
  base_class: "NSControl"
  protocol: "NSUserInterfaceValidations"
  protocol: "NSAccessibilityButton"
  category: "NSButton+NSButtonAttributedStringMethods"
  category: "NSButton+NSButtonBezelStyles"
  category: "NSButton+NSButtonMixedState"
  category: "NSButton+NSButtonBorder"
  category: "NSButton+NSButtonSoundExtensions"
  category: "NSButton+NSKeyboardUI"
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alternateTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternateTitle:"
      return_type: "V"
      parameter {
        name: "alternateTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alternateImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternateImage:"
      return_type: "V"
      parameter {
        name: "alternateImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imagePosition"
      return_type: "X(Enum.enum NSCellImagePosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImagePosition:"
      return_type: "V"
      parameter {
        name: "imagePosition"
        type: "X(Enum.enum NSCellImagePosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setButtonType:"
      return_type: "V"
      parameter {
        name: "aType"
        type: "X(Enum.enum NSButtonType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "state"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setState:"
      return_type: "V"
      parameter {
        name: "state"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBordered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBordered:"
      return_type: "V"
      parameter {
        name: "bordered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isTransparent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTransparent:"
      return_type: "V"
      parameter {
        name: "transparent"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPeriodicDelay:interval:"
      return_type: "V"
      parameter {
        name: "delay"
        type: "F"
      }
      parameter {
        name: "interval"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getPeriodicDelay:interval:"
      return_type: "V"
      parameter {
        name: "delay"
        type: "*F;"
      }
      parameter {
        name: "interval"
        type: "*F;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyEquivalent:"
      return_type: "V"
      parameter {
        name: "keyEquivalent"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalentModifierMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyEquivalentModifierMask:"
      return_type: "V"
      parameter {
        name: "keyEquivalentModifierMask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlight:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performKeyEquivalent:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSpringLoaded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSpringLoaded:"
      return_type: "V"
      parameter {
        name: "springLoaded"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxAcceleratorLevel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxAcceleratorLevel:"
      return_type: "V"
      parameter {
        name: "maxAcceleratorLevel"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "alternateTitle"
    type: "LNSString;"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "alternateImage"
    type: "LNSImage;"
  }
  property {
    name: "imagePosition"
    type: "X(Enum.enum NSCellImagePosition)"
  }
  property {
    name: "state"
    type: "I"
  }
  property {
    name: "bordered"
    type: "Z"
  }
  property {
    name: "transparent"
    type: "Z"
  }
  property {
    name: "keyEquivalent"
    type: "LNSString;"
  }
  property {
    name: "keyEquivalentModifierMask"
    type: "UI"
  }
  property {
    name: "springLoaded"
    type: "Z"
  }
  property {
    name: "maxAcceleratorLevel"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButton.h"
}
class {
  name: "NSClipView"
  base_class: "NSView"
  category: "NSClipView+NSDeprecated"
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documentView"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDocumentView:"
      return_type: "V"
      parameter {
        name: "documentView"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documentRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "documentCursor"
      return_type: "LNSCursor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDocumentCursor:"
      return_type: "V"
      parameter {
        name: "documentCursor"
        type: "LNSCursor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documentVisibleRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "viewFrameChanged:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewBoundsChanged:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copiesOnScroll"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCopiesOnScroll:"
      return_type: "V"
      parameter {
        name: "copiesOnScroll"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoscroll:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollToPoint:"
      return_type: "V"
      parameter {
        name: "newOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "constrainBoundsRect:"
      return_type: "RCGRect;"
      parameter {
        name: "proposedBounds"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentInsets"
      return_type: "RNSEdgeInsets;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentInsets:"
      return_type: "V"
      parameter {
        name: "contentInsets"
        type: "RNSEdgeInsets;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "automaticallyAdjustsContentInsets"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticallyAdjustsContentInsets:"
      return_type: "V"
      parameter {
        name: "automaticallyAdjustsContentInsets"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "documentView"
    type: "OI"
  }
  property {
    name: "documentRect"
    type: "RCGRect;"
  }
  property {
    name: "documentCursor"
    type: "LNSCursor;"
  }
  property {
    name: "documentVisibleRect"
    type: "RCGRect;"
  }
  property {
    name: "copiesOnScroll"
    type: "Z"
  }
  property {
    name: "contentInsets"
    type: "RNSEdgeInsets;"
  }
  property {
    name: "automaticallyAdjustsContentInsets"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSClipView.h"
}
class {
  name: "NSDockTile"
  base_class: "NSObject"
  method {
    function {
      name: "size"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "contentView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentView:"
      return_type: "V"
      parameter {
        name: "contentView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "display"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "showsApplicationBadge"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsApplicationBadge:"
      return_type: "V"
      parameter {
        name: "showsApplicationBadge"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "badgeLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBadgeLabel:"
      return_type: "V"
      parameter {
        name: "badgeLabel"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "owner"
      return_type: "OI"
    }
    class_method: false
  }
  property {
    name: "size"
    type: "RCGSize;"
  }
  property {
    name: "contentView"
    type: "LNSView;"
  }
  property {
    name: "showsApplicationBadge"
    type: "Z"
  }
  property {
    name: "badgeLabel"
    type: "LNSString;"
  }
  property {
    name: "owner"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDockTile.h"
}
class {
  name: "NSFont"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "fontWithName:size:"
      return_type: "LNSFont;"
      parameter {
        name: "fontName"
        type: "LNSString;"
      }
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontWithName:matrix:"
      return_type: "LNSFont;"
      parameter {
        name: "fontName"
        type: "LNSString;"
      }
      parameter {
        name: "fontMatrix"
        type: "*cD;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontWithDescriptor:size:"
      return_type: "LNSFont;"
      parameter {
        name: "fontDescriptor"
        type: "LNSFontDescriptor;"
      }
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontWithDescriptor:textTransform:"
      return_type: "LNSFont;"
      parameter {
        name: "fontDescriptor"
        type: "LNSFontDescriptor;"
      }
      parameter {
        name: "textTransform"
        type: "LNSAffineTransform;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "userFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "userFixedPitchFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setUserFont:"
      return_type: "V"
      parameter {
        name: "aFont"
        type: "LNSFont;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setUserFixedPitchFont:"
      return_type: "V"
      parameter {
        name: "aFont"
        type: "LNSFont;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "systemFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "boldSystemFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "labelFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "titleBarFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "menuFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "menuBarFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "messageFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "paletteFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "toolTipsFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "controlContentFontOfSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontSize"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "systemFontSize"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "smallSystemFontSize"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "labelFontSize"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "systemFontSizeForControlSize:"
      return_type: "D"
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "pointSize"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "matrix"
      return_type: "*cD;"
    }
    class_method: false
  }
  method {
    function {
      name: "familyName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "displayName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptor"
      return_type: "LNSFontDescriptor;"
    }
    class_method: false
  }
  method {
    function {
      name: "textTransform"
      return_type: "LNSAffineTransform;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfGlyphs"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "mostCompatibleStringEncoding"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "glyphWithName:"
      return_type: "UI"
      parameter {
        name: "aName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "coveredCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "boundingRectForFont"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "maximumAdvancement"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "ascender"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "descender"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "leading"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "underlinePosition"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "underlineThickness"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "italicAngle"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "capHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "xHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "isFixedPitch"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "boundingRectForGlyph:"
      return_type: "RCGRect;"
      parameter {
        name: "aGlyph"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "advancementForGlyph:"
      return_type: "RCGSize;"
      parameter {
        name: "ag"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getBoundingRects:forGlyphs:count:"
      return_type: "V"
      parameter {
        name: "bounds"
        type: "*RCGRect;;"
      }
      parameter {
        name: "glyphs"
        type: "*cUI;"
      }
      parameter {
        name: "glyphCount"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getAdvancements:forGlyphs:count:"
      return_type: "V"
      parameter {
        name: "advancements"
        type: "*RCGSize;;"
      }
      parameter {
        name: "glyphs"
        type: "*cUI;"
      }
      parameter {
        name: "glyphCount"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getAdvancements:forPackedGlyphs:length:"
      return_type: "V"
      parameter {
        name: "advancements"
        type: "*RCGSize;;"
      }
      parameter {
        name: "packedGlyphs"
        type: "*cV;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "set"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setInContext:"
      return_type: "V"
      parameter {
        name: "graphicsContext"
        type: "LNSGraphicsContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printerFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "screenFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "screenFontWithRenderingMode:"
      return_type: "LNSFont;"
      parameter {
        name: "renderingMode"
        type: "X(Enum.enum NSFontRenderingMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "renderingMode"
      return_type: "X(Enum.enum NSFontRenderingMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "verticalFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "isVertical"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "fontName"
    type: "LNSString;"
  }
  property {
    name: "pointSize"
    type: "D"
  }
  property {
    name: "matrix"
    type: "*cD;"
  }
  property {
    name: "familyName"
    type: "LNSString;"
  }
  property {
    name: "displayName"
    type: "LNSString;"
  }
  property {
    name: "fontDescriptor"
    type: "LNSFontDescriptor;"
  }
  property {
    name: "textTransform"
    type: "LNSAffineTransform;"
  }
  property {
    name: "numberOfGlyphs"
    type: "UI"
  }
  property {
    name: "mostCompatibleStringEncoding"
    type: "UI"
  }
  property {
    name: "coveredCharacterSet"
    type: "LNSCharacterSet;"
  }
  property {
    name: "boundingRectForFont"
    type: "RCGRect;"
  }
  property {
    name: "maximumAdvancement"
    type: "RCGSize;"
  }
  property {
    name: "ascender"
    type: "D"
  }
  property {
    name: "descender"
    type: "D"
  }
  property {
    name: "leading"
    type: "D"
  }
  property {
    name: "underlinePosition"
    type: "D"
  }
  property {
    name: "underlineThickness"
    type: "D"
  }
  property {
    name: "italicAngle"
    type: "D"
  }
  property {
    name: "capHeight"
    type: "D"
  }
  property {
    name: "xHeight"
    type: "D"
  }
  property {
    name: "fixedPitch"
    type: "Z"
  }
  property {
    name: "printerFont"
    type: "LNSFont;"
  }
  property {
    name: "screenFont"
    type: "LNSFont;"
  }
  property {
    name: "renderingMode"
    type: "X(Enum.enum NSFontRenderingMode)"
  }
  property {
    name: "verticalFont"
    type: "LNSFont;"
  }
  property {
    name: "vertical"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFont.h"
}
class {
  name: "NSFontCollection"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSMutableCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "fontCollectionWithDescriptors:"
      return_type: "LNSFontCollection;"
      parameter {
        name: "queryDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontCollectionWithAllAvailableDescriptors"
      return_type: "LNSFontCollection;"
    }
    class_method: true
  }
  method {
    function {
      name: "fontCollectionWithLocale:"
      return_type: "LNSFontCollection;"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "showFontCollection:withName:visibility:error:"
      return_type: "Z"
      parameter {
        name: "collection"
        type: "LNSFontCollection;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "visibility"
        type: "X(Enum.enum NSFontCollectionVisibility)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "hideFontCollectionWithName:visibility:error:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "visibility"
        type: "X(Enum.enum NSFontCollectionVisibility)"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "renameFontCollectionWithName:visibility:toName:error:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "visibility"
        type: "X(Enum.enum NSFontCollectionVisibility)"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "allFontCollectionNames"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "fontCollectionWithName:"
      return_type: "LNSFontCollection;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontCollectionWithName:visibility:"
      return_type: "LNSFontCollection;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "visibility"
        type: "X(Enum.enum NSFontCollectionVisibility)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "queryDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "exclusionDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "matchingDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "matchingDescriptorsWithOptions:"
      return_type: "LNSArray;"
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matchingDescriptorsForFamily:"
      return_type: "LNSArray;"
      parameter {
        name: "family"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matchingDescriptorsForFamily:options:"
      return_type: "LNSArray;"
      parameter {
        name: "family"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  property {
    name: "queryDescriptors"
    type: "LNSArray;"
  }
  property {
    name: "exclusionDescriptors"
    type: "LNSArray;"
  }
  property {
    name: "matchingDescriptors"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontCollection.h"
}
class {
  name: "NSMutableFontCollection"
  base_class: "NSFontCollection"
  method {
    function {
      name: "fontCollectionWithDescriptors:"
      return_type: "LNSMutableFontCollection;"
      parameter {
        name: "queryDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontCollectionWithAllAvailableDescriptors"
      return_type: "LNSMutableFontCollection;"
    }
    class_method: true
  }
  method {
    function {
      name: "fontCollectionWithLocale:"
      return_type: "LNSMutableFontCollection;"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontCollectionWithName:"
      return_type: "LNSMutableFontCollection;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontCollectionWithName:visibility:"
      return_type: "LNSMutableFontCollection;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "visibility"
        type: "X(Enum.enum NSFontCollectionVisibility)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "queryDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setQueryDescriptors:"
      return_type: "V"
      parameter {
        name: "queryDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "exclusionDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setExclusionDescriptors:"
      return_type: "V"
      parameter {
        name: "exclusionDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addQueryForDescriptors:"
      return_type: "V"
      parameter {
        name: "descriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeQueryForDescriptors:"
      return_type: "V"
      parameter {
        name: "descriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "queryDescriptors"
    type: "LNSArray;"
  }
  property {
    name: "exclusionDescriptors"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontCollection.h"
}
class {
  name: "NSFontDescriptor"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "postscriptName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "pointSize"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "matrix"
      return_type: "LNSAffineTransform;"
    }
    class_method: false
  }
  method {
    function {
      name: "symbolicTraits"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "objectForKey:"
      return_type: "OI"
      parameter {
        name: "anAttribute"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontAttributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptorWithFontAttributes:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontDescriptorWithName:size:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "fontName"
        type: "LNSString;"
      }
      parameter {
        name: "size"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fontDescriptorWithName:matrix:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "fontName"
        type: "LNSString;"
      }
      parameter {
        name: "matrix"
        type: "LNSAffineTransform;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithFontAttributes:"
      return_type: "OI"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matchingFontDescriptorsWithMandatoryKeys:"
      return_type: "LNSArray;"
      parameter {
        name: "mandatoryKeys"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matchingFontDescriptorWithMandatoryKeys:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "mandatoryKeys"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptorByAddingAttributes:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptorWithSymbolicTraits:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "symbolicTraits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptorWithSize:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "newPointSize"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptorWithMatrix:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "matrix"
        type: "LNSAffineTransform;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptorWithFace:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "newFace"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptorWithFamily:"
      return_type: "LNSFontDescriptor;"
      parameter {
        name: "newFamily"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "postscriptName"
    type: "LNSString;"
  }
  property {
    name: "pointSize"
    type: "D"
  }
  property {
    name: "matrix"
    type: "LNSAffineTransform;"
  }
  property {
    name: "symbolicTraits"
    type: "UI"
  }
  property {
    name: "fontAttributes"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontDescriptor.h"
}
class {
  name: "NSFontManager"
  base_class: "NSObject"
  category: "NSFontManager+NSFontManagerMenuActionMethods"
  method {
    function {
      name: "setFontPanelFactory:"
      return_type: "V"
      parameter {
        name: "factoryId"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setFontManagerFactory:"
      return_type: "V"
      parameter {
        name: "factoryId"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "sharedFontManager"
      return_type: "LNSFontManager;"
    }
    class_method: true
  }
  method {
    function {
      name: "isMultiple"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedFont:isMultiple:"
      return_type: "V"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFontMenu:"
      return_type: "V"
      parameter {
        name: "newMenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontMenu:"
      return_type: "LNSMenu;"
      parameter {
        name: "create"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontPanel:"
      return_type: "LNSFontPanel;"
      parameter {
        name: "create"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fontWithFamily:traits:weight:size:"
      return_type: "LNSFont;"
      parameter {
        name: "family"
        type: "LNSString;"
      }
      parameter {
        name: "traits"
        type: "X(Enum.enum NSFontTraitMask)"
      }
      parameter {
        name: "weight"
        type: "I"
      }
      parameter {
        name: "size"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "traitsOfFont:"
      return_type: "X(Enum.enum NSFontTraitMask)"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "weightOfFont:"
      return_type: "I"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "availableFonts"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "availableFontFamilies"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "availableMembersOfFontFamily:"
      return_type: "LNSArray;"
      parameter {
        name: "fam"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertFont:"
      return_type: "LNSFont;"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertFont:toSize:"
      return_type: "LNSFont;"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
      parameter {
        name: "size"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertFont:toFace:"
      return_type: "LNSFont;"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
      parameter {
        name: "typeface"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertFont:toFamily:"
      return_type: "LNSFont;"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
      parameter {
        name: "family"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertFont:toHaveTrait:"
      return_type: "LNSFont;"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
      parameter {
        name: "trait"
        type: "X(Enum.enum NSFontTraitMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertFont:toNotHaveTrait:"
      return_type: "LNSFont;"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
      parameter {
        name: "trait"
        type: "X(Enum.enum NSFontTraitMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertWeight:ofFont:"
      return_type: "LNSFont;"
      parameter {
        name: "upFlag"
        type: "Z"
      }
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendAction"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedNameForFamily:face:"
      return_type: "LNSString;"
      parameter {
        name: "family"
        type: "LNSString;"
      }
      parameter {
        name: "faceKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedAttributes:isMultiple:"
      return_type: "V"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertAttributes:"
      return_type: "LNSDictionary;"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "availableFontNamesMatchingFontDescriptor:"
      return_type: "LNSArray;"
      parameter {
        name: "descriptor"
        type: "LNSFontDescriptor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "fontDescriptorsInCollection:"
      return_type: "LNSArray;"
      parameter {
        name: "collectionNames"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addCollection:options:"
      return_type: "Z"
      parameter {
        name: "collectionName"
        type: "LNSString;"
      }
      parameter {
        name: "collectionOptions"
        type: "X(Enum.enum NSFontCollectionOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCollection:"
      return_type: "Z"
      parameter {
        name: "collectionName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addFontDescriptors:toCollection:"
      return_type: "V"
      parameter {
        name: "descriptors"
        type: "LNSArray;"
      }
      parameter {
        name: "collectionName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFontDescriptor:fromCollection:"
      return_type: "V"
      parameter {
        name: "descriptor"
        type: "LNSFontDescriptor;"
      }
      parameter {
        name: "collection"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentFontAction"
      return_type: "X(Enum.enum NSFontAction)"
    }
    class_method: false
  }
  method {
    function {
      name: "convertFontTraits:"
      return_type: "X(Enum.enum NSFontTraitMask)"
      parameter {
        name: "traits"
        type: "X(Enum.enum NSFontTraitMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "multiple"
    type: "Z"
  }
  property {
    name: "selectedFont"
    type: "LNSFont;"
  }
  property {
    name: "availableFonts"
    type: "LNSArray;"
  }
  property {
    name: "availableFontFamilies"
    type: "LNSArray;"
  }
  property {
    name: "enabled"
    type: "Z"
  }
  property {
    name: "action"
    type: "OS"
  }
  property {
    name: "sendAction"
    type: "Z"
  }
  property {
    name: "delegate"
    type: "OI"
  }
  property {
    name: "collectionNames"
    type: "LNSArray;"
  }
  property {
    name: "currentFontAction"
    type: "X(Enum.enum NSFontAction)"
  }
  property {
    name: "target"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontManager.h"
}
class {
  name: "NSWindow"
  base_class: "NSResponder"
  protocol: "NSAnimatablePropertyContainer"
  protocol: "NSUserInterfaceValidations"
  protocol: "NSUserInterfaceItemIdentification"
  protocol: "NSAppearanceCustomization"
  protocol: "NSAccessibilityElement"
  protocol: "NSAccessibility"
  category: "NSWindow+NSKeyboardUI"
  category: "NSWindow+NSToolbarSupport"
  category: "NSWindow+NSDrag"
  category: "NSWindow+NSCarbonExtensions"
  category: "NSWindow+NSDeprecated"
  category: "NSWindow+NSConstraintBasedLayoutCoreMethods"
  category: "NSWindow+NSConstraintBasedLayoutAnchoring"
  category: "NSWindow+NSConstraintBasedLayoutDebugging"
  category: "NSWindow+Drawers"
  category: "NSWindow+NSScripting"
  category: "NSWindow+NSUserInterfaceRestoration"
  method {
    function {
      name: "frameRectForContentRect:styleMask:"
      return_type: "RCGRect;"
      parameter {
        name: "cRect"
        type: "RCGRect;"
      }
      parameter {
        name: "aStyle"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "contentRectForFrameRect:styleMask:"
      return_type: "RCGRect;"
      parameter {
        name: "fRect"
        type: "RCGRect;"
      }
      parameter {
        name: "aStyle"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "minFrameWidthWithTitle:styleMask:"
      return_type: "D"
      parameter {
        name: "aTitle"
        type: "LNSString;"
      }
      parameter {
        name: "aStyle"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultDepthLimit"
      return_type: "I"
    }
    class_method: true
  }
  method {
    function {
      name: "frameRectForContentRect:"
      return_type: "RCGRect;"
      parameter {
        name: "contentRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentRectForFrameRect:"
      return_type: "RCGRect;"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentRect:styleMask:backing:defer:"
      return_type: "OI"
      parameter {
        name: "contentRect"
        type: "RCGRect;"
      }
      parameter {
        name: "aStyle"
        type: "UI"
      }
      parameter {
        name: "bufferingType"
        type: "X(Enum.enum NSBackingStoreType)"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentRect:styleMask:backing:defer:screen:"
      return_type: "OI"
      parameter {
        name: "contentRect"
        type: "RCGRect;"
      }
      parameter {
        name: "aStyle"
        type: "UI"
      }
      parameter {
        name: "bufferingType"
        type: "X(Enum.enum NSBackingStoreType)"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleVisibility"
      return_type: "X(Enum.enum NSWindowTitleVisibility)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleVisibility:"
      return_type: "V"
      parameter {
        name: "titleVisibility"
        type: "X(Enum.enum NSWindowTitleVisibility)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titlebarAppearsTransparent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitlebarAppearsTransparent:"
      return_type: "V"
      parameter {
        name: "titlebarAppearsTransparent"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentLayoutRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "contentLayoutGuide"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "titlebarAccessoryViewControllers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitlebarAccessoryViewControllers:"
      return_type: "V"
      parameter {
        name: "titlebarAccessoryViewControllers"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addTitlebarAccessoryViewController:"
      return_type: "V"
      parameter {
        name: "childViewController"
        type: "LNSTitlebarAccessoryViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertTitlebarAccessoryViewController:atIndex:"
      return_type: "V"
      parameter {
        name: "childViewController"
        type: "LNSTitlebarAccessoryViewController;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTitlebarAccessoryViewControllerAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "representedURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepresentedURL:"
      return_type: "V"
      parameter {
        name: "representedURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "representedFilename"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepresentedFilename:"
      return_type: "V"
      parameter {
        name: "representedFilename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleWithRepresentedFilename:"
      return_type: "V"
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isExcludedFromWindowsMenu"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setExcludedFromWindowsMenu:"
      return_type: "V"
      parameter {
        name: "excludedFromWindowsMenu"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentView"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentView:"
      return_type: "V"
      parameter {
        name: "contentView"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSWindowDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSWindowDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "styleMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setStyleMask:"
      return_type: "V"
      parameter {
        name: "styleMask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fieldEditor:forObject:"
      return_type: "LNSText;"
      parameter {
        name: "createFlag"
        type: "Z"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endEditingFor:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "constrainFrameRect:toScreen:"
      return_type: "RCGRect;"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrame:display:"
      return_type: "V"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setContentSize:"
      return_type: "V"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameOrigin:"
      return_type: "V"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameTopLeftPoint:"
      return_type: "V"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cascadeTopLeftFromPoint:"
      return_type: "RCGPoint;"
      parameter {
        name: "topLeftPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "animationResizeTime:"
      return_type: "D"
      parameter {
        name: "newFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrame:display:animate:"
      return_type: "V"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "displayFlag"
        type: "Z"
      }
      parameter {
        name: "animateFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "inLiveResize"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "showsResizeIndicator"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsResizeIndicator:"
      return_type: "V"
      parameter {
        name: "showsResizeIndicator"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resizeIncrements"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setResizeIncrements:"
      return_type: "V"
      parameter {
        name: "resizeIncrements"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "aspectRatio"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAspectRatio:"
      return_type: "V"
      parameter {
        name: "aspectRatio"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentResizeIncrements"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentResizeIncrements:"
      return_type: "V"
      parameter {
        name: "contentResizeIncrements"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentAspectRatio"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentAspectRatio:"
      return_type: "V"
      parameter {
        name: "contentAspectRatio"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "disableFlushWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enableFlushWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isFlushWindowDisabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "flushWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "flushWindowIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewsNeedDisplay"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setViewsNeedDisplay:"
      return_type: "V"
      parameter {
        name: "viewsNeedDisplay"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "display"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isAutodisplay"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutodisplay:"
      return_type: "V"
      parameter {
        name: "autodisplay"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preservesContentDuringLiveResize"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreservesContentDuringLiveResize:"
      return_type: "V"
      parameter {
        name: "preservesContentDuringLiveResize"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "update"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "makeFirstResponder:"
      return_type: "Z"
      parameter {
        name: "aResponder"
        type: "LNSResponder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstResponder"
      return_type: "LNSResponder;"
    }
    class_method: false
  }
  method {
    function {
      name: "resizeFlags"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "keyDown:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "close"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isReleasedWhenClosed"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setReleasedWhenClosed:"
      return_type: "V"
      parameter {
        name: "releasedWhenClosed"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "miniaturize:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deminiaturize:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isZoomed"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "zoom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isMiniaturized"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "tryToPerform:with:"
      return_type: "Z"
      parameter {
        name: "anAction"
        type: "OS"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validRequestorForSendType:returnType:"
      return_type: "OI"
      parameter {
        name: "sendType"
        type: "LNSString;"
      }
      parameter {
        name: "returnType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setContentBorderThickness:forEdge:"
      return_type: "V"
      parameter {
        name: "thickness"
        type: "D"
      }
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentBorderThicknessForEdge:"
      return_type: "D"
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAutorecalculatesContentBorderThickness:forEdge:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autorecalculatesContentBorderThicknessForEdge:"
      return_type: "Z"
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isMovable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setMovable:"
      return_type: "V"
      parameter {
        name: "movable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isMovableByWindowBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setMovableByWindowBackground:"
      return_type: "V"
      parameter {
        name: "movableByWindowBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hidesOnDeactivate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHidesOnDeactivate:"
      return_type: "V"
      parameter {
        name: "hidesOnDeactivate"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canHide"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanHide:"
      return_type: "V"
      parameter {
        name: "canHide"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "center"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "makeKeyAndOrderFront:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFront:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderBack:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderOut:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderWindow:relativeTo:"
      return_type: "V"
      parameter {
        name: "place"
        type: "X(Enum.enum NSWindowOrderingMode)"
      }
      parameter {
        name: "otherWin"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontRegardless"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "miniwindowImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMiniwindowImage:"
      return_type: "V"
      parameter {
        name: "miniwindowImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "miniwindowTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMiniwindowTitle:"
      return_type: "V"
      parameter {
        name: "miniwindowTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dockTile"
      return_type: "LNSDockTile;"
    }
    class_method: false
  }
  method {
    function {
      name: "isDocumentEdited"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDocumentEdited:"
      return_type: "V"
      parameter {
        name: "documentEdited"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isVisible"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isKeyWindow"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isMainWindow"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "canBecomeKeyWindow"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "canBecomeMainWindow"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "makeKeyWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "makeMainWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "becomeKeyWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resignKeyWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "becomeMainWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resignMainWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "worksWhenModal"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "preventsApplicationTerminationWhenModal"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreventsApplicationTerminationWhenModal:"
      return_type: "V"
      parameter {
        name: "preventsApplicationTerminationWhenModal"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectToScreen:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectFromScreen:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectToBacking:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectFromBacking:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backingAlignedRect:options:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSAlignmentOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backingScaleFactor"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "performClose:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performMiniaturize:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performZoom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOneShot"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setOneShot:"
      return_type: "V"
      parameter {
        name: "oneShot"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataWithEPSInsideRect:"
      return_type: "LNSData;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataWithPDFInsideRect:"
      return_type: "LNSData;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "print:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "disableCursorRects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enableCursorRects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "discardCursorRects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "areCursorRectsEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateCursorRectsForView:"
      return_type: "V"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resetCursorRects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsToolTipsWhenApplicationIsInactive"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsToolTipsWhenApplicationIsInactive:"
      return_type: "V"
      parameter {
        name: "allowsToolTipsWhenApplicationIsInactive"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backingType"
      return_type: "X(Enum.enum NSBackingStoreType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackingType:"
      return_type: "V"
      parameter {
        name: "backingType"
        type: "X(Enum.enum NSBackingStoreType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "level"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setLevel:"
      return_type: "V"
      parameter {
        name: "level"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "depthLimit"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setDepthLimit:"
      return_type: "V"
      parameter {
        name: "depthLimit"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDynamicDepthLimit:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasDynamicDepthLimit"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "screen"
      return_type: "LNSScreen;"
    }
    class_method: false
  }
  method {
    function {
      name: "deepestScreen"
      return_type: "LNSScreen;"
    }
    class_method: false
  }
  method {
    function {
      name: "hasShadow"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasShadow:"
      return_type: "V"
      parameter {
        name: "hasShadow"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateShadow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "alphaValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlphaValue:"
      return_type: "V"
      parameter {
        name: "alphaValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOpaque"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setOpaque:"
      return_type: "V"
      parameter {
        name: "opaque"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharingType"
      return_type: "X(Enum.enum NSWindowSharingType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSharingType:"
      return_type: "V"
      parameter {
        name: "sharingType"
        type: "X(Enum.enum NSWindowSharingType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredBackingLocation"
      return_type: "X(Enum.enum NSWindowBackingLocation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredBackingLocation:"
      return_type: "V"
      parameter {
        name: "preferredBackingLocation"
        type: "X(Enum.enum NSWindowBackingLocation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backingLocation"
      return_type: "X(Enum.enum NSWindowBackingLocation)"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsConcurrentViewDrawing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsConcurrentViewDrawing:"
      return_type: "V"
      parameter {
        name: "allowsConcurrentViewDrawing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displaysWhenScreenProfileChanges"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDisplaysWhenScreenProfileChanges:"
      return_type: "V"
      parameter {
        name: "displaysWhenScreenProfileChanges"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "disableScreenUpdatesUntilFlush"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "canBecomeVisibleWithoutLogin"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanBecomeVisibleWithoutLogin:"
      return_type: "V"
      parameter {
        name: "canBecomeVisibleWithoutLogin"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionBehavior"
      return_type: "X(Enum.enum NSWindowCollectionBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setCollectionBehavior:"
      return_type: "V"
      parameter {
        name: "collectionBehavior"
        type: "X(Enum.enum NSWindowCollectionBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animationBehavior"
      return_type: "X(Enum.enum NSWindowAnimationBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimationBehavior:"
      return_type: "V"
      parameter {
        name: "animationBehavior"
        type: "X(Enum.enum NSWindowAnimationBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOnActiveSpace"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "toggleFullScreen:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringWithSavedFrame"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameFromString:"
      return_type: "V"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "saveFrameUsingName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameUsingName:force:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "force"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameUsingName:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameAutosaveName:"
      return_type: "Z"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameAutosaveName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "removeFrameUsingName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "cacheImageInRect:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "restoreCachedImage"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "discardCachedImage"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "minSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinSize:"
      return_type: "V"
      parameter {
        name: "minSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxSize:"
      return_type: "V"
      parameter {
        name: "maxSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentMinSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentMinSize:"
      return_type: "V"
      parameter {
        name: "contentMinSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentMaxSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentMaxSize:"
      return_type: "V"
      parameter {
        name: "contentMaxSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackEventsMatchingMask:timeout:mode:handler:"
      return_type: "V"
      parameter {
        name: "mask"
        type: "X(Enum.enum NSEventMask)"
      }
      parameter {
        name: "timeout"
        type: "D"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
      parameter {
        name: "trackingHandler"
        type: "X(BlockPointer.void (^)(NSEvent *, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextEventMatchingMask:"
      return_type: "LNSEvent;"
      parameter {
        name: "mask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextEventMatchingMask:untilDate:inMode:dequeue:"
      return_type: "LNSEvent;"
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "expiration"
        type: "LNSDate;"
      }
      parameter {
        name: "mode"
        type: "LNSString;"
      }
      parameter {
        name: "deqFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "discardEventsMatchingMask:beforeEvent:"
      return_type: "V"
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "lastEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "postEvent:atStart:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentEvent"
      return_type: "LNSEvent;"
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsMouseMovedEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAcceptsMouseMovedEvents:"
      return_type: "V"
      parameter {
        name: "acceptsMouseMovedEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ignoresMouseEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIgnoresMouseEvents:"
      return_type: "V"
      parameter {
        name: "ignoresMouseEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deviceDescription"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "sendEvent:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseLocationOutsideOfEventStream"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "menuChanged:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "windowController"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setWindowController:"
      return_type: "V"
      parameter {
        name: "windowController"
        type: "LNSWindowController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheet:completionHandler:"
      return_type: "V"
      parameter {
        name: "sheetWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSModalResponse))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginCriticalSheet:completionHandler:"
      return_type: "V"
      parameter {
        name: "sheetWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSModalResponse))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endSheet:"
      return_type: "V"
      parameter {
        name: "sheetWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endSheet:returnCode:"
      return_type: "V"
      parameter {
        name: "sheetWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "returnCode"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sheets"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "attachedSheet"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "isSheet"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "sheetParent"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "standardWindowButton:forStyleMask:"
      return_type: "LNSButton;"
      parameter {
        name: "b"
        type: "X(Enum.enum NSWindowButton)"
      }
      parameter {
        name: "styleMask"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "standardWindowButton:"
      return_type: "LNSButton;"
      parameter {
        name: "b"
        type: "X(Enum.enum NSWindowButton)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addChildWindow:ordered:"
      return_type: "V"
      parameter {
        name: "childWin"
        type: "LNSWindow;"
      }
      parameter {
        name: "place"
        type: "X(Enum.enum NSWindowOrderingMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeChildWindow:"
      return_type: "V"
      parameter {
        name: "childWin"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "childWindows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "parentWindow"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "setParentWindow:"
      return_type: "V"
      parameter {
        name: "parentWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "graphicsContext"
      return_type: "LNSGraphicsContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: false
  }
  method {
    function {
      name: "setColorSpace:"
      return_type: "V"
      parameter {
        name: "colorSpace"
        type: "LNSColorSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowNumbersWithOptions:"
      return_type: "LNSArray;"
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "windowNumberAtPoint:belowWindowWithWindowNumber:"
      return_type: "I"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "windowNumber"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "occlusionState"
      return_type: "X(Enum.enum NSWindowOcclusionState)"
    }
    class_method: false
  }
  method {
    function {
      name: "contentViewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentViewController:"
      return_type: "V"
      parameter {
        name: "contentViewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWithContentViewController:"
      return_type: "OI"
      parameter {
        name: "contentViewController"
        type: "LNSViewController;"
      }
    }
    class_method: true
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "titleVisibility"
    type: "X(Enum.enum NSWindowTitleVisibility)"
  }
  property {
    name: "titlebarAppearsTransparent"
    type: "Z"
  }
  property {
    name: "contentLayoutRect"
    type: "RCGRect;"
  }
  property {
    name: "contentLayoutGuide"
    type: "OI"
  }
  property {
    name: "titlebarAccessoryViewControllers"
    type: "LNSArray;"
  }
  property {
    name: "representedURL"
    type: "LNSURL;"
  }
  property {
    name: "representedFilename"
    type: "LNSString;"
  }
  property {
    name: "excludedFromWindowsMenu"
    type: "Z"
  }
  property {
    name: "contentView"
    type: "OI"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSWindowDelegate>)"
  }
  property {
    name: "windowNumber"
    type: "I"
  }
  property {
    name: "styleMask"
    type: "UI"
  }
  property {
    name: "frame"
    type: "RCGRect;"
  }
  property {
    name: "inLiveResize"
    type: "Z"
  }
  property {
    name: "showsResizeIndicator"
    type: "Z"
  }
  property {
    name: "resizeIncrements"
    type: "RCGSize;"
  }
  property {
    name: "aspectRatio"
    type: "RCGSize;"
  }
  property {
    name: "contentResizeIncrements"
    type: "RCGSize;"
  }
  property {
    name: "contentAspectRatio"
    type: "RCGSize;"
  }
  property {
    name: "flushWindowDisabled"
    type: "Z"
  }
  property {
    name: "viewsNeedDisplay"
    type: "Z"
  }
  property {
    name: "autodisplay"
    type: "Z"
  }
  property {
    name: "preservesContentDuringLiveResize"
    type: "Z"
  }
  property {
    name: "firstResponder"
    type: "LNSResponder;"
  }
  property {
    name: "resizeFlags"
    type: "I"
  }
  property {
    name: "releasedWhenClosed"
    type: "Z"
  }
  property {
    name: "zoomed"
    type: "Z"
  }
  property {
    name: "miniaturized"
    type: "Z"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "movable"
    type: "Z"
  }
  property {
    name: "movableByWindowBackground"
    type: "Z"
  }
  property {
    name: "hidesOnDeactivate"
    type: "Z"
  }
  property {
    name: "canHide"
    type: "Z"
  }
  property {
    name: "miniwindowImage"
    type: "LNSImage;"
  }
  property {
    name: "miniwindowTitle"
    type: "LNSString;"
  }
  property {
    name: "dockTile"
    type: "LNSDockTile;"
  }
  property {
    name: "documentEdited"
    type: "Z"
  }
  property {
    name: "visible"
    type: "Z"
  }
  property {
    name: "keyWindow"
    type: "Z"
  }
  property {
    name: "mainWindow"
    type: "Z"
  }
  property {
    name: "canBecomeKeyWindow"
    type: "Z"
  }
  property {
    name: "canBecomeMainWindow"
    type: "Z"
  }
  property {
    name: "worksWhenModal"
    type: "Z"
  }
  property {
    name: "preventsApplicationTerminationWhenModal"
    type: "Z"
  }
  property {
    name: "backingScaleFactor"
    type: "D"
  }
  property {
    name: "oneShot"
    type: "Z"
  }
  property {
    name: "areCursorRectsEnabled"
    type: "Z"
  }
  property {
    name: "allowsToolTipsWhenApplicationIsInactive"
    type: "Z"
  }
  property {
    name: "backingType"
    type: "X(Enum.enum NSBackingStoreType)"
  }
  property {
    name: "level"
    type: "I"
  }
  property {
    name: "depthLimit"
    type: "I"
  }
  property {
    name: "hasDynamicDepthLimit"
    type: "Z"
  }
  property {
    name: "screen"
    type: "LNSScreen;"
  }
  property {
    name: "deepestScreen"
    type: "LNSScreen;"
  }
  property {
    name: "hasShadow"
    type: "Z"
  }
  property {
    name: "alphaValue"
    type: "D"
  }
  property {
    name: "opaque"
    type: "Z"
  }
  property {
    name: "sharingType"
    type: "X(Enum.enum NSWindowSharingType)"
  }
  property {
    name: "preferredBackingLocation"
    type: "X(Enum.enum NSWindowBackingLocation)"
  }
  property {
    name: "backingLocation"
    type: "X(Enum.enum NSWindowBackingLocation)"
  }
  property {
    name: "allowsConcurrentViewDrawing"
    type: "Z"
  }
  property {
    name: "displaysWhenScreenProfileChanges"
    type: "Z"
  }
  property {
    name: "canBecomeVisibleWithoutLogin"
    type: "Z"
  }
  property {
    name: "collectionBehavior"
    type: "X(Enum.enum NSWindowCollectionBehavior)"
  }
  property {
    name: "animationBehavior"
    type: "X(Enum.enum NSWindowAnimationBehavior)"
  }
  property {
    name: "onActiveSpace"
    type: "Z"
  }
  property {
    name: "stringWithSavedFrame"
    type: "LNSString;"
  }
  property {
    name: "minSize"
    type: "RCGSize;"
  }
  property {
    name: "maxSize"
    type: "RCGSize;"
  }
  property {
    name: "contentMinSize"
    type: "RCGSize;"
  }
  property {
    name: "contentMaxSize"
    type: "RCGSize;"
  }
  property {
    name: "currentEvent"
    type: "LNSEvent;"
  }
  property {
    name: "acceptsMouseMovedEvents"
    type: "Z"
  }
  property {
    name: "ignoresMouseEvents"
    type: "Z"
  }
  property {
    name: "deviceDescription"
    type: "LNSDictionary;"
  }
  property {
    name: "mouseLocationOutsideOfEventStream"
    type: "RCGPoint;"
  }
  property {
    name: "sheets"
    type: "LNSArray;"
  }
  property {
    name: "attachedSheet"
    type: "LNSWindow;"
  }
  property {
    name: "sheet"
    type: "Z"
  }
  property {
    name: "sheetParent"
    type: "LNSWindow;"
  }
  property {
    name: "childWindows"
    type: "LNSArray;"
  }
  property {
    name: "parentWindow"
    type: "LNSWindow;"
  }
  property {
    name: "graphicsContext"
    type: "LNSGraphicsContext;"
  }
  property {
    name: "colorSpace"
    type: "LNSColorSpace;"
  }
  property {
    name: "occlusionState"
    type: "X(Enum.enum NSWindowOcclusionState)"
  }
  property {
    name: "contentViewController"
    type: "LNSViewController;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindow.h"
}
class {
  name: "NSPanel"
  base_class: "NSWindow"
  method {
    function {
      name: "isFloatingPanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setFloatingPanel:"
      return_type: "V"
      parameter {
        name: "floatingPanel"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "becomesKeyOnlyIfNeeded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBecomesKeyOnlyIfNeeded:"
      return_type: "V"
      parameter {
        name: "becomesKeyOnlyIfNeeded"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "worksWhenModal"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setWorksWhenModal:"
      return_type: "V"
      parameter {
        name: "worksWhenModal"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "floatingPanel"
    type: "Z"
  }
  property {
    name: "becomesKeyOnlyIfNeeded"
    type: "Z"
  }
  property {
    name: "worksWhenModal"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPanel.h"
}
class {
  name: "NSFontPanel"
  base_class: "NSPanel"
  method {
    function {
      name: "sharedFontPanel"
      return_type: "LNSFontPanel;"
    }
    class_method: true
  }
  method {
    function {
      name: "sharedFontPanelExists"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "accessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPanelFont:isMultiple:"
      return_type: "V"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panelConvertFont:"
      return_type: "LNSFont;"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "worksWhenModal"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setWorksWhenModal:"
      return_type: "V"
      parameter {
        name: "worksWhenModal"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadDefaultFontFamilies"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "accessoryView"
    type: "LNSView;"
  }
  property {
    name: "worksWhenModal"
    type: "Z"
  }
  property {
    name: "enabled"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontPanel.h"
}
class {
  name: "NSMatrix"
  base_class: "NSControl"
  protocol: "NSUserInterfaceValidations"
  category: "NSMatrix+NSKeyboardUI"
  method {
    function {
      name: "initWithFrame:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFrame:mode:prototype:numberOfRows:numberOfColumns:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "aMode"
        type: "X(Enum.enum NSMatrixMode)"
      }
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
      parameter {
        name: "rowsHigh"
        type: "I"
      }
      parameter {
        name: "colsWide"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "aMode"
        type: "X(Enum.enum NSMatrixMode)"
      }
      parameter {
        name: "factoryId"
        type: "OC"
      }
      parameter {
        name: "rowsHigh"
        type: "I"
      }
      parameter {
        name: "colsWide"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellClass"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "setCellClass:"
      return_type: "V"
      parameter {
        name: "cellClass"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prototype"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setPrototype:"
      return_type: "V"
      parameter {
        name: "prototype"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeCellAtRow:column:"
      return_type: "LNSCell;"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mode"
      return_type: "X(Enum.enum NSMatrixMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setMode:"
      return_type: "V"
      parameter {
        name: "mode"
        type: "X(Enum.enum NSMatrixMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsEmptySelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsEmptySelection:"
      return_type: "V"
      parameter {
        name: "allowsEmptySelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendAction:to:forAllCells:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "sortUsingSelector:"
      return_type: "V"
      parameter {
        name: "comparator"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortUsingFunction:context:"
      return_type: "V"
      parameter {
        name: "compare"
        type: "*(X(Unexposed.id)X(Unexposed.id)*V;)I;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedCells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRow"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectionByRect"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionByRect:"
      return_type: "V"
      parameter {
        name: "selectionByRect"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionFrom:to:anchor:highlight:"
      return_type: "V"
      parameter {
        name: "startPos"
        type: "I"
      }
      parameter {
        name: "endPos"
        type: "I"
      }
      parameter {
        name: "anchorPos"
        type: "I"
      }
      parameter {
        name: "lit"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deselectSelectedCell"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "deselectAllCells"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "selectCellAtRow:column:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectAll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectCellWithTag:"
      return_type: "Z"
      parameter {
        name: "anInt"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCellSize:"
      return_type: "V"
      parameter {
        name: "cellSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intercellSpacing"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIntercellSpacing:"
      return_type: "V"
      parameter {
        name: "intercellSpacing"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setScrollable:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellBackgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCellBackgroundColor:"
      return_type: "V"
      parameter {
        name: "cellBackgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsCellBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsCellBackground:"
      return_type: "V"
      parameter {
        name: "drawsCellBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setState:atRow:column:"
      return_type: "V"
      parameter {
        name: "value"
        type: "I"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getNumberOfRows:columns:"
      return_type: "V"
      parameter {
        name: "rowCount"
        type: "*I;"
      }
      parameter {
        name: "colCount"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfRows"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfColumns"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "cellAtRow:column:"
      return_type: "OI"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellFrameAtRow:column:"
      return_type: "RCGRect;"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getRow:column:ofCell:"
      return_type: "Z"
      parameter {
        name: "row"
        type: "*I;"
      }
      parameter {
        name: "col"
        type: "*I;"
      }
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getRow:column:forPoint:"
      return_type: "Z"
      parameter {
        name: "row"
        type: "*I;"
      }
      parameter {
        name: "col"
        type: "*I;"
      }
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "renewRows:columns:"
      return_type: "V"
      parameter {
        name: "newRows"
        type: "I"
      }
      parameter {
        name: "newCols"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "putCell:atRow:column:"
      return_type: "V"
      parameter {
        name: "newCell"
        type: "LNSCell;"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addRow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "addRowWithCells:"
      return_type: "V"
      parameter {
        name: "newCells"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertRow:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertRow:withCells:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "newCells"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeRow:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addColumn"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "addColumnWithCells:"
      return_type: "V"
      parameter {
        name: "newCells"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertColumn:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertColumn:withCells:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "newCells"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeColumn:"
      return_type: "V"
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellWithTag:"
      return_type: "OI"
      parameter {
        name: "anInt"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleAction"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleAction:"
      return_type: "V"
      parameter {
        name: "doubleAction"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosizesCells"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutosizesCells:"
      return_type: "V"
      parameter {
        name: "autosizesCells"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeToCells"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setValidateSize:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawCellAtRow:column:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlightCell:atRow:column:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAutoscroll"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoscroll:"
      return_type: "V"
      parameter {
        name: "autoscroll"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollCellToVisibleAtRow:column:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDownFlags"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDown:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performKeyEquivalent:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendAction"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "sendDoubleAction"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSMatrixDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSMatrixDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textShouldBeginEditing:"
      return_type: "Z"
      parameter {
        name: "textObject"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textShouldEndEditing:"
      return_type: "Z"
      parameter {
        name: "textObject"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidBeginEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidEndEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectText:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectTextAtRow:column:"
      return_type: "OI"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsFirstMouse:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resetCursorRects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setToolTip:forCell:"
      return_type: "V"
      parameter {
        name: "toolTipString"
        type: "LNSString;"
      }
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolTipForCell:"
      return_type: "LNSString;"
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autorecalculatesCellSize"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutorecalculatesCellSize:"
      return_type: "V"
      parameter {
        name: "autorecalculatesCellSize"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "cellClass"
    type: "OC"
  }
  property {
    name: "prototype"
    type: "OI"
  }
  property {
    name: "mode"
    type: "X(Enum.enum NSMatrixMode)"
  }
  property {
    name: "allowsEmptySelection"
    type: "Z"
  }
  property {
    name: "cells"
    type: "LNSArray;"
  }
  property {
    name: "selectedCell"
    type: "OI"
  }
  property {
    name: "selectedCells"
    type: "LNSArray;"
  }
  property {
    name: "selectedRow"
    type: "I"
  }
  property {
    name: "selectedColumn"
    type: "I"
  }
  property {
    name: "selectionByRect"
    type: "Z"
  }
  property {
    name: "cellSize"
    type: "RCGSize;"
  }
  property {
    name: "intercellSpacing"
    type: "RCGSize;"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "cellBackgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "drawsCellBackground"
    type: "Z"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "numberOfRows"
    type: "I"
  }
  property {
    name: "numberOfColumns"
    type: "I"
  }
  property {
    name: "doubleAction"
    type: "OS"
  }
  property {
    name: "autosizesCells"
    type: "Z"
  }
  property {
    name: "autoscroll"
    type: "Z"
  }
  property {
    name: "mouseDownFlags"
    type: "I"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSMatrixDelegate>)"
  }
  property {
    name: "autorecalculatesCellSize"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMatrix.h"
}
class {
  name: "NSForm"
  base_class: "NSMatrix"
  method {
    function {
      name: "indexOfSelectedItem"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setEntryWidth:"
      return_type: "V"
      parameter {
        name: "width"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setInterlineSpacing:"
      return_type: "V"
      parameter {
        name: "spacing"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBordered:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBezeled:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleAlignment:"
      return_type: "V"
      parameter {
        name: "mode"
        type: "X(Enum.enum NSTextAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTextAlignment:"
      return_type: "V"
      parameter {
        name: "mode"
        type: "X(Enum.enum NSTextAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleFont:"
      return_type: "V"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTextFont:"
      return_type: "V"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellAtIndex:"
      return_type: "OI"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawCellAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addEntry:"
      return_type: "LNSFormCell;"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertEntry:atIndex:"
      return_type: "LNSFormCell;"
      parameter {
        name: "title"
        type: "LNSString;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeEntryAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfCellWithTag:"
      return_type: "I"
      parameter {
        name: "aTag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectTextAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFrameSize:"
      return_type: "V"
      parameter {
        name: "newSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleBaseWritingDirection:"
      return_type: "V"
      parameter {
        name: "writingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTextBaseWritingDirection:"
      return_type: "V"
      parameter {
        name: "writingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredTextFieldWidth:"
      return_type: "V"
      parameter {
        name: "preferredWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredTextFieldWidth"
      return_type: "D"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSForm.h"
}
class {
  name: "NSFormCell"
  base_class: "NSActionCell"
  category: "NSFormCell+NSKeyboardUI"
  category: "NSFormCell+NSFormCellAttributedStringMethods"
  method {
    function {
      name: "initTextCell:"
      return_type: "OI"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleWidth:"
      return_type: "D"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleWidth:"
      return_type: "V"
      parameter {
        name: "titleWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleFont:"
      return_type: "V"
      parameter {
        name: "titleFont"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleAlignment"
      return_type: "X(Enum.enum NSTextAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleAlignment:"
      return_type: "V"
      parameter {
        name: "titleAlignment"
        type: "X(Enum.enum NSTextAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOpaque"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderString:"
      return_type: "V"
      parameter {
        name: "placeholderString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderAttributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderAttributedString:"
      return_type: "V"
      parameter {
        name: "placeholderAttributedString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleBaseWritingDirection"
      return_type: "X(Enum.enum NSWritingDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleBaseWritingDirection:"
      return_type: "V"
      parameter {
        name: "titleBaseWritingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredTextFieldWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredTextFieldWidth:"
      return_type: "V"
      parameter {
        name: "preferredTextFieldWidth"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "titleWidth"
    type: "D"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "titleFont"
    type: "LNSFont;"
  }
  property {
    name: "titleAlignment"
    type: "X(Enum.enum NSTextAlignment)"
  }
  property {
    name: "opaque"
    type: "Z"
  }
  property {
    name: "placeholderString"
    type: "LNSString;"
  }
  property {
    name: "placeholderAttributedString"
    type: "LNSAttributedString;"
  }
  property {
    name: "titleBaseWritingDirection"
    type: "X(Enum.enum NSWritingDirection)"
  }
  property {
    name: "preferredTextFieldWidth"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFormCell.h"
}
class {
  name: "NSMenuItem"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  protocol: "NSValidatedUserInterfaceItem"
  category: "NSMenuItem+NSDeprecated"
  method {
    function {
      name: "setUsesUserKeyEquivalents:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "usesUserKeyEquivalents"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "separatorItem"
      return_type: "LNSMenuItem;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithTitle:action:keyEquivalent:"
      return_type: "OI"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "charCode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasSubmenu"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "submenu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSubmenu:"
      return_type: "V"
      parameter {
        name: "submenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parentItem"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedTitle:"
      return_type: "V"
      parameter {
        name: "attributedTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSeparatorItem"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyEquivalent:"
      return_type: "V"
      parameter {
        name: "keyEquivalent"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalentModifierMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyEquivalentModifierMask:"
      return_type: "V"
      parameter {
        name: "keyEquivalentModifierMask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userKeyEquivalent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleWithMnemonic:"
      return_type: "V"
      parameter {
        name: "stringWithAmpersand"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "state"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setState:"
      return_type: "V"
      parameter {
        name: "state"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "onStateImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setOnStateImage:"
      return_type: "V"
      parameter {
        name: "onStateImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "offStateImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setOffStateImage:"
      return_type: "V"
      parameter {
        name: "offStateImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mixedStateImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMixedStateImage:"
      return_type: "V"
      parameter {
        name: "mixedStateImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAlternate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternate:"
      return_type: "V"
      parameter {
        name: "alternate"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indentationLevel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndentationLevel:"
      return_type: "V"
      parameter {
        name: "indentationLevel"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setTag:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "representedObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepresentedObject:"
      return_type: "V"
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHighlighted"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHidden:"
      return_type: "V"
      parameter {
        name: "hidden"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHiddenOrHasHiddenAncestor"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "toolTip"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setToolTip:"
      return_type: "V"
      parameter {
        name: "toolTip"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "menu"
    type: "LNSMenu;"
  }
  property {
    name: "hasSubmenu"
    type: "Z"
  }
  property {
    name: "submenu"
    type: "LNSMenu;"
  }
  property {
    name: "parentItem"
    type: "LNSMenuItem;"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "attributedTitle"
    type: "LNSAttributedString;"
  }
  property {
    name: "separatorItem"
    type: "Z"
  }
  property {
    name: "keyEquivalent"
    type: "LNSString;"
  }
  property {
    name: "keyEquivalentModifierMask"
    type: "UI"
  }
  property {
    name: "userKeyEquivalent"
    type: "LNSString;"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "state"
    type: "I"
  }
  property {
    name: "onStateImage"
    type: "LNSImage;"
  }
  property {
    name: "offStateImage"
    type: "LNSImage;"
  }
  property {
    name: "mixedStateImage"
    type: "LNSImage;"
  }
  property {
    name: "enabled"
    type: "Z"
  }
  property {
    name: "alternate"
    type: "Z"
  }
  property {
    name: "indentationLevel"
    type: "I"
  }
  property {
    name: "target"
    type: "OI"
  }
  property {
    name: "action"
    type: "OS"
  }
  property {
    name: "tag"
    type: "I"
  }
  property {
    name: "representedObject"
    type: "OI"
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  property {
    name: "highlighted"
    type: "Z"
  }
  property {
    name: "hidden"
    type: "Z"
  }
  property {
    name: "hiddenOrHasHiddenAncestor"
    type: "Z"
  }
  property {
    name: "toolTip"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenuItem.h"
}
class {
  name: "NSMenu"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSMenu+NSSubmenuAction"
  category: "NSMenu+NSMenuPropertiesToUpdate"
  category: "NSMenu+NSDeprecated"
  method {
    function {
      name: "initWithTitle:"
      return_type: "OI"
      parameter {
        name: "aTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "popUpContextMenu:withEvent:forView:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "popUpContextMenu:withEvent:forView:withFont:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "popUpMenuPositioningItem:atLocation:inView:"
      return_type: "Z"
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMenuBarVisible:"
      return_type: "V"
      parameter {
        name: "visible"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "menuBarVisible"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "supermenu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSupermenu:"
      return_type: "V"
      parameter {
        name: "supermenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertItem:atIndex:"
      return_type: "V"
      parameter {
        name: "newItem"
        type: "LNSMenuItem;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItem:"
      return_type: "V"
      parameter {
        name: "newItem"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertItemWithTitle:action:keyEquivalent:atIndex:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "charCode"
        type: "LNSString;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemWithTitle:action:keyEquivalent:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "charCode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItem:"
      return_type: "V"
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSubmenu:forItem:"
      return_type: "V"
      parameter {
        name: "aMenu"
        type: "LNSMenu;"
      }
      parameter {
        name: "anItem"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllItems"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "itemArray"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtIndex:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItem:"
      return_type: "I"
      parameter {
        name: "index"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTitle:"
      return_type: "I"
      parameter {
        name: "aTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTag:"
      return_type: "I"
      parameter {
        name: "aTag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithRepresentedObject:"
      return_type: "I"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithSubmenu:"
      return_type: "I"
      parameter {
        name: "submenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTarget:andAction:"
      return_type: "I"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "actionSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemWithTitle:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "aTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemWithTag:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoenablesItems"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoenablesItems:"
      return_type: "V"
      parameter {
        name: "autoenablesItems"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "update"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "performKeyEquivalent:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemChanged:"
      return_type: "V"
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performActionForItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSMenuDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSMenuDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuBarHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "cancelTracking"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "cancelTrackingWithoutAnimation"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "highlightedItem"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "minimumWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinimumWidth:"
      return_type: "V"
      parameter {
        name: "minimumWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "size"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "font"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFont:"
      return_type: "V"
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsContextMenuPlugIns"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsContextMenuPlugIns:"
      return_type: "V"
      parameter {
        name: "allowsContextMenuPlugIns"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsStateColumn"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsStateColumn:"
      return_type: "V"
      parameter {
        name: "showsStateColumn"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuZone"
      return_type: "*R_NSZone;;"
    }
    class_method: true
  }
  method {
    function {
      name: "menuChangedMessagesEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenuChangedMessagesEnabled:"
      return_type: "V"
      parameter {
        name: "menuChangedMessagesEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "helpRequested:"
      return_type: "V"
      parameter {
        name: "eventPtr"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isTornOff"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "supermenu"
    type: "LNSMenu;"
  }
  property {
    name: "itemArray"
    type: "LNSArray;"
  }
  property {
    name: "numberOfItems"
    type: "I"
  }
  property {
    name: "autoenablesItems"
    type: "Z"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSMenuDelegate>)"
  }
  property {
    name: "menuBarHeight"
    type: "D"
  }
  property {
    name: "highlightedItem"
    type: "LNSMenuItem;"
  }
  property {
    name: "minimumWidth"
    type: "D"
  }
  property {
    name: "size"
    type: "RCGSize;"
  }
  property {
    name: "font"
    type: "LNSFont;"
  }
  property {
    name: "allowsContextMenuPlugIns"
    type: "Z"
  }
  property {
    name: "showsStateColumn"
    type: "Z"
  }
  property {
    name: "menuChangedMessagesEnabled"
    type: "Z"
  }
  property {
    name: "tornOff"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenu.h"
}
class {
  name: "NSPasteboard"
  base_class: "NSObject"
  category: "NSPasteboard+FilterServices"
  category: "NSPasteboard+NSFileContents"
  method {
    function {
      name: "generalPasteboard"
      return_type: "LNSPasteboard;"
    }
    class_method: true
  }
  method {
    function {
      name: "pasteboardWithName:"
      return_type: "LNSPasteboard;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pasteboardWithUniqueName"
      return_type: "LNSPasteboard;"
    }
    class_method: true
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "changeCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "releaseGlobally"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "clearContents"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "writeObjects:"
      return_type: "Z"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readObjectsForClasses:options:"
      return_type: "LNSArray;"
      parameter {
        name: "classArray"
        type: "LNSArray;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pasteboardItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfPasteboardItem:"
      return_type: "UI"
      parameter {
        name: "pasteboardItem"
        type: "LNSPasteboardItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canReadItemWithDataConformingToTypes:"
      return_type: "Z"
      parameter {
        name: "types"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canReadObjectForClasses:options:"
      return_type: "Z"
      parameter {
        name: "classArray"
        type: "LNSArray;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "declareTypes:owner:"
      return_type: "I"
      parameter {
        name: "newTypes"
        type: "LNSArray;"
      }
      parameter {
        name: "newOwner"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addTypes:owner:"
      return_type: "I"
      parameter {
        name: "newTypes"
        type: "LNSArray;"
      }
      parameter {
        name: "newOwner"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "types"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "availableTypeFromArray:"
      return_type: "LNSString;"
      parameter {
        name: "types"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setData:forType:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "dataType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPropertyList:forType:"
      return_type: "Z"
      parameter {
        name: "plist"
        type: "OI"
      }
      parameter {
        name: "dataType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setString:forType:"
      return_type: "Z"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "dataType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataForType:"
      return_type: "LNSData;"
      parameter {
        name: "dataType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "propertyListForType:"
      return_type: "OI"
      parameter {
        name: "dataType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringForType:"
      return_type: "LNSString;"
      parameter {
        name: "dataType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "changeCount"
    type: "I"
  }
  property {
    name: "pasteboardItems"
    type: "LNSArray;"
  }
  property {
    name: "types"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h"
}
class {
  name: "CIVector"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "vectorWithValues:count:"
      return_type: "LCIVector;"
      parameter {
        name: "values"
        type: "*cD;"
      }
      parameter {
        name: "count"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "vectorWithX:"
      return_type: "LCIVector;"
      parameter {
        name: "x"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "vectorWithX:Y:"
      return_type: "LCIVector;"
      parameter {
        name: "x"
        type: "D"
      }
      parameter {
        name: "y"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "vectorWithX:Y:Z:"
      return_type: "LCIVector;"
      parameter {
        name: "x"
        type: "D"
      }
      parameter {
        name: "y"
        type: "D"
      }
      parameter {
        name: "z"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "vectorWithX:Y:Z:W:"
      return_type: "LCIVector;"
      parameter {
        name: "x"
        type: "D"
      }
      parameter {
        name: "y"
        type: "D"
      }
      parameter {
        name: "z"
        type: "D"
      }
      parameter {
        name: "w"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "vectorWithCGPoint:"
      return_type: "LCIVector;"
      parameter {
        name: "p"
        type: "RCGPoint;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "vectorWithCGRect:"
      return_type: "LCIVector;"
      parameter {
        name: "r"
        type: "RCGRect;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "vectorWithCGAffineTransform:"
      return_type: "LCIVector;"
      parameter {
        name: "t"
        type: "RCGAffineTransform;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "vectorWithString:"
      return_type: "LCIVector;"
      parameter {
        name: "representation"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithValues:count:"
      return_type: "OI"
      parameter {
        name: "values"
        type: "*cD;"
      }
      parameter {
        name: "count"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithX:"
      return_type: "OI"
      parameter {
        name: "x"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithX:Y:"
      return_type: "OI"
      parameter {
        name: "x"
        type: "D"
      }
      parameter {
        name: "y"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithX:Y:Z:"
      return_type: "OI"
      parameter {
        name: "x"
        type: "D"
      }
      parameter {
        name: "y"
        type: "D"
      }
      parameter {
        name: "z"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithX:Y:Z:W:"
      return_type: "OI"
      parameter {
        name: "x"
        type: "D"
      }
      parameter {
        name: "y"
        type: "D"
      }
      parameter {
        name: "z"
        type: "D"
      }
      parameter {
        name: "w"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGPoint:"
      return_type: "OI"
      parameter {
        name: "p"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGRect:"
      return_type: "OI"
      parameter {
        name: "r"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGAffineTransform:"
      return_type: "OI"
      parameter {
        name: "r"
        type: "RCGAffineTransform;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "representation"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueAtIndex:"
      return_type: "D"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "count"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "X"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "Y"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "Z"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "W"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "CGPointValue"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "CGRectValue"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "CGAffineTransformValue"
      return_type: "RCGAffineTransform;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringRepresentation"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Frameworks/CoreImage.framework/Headers/CIVector.h"
}
class {
  name: "CIColor"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSCopying"
  category: "CIColor+NSAppKitAdditions"
  method {
    function {
      name: "colorWithCGColor:"
      return_type: "LCIColor;"
      parameter {
        name: "c"
        type: "*RCGColor;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithRed:green:blue:alpha:"
      return_type: "LCIColor;"
      parameter {
        name: "r"
        type: "D"
      }
      parameter {
        name: "g"
        type: "D"
      }
      parameter {
        name: "b"
        type: "D"
      }
      parameter {
        name: "a"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithRed:green:blue:"
      return_type: "LCIColor;"
      parameter {
        name: "r"
        type: "D"
      }
      parameter {
        name: "g"
        type: "D"
      }
      parameter {
        name: "b"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithString:"
      return_type: "LCIColor;"
      parameter {
        name: "representation"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCGColor:"
      return_type: "OI"
      parameter {
        name: "c"
        type: "*RCGColor;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfComponents"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "components"
      return_type: "*cD;"
    }
    class_method: false
  }
  method {
    function {
      name: "alpha"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpace"
      return_type: "*RCGColorSpace;;"
    }
    class_method: false
  }
  method {
    function {
      name: "red"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "green"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "blue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "stringRepresentation"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/../Frameworks/CoreImage.framework/Headers/CIColor.h"
}
class {
  name: "NSColor"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  protocol: "NSPasteboardReading"
  protocol: "NSPasteboardWriting"
  category: "NSColor+NSQuartzCoreAdditions"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorWithCalibratedWhite:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "white"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithCalibratedHue:saturation:brightness:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "hue"
        type: "D"
      }
      parameter {
        name: "saturation"
        type: "D"
      }
      parameter {
        name: "brightness"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithCalibratedRed:green:blue:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "red"
        type: "D"
      }
      parameter {
        name: "green"
        type: "D"
      }
      parameter {
        name: "blue"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithDeviceWhite:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "white"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithDeviceHue:saturation:brightness:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "hue"
        type: "D"
      }
      parameter {
        name: "saturation"
        type: "D"
      }
      parameter {
        name: "brightness"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithDeviceRed:green:blue:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "red"
        type: "D"
      }
      parameter {
        name: "green"
        type: "D"
      }
      parameter {
        name: "blue"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithDeviceCyan:magenta:yellow:black:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "cyan"
        type: "D"
      }
      parameter {
        name: "magenta"
        type: "D"
      }
      parameter {
        name: "yellow"
        type: "D"
      }
      parameter {
        name: "black"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithCatalogName:colorName:"
      return_type: "LNSColor;"
      parameter {
        name: "listName"
        type: "LNSString;"
      }
      parameter {
        name: "colorName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithColorSpace:components:count:"
      return_type: "LNSColor;"
      parameter {
        name: "space"
        type: "LNSColorSpace;"
      }
      parameter {
        name: "components"
        type: "*cD;"
      }
      parameter {
        name: "numberOfComponents"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithGenericGamma22White:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "white"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithSRGBRed:green:blue:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "red"
        type: "D"
      }
      parameter {
        name: "green"
        type: "D"
      }
      parameter {
        name: "blue"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithWhite:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "white"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithRed:green:blue:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "red"
        type: "D"
      }
      parameter {
        name: "green"
        type: "D"
      }
      parameter {
        name: "blue"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "colorWithHue:saturation:brightness:alpha:"
      return_type: "LNSColor;"
      parameter {
        name: "hue"
        type: "D"
      }
      parameter {
        name: "saturation"
        type: "D"
      }
      parameter {
        name: "brightness"
        type: "D"
      }
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "blackColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "darkGrayColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "lightGrayColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "whiteColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "grayColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "redColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "greenColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "blueColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "cyanColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "yellowColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "magentaColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "orangeColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "purpleColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "brownColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "clearColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "controlShadowColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "controlDarkShadowColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "controlColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "controlHighlightColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "controlLightHighlightColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "controlTextColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "controlBackgroundColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "selectedControlColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "secondarySelectedControlColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "selectedControlTextColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "disabledControlTextColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "textColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "textBackgroundColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "selectedTextColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "selectedTextBackgroundColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "gridColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "keyboardFocusIndicatorColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "windowBackgroundColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "underPageBackgroundColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "labelColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "secondaryLabelColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "tertiaryLabelColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "quaternaryLabelColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "scrollBarColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "knobColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "selectedKnobColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "windowFrameColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "windowFrameTextColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "selectedMenuItemColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "selectedMenuItemTextColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "highlightColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "shadowColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "headerColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "headerTextColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "alternateSelectedControlColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "alternateSelectedControlTextColor"
      return_type: "LNSColor;"
    }
    class_method: true
  }
  method {
    function {
      name: "controlAlternatingRowBackgroundColors"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "highlightWithLevel:"
      return_type: "LNSColor;"
      parameter {
        name: "val"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadowWithLevel:"
      return_type: "LNSColor;"
      parameter {
        name: "val"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorForControlTint:"
      return_type: "LNSColor;"
      parameter {
        name: "controlTint"
        type: "X(Enum.enum NSControlTint)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "currentControlTint"
      return_type: "X(Enum.enum NSControlTint)"
    }
    class_method: true
  }
  method {
    function {
      name: "set"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setFill"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setStroke"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpaceName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "colorUsingColorSpaceName:"
      return_type: "LNSColor;"
      parameter {
        name: "colorSpace"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorUsingColorSpaceName:device:"
      return_type: "LNSColor;"
      parameter {
        name: "colorSpace"
        type: "LNSString;"
      }
      parameter {
        name: "deviceDescription"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorUsingColorSpace:"
      return_type: "LNSColor;"
      parameter {
        name: "space"
        type: "LNSColorSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "blendedColorWithFraction:ofColor:"
      return_type: "LNSColor;"
      parameter {
        name: "fraction"
        type: "D"
      }
      parameter {
        name: "color"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorWithAlphaComponent:"
      return_type: "LNSColor;"
      parameter {
        name: "alpha"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "catalogNameComponent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "colorNameComponent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedCatalogNameComponent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedColorNameComponent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "redComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "greenComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "blueComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "getRed:green:blue:alpha:"
      return_type: "V"
      parameter {
        name: "red"
        type: "*D;"
      }
      parameter {
        name: "green"
        type: "*D;"
      }
      parameter {
        name: "blue"
        type: "*D;"
      }
      parameter {
        name: "alpha"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hueComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "saturationComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "brightnessComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "getHue:saturation:brightness:alpha:"
      return_type: "V"
      parameter {
        name: "hue"
        type: "*D;"
      }
      parameter {
        name: "saturation"
        type: "*D;"
      }
      parameter {
        name: "brightness"
        type: "*D;"
      }
      parameter {
        name: "alpha"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "whiteComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "getWhite:alpha:"
      return_type: "V"
      parameter {
        name: "white"
        type: "*D;"
      }
      parameter {
        name: "alpha"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cyanComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "magentaComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "yellowComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "blackComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "getCyan:magenta:yellow:black:alpha:"
      return_type: "V"
      parameter {
        name: "cyan"
        type: "*D;"
      }
      parameter {
        name: "magenta"
        type: "*D;"
      }
      parameter {
        name: "yellow"
        type: "*D;"
      }
      parameter {
        name: "black"
        type: "*D;"
      }
      parameter {
        name: "alpha"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfComponents"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "getComponents:"
      return_type: "V"
      parameter {
        name: "components"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alphaComponent"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "colorFromPasteboard:"
      return_type: "LNSColor;"
      parameter {
        name: "pasteBoard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "writeToPasteboard:"
      return_type: "V"
      parameter {
        name: "pasteBoard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorWithPatternImage:"
      return_type: "LNSColor;"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "patternImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "drawSwatchInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorWithCGColor:"
      return_type: "LNSColor;"
      parameter {
        name: "cgColor"
        type: "*RCGColor;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "CGColor"
      return_type: "*RCGColor;;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIgnoresAlpha:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "ignoresAlpha"
      return_type: "Z"
    }
    class_method: true
  }
  property {
    name: "colorSpaceName"
    type: "LNSString;"
  }
  property {
    name: "catalogNameComponent"
    type: "LNSString;"
  }
  property {
    name: "colorNameComponent"
    type: "LNSString;"
  }
  property {
    name: "localizedCatalogNameComponent"
    type: "LNSString;"
  }
  property {
    name: "localizedColorNameComponent"
    type: "LNSString;"
  }
  property {
    name: "redComponent"
    type: "D"
  }
  property {
    name: "greenComponent"
    type: "D"
  }
  property {
    name: "blueComponent"
    type: "D"
  }
  property {
    name: "hueComponent"
    type: "D"
  }
  property {
    name: "saturationComponent"
    type: "D"
  }
  property {
    name: "brightnessComponent"
    type: "D"
  }
  property {
    name: "whiteComponent"
    type: "D"
  }
  property {
    name: "cyanComponent"
    type: "D"
  }
  property {
    name: "magentaComponent"
    type: "D"
  }
  property {
    name: "yellowComponent"
    type: "D"
  }
  property {
    name: "blackComponent"
    type: "D"
  }
  property {
    name: "colorSpace"
    type: "LNSColorSpace;"
  }
  property {
    name: "numberOfComponents"
    type: "I"
  }
  property {
    name: "alphaComponent"
    type: "D"
  }
  property {
    name: "patternImage"
    type: "LNSImage;"
  }
  property {
    name: "CGColor"
    type: "*RCGColor;;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColor.h"
}
class {
  name: "NSColorSpace"
  base_class: "NSObject"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "initWithICCProfileData:"
      return_type: "OI"
      parameter {
        name: "iccData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ICCProfileData"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithColorSyncProfile:"
      return_type: "OI"
      parameter {
        name: "prof"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorSyncProfile"
      return_type: "*V;"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGColorSpace:"
      return_type: "OI"
      parameter {
        name: "cgColorSpace"
        type: "*RCGColorSpace;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "CGColorSpace"
      return_type: "*RCGColorSpace;;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfColorComponents"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpaceModel"
      return_type: "X(Enum.enum NSColorSpaceModel)"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "genericRGBColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "genericGrayColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "genericCMYKColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "deviceRGBColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "deviceGrayColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "deviceCMYKColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "sRGBColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "genericGamma22GrayColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "adobeRGB1998ColorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: true
  }
  method {
    function {
      name: "availableColorSpacesWithModel:"
      return_type: "LNSArray;"
      parameter {
        name: "model"
        type: "X(Enum.enum NSColorSpaceModel)"
      }
    }
    class_method: true
  }
  property {
    name: "ICCProfileData"
    type: "LNSData;"
  }
  property {
    name: "colorSyncProfile"
    type: "*V;"
  }
  property {
    name: "CGColorSpace"
    type: "*RCGColorSpace;;"
  }
  property {
    name: "numberOfColorComponents"
    type: "I"
  }
  property {
    name: "colorSpaceModel"
    type: "X(Enum.enum NSColorSpaceModel)"
  }
  property {
    name: "localizedName"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorSpace.h"
}
class {
  name: "NSImageRep"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draw"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "drawAtPoint:"
      return_type: "Z"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:"
      return_type: "Z"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:fromRect:operation:fraction:respectFlipped:hints:"
      return_type: "Z"
      parameter {
        name: "dstSpacePortionRect"
        type: "RCGRect;"
      }
      parameter {
        name: "srcSpacePortionRect"
        type: "RCGRect;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
      parameter {
        name: "requestedAlpha"
        type: "D"
      }
      parameter {
        name: "respectContextIsFlipped"
        type: "Z"
      }
      parameter {
        name: "hints"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "size"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSize:"
      return_type: "V"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasAlpha"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlpha:"
      return_type: "V"
      parameter {
        name: "alpha"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOpaque"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setOpaque:"
      return_type: "V"
      parameter {
        name: "opaque"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpaceName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setColorSpaceName:"
      return_type: "V"
      parameter {
        name: "colorSpaceName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bitsPerSample"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setBitsPerSample:"
      return_type: "V"
      parameter {
        name: "bitsPerSample"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pixelsWide"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setPixelsWide:"
      return_type: "V"
      parameter {
        name: "pixelsWide"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pixelsHigh"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setPixelsHigh:"
      return_type: "V"
      parameter {
        name: "pixelsHigh"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerImageRepClass:"
      return_type: "V"
      parameter {
        name: "imageRepClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "unregisterImageRepClass:"
      return_type: "V"
      parameter {
        name: "imageRepClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "registeredImageRepClasses"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepClassForFileType:"
      return_type: "OC"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepClassForPasteboardType:"
      return_type: "OC"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepClassForType:"
      return_type: "OC"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepClassForData:"
      return_type: "OC"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "canInitWithData:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageUnfilteredFileTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageUnfilteredPasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageFileTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imagePasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageUnfilteredTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "canInitWithPasteboard:"
      return_type: "Z"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepsWithContentsOfFile:"
      return_type: "LNSArray;"
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepWithContentsOfFile:"
      return_type: "OI"
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepsWithContentsOfURL:"
      return_type: "LNSArray;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepsWithPasteboard:"
      return_type: "LNSArray;"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepWithPasteboard:"
      return_type: "OI"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "CGImageForProposedRect:context:hints:"
      return_type: "*RCGImage;;"
      parameter {
        name: "proposedDestRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
      parameter {
        name: "hints"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  property {
    name: "size"
    type: "RCGSize;"
  }
  property {
    name: "alpha"
    type: "Z"
  }
  property {
    name: "opaque"
    type: "Z"
  }
  property {
    name: "colorSpaceName"
    type: "LNSString;"
  }
  property {
    name: "bitsPerSample"
    type: "I"
  }
  property {
    name: "pixelsWide"
    type: "I"
  }
  property {
    name: "pixelsHigh"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSImageRep.h"
}
class {
  name: "NSBitmapImageRep"
  base_class: "NSImageRep"
  protocol: "NSSecureCoding"
  category: "NSBitmapImageRep+NSBitmapImageFileTypeExtensions"
  method {
    function {
      name: "initWithFocusedViewRect:"
      return_type: "OI"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:"
      return_type: "OI"
      parameter {
        name: "planes"
        type: "**UB;;"
      }
      parameter {
        name: "width"
        type: "I"
      }
      parameter {
        name: "height"
        type: "I"
      }
      parameter {
        name: "bps"
        type: "I"
      }
      parameter {
        name: "spp"
        type: "I"
      }
      parameter {
        name: "alpha"
        type: "Z"
      }
      parameter {
        name: "isPlanar"
        type: "Z"
      }
      parameter {
        name: "colorSpaceName"
        type: "LNSString;"
      }
      parameter {
        name: "rBytes"
        type: "I"
      }
      parameter {
        name: "pBits"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:"
      return_type: "OI"
      parameter {
        name: "planes"
        type: "**UB;;"
      }
      parameter {
        name: "width"
        type: "I"
      }
      parameter {
        name: "height"
        type: "I"
      }
      parameter {
        name: "bps"
        type: "I"
      }
      parameter {
        name: "spp"
        type: "I"
      }
      parameter {
        name: "alpha"
        type: "Z"
      }
      parameter {
        name: "isPlanar"
        type: "Z"
      }
      parameter {
        name: "colorSpaceName"
        type: "LNSString;"
      }
      parameter {
        name: "bitmapFormat"
        type: "X(Enum.enum NSBitmapFormat)"
      }
      parameter {
        name: "rBytes"
        type: "I"
      }
      parameter {
        name: "pBits"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGImage:"
      return_type: "OI"
      parameter {
        name: "cgImage"
        type: "*RCGImage;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCIImage:"
      return_type: "OI"
      parameter {
        name: "ciImage"
        type: "LCIImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageRepsWithData:"
      return_type: "LNSArray;"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageRepWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bitmapData"
      return_type: "*UB;"
    }
    class_method: false
  }
  method {
    function {
      name: "getBitmapDataPlanes:"
      return_type: "V"
      parameter {
        name: "data"
        type: "**UB;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isPlanar"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "samplesPerPixel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "bitsPerPixel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "bytesPerRow"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "bytesPerPlane"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfPlanes"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "bitmapFormat"
      return_type: "X(Enum.enum NSBitmapFormat)"
    }
    class_method: false
  }
  method {
    function {
      name: "getCompression:factor:"
      return_type: "V"
      parameter {
        name: "compression"
        type: "*X(Enum.enum NSTIFFCompression);"
      }
      parameter {
        name: "factor"
        type: "*F;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCompression:factor:"
      return_type: "V"
      parameter {
        name: "compression"
        type: "X(Enum.enum NSTIFFCompression)"
      }
      parameter {
        name: "factor"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "TIFFRepresentation"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "TIFFRepresentationUsingCompression:factor:"
      return_type: "LNSData;"
      parameter {
        name: "comp"
        type: "X(Enum.enum NSTIFFCompression)"
      }
      parameter {
        name: "factor"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "TIFFRepresentationOfImageRepsInArray:"
      return_type: "LNSData;"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "TIFFRepresentationOfImageRepsInArray:usingCompression:factor:"
      return_type: "LNSData;"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
      parameter {
        name: "comp"
        type: "X(Enum.enum NSTIFFCompression)"
      }
      parameter {
        name: "factor"
        type: "F"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "getTIFFCompressionTypes:count:"
      return_type: "V"
      parameter {
        name: "list"
        type: "**cX(Enum.enum NSTIFFCompression);;"
      }
      parameter {
        name: "numTypes"
        type: "*I;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "localizedNameForTIFFCompressionType:"
      return_type: "LNSString;"
      parameter {
        name: "compression"
        type: "X(Enum.enum NSTIFFCompression)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "canBeCompressedUsing:"
      return_type: "Z"
      parameter {
        name: "compression"
        type: "X(Enum.enum NSTIFFCompression)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorizeByMappingGray:toColor:blackMapping:whiteMapping:"
      return_type: "V"
      parameter {
        name: "midPoint"
        type: "D"
      }
      parameter {
        name: "midPointColor"
        type: "LNSColor;"
      }
      parameter {
        name: "shadowColor"
        type: "LNSColor;"
      }
      parameter {
        name: "lightColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initForIncrementalLoad"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "incrementalLoadFromData:complete:"
      return_type: "I"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "complete"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setColor:atX:y:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
      parameter {
        name: "x"
        type: "I"
      }
      parameter {
        name: "y"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorAtX:y:"
      return_type: "LNSColor;"
      parameter {
        name: "x"
        type: "I"
      }
      parameter {
        name: "y"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getPixel:atX:y:"
      return_type: "V"
      parameter {
        name: "p"
        type: "X(IncompleteArray.NSUInteger [])"
      }
      parameter {
        name: "x"
        type: "I"
      }
      parameter {
        name: "y"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPixel:atX:y:"
      return_type: "V"
      parameter {
        name: "p"
        type: "X(IncompleteArray.NSUInteger [])"
      }
      parameter {
        name: "x"
        type: "I"
      }
      parameter {
        name: "y"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "CGImage"
      return_type: "*RCGImage;;"
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: false
  }
  method {
    function {
      name: "bitmapImageRepByConvertingToColorSpace:renderingIntent:"
      return_type: "LNSBitmapImageRep;"
      parameter {
        name: "targetSpace"
        type: "LNSColorSpace;"
      }
      parameter {
        name: "renderingIntent"
        type: "X(Enum.enum NSColorRenderingIntent)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bitmapImageRepByRetaggingWithColorSpace:"
      return_type: "LNSBitmapImageRep;"
      parameter {
        name: "newSpace"
        type: "LNSColorSpace;"
      }
    }
    class_method: false
  }
  property {
    name: "bitmapData"
    type: "*UB;"
  }
  property {
    name: "planar"
    type: "Z"
  }
  property {
    name: "samplesPerPixel"
    type: "I"
  }
  property {
    name: "bitsPerPixel"
    type: "I"
  }
  property {
    name: "bytesPerRow"
    type: "I"
  }
  property {
    name: "bytesPerPlane"
    type: "I"
  }
  property {
    name: "numberOfPlanes"
    type: "I"
  }
  property {
    name: "bitmapFormat"
    type: "X(Enum.enum NSBitmapFormat)"
  }
  property {
    name: "TIFFRepresentation"
    type: "LNSData;"
  }
  property {
    name: "CGImage"
    type: "*RCGImage;;"
  }
  property {
    name: "colorSpace"
    type: "LNSColorSpace;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBitmapImageRep.h"
}
class {
  name: "NSPopover"
  base_class: "NSResponder"
  protocol: "NSAppearanceCustomization"
  protocol: "NSAccessibilityElement"
  protocol: "NSAccessibility"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSPopoverDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSPopoverDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appearance"
      return_type: "LNSAppearance;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAppearance:"
      return_type: "V"
      parameter {
        name: "appearance"
        type: "LNSAppearance;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "effectiveAppearance"
      return_type: "LNSAppearance;"
    }
    class_method: false
  }
  method {
    function {
      name: "behavior"
      return_type: "X(Enum.enum NSPopoverBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBehavior:"
      return_type: "V"
      parameter {
        name: "behavior"
        type: "X(Enum.enum NSPopoverBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animates"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimates:"
      return_type: "V"
      parameter {
        name: "animates"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentViewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentViewController:"
      return_type: "V"
      parameter {
        name: "contentViewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentSize:"
      return_type: "V"
      parameter {
        name: "contentSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isShown"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "positioningRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPositioningRect:"
      return_type: "V"
      parameter {
        name: "positioningRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showRelativeToRect:ofView:preferredEdge:"
      return_type: "V"
      parameter {
        name: "positioningRect"
        type: "RCGRect;"
      }
      parameter {
        name: "positioningView"
        type: "LNSView;"
      }
      parameter {
        name: "preferredEdge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performClose:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "close"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSPopoverDelegate>)"
  }
  property {
    name: "appearance"
    type: "LNSAppearance;"
  }
  property {
    name: "effectiveAppearance"
    type: "LNSAppearance;"
  }
  property {
    name: "behavior"
    type: "X(Enum.enum NSPopoverBehavior)"
  }
  property {
    name: "animates"
    type: "Z"
  }
  property {
    name: "contentViewController"
    type: "LNSViewController;"
  }
  property {
    name: "contentSize"
    type: "RCGSize;"
  }
  property {
    name: "shown"
    type: "Z"
  }
  property {
    name: "positioningRect"
    type: "RCGRect;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPopover.h"
}
class {
  name: "NSStoryboard"
  base_class: "NSObject"
  method {
    function {
      name: "storyboardWithName:bundle:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "storyboardBundleOrNil"
        type: "LNSBundle;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "instantiateInitialController"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "instantiateControllerWithIdentifier:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStoryboard.h"
}
class {
  name: "NSStoryboardSegue"
  base_class: "NSObject"
  method {
    function {
      name: "segueWithIdentifier:source:destination:performHandler:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "sourceController"
        type: "OI"
      }
      parameter {
        name: "destinationController"
        type: "OI"
      }
      parameter {
        name: "performHandler"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithIdentifier:source:destination:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "sourceController"
        type: "OI"
      }
      parameter {
        name: "destinationController"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "sourceController"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "destinationController"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "perform"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  property {
    name: "sourceController"
    type: "OI"
  }
  property {
    name: "destinationController"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStoryboardSegue.h"
}
class {
  name: "NSViewController"
  base_class: "NSResponder"
  protocol: "NSCoding"
  protocol: "NSSeguePerforming"
  protocol: "NSUserInterfaceItemIdentification"
  category: "NSViewController+NSViewControllerPresentation"
  category: "NSViewController+NSViewControllerPresentationAndTransitionStyles"
  category: "NSViewController+NSViewControllerContainer"
  category: "NSViewController+NSViewControllerStoryboardingMethods"
  category: "NSViewController+NSExtensionAdditions"
  method {
    function {
      name: "initWithNibName:bundle:"
      return_type: "OI"
      parameter {
        name: "nibNameOrNil"
        type: "LNSString;"
      }
      parameter {
        name: "nibBundleOrNil"
        type: "LNSBundle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nibName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "nibBundle"
      return_type: "LNSBundle;"
    }
    class_method: false
  }
  method {
    function {
      name: "representedObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepresentedObject:"
      return_type: "V"
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadView"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "commitEditingWithDelegate:didCommitSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didCommitSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "commitEditing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "discardEditing"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidLoad"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isViewLoaded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillAppear"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidAppear"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillDisappear"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidDisappear"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "preferredContentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredContentSize:"
      return_type: "V"
      parameter {
        name: "preferredContentSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateViewConstraints"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillLayout"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidLayout"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "nibName"
    type: "LNSString;"
  }
  property {
    name: "nibBundle"
    type: "LNSBundle;"
  }
  property {
    name: "representedObject"
    type: "OI"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  property {
    name: "viewLoaded"
    type: "Z"
  }
  property {
    name: "preferredContentSize"
    type: "RCGSize;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSViewController.h"
}
class {
  name: "NSBrowser"
  base_class: "NSControl"
  category: "NSBrowser+NSDeprecated"
  method {
    function {
      name: "cellClass"
      return_type: "OC"
    }
    class_method: true
  }
  method {
    function {
      name: "loadColumnZero"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isLoaded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "doubleAction"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleAction:"
      return_type: "V"
      parameter {
        name: "doubleAction"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCellClass:"
      return_type: "V"
      parameter {
        name: "factoryId"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellPrototype"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setCellPrototype:"
      return_type: "V"
      parameter {
        name: "cellPrototype"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSBrowserDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSBrowserDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reusesColumns"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setReusesColumns:"
      return_type: "V"
      parameter {
        name: "reusesColumns"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasHorizontalScroller"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasHorizontalScroller:"
      return_type: "V"
      parameter {
        name: "hasHorizontalScroller"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autohidesScroller"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutohidesScroller:"
      return_type: "V"
      parameter {
        name: "autohidesScroller"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "separatesColumns"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSeparatesColumns:"
      return_type: "V"
      parameter {
        name: "separatesColumns"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isTitled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitled:"
      return_type: "V"
      parameter {
        name: "titled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minColumnWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinColumnWidth:"
      return_type: "V"
      parameter {
        name: "minColumnWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxVisibleColumns"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxVisibleColumns:"
      return_type: "V"
      parameter {
        name: "maxVisibleColumns"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsMultipleSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsMultipleSelection:"
      return_type: "V"
      parameter {
        name: "allowsMultipleSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsBranchSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsBranchSelection:"
      return_type: "V"
      parameter {
        name: "allowsBranchSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsEmptySelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsEmptySelection:"
      return_type: "V"
      parameter {
        name: "allowsEmptySelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takesTitleFromPreviousColumn"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTakesTitleFromPreviousColumn:"
      return_type: "V"
      parameter {
        name: "takesTitleFromPreviousColumn"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendsActionOnArrowKeys"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSendsActionOnArrowKeys:"
      return_type: "V"
      parameter {
        name: "sendsActionOnArrowKeys"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtIndexPath:"
      return_type: "OI"
      parameter {
        name: "indexPath"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtRow:inColumn:"
      return_type: "OI"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexPathForColumn:"
      return_type: "LNSIndexPath;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLeafItem:"
      return_type: "Z"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadDataForRowIndexes:inColumn:"
      return_type: "V"
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parentForItemsInColumn:"
      return_type: "OI"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollRowToVisible:inColumn:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:ofColumn:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleOfColumn:"
      return_type: "LNSString;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathSeparator"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPathSeparator:"
      return_type: "V"
      parameter {
        name: "pathSeparator"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "path"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "pathToColumn:"
      return_type: "LNSString;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clickedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "clickedRow"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedCellInColumn:"
      return_type: "OI"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedCells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectRow:inColumn:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRowInColumn:"
      return_type: "I"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionIndexPath"
      return_type: "LNSIndexPath;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionIndexPath:"
      return_type: "V"
      parameter {
        name: "selectionIndexPath"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionIndexPaths"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionIndexPaths:"
      return_type: "V"
      parameter {
        name: "selectionIndexPaths"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectRowIndexes:inColumn:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRowIndexesInColumn:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadColumn:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validateVisibleColumns"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "scrollColumnsRightBy:"
      return_type: "V"
      parameter {
        name: "shiftAmount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollColumnsLeftBy:"
      return_type: "V"
      parameter {
        name: "shiftAmount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollColumnToVisible:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lastColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setLastColumn:"
      return_type: "V"
      parameter {
        name: "lastColumn"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addColumn"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfVisibleColumns"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "firstVisibleColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "lastVisibleColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "loadedCellAtRow:column:"
      return_type: "OI"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectAll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tile"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "doClick:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doDoubleClick:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendAction"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "titleFrameOfColumn:"
      return_type: "RCGRect;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawTitleOfColumn:inRect:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "frameOfColumn:"
      return_type: "RCGRect;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameOfInsideOfColumn:"
      return_type: "RCGRect;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameOfRow:inColumn:"
      return_type: "RCGRect;"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getRow:column:forPoint:"
      return_type: "Z"
      parameter {
        name: "row"
        type: "*I;"
      }
      parameter {
        name: "column"
        type: "*I;"
      }
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnWidthForColumnContentWidth:"
      return_type: "D"
      parameter {
        name: "columnContentWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnContentWidthForColumnWidth:"
      return_type: "D"
      parameter {
        name: "columnWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnResizingType"
      return_type: "X(Enum.enum NSBrowserColumnResizingType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setColumnResizingType:"
      return_type: "V"
      parameter {
        name: "columnResizingType"
        type: "X(Enum.enum NSBrowserColumnResizingType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prefersAllColumnUserResizing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPrefersAllColumnUserResizing:"
      return_type: "V"
      parameter {
        name: "prefersAllColumnUserResizing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setWidth:ofColumn:"
      return_type: "V"
      parameter {
        name: "columnWidth"
        type: "D"
      }
      parameter {
        name: "columnIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "widthOfColumn:"
      return_type: "D"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRowHeight:"
      return_type: "V"
      parameter {
        name: "rowHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "noteHeightOfRowsWithIndexesChanged:inColumn:"
      return_type: "V"
      parameter {
        name: "indexSet"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "columnIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultColumnWidth:"
      return_type: "V"
      parameter {
        name: "columnWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultColumnWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "columnsAutosaveName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setColumnsAutosaveName:"
      return_type: "V"
      parameter {
        name: "columnsAutosaveName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeSavedColumnsWithAutosaveName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "canDragRowsWithIndexes:inColumn:withEvent:"
      return_type: "Z"
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingImageForRowsWithIndexes:inColumn:withEvent:offset:"
      return_type: "LNSImage;"
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "dragImageOffset"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingSourceOperationMask:forLocal:"
      return_type: "V"
      parameter {
        name: "mask"
        type: "X(Enum.enum NSDragOperation)"
      }
      parameter {
        name: "isLocal"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsTypeSelect"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsTypeSelect:"
      return_type: "V"
      parameter {
        name: "allowsTypeSelect"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "editItemAtIndexPath:withEvent:select:"
      return_type: "V"
      parameter {
        name: "indexPath"
        type: "LNSIndexPath;"
      }
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "select"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "loaded"
    type: "Z"
  }
  property {
    name: "doubleAction"
    type: "OS"
  }
  property {
    name: "cellPrototype"
    type: "OI"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSBrowserDelegate>)"
  }
  property {
    name: "reusesColumns"
    type: "Z"
  }
  property {
    name: "hasHorizontalScroller"
    type: "Z"
  }
  property {
    name: "autohidesScroller"
    type: "Z"
  }
  property {
    name: "separatesColumns"
    type: "Z"
  }
  property {
    name: "titled"
    type: "Z"
  }
  property {
    name: "minColumnWidth"
    type: "D"
  }
  property {
    name: "maxVisibleColumns"
    type: "I"
  }
  property {
    name: "allowsMultipleSelection"
    type: "Z"
  }
  property {
    name: "allowsBranchSelection"
    type: "Z"
  }
  property {
    name: "allowsEmptySelection"
    type: "Z"
  }
  property {
    name: "takesTitleFromPreviousColumn"
    type: "Z"
  }
  property {
    name: "sendsActionOnArrowKeys"
    type: "Z"
  }
  property {
    name: "pathSeparator"
    type: "LNSString;"
  }
  property {
    name: "clickedColumn"
    type: "I"
  }
  property {
    name: "clickedRow"
    type: "I"
  }
  property {
    name: "selectedColumn"
    type: "I"
  }
  property {
    name: "selectedCell"
    type: "OI"
  }
  property {
    name: "selectedCells"
    type: "LNSArray;"
  }
  property {
    name: "selectionIndexPath"
    type: "LNSIndexPath;"
  }
  property {
    name: "selectionIndexPaths"
    type: "LNSArray;"
  }
  property {
    name: "lastColumn"
    type: "I"
  }
  property {
    name: "numberOfVisibleColumns"
    type: "I"
  }
  property {
    name: "firstVisibleColumn"
    type: "I"
  }
  property {
    name: "lastVisibleColumn"
    type: "I"
  }
  property {
    name: "sendAction"
    type: "Z"
  }
  property {
    name: "titleHeight"
    type: "D"
  }
  property {
    name: "columnResizingType"
    type: "X(Enum.enum NSBrowserColumnResizingType)"
  }
  property {
    name: "prefersAllColumnUserResizing"
    type: "Z"
  }
  property {
    name: "rowHeight"
    type: "D"
  }
  property {
    name: "columnsAutosaveName"
    type: "LNSString;"
  }
  property {
    name: "allowsTypeSelect"
    type: "Z"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBrowser.h"
}
class {
  name: "NSBrowserCell"
  base_class: "NSCell"
  method {
    function {
      name: "branchImage"
      return_type: "LNSImage;"
    }
    class_method: true
  }
  method {
    function {
      name: "highlightedBranchImage"
      return_type: "LNSImage;"
    }
    class_method: true
  }
  method {
    function {
      name: "highlightColorInView:"
      return_type: "LNSColor;"
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLeaf"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setLeaf:"
      return_type: "V"
      parameter {
        name: "leaf"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLoaded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setLoaded:"
      return_type: "V"
      parameter {
        name: "loaded"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reset"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "set"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alternateImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternateImage:"
      return_type: "V"
      parameter {
        name: "alternateImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  property {
    name: "leaf"
    type: "Z"
  }
  property {
    name: "loaded"
    type: "Z"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "alternateImage"
    type: "LNSImage;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBrowserCell.h"
}
class {
  name: "NSCachedImageRep"
  base_class: "NSImageRep"
  method {
    function {
      name: "initWithWindow:rect:"
      return_type: "OI"
      parameter {
        name: "win"
        type: "LNSWindow;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSize:depth:separate:alpha:"
      return_type: "OI"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "depth"
        type: "I"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "alpha"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "rect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCachedImageRep.h"
}
class {
  name: "CIImage"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSCopying"
  category: "CIImage+AutoAdjustment"
  category: "CIImage+NSAppKitAdditions"
  method {
    function {
      name: "imageWithCGImage:"
      return_type: "LCIImage;"
      parameter {
        name: "image"
        type: "*RCGImage;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithCGImage:options:"
      return_type: "LCIImage;"
      parameter {
        name: "image"
        type: "*RCGImage;;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithCGLayer:"
      return_type: "LCIImage;"
      parameter {
        name: "layer"
        type: "*RCGLayer;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithCGLayer:options:"
      return_type: "LCIImage;"
      parameter {
        name: "layer"
        type: "*RCGLayer;;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithBitmapData:bytesPerRow:size:format:colorSpace:"
      return_type: "LCIImage;"
      parameter {
        name: "d"
        type: "LNSData;"
      }
      parameter {
        name: "bpr"
        type: "UI"
      }
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "f"
        type: "I"
      }
      parameter {
        name: "cs"
        type: "*RCGColorSpace;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithTexture:size:flipped:colorSpace:"
      return_type: "LCIImage;"
      parameter {
        name: "name"
        type: "UI"
      }
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "cs"
        type: "*RCGColorSpace;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithTexture:size:flipped:options:"
      return_type: "LCIImage;"
      parameter {
        name: "name"
        type: "UI"
      }
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithContentsOfURL:"
      return_type: "LCIImage;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithContentsOfURL:options:"
      return_type: "LCIImage;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithData:"
      return_type: "LCIImage;"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithData:options:"
      return_type: "LCIImage;"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithCVImageBuffer:"
      return_type: "LCIImage;"
      parameter {
        name: "imageBuffer"
        type: "*R__CVBuffer;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithCVImageBuffer:options:"
      return_type: "LCIImage;"
      parameter {
        name: "imageBuffer"
        type: "*R__CVBuffer;;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithCVPixelBuffer:"
      return_type: "LCIImage;"
      parameter {
        name: "buffer"
        type: "*R__CVBuffer;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithCVPixelBuffer:options:"
      return_type: "LCIImage;"
      parameter {
        name: "buffer"
        type: "*R__CVBuffer;;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithIOSurface:"
      return_type: "LCIImage;"
      parameter {
        name: "surface"
        type: "*R__IOSurface;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithIOSurface:options:"
      return_type: "LCIImage;"
      parameter {
        name: "surface"
        type: "*R__IOSurface;;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "imageWithColor:"
      return_type: "LCIImage;"
      parameter {
        name: "color"
        type: "LCIColor;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "emptyImage"
      return_type: "LCIImage;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCGImage:"
      return_type: "OI"
      parameter {
        name: "image"
        type: "*RCGImage;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGImage:options:"
      return_type: "OI"
      parameter {
        name: "image"
        type: "*RCGImage;;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGLayer:"
      return_type: "OI"
      parameter {
        name: "layer"
        type: "*RCGLayer;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGLayer:options:"
      return_type: "OI"
      parameter {
        name: "layer"
        type: "*RCGLayer;;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:options:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBitmapData:bytesPerRow:size:format:colorSpace:"
      return_type: "OI"
      parameter {
        name: "d"
        type: "LNSData;"
      }
      parameter {
        name: "bpr"
        type: "UI"
      }
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "f"
        type: "I"
      }
      parameter {
        name: "c"
        type: "*RCGColorSpace;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithTexture:size:flipped:colorSpace:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "UI"
      }
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "cs"
        type: "*RCGColorSpace;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithTexture:size:flipped:options:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "UI"
      }
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:options:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithIOSurface:"
      return_type: "OI"
      parameter {
        name: "surface"
        type: "*R__IOSurface;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithIOSurface:options:"
      return_type: "OI"
      parameter {
        name: "surface"
        type: "*R__IOSurface;;"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithIOSurface:plane:format:options:"
      return_type: "OI"
      parameter {
        name: "surface"
        type: "*R__IOSurface;;"
      }
      parameter {
        name: "plane"
        type: "UI"
      }
      parameter {
        name: "format"
        type: "I"
      }
      parameter {
        name: "d"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCVImageBuffer:"
      return_type: "OI"
      parameter {
        name: "imageBuffer"
        type: "*R__CVBuffer;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCVImageBuffer:options:"
      return_type: "OI"
      parameter {
        name: "imageBuffer"
        type: "*R__CVBuffer;;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCVPixelBuffer:"
      return_type: "OI"
      parameter {
        name: "buffer"
        type: "*R__CVBuffer;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCVPixelBuffer:options:"
      return_type: "OI"
      parameter {
        name: "buffer"
        type: "*R__CVBuffer;;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithColor:"
      return_type: "OI"
      parameter {
        name: "color"
        type: "LCIColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageByApplyingTransform:"
      return_type: "LCIImage;"
      parameter {
        name: "matrix"
        type: "RCGAffineTransform;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageByApplyingOrientation:"
      return_type: "LCIImage;"
      parameter {
        name: "orientation"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageTransformForOrientation:"
      return_type: "RCGAffineTransform;"
      parameter {
        name: "orientation"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageByCompositingOverImage:"
      return_type: "LCIImage;"
      parameter {
        name: "dest"
        type: "LCIImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageByCroppingToRect:"
      return_type: "LCIImage;"
      parameter {
        name: "r"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageByClampingToExtent"
      return_type: "LCIImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "extent"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "imageByApplyingFilter:withInputParameters:"
      return_type: "LCIImage;"
      parameter {
        name: "filterName"
        type: "LNSString;"
      }
      parameter {
        name: "params"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "properties"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "definition"
      return_type: "LCIFilterShape;"
    }
    class_method: false
  }
  method {
    function {
      name: "url"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpace"
      return_type: "*RCGColorSpace;;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/../Frameworks/CoreImage.framework/Headers/CIImage.h"
}
class {
  name: "NSCIImageRep"
  base_class: "NSImageRep"
  method {
    function {
      name: "imageRepWithCIImage:"
      return_type: "OI"
      parameter {
        name: "image"
        type: "LCIImage;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCIImage:"
      return_type: "OI"
      parameter {
        name: "image"
        type: "LCIImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "CIImage"
      return_type: "LCIImage;"
    }
    class_method: false
  }
  property {
    name: "CIImage"
    type: "LCIImage;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCIImageRep.h"
}
class {
  name: "NSColorList"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "availableColorLists"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "colorListNamed:"
      return_type: "LNSColorList;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithName:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithName:fromFile:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setColor:forKey:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertColor:key:atIndex:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "loc"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeColorWithKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorWithKey:"
      return_type: "LNSColor;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFile"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "allKeys"
    type: "LNSArray;"
  }
  property {
    name: "editable"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorList.h"
}
class {
  name: "NSColorPanel"
  base_class: "NSPanel"
  method {
    function {
      name: "sharedColorPanel"
      return_type: "LNSColorPanel;"
    }
    class_method: true
  }
  method {
    function {
      name: "sharedColorPanelExists"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "dragColor:withEvent:fromView:"
      return_type: "Z"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "sourceView"
        type: "LNSView;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setPickerMask:"
      return_type: "V"
      parameter {
        name: "mask"
        type: "X(Enum.enum NSColorPanelOptions)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setPickerMode:"
      return_type: "V"
      parameter {
        name: "mode"
        type: "X(Enum.enum NSColorPanelMode)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "accessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isContinuous"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setContinuous:"
      return_type: "V"
      parameter {
        name: "continuous"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsAlpha"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsAlpha:"
      return_type: "V"
      parameter {
        name: "showsAlpha"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mode"
      return_type: "X(Enum.enum NSColorPanelMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setMode:"
      return_type: "V"
      parameter {
        name: "mode"
        type: "X(Enum.enum NSColorPanelMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "color"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setColor:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alpha"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attachColorList:"
      return_type: "V"
      parameter {
        name: "colorList"
        type: "LNSColorList;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "detachColorList:"
      return_type: "V"
      parameter {
        name: "colorList"
        type: "LNSColorList;"
      }
    }
    class_method: false
  }
  property {
    name: "accessoryView"
    type: "LNSView;"
  }
  property {
    name: "continuous"
    type: "Z"
  }
  property {
    name: "showsAlpha"
    type: "Z"
  }
  property {
    name: "mode"
    type: "X(Enum.enum NSColorPanelMode)"
  }
  property {
    name: "color"
    type: "LNSColor;"
  }
  property {
    name: "alpha"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorPanel.h"
}
class {
  name: "NSColorPicker"
  base_class: "NSObject"
  protocol: "NSColorPickingDefault"
  method {
    function {
      name: "initWithPickerMask:colorPanel:"
      return_type: "OI"
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "owningColorPanel"
        type: "LNSColorPanel;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorPanel"
      return_type: "LNSColorPanel;"
    }
    class_method: false
  }
  method {
    function {
      name: "provideNewButtonImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "insertNewButtonImage:in:"
      return_type: "V"
      parameter {
        name: "newButtonImage"
        type: "LNSImage;"
      }
      parameter {
        name: "buttonCell"
        type: "LNSButtonCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewSizeChanged:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attachColorList:"
      return_type: "V"
      parameter {
        name: "colorList"
        type: "LNSColorList;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "detachColorList:"
      return_type: "V"
      parameter {
        name: "colorList"
        type: "LNSColorList;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMode:"
      return_type: "V"
      parameter {
        name: "mode"
        type: "X(Enum.enum NSColorPanelMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "buttonToolTip"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "minContentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  property {
    name: "colorPanel"
    type: "LNSColorPanel;"
  }
  property {
    name: "provideNewButtonImage"
    type: "LNSImage;"
  }
  property {
    name: "buttonToolTip"
    type: "LNSString;"
  }
  property {
    name: "minContentSize"
    type: "RCGSize;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorPicker.h"
}
class {
  name: "NSColorWell"
  base_class: "NSControl"
  method {
    function {
      name: "deactivate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "activate:"
      return_type: "V"
      parameter {
        name: "exclusive"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isActive"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "drawWellInside:"
      return_type: "V"
      parameter {
        name: "insideRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBordered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBordered:"
      return_type: "V"
      parameter {
        name: "bordered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeColorFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "color"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setColor:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  property {
    name: "active"
    type: "Z"
  }
  property {
    name: "bordered"
    type: "Z"
  }
  property {
    name: "color"
    type: "LNSColor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorWell.h"
}
class {
  name: "NSCursor"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "currentCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "currentSystemCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "arrowCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "IBeamCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "pointingHandCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "closedHandCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "openHandCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "resizeLeftCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "resizeRightCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "resizeLeftRightCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "resizeUpCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "resizeDownCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "resizeUpDownCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "crosshairCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "disappearingItemCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "operationNotAllowedCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "dragLinkCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "dragCopyCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "contextualMenuCursor"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "IBeamCursorForVerticalLayout"
      return_type: "LNSCursor;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithImage:hotSpot:"
      return_type: "OI"
      parameter {
        name: "newImage"
        type: "LNSImage;"
      }
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:"
      return_type: "OI"
      parameter {
        name: "newImage"
        type: "LNSImage;"
      }
      parameter {
        name: "fg"
        type: "LNSColor;"
      }
      parameter {
        name: "bg"
        type: "LNSColor;"
      }
      parameter {
        name: "hotSpot"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hide"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "unhide"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "setHiddenUntilMouseMoves:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pop"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "hotSpot"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "push"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "pop"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "set"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setOnMouseExited:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setOnMouseEntered:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSetOnMouseExited"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isSetOnMouseEntered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "mouseEntered:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseExited:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "hotSpot"
    type: "RCGPoint;"
  }
  property {
    name: "setOnMouseExited"
    type: "Z"
  }
  property {
    name: "setOnMouseEntered"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCursor.h"
}
class {
  name: "NSCustomImageRep"
  base_class: "NSImageRep"
  method {
    function {
      name: "initWithSize:flipped:drawingHandler:"
      return_type: "OI"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "drawingHandlerShouldBeCalledWithFlippedContext"
        type: "Z"
      }
      parameter {
        name: "drawingHandler"
        type: "X(BlockPointer.BOOL (^)(NSRect))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawingHandler"
      return_type: "X(BlockPointer.BOOL (^)(NSRect))"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDrawSelector:delegate:"
      return_type: "OI"
      parameter {
        name: "aMethod"
        type: "OS"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawSelector"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "OI"
    }
    class_method: false
  }
  property {
    name: "drawingHandler"
    type: "X(BlockPointer.BOOL (^)(NSRect))"
  }
  property {
    name: "drawSelector"
    type: "OS"
  }
  property {
    name: "delegate"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCustomImageRep.h"
}
class {
  name: "NSDocument"
  base_class: "NSObject"
  protocol: "NSFilePresenter"
  protocol: "NSUserInterfaceValidations"
  category: "NSDocument+NSDeprecated"
  category: "NSDocument+NSUserActivity"
  category: "NSDocument+NSScripting"
  category: "NSDocument+NSRestorableState"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithType:error:"
      return_type: "OI"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canConcurrentlyReadDocumentsOfType:"
      return_type: "Z"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfURL:ofType:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initForURL:withContentsOfURL:ofType:error:"
      return_type: "OI"
      parameter {
        name: "urlOrNil"
        type: "LNSURL;"
      }
      parameter {
        name: "contentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFileType:"
      return_type: "V"
      parameter {
        name: "fileType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFileURL:"
      return_type: "V"
      parameter {
        name: "fileURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileModificationDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFileModificationDate:"
      return_type: "V"
      parameter {
        name: "fileModificationDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDraft"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDraft:"
      return_type: "V"
      parameter {
        name: "draft"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performActivityWithSynchronousWaiting:usingBlock:"
      return_type: "V"
      parameter {
        name: "waitSynchronously"
        type: "Z"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void (^)(void)))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "continueActivityUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "continueAsynchronousWorkOnMainThreadUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSynchronousFileAccessUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performAsynchronousFileAccessUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void (^)(void)))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "revertDocumentToSaved:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "revertToContentsOfURL:ofType:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromURL:ofType:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromFileWrapper:ofType:error:"
      return_type: "Z"
      parameter {
        name: "fileWrapper"
        type: "LNSFileWrapper;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromData:ofType:error:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEntireFileLoaded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:ofType:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileWrapperOfType:error:"
      return_type: "LNSFileWrapper;"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataOfType:error:"
      return_type: "LNSData;"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unblockUserInteraction"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "autosavingIsImplicitlyCancellable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "writeSafelyToURL:ofType:forSaveOperation:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:ofType:forSaveOperation:originalContentsURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "absoluteOriginalContentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:"
      return_type: "LNSDictionary;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "absoluteOriginalContentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keepBackupFile"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "backupFileURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "saveDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "saveDocumentAs:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "saveDocumentTo:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "saveDocumentWithDelegate:didSaveSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didSaveSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didSaveSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldRunSavePanelWithAccessoryView"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "prepareSavePanel:"
      return_type: "Z"
      parameter {
        name: "savePanel"
        type: "LNSSavePanel;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileNameExtensionWasHiddenInLastRunSavePanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "fileTypeFromLastRunSavePanel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didSaveSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "saveToURL:ofType:forSaveOperation:completionHandler:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canAsynchronouslyWriteToURL:ofType:forSaveOperation:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkAutosavingSafetyAndReturnError:"
      return_type: "Z"
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scheduleAutosaving"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "hasUnautosavedChanges"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didAutosaveSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosaveWithImplicitCancellability:completionHandler:"
      return_type: "V"
      parameter {
        name: "autosavingIsImplicitlyCancellable"
        type: "Z"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosavesInPlace"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "preservesVersions"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "browseDocumentVersions:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosavesDrafts"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "autosavingFileType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "autosavedContentsFileURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutosavedContentsFileURL:"
      return_type: "V"
      parameter {
        name: "autosavedContentsFileURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "shouldCloseSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "close"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "duplicateDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "duplicateDocumentWithDelegate:didDuplicateSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didDuplicateSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "duplicateAndReturnError:"
      return_type: "LNSDocument;"
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "renameDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveDocumentToUbiquityContainer:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveDocumentWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(BOOL))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToURL:completionHandler:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lockDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unlockDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lockDocumentWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(BOOL))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lockWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unlockDocumentWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(BOOL))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unlockWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLocked"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "runPageLayout:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didRunSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preparePageLayout:"
      return_type: "Z"
      parameter {
        name: "pageLayout"
        type: "LNSPageLayout;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldChangePrintInfo:"
      return_type: "Z"
      parameter {
        name: "newPrintInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printInfo"
      return_type: "LNSPrintInfo;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPrintInfo:"
      return_type: "V"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "printSettings"
        type: "LNSDictionary;"
      }
      parameter {
        name: "showPrintPanel"
        type: "Z"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didPrintSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printOperationWithSettings:error:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "printSettings"
        type: "LNSDictionary;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalPrintOperation:delegate:didRunSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "printOperation"
        type: "LNSPrintOperation;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didRunSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "saveDocumentToPDF:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "PDFPrintOperation"
      return_type: "LNSPrintOperation;"
    }
    class_method: false
  }
  method {
    function {
      name: "isDocumentEdited"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isInViewingMode"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "updateChangeCount:"
      return_type: "V"
      parameter {
        name: "change"
        type: "X(Enum.enum NSDocumentChangeType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeCountTokenForSaveOperation:"
      return_type: "OI"
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateChangeCountWithToken:forSaveOperation:"
      return_type: "V"
      parameter {
        name: "changeCountToken"
        type: "OI"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "undoManager"
      return_type: "LNSUndoManager;"
    }
    class_method: false
  }
  method {
    function {
      name: "setUndoManager:"
      return_type: "V"
      parameter {
        name: "undoManager"
        type: "LNSUndoManager;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasUndoManager"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasUndoManager:"
      return_type: "V"
      parameter {
        name: "hasUndoManager"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didPresentSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "willPresentError:"
      return_type: "LNSError;"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "willNotPresentError:"
      return_type: "V"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeWindowControllers"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "windowNibName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "windowControllerWillLoadNib:"
      return_type: "V"
      parameter {
        name: "windowController"
        type: "LNSWindowController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowControllerDidLoadNib:"
      return_type: "V"
      parameter {
        name: "windowController"
        type: "LNSWindowController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setWindow:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addWindowController:"
      return_type: "V"
      parameter {
        name: "windowController"
        type: "LNSWindowController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeWindowController:"
      return_type: "V"
      parameter {
        name: "windowController"
        type: "LNSWindowController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showWindows"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "windowControllers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "windowController"
        type: "LNSWindowController;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "shouldCloseSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDisplayName:"
      return_type: "V"
      parameter {
        name: "displayNameOrNil"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "defaultDraftName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "windowForSheet"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "readableTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "writableTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "isNativeType:"
      return_type: "Z"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "writableTypesForSaveOperation:"
      return_type: "LNSArray;"
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileNameExtensionForType:saveOperation:"
      return_type: "LNSString;"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validateUserInterfaceItem:"
      return_type: "Z"
      parameter {
        name: "anItem"
        type: "X(Unexposed.id<NSValidatedUserInterfaceItem>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesUbiquitousStorage"
      return_type: "Z"
    }
    class_method: true
  }
  property {
    name: "fileType"
    type: "LNSString;"
  }
  property {
    name: "fileURL"
    type: "LNSURL;"
  }
  property {
    name: "fileModificationDate"
    type: "LNSDate;"
  }
  property {
    name: "draft"
    type: "Z"
  }
  property {
    name: "entireFileLoaded"
    type: "Z"
  }
  property {
    name: "autosavingIsImplicitlyCancellable"
    type: "Z"
  }
  property {
    name: "keepBackupFile"
    type: "Z"
  }
  property {
    name: "backupFileURL"
    type: "LNSURL;"
  }
  property {
    name: "shouldRunSavePanelWithAccessoryView"
    type: "Z"
  }
  property {
    name: "fileNameExtensionWasHiddenInLastRunSavePanel"
    type: "Z"
  }
  property {
    name: "fileTypeFromLastRunSavePanel"
    type: "LNSString;"
  }
  property {
    name: "hasUnautosavedChanges"
    type: "Z"
  }
  property {
    name: "autosavingFileType"
    type: "LNSString;"
  }
  property {
    name: "autosavedContentsFileURL"
    type: "LNSURL;"
  }
  property {
    name: "locked"
    type: "Z"
  }
  property {
    name: "printInfo"
    type: "LNSPrintInfo;"
  }
  property {
    name: "PDFPrintOperation"
    type: "LNSPrintOperation;"
  }
  property {
    name: "documentEdited"
    type: "Z"
  }
  property {
    name: "inViewingMode"
    type: "Z"
  }
  property {
    name: "undoManager"
    type: "LNSUndoManager;"
  }
  property {
    name: "hasUndoManager"
    type: "Z"
  }
  property {
    name: "windowNibName"
    type: "LNSString;"
  }
  property {
    name: "windowControllers"
    type: "LNSArray;"
  }
  property {
    name: "displayName"
    type: "LNSString;"
  }
  property {
    name: "windowForSheet"
    type: "LNSWindow;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDocument.h"
}
class {
  name: "NSDocumentController"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSUserInterfaceValidations"
  category: "NSDocumentController+NSDeprecated"
  category: "NSDocumentController+NSWindowRestoration"
  method {
    function {
      name: "sharedDocumentController"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentDocument"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "currentDirectory"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "documentForURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documentForWindow:"
      return_type: "OI"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addDocument:"
      return_type: "V"
      parameter {
        name: "document"
        type: "LNSDocument;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeDocument:"
      return_type: "V"
      parameter {
        name: "document"
        type: "LNSDocument;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "newDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openUntitledDocumentAndDisplay:error:"
      return_type: "OI"
      parameter {
        name: "displayDocument"
        type: "Z"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeUntitledDocumentOfType:error:"
      return_type: "OI"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLsFromRunningOpenPanel"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "runModalOpenPanel:forTypes:"
      return_type: "I"
      parameter {
        name: "openPanel"
        type: "LNSOpenPanel;"
      }
      parameter {
        name: "types"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginOpenPanelWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSArray *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginOpenPanel:forTypes:completionHandler:"
      return_type: "V"
      parameter {
        name: "openPanel"
        type: "LNSOpenPanel;"
      }
      parameter {
        name: "inTypes"
        type: "LNSArray;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSInteger))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openDocumentWithContentsOfURL:display:completionHandler:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "displayDocument"
        type: "Z"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSDocument *, BOOL, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeDocumentWithContentsOfURL:ofType:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reopenDocumentForURL:withContentsOfURL:display:completionHandler:"
      return_type: "V"
      parameter {
        name: "urlOrNil"
        type: "LNSURL;"
      }
      parameter {
        name: "contentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "displayDocument"
        type: "Z"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSDocument *, BOOL, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeDocumentForURL:withContentsOfURL:ofType:error:"
      return_type: "OI"
      parameter {
        name: "urlOrNil"
        type: "LNSURL;"
      }
      parameter {
        name: "contentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosavingDelay"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutosavingDelay:"
      return_type: "V"
      parameter {
        name: "autosavingDelay"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "saveAllDocuments:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasEditedDocuments"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
      parameter {
        name: "cancellable"
        type: "Z"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didReviewAllSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didCloseAllSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "duplicateDocumentWithContentsOfURL:copying:displayName:error:"
      return_type: "LNSDocument;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "duplicateByCopying"
        type: "Z"
      }
      parameter {
        name: "displayNameOrNil"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didPresentSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "willPresentError:"
      return_type: "LNSError;"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumRecentDocumentCount"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "clearRecentDocuments:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "noteNewRecentDocument:"
      return_type: "V"
      parameter {
        name: "document"
        type: "LNSDocument;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "noteNewRecentDocumentURL:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recentDocumentURLs"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "defaultType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "typeForContentsOfURL:error:"
      return_type: "LNSString;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documentClassNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "documentClassForType:"
      return_type: "OC"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayNameForType:"
      return_type: "LNSString;"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validateUserInterfaceItem:"
      return_type: "Z"
      parameter {
        name: "anItem"
        type: "X(Unexposed.id<NSValidatedUserInterfaceItem>)"
      }
    }
    class_method: false
  }
  property {
    name: "documents"
    type: "LNSArray;"
  }
  property {
    name: "currentDocument"
    type: "OI"
  }
  property {
    name: "currentDirectory"
    type: "LNSString;"
  }
  property {
    name: "URLsFromRunningOpenPanel"
    type: "LNSArray;"
  }
  property {
    name: "autosavingDelay"
    type: "D"
  }
  property {
    name: "hasEditedDocuments"
    type: "Z"
  }
  property {
    name: "maximumRecentDocumentCount"
    type: "UI"
  }
  property {
    name: "recentDocumentURLs"
    type: "LNSArray;"
  }
  property {
    name: "documentClassNames"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDocumentController.h"
}
class {
  name: "NSDraggingImageComponent"
  base_class: "NSObject"
  method {
    function {
      name: "draggingImageComponentWithKey:"
      return_type: "LNSDraggingImageComponent;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "key"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contents"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setContents:"
      return_type: "V"
      parameter {
        name: "contents"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFrame:"
      return_type: "V"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  property {
    name: "key"
    type: "LNSString;"
  }
  property {
    name: "contents"
    type: "OI"
  }
  property {
    name: "frame"
    type: "RCGRect;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDraggingItem.h"
}
class {
  name: "NSDraggingItem"
  base_class: "NSObject"
  method {
    function {
      name: "initWithPasteboardWriter:"
      return_type: "OI"
      parameter {
        name: "pasteboardWriter"
        type: "X(Unexposed.id<NSPasteboardWriting>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "item"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "draggingFrame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingFrame:"
      return_type: "V"
      parameter {
        name: "draggingFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageComponentsProvider"
      return_type: "X(BlockPointer.NSArray *(^)(void))"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageComponentsProvider:"
      return_type: "V"
      parameter {
        name: "imageComponentsProvider"
        type: "X(BlockPointer.NSArray *(^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingFrame:contents:"
      return_type: "V"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "contents"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageComponents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "item"
    type: "OI"
  }
  property {
    name: "draggingFrame"
    type: "RCGRect;"
  }
  property {
    name: "imageComponentsProvider"
    type: "X(BlockPointer.NSArray *(^)(void))"
  }
  property {
    name: "imageComponents"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDraggingItem.h"
}
class {
  name: "NSDraggingSession"
  base_class: "NSObject"
  method {
    function {
      name: "draggingFormation"
      return_type: "X(Enum.enum NSDraggingFormation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingFormation:"
      return_type: "V"
      parameter {
        name: "draggingFormation"
        type: "X(Enum.enum NSDraggingFormation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animatesToStartingPositionsOnCancelOrFail"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimatesToStartingPositionsOnCancelOrFail:"
      return_type: "V"
      parameter {
        name: "animatesToStartingPositionsOnCancelOrFail"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingLeaderIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingLeaderIndex:"
      return_type: "V"
      parameter {
        name: "draggingLeaderIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingPasteboard"
      return_type: "LNSPasteboard;"
    }
    class_method: false
  }
  method {
    function {
      name: "draggingSequenceNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "draggingLocation"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "enumOpts"
        type: "X(Enum.enum NSDraggingItemEnumerationOptions)"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "classArray"
        type: "LNSArray;"
      }
      parameter {
        name: "searchOptions"
        type: "LNSDictionary;"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSDraggingItem *, NSInteger, BOOL *))"
      }
    }
    class_method: false
  }
  property {
    name: "draggingFormation"
    type: "X(Enum.enum NSDraggingFormation)"
  }
  property {
    name: "animatesToStartingPositionsOnCancelOrFail"
    type: "Z"
  }
  property {
    name: "draggingLeaderIndex"
    type: "I"
  }
  property {
    name: "draggingPasteboard"
    type: "LNSPasteboard;"
  }
  property {
    name: "draggingSequenceNumber"
    type: "I"
  }
  property {
    name: "draggingLocation"
    type: "RCGPoint;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDraggingSession.h"
}
class {
  name: "NSEPSImageRep"
  base_class: "NSImageRep"
  method {
    function {
      name: "imageRepWithData:"
      return_type: "OI"
      parameter {
        name: "epsData"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "epsData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prepareGState"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "EPSRepresentation"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "boundingBox"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  property {
    name: "EPSRepresentation"
    type: "LNSData;"
  }
  property {
    name: "boundingBox"
    type: "RCGRect;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSEPSImageRep.h"
}
class {
  name: "NSHelpManager"
  base_class: "NSObject"
  method {
    function {
      name: "sharedHelpManager"
      return_type: "LNSHelpManager;"
    }
    class_method: true
  }
  method {
    function {
      name: "setContextHelpModeActive:"
      return_type: "V"
      parameter {
        name: "active"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "isContextHelpModeActive"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "setContextHelp:forObject:"
      return_type: "V"
      parameter {
        name: "attrString"
        type: "LNSAttributedString;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeContextHelpForObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contextHelpForObject:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showContextHelpForObject:locationHint:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "pt"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openHelpAnchor:inBook:"
      return_type: "V"
      parameter {
        name: "anchor"
        type: "LNSString;"
      }
      parameter {
        name: "book"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "findString:inBook:"
      return_type: "V"
      parameter {
        name: "query"
        type: "LNSString;"
      }
      parameter {
        name: "book"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerBooksInBundle:"
      return_type: "Z"
      parameter {
        name: "bundle"
        type: "LNSBundle;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSHelpManager.h"
}
class {
  name: "NSGradient"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithStartingColor:endingColor:"
      return_type: "OI"
      parameter {
        name: "startingColor"
        type: "LNSColor;"
      }
      parameter {
        name: "endingColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithColors:"
      return_type: "OI"
      parameter {
        name: "colorArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithColorsAndLocations:"
      return_type: "OI"
      parameter {
        name: "firstColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithColors:atLocations:colorSpace:"
      return_type: "OI"
      parameter {
        name: "colorArray"
        type: "LNSArray;"
      }
      parameter {
        name: "locations"
        type: "*cD;"
      }
      parameter {
        name: "colorSpace"
        type: "LNSColorSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawFromPoint:toPoint:options:"
      return_type: "V"
      parameter {
        name: "startingPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "endingPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:angle:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "angle"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInBezierPath:angle:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSBezierPath;"
      }
      parameter {
        name: "angle"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawFromCenter:radius:toCenter:radius:options:"
      return_type: "V"
      parameter {
        name: "startCenter"
        type: "RCGPoint;"
      }
      parameter {
        name: "startRadius"
        type: "D"
      }
      parameter {
        name: "endCenter"
        type: "RCGPoint;"
      }
      parameter {
        name: "endRadius"
        type: "D"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:relativeCenterPosition:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "relativeCenterPosition"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInBezierPath:relativeCenterPosition:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSBezierPath;"
      }
      parameter {
        name: "relativeCenterPosition"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfColorStops"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "getColor:location:atIndex:"
      return_type: "V"
      parameter {
        name: "color"
        type: "*LNSColor;;"
      }
      parameter {
        name: "location"
        type: "*D;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "interpolatedColorAtLocation:"
      return_type: "LNSColor;"
      parameter {
        name: "location"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "colorSpace"
    type: "LNSColorSpace;"
  }
  property {
    name: "numberOfColorStops"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGradient.h"
}
class {
  name: "NSGestureRecognizer"
  base_class: "NSObject"
  protocol: "NSCoding"
  category: "NSGestureRecognizer+NSSubclassUse"
  method {
    function {
      name: "initWithTarget:action:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "state"
      return_type: "X(Enum.enum NSGestureRecognizerState)"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSGestureRecognizerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSGestureRecognizerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "delaysPrimaryMouseButtonEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelaysPrimaryMouseButtonEvents:"
      return_type: "V"
      parameter {
        name: "delaysPrimaryMouseButtonEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delaysSecondaryMouseButtonEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelaysSecondaryMouseButtonEvents:"
      return_type: "V"
      parameter {
        name: "delaysSecondaryMouseButtonEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delaysOtherMouseButtonEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelaysOtherMouseButtonEvents:"
      return_type: "V"
      parameter {
        name: "delaysOtherMouseButtonEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delaysKeyEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelaysKeyEvents:"
      return_type: "V"
      parameter {
        name: "delaysKeyEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delaysMagnificationEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelaysMagnificationEvents:"
      return_type: "V"
      parameter {
        name: "delaysMagnificationEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delaysRotationEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelaysRotationEvents:"
      return_type: "V"
      parameter {
        name: "delaysRotationEvents"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "locationInView:"
      return_type: "RCGPoint;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  property {
    name: "target"
    type: "OI"
  }
  property {
    name: "action"
    type: "OS"
  }
  property {
    name: "state"
    type: "X(Enum.enum NSGestureRecognizerState)"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSGestureRecognizerDelegate>)"
  }
  property {
    name: "enabled"
    type: "Z"
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  property {
    name: "delaysPrimaryMouseButtonEvents"
    type: "Z"
  }
  property {
    name: "delaysSecondaryMouseButtonEvents"
    type: "Z"
  }
  property {
    name: "delaysOtherMouseButtonEvents"
    type: "Z"
  }
  property {
    name: "delaysKeyEvents"
    type: "Z"
  }
  property {
    name: "delaysMagnificationEvents"
    type: "Z"
  }
  property {
    name: "delaysRotationEvents"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGestureRecognizer.h"
}
class {
  name: "NSClickGestureRecognizer"
  base_class: "NSGestureRecognizer"
  protocol: "NSCoding"
  method {
    function {
      name: "buttonMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setButtonMask:"
      return_type: "V"
      parameter {
        name: "buttonMask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfClicksRequired"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfClicksRequired:"
      return_type: "V"
      parameter {
        name: "numberOfClicksRequired"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "buttonMask"
    type: "UI"
  }
  property {
    name: "numberOfClicksRequired"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSClickGestureRecognizer.h"
}
class {
  name: "NSPanGestureRecognizer"
  base_class: "NSGestureRecognizer"
  protocol: "NSCoding"
  method {
    function {
      name: "buttonMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setButtonMask:"
      return_type: "V"
      parameter {
        name: "buttonMask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "translationInView:"
      return_type: "RCGPoint;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTranslation:inView:"
      return_type: "V"
      parameter {
        name: "translation"
        type: "RCGPoint;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "velocityInView:"
      return_type: "RCGPoint;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  property {
    name: "buttonMask"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPanGestureRecognizer.h"
}
class {
  name: "NSPressGestureRecognizer"
  base_class: "NSGestureRecognizer"
  protocol: "NSCoding"
  method {
    function {
      name: "buttonMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setButtonMask:"
      return_type: "V"
      parameter {
        name: "buttonMask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minimumPressDuration"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinimumPressDuration:"
      return_type: "V"
      parameter {
        name: "minimumPressDuration"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowableMovement"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowableMovement:"
      return_type: "V"
      parameter {
        name: "allowableMovement"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "buttonMask"
    type: "UI"
  }
  property {
    name: "minimumPressDuration"
    type: "D"
  }
  property {
    name: "allowableMovement"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPressGestureRecognizer.h"
}
class {
  name: "NSMagnificationGestureRecognizer"
  base_class: "NSGestureRecognizer"
  method {
    function {
      name: "magnification"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMagnification:"
      return_type: "V"
      parameter {
        name: "magnification"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "magnification"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMagnificationGestureRecognizer.h"
}
class {
  name: "NSRotationGestureRecognizer"
  base_class: "NSGestureRecognizer"
  method {
    function {
      name: "rotation"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRotation:"
      return_type: "V"
      parameter {
        name: "rotation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rotationInDegrees"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRotationInDegrees:"
      return_type: "V"
      parameter {
        name: "rotationInDegrees"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "rotation"
    type: "D"
  }
  property {
    name: "rotationInDegrees"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSRotationGestureRecognizer.h"
}
class {
  name: "NSLayoutConstraint"
  base_class: "NSObject"
  protocol: "NSAnimatablePropertyContainer"
  category: "NSLayoutConstraint+NSIdentifier"
  method {
    function {
      name: "constraintsWithVisualFormat:options:metrics:views:"
      return_type: "LNSArray;"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSLayoutFormatOptions)"
      }
      parameter {
        name: "metrics"
        type: "LNSDictionary;"
      }
      parameter {
        name: "views"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:"
      return_type: "OI"
      parameter {
        name: "view1"
        type: "OI"
      }
      parameter {
        name: "attr1"
        type: "X(Enum.enum NSLayoutAttribute)"
      }
      parameter {
        name: "relation"
        type: "X(Enum.enum NSLayoutRelation)"
      }
      parameter {
        name: "view2"
        type: "OI"
      }
      parameter {
        name: "attr2"
        type: "X(Enum.enum NSLayoutAttribute)"
      }
      parameter {
        name: "multiplier"
        type: "D"
      }
      parameter {
        name: "c"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "priority"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setPriority:"
      return_type: "V"
      parameter {
        name: "priority"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldBeArchived"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldBeArchived:"
      return_type: "V"
      parameter {
        name: "shouldBeArchived"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstItem"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "firstAttribute"
      return_type: "X(Enum.enum NSLayoutAttribute)"
    }
    class_method: false
  }
  method {
    function {
      name: "relation"
      return_type: "X(Enum.enum NSLayoutRelation)"
    }
    class_method: false
  }
  method {
    function {
      name: "secondItem"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "secondAttribute"
      return_type: "X(Enum.enum NSLayoutAttribute)"
    }
    class_method: false
  }
  method {
    function {
      name: "multiplier"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "constant"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setConstant:"
      return_type: "V"
      parameter {
        name: "constant"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isActive"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setActive:"
      return_type: "V"
      parameter {
        name: "active"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "activateConstraints:"
      return_type: "V"
      parameter {
        name: "constraints"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "deactivateConstraints:"
      return_type: "V"
      parameter {
        name: "constraints"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  property {
    name: "priority"
    type: "F"
  }
  property {
    name: "shouldBeArchived"
    type: "Z"
  }
  property {
    name: "firstItem"
    type: "OI"
  }
  property {
    name: "firstAttribute"
    type: "X(Enum.enum NSLayoutAttribute)"
  }
  property {
    name: "relation"
    type: "X(Enum.enum NSLayoutRelation)"
  }
  property {
    name: "secondItem"
    type: "OI"
  }
  property {
    name: "secondAttribute"
    type: "X(Enum.enum NSLayoutAttribute)"
  }
  property {
    name: "multiplier"
    type: "D"
  }
  property {
    name: "constant"
    type: "D"
  }
  property {
    name: "active"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
class {
  name: "NSImage"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  protocol: "NSSecureCoding"
  protocol: "NSPasteboardReading"
  protocol: "NSPasteboardWriting"
  category: "NSImage+NSDeprecated"
  method {
    function {
      name: "imageNamed:"
      return_type: "LNSImage;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithSize:"
      return_type: "OI"
      parameter {
        name: "aSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfFile:"
      return_type: "OI"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initByReferencingFile:"
      return_type: "OI"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initByReferencingURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithIconRef:"
      return_type: "OI"
      parameter {
        name: "iconRef"
        type: "*ROpaqueIconRef;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithPasteboard:"
      return_type: "OI"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDataIgnoringOrientation:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageWithSize:flipped:drawingHandler:"
      return_type: "LNSImage;"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "drawingHandlerShouldBeCalledWithFlippedContext"
        type: "Z"
      }
      parameter {
        name: "drawingHandler"
        type: "X(BlockPointer.BOOL (^)(NSRect))"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "size"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSize:"
      return_type: "V"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "Z"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesEPSOnResolutionMismatch"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesEPSOnResolutionMismatch:"
      return_type: "V"
      parameter {
        name: "usesEPSOnResolutionMismatch"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prefersColorMatch"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPrefersColorMatch:"
      return_type: "V"
      parameter {
        name: "prefersColorMatch"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matchesOnMultipleResolution"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setMatchesOnMultipleResolution:"
      return_type: "V"
      parameter {
        name: "matchesOnMultipleResolution"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matchesOnlyOnBestFittingAxis"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setMatchesOnlyOnBestFittingAxis:"
      return_type: "V"
      parameter {
        name: "matchesOnlyOnBestFittingAxis"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawAtPoint:fromRect:operation:fraction:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "fromRect"
        type: "RCGRect;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
      parameter {
        name: "delta"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:fromRect:operation:fraction:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "fromRect"
        type: "RCGRect;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
      parameter {
        name: "delta"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:fromRect:operation:fraction:respectFlipped:hints:"
      return_type: "V"
      parameter {
        name: "dstSpacePortionRect"
        type: "RCGRect;"
      }
      parameter {
        name: "srcSpacePortionRect"
        type: "RCGRect;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
      parameter {
        name: "requestedAlpha"
        type: "D"
      }
      parameter {
        name: "respectContextIsFlipped"
        type: "Z"
      }
      parameter {
        name: "hints"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawRepresentation:inRect:"
      return_type: "Z"
      parameter {
        name: "imageRep"
        type: "LNSImageRep;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recache"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "TIFFRepresentation"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "TIFFRepresentationUsingCompression:factor:"
      return_type: "LNSData;"
      parameter {
        name: "comp"
        type: "X(Enum.enum NSTIFFCompression)"
      }
      parameter {
        name: "aFloat"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "representations"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "addRepresentations:"
      return_type: "V"
      parameter {
        name: "imageReps"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addRepresentation:"
      return_type: "V"
      parameter {
        name: "imageRep"
        type: "LNSImageRep;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeRepresentation:"
      return_type: "V"
      parameter {
        name: "imageRep"
        type: "LNSImageRep;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isValid"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "lockFocus"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "lockFocusFlipped:"
      return_type: "V"
      parameter {
        name: "flipped"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unlockFocus"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "bestRepresentationForDevice:"
      return_type: "LNSImageRep;"
      parameter {
        name: "deviceDescription"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSImageDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSImageDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageUnfilteredFileTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageUnfilteredPasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageFileTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imagePasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "imageUnfilteredTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "canInitWithPasteboard:"
      return_type: "Z"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "cancelIncrementalLoad"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "cacheMode"
      return_type: "X(Enum.enum NSImageCacheMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setCacheMode:"
      return_type: "V"
      parameter {
        name: "cacheMode"
        type: "X(Enum.enum NSImageCacheMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignmentRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlignmentRect:"
      return_type: "V"
      parameter {
        name: "alignmentRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isTemplate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTemplate:"
      return_type: "V"
      parameter {
        name: "isTemplate"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityDescription:"
      return_type: "V"
      parameter {
        name: "accessibilityDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGImage:size:"
      return_type: "OI"
      parameter {
        name: "cgImage"
        type: "*RCGImage;;"
      }
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "CGImageForProposedRect:context:hints:"
      return_type: "*RCGImage;;"
      parameter {
        name: "proposedDestRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "referenceContext"
        type: "LNSGraphicsContext;"
      }
      parameter {
        name: "hints"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bestRepresentationForRect:context:hints:"
      return_type: "LNSImageRep;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "referenceContext"
        type: "LNSGraphicsContext;"
      }
      parameter {
        name: "hints"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hitTestRect:withImageDestinationRect:context:hints:flipped:"
      return_type: "Z"
      parameter {
        name: "testRectDestSpace"
        type: "RCGRect;"
      }
      parameter {
        name: "imageRectDestSpace"
        type: "RCGRect;"
      }
      parameter {
        name: "context"
        type: "LNSGraphicsContext;"
      }
      parameter {
        name: "hints"
        type: "LNSDictionary;"
      }
      parameter {
        name: "flipped"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recommendedLayerContentsScale:"
      return_type: "D"
      parameter {
        name: "preferredContentsScale"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layerContentsForContentsScale:"
      return_type: "OI"
      parameter {
        name: "layerContentsScale"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "capInsets"
      return_type: "RNSEdgeInsets;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCapInsets:"
      return_type: "V"
      parameter {
        name: "capInsets"
        type: "RNSEdgeInsets;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resizingMode"
      return_type: "X(Enum.enum NSImageResizingMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setResizingMode:"
      return_type: "V"
      parameter {
        name: "resizingMode"
        type: "X(Enum.enum NSImageResizingMode)"
      }
    }
    class_method: false
  }
  property {
    name: "size"
    type: "RCGSize;"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "usesEPSOnResolutionMismatch"
    type: "Z"
  }
  property {
    name: "prefersColorMatch"
    type: "Z"
  }
  property {
    name: "matchesOnMultipleResolution"
    type: "Z"
  }
  property {
    name: "matchesOnlyOnBestFittingAxis"
    type: "Z"
  }
  property {
    name: "TIFFRepresentation"
    type: "LNSData;"
  }
  property {
    name: "representations"
    type: "LNSArray;"
  }
  property {
    name: "valid"
    type: "Z"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSImageDelegate>)"
  }
  property {
    name: "cacheMode"
    type: "X(Enum.enum NSImageCacheMode)"
  }
  property {
    name: "alignmentRect"
    type: "RCGRect;"
  }
  property {
    name: "accessibilityDescription"
    type: "LNSString;"
  }
  property {
    name: "capInsets"
    type: "RNSEdgeInsets;"
  }
  property {
    name: "resizingMode"
    type: "X(Enum.enum NSImageResizingMode)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSImage.h"
}
class {
  name: "NSImageCell"
  base_class: "NSCell"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "imageAlignment"
      return_type: "X(Enum.enum NSImageAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageAlignment:"
      return_type: "V"
      parameter {
        name: "imageAlignment"
        type: "X(Enum.enum NSImageAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageScaling"
      return_type: "X(Enum.enum NSImageScaling)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageScaling:"
      return_type: "V"
      parameter {
        name: "imageScaling"
        type: "X(Enum.enum NSImageScaling)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageFrameStyle"
      return_type: "X(Enum.enum NSImageFrameStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageFrameStyle:"
      return_type: "V"
      parameter {
        name: "imageFrameStyle"
        type: "X(Enum.enum NSImageFrameStyle)"
      }
    }
    class_method: false
  }
  property {
    name: "imageAlignment"
    type: "X(Enum.enum NSImageAlignment)"
  }
  property {
    name: "imageScaling"
    type: "X(Enum.enum NSImageScaling)"
  }
  property {
    name: "imageFrameStyle"
    type: "X(Enum.enum NSImageFrameStyle)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSImageCell.h"
}
class {
  name: "NSImageView"
  base_class: "NSControl"
  protocol: "NSAccessibilityImage"
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageAlignment"
      return_type: "X(Enum.enum NSImageAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageAlignment:"
      return_type: "V"
      parameter {
        name: "imageAlignment"
        type: "X(Enum.enum NSImageAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageScaling"
      return_type: "X(Enum.enum NSImageScaling)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageScaling:"
      return_type: "V"
      parameter {
        name: "imageScaling"
        type: "X(Enum.enum NSImageScaling)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageFrameStyle"
      return_type: "X(Enum.enum NSImageFrameStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageFrameStyle:"
      return_type: "V"
      parameter {
        name: "imageFrameStyle"
        type: "X(Enum.enum NSImageFrameStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animates"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimates:"
      return_type: "V"
      parameter {
        name: "animates"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsCutCopyPaste"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsCutCopyPaste:"
      return_type: "V"
      parameter {
        name: "allowsCutCopyPaste"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "imageAlignment"
    type: "X(Enum.enum NSImageAlignment)"
  }
  property {
    name: "imageScaling"
    type: "X(Enum.enum NSImageScaling)"
  }
  property {
    name: "imageFrameStyle"
    type: "X(Enum.enum NSImageFrameStyle)"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "animates"
    type: "Z"
  }
  property {
    name: "allowsCutCopyPaste"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSImageView.h"
}
class {
  name: "NSNib"
  base_class: "NSObject"
  protocol: "NSCoding"
  category: "NSNib+NSDeprecated"
  method {
    function {
      name: "initWithNibNamed:bundle:"
      return_type: "OI"
      parameter {
        name: "nibName"
        type: "LNSString;"
      }
      parameter {
        name: "bundle"
        type: "LNSBundle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithNibData:bundle:"
      return_type: "OI"
      parameter {
        name: "nibData"
        type: "LNSData;"
      }
      parameter {
        name: "bundle"
        type: "LNSBundle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "instantiateWithOwner:topLevelObjects:"
      return_type: "Z"
      parameter {
        name: "owner"
        type: "OI"
      }
      parameter {
        name: "topLevelObjects"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSNib.h"
}
class {
  name: "NSPrinter"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSPrinter+NSDeprecated"
  method {
    function {
      name: "printerNames"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "printerTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "printerWithName:"
      return_type: "LNSPrinter;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "printerWithType:"
      return_type: "LNSPrinter;"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "type"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "languageLevel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "pageSizeForPaper:"
      return_type: "RCGSize;"
      parameter {
        name: "paperName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deviceDescription"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "type"
    type: "LNSString;"
  }
  property {
    name: "languageLevel"
    type: "I"
  }
  property {
    name: "deviceDescription"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrinter.h"
}
class {
  name: "NSSpeechRecognizer"
  base_class: "NSObject"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "startListening"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "stopListening"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSSpeechRecognizerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSSpeechRecognizerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "commands"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCommands:"
      return_type: "V"
      parameter {
        name: "commands"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayedCommandsTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDisplayedCommandsTitle:"
      return_type: "V"
      parameter {
        name: "displayedCommandsTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "listensInForegroundOnly"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setListensInForegroundOnly:"
      return_type: "V"
      parameter {
        name: "listensInForegroundOnly"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "blocksOtherRecognizers"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBlocksOtherRecognizers:"
      return_type: "V"
      parameter {
        name: "blocksOtherRecognizers"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSSpeechRecognizerDelegate>)"
  }
  property {
    name: "commands"
    type: "LNSArray;"
  }
  property {
    name: "displayedCommandsTitle"
    type: "LNSString;"
  }
  property {
    name: "listensInForegroundOnly"
    type: "Z"
  }
  property {
    name: "blocksOtherRecognizers"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSpeechRecognizer.h"
}
class {
  name: "NSSpeechSynthesizer"
  base_class: "NSObject"
  method {
    function {
      name: "initWithVoice:"
      return_type: "OI"
      parameter {
        name: "voice"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startSpeakingString:"
      return_type: "Z"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startSpeakingString:toURL:"
      return_type: "Z"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSpeaking"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "stopSpeaking"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "stopSpeakingAtBoundary:"
      return_type: "V"
      parameter {
        name: "boundary"
        type: "X(Enum.enum NSSpeechBoundary)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pauseSpeakingAtBoundary:"
      return_type: "V"
      parameter {
        name: "boundary"
        type: "X(Enum.enum NSSpeechBoundary)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "continueSpeaking"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSSpeechSynthesizerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSSpeechSynthesizerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "voice"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVoice:"
      return_type: "Z"
      parameter {
        name: "voice"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rate"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setRate:"
      return_type: "V"
      parameter {
        name: "rate"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "volume"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setVolume:"
      return_type: "V"
      parameter {
        name: "volume"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesFeedbackWindow"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesFeedbackWindow:"
      return_type: "V"
      parameter {
        name: "usesFeedbackWindow"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addSpeechDictionary:"
      return_type: "V"
      parameter {
        name: "speechDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "phonemesFromText:"
      return_type: "LNSString;"
      parameter {
        name: "text"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectForProperty:error:"
      return_type: "OI"
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:forProperty:error:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAnyApplicationSpeaking"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "defaultVoice"
      return_type: "LNSString;"
    }
    class_method: true
  }
  method {
    function {
      name: "availableVoices"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "attributesForVoice:"
      return_type: "LNSDictionary;"
      parameter {
        name: "voice"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  property {
    name: "speaking"
    type: "Z"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSSpeechSynthesizerDelegate>)"
  }
  property {
    name: "rate"
    type: "F"
  }
  property {
    name: "volume"
    type: "F"
  }
  property {
    name: "usesFeedbackWindow"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSpeechSynthesizer.h"
}
class {
  name: "NSSpellChecker"
  base_class: "NSObject"
  category: "NSSpellChecker+NSDeprecated"
  method {
    function {
      name: "sharedSpellChecker"
      return_type: "LNSSpellChecker;"
    }
    class_method: true
  }
  method {
    function {
      name: "sharedSpellCheckerExists"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "uniqueSpellDocumentTag"
      return_type: "I"
    }
    class_method: true
  }
  method {
    function {
      name: "checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:"
      return_type: "R_NSRange;"
      parameter {
        name: "stringToCheck"
        type: "LNSString;"
      }
      parameter {
        name: "startingOffset"
        type: "I"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "wrapFlag"
        type: "Z"
      }
      parameter {
        name: "tag"
        type: "I"
      }
      parameter {
        name: "wordCount"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkSpellingOfString:startingAt:"
      return_type: "R_NSRange;"
      parameter {
        name: "stringToCheck"
        type: "LNSString;"
      }
      parameter {
        name: "startingOffset"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "countWordsInString:language:"
      return_type: "I"
      parameter {
        name: "stringToCount"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:"
      return_type: "R_NSRange;"
      parameter {
        name: "stringToCheck"
        type: "LNSString;"
      }
      parameter {
        name: "startingOffset"
        type: "I"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "wrapFlag"
        type: "Z"
      }
      parameter {
        name: "tag"
        type: "I"
      }
      parameter {
        name: "details"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:"
      return_type: "LNSArray;"
      parameter {
        name: "stringToCheck"
        type: "LNSString;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "checkingTypes"
        type: "UJ"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
      parameter {
        name: "orthography"
        type: "*LNSOrthography;;"
      }
      parameter {
        name: "wordCount"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:"
      return_type: "I"
      parameter {
        name: "stringToCheck"
        type: "LNSString;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "checkingTypes"
        type: "UJ"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSInteger, NSArray *, NSOrthography *, NSInteger))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuForResult:string:options:atLocation:inView:"
      return_type: "LNSMenu;"
      parameter {
        name: "result"
        type: "LNSTextCheckingResult;"
      }
      parameter {
        name: "checkedString"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userQuotesArrayForLanguage:"
      return_type: "LNSArray;"
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userReplacementsDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "updateSpellingPanelWithMisspelledWord:"
      return_type: "V"
      parameter {
        name: "word"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateSpellingPanelWithGrammarString:detail:"
      return_type: "V"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "detail"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellingPanel"
      return_type: "LNSPanel;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "accessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substitutionsPanel"
      return_type: "LNSPanel;"
    }
    class_method: false
  }
  method {
    function {
      name: "substitutionsPanelAccessoryViewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSubstitutionsPanelAccessoryViewController:"
      return_type: "V"
      parameter {
        name: "substitutionsPanelAccessoryViewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updatePanels"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "ignoreWord:inSpellDocumentWithTag:"
      return_type: "V"
      parameter {
        name: "wordToIgnore"
        type: "LNSString;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ignoredWordsInSpellDocumentWithTag:"
      return_type: "LNSArray;"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setIgnoredWords:inSpellDocumentWithTag:"
      return_type: "V"
      parameter {
        name: "words"
        type: "LNSArray;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "guessesForWordRange:inString:language:inSpellDocumentWithTag:"
      return_type: "LNSArray;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "correctionForWordRange:inString:language:inSpellDocumentWithTag:"
      return_type: "LNSString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:"
      return_type: "LNSArray;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "languageForWordRange:inString:orthography:"
      return_type: "LNSString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "orthography"
        type: "LNSOrthography;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "closeSpellDocumentWithTag:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recordResponse:toCorrection:forWord:language:inSpellDocumentWithTag:"
      return_type: "V"
      parameter {
        name: "response"
        type: "X(Enum.enum NSCorrectionResponse)"
      }
      parameter {
        name: "correction"
        type: "LNSString;"
      }
      parameter {
        name: "word"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showCorrectionIndicatorOfType:primaryString:alternativeStrings:forStringInRect:view:completionHandler:"
      return_type: "V"
      parameter {
        name: "type"
        type: "X(Enum.enum NSCorrectionIndicatorType)"
      }
      parameter {
        name: "primaryString"
        type: "LNSString;"
      }
      parameter {
        name: "alternativeStrings"
        type: "LNSArray;"
      }
      parameter {
        name: "rectOfTypedString"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "completionBlock"
        type: "X(BlockPointer.void (^)(NSString *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dismissCorrectionIndicatorForView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "availableLanguages"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "userPreferredLanguages"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "automaticallyIdentifiesLanguages"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticallyIdentifiesLanguages:"
      return_type: "V"
      parameter {
        name: "automaticallyIdentifiesLanguages"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setWordFieldStringValue:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "learnWord:"
      return_type: "V"
      parameter {
        name: "word"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasLearnedWord:"
      return_type: "Z"
      parameter {
        name: "word"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unlearnWord:"
      return_type: "V"
      parameter {
        name: "word"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAutomaticTextReplacementEnabled"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "isAutomaticSpellingCorrectionEnabled"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "isAutomaticQuoteSubstitutionEnabled"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "isAutomaticDashSubstitutionEnabled"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "language"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLanguage:"
      return_type: "Z"
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "userReplacementsDictionary"
    type: "LNSDictionary;"
  }
  property {
    name: "spellingPanel"
    type: "LNSPanel;"
  }
  property {
    name: "accessoryView"
    type: "LNSView;"
  }
  property {
    name: "substitutionsPanel"
    type: "LNSPanel;"
  }
  property {
    name: "substitutionsPanelAccessoryViewController"
    type: "LNSViewController;"
  }
  property {
    name: "availableLanguages"
    type: "LNSArray;"
  }
  property {
    name: "userPreferredLanguages"
    type: "LNSArray;"
  }
  property {
    name: "automaticallyIdentifiesLanguages"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSpellChecker.h"
}
class {
  name: "NSSplitView"
  base_class: "NSView"
  category: "NSSplitView+NSDeprecated"
  method {
    function {
      name: "isVertical"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setVertical:"
      return_type: "V"
      parameter {
        name: "vertical"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dividerStyle"
      return_type: "X(Enum.enum NSSplitViewDividerStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDividerStyle:"
      return_type: "V"
      parameter {
        name: "dividerStyle"
        type: "X(Enum.enum NSSplitViewDividerStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosaveName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutosaveName:"
      return_type: "V"
      parameter {
        name: "autosaveName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSSplitViewDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSSplitViewDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawDividerInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dividerColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "dividerThickness"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "adjustSubviews"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isSubviewCollapsed:"
      return_type: "Z"
      parameter {
        name: "subview"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minPossiblePositionOfDividerAtIndex:"
      return_type: "D"
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxPossiblePositionOfDividerAtIndex:"
      return_type: "D"
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPosition:ofDividerAtIndex:"
      return_type: "V"
      parameter {
        name: "position"
        type: "D"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "holdingPriorityForSubviewAtIndex:"
      return_type: "F"
      parameter {
        name: "subviewIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setHoldingPriority:forSubviewAtIndex:"
      return_type: "V"
      parameter {
        name: "priority"
        type: "F"
      }
      parameter {
        name: "subviewIndex"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "vertical"
    type: "Z"
  }
  property {
    name: "dividerStyle"
    type: "X(Enum.enum NSSplitViewDividerStyle)"
  }
  property {
    name: "autosaveName"
    type: "LNSString;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSSplitViewDelegate>)"
  }
  property {
    name: "dividerColor"
    type: "LNSColor;"
  }
  property {
    name: "dividerThickness"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSplitView.h"
}
class {
  name: "NSSplitViewController"
  base_class: "NSViewController"
  protocol: "NSSplitViewDelegate"
  method {
    function {
      name: "splitView"
      return_type: "LNSSplitView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSplitView:"
      return_type: "V"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitViewItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSplitViewItems:"
      return_type: "V"
      parameter {
        name: "splitViewItems"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addSplitViewItem:"
      return_type: "V"
      parameter {
        name: "splitViewItem"
        type: "LNSSplitViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertSplitViewItem:atIndex:"
      return_type: "V"
      parameter {
        name: "splitViewItem"
        type: "LNSSplitViewItem;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeSplitViewItem:"
      return_type: "V"
      parameter {
        name: "splitViewItem"
        type: "LNSSplitViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitViewItemForViewController:"
      return_type: "LNSSplitViewItem;"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidLoad"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:canCollapseSubview:"
      return_type: "Z"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "subview"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:"
      return_type: "Z"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "subview"
        type: "LNSView;"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:shouldHideDividerAtIndex:"
      return_type: "Z"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "proposedEffectiveRect"
        type: "RCGRect;"
      }
      parameter {
        name: "drawnRect"
        type: "RCGRect;"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:additionalEffectiveRectOfDividerAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "splitView"
    type: "LNSSplitView;"
  }
  property {
    name: "splitViewItems"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSplitViewController.h"
}
class {
  name: "NSSplitViewItem"
  base_class: "NSObject"
  protocol: "NSAnimatablePropertyContainer"
  protocol: "NSCoding"
  method {
    function {
      name: "splitViewItemWithViewController:"
      return_type: "OI"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "viewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "setViewController:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isCollapsed"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCollapsed:"
      return_type: "V"
      parameter {
        name: "collapsed"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canCollapse"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanCollapse:"
      return_type: "V"
      parameter {
        name: "canCollapse"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "holdingPriority"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setHoldingPriority:"
      return_type: "V"
      parameter {
        name: "holdingPriority"
        type: "F"
      }
    }
    class_method: false
  }
  property {
    name: "viewController"
    type: "LNSViewController;"
  }
  property {
    name: "collapsed"
    type: "Z"
  }
  property {
    name: "canCollapse"
    type: "Z"
  }
  property {
    name: "holdingPriority"
    type: "F"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSplitViewController.h"
}
class {
  name: "NSSavePanel"
  base_class: "NSPanel"
  category: "NSSavePanel+NSDeprecated"
  method {
    function {
      name: "savePanel"
      return_type: "LNSSavePanel;"
    }
    class_method: true
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "directoryURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDirectoryURL:"
      return_type: "V"
      parameter {
        name: "directoryURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedFileTypes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedFileTypes:"
      return_type: "V"
      parameter {
        name: "allowedFileTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsOtherFileTypes"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsOtherFileTypes:"
      return_type: "V"
      parameter {
        name: "allowsOtherFileTypes"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "accessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSOpenSavePanelDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSOpenSavePanelDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isExpanded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "canCreateDirectories"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanCreateDirectories:"
      return_type: "V"
      parameter {
        name: "canCreateDirectories"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canSelectHiddenExtension"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanSelectHiddenExtension:"
      return_type: "V"
      parameter {
        name: "canSelectHiddenExtension"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isExtensionHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setExtensionHidden:"
      return_type: "V"
      parameter {
        name: "extensionHidden"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "treatsFilePackagesAsDirectories"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTreatsFilePackagesAsDirectories:"
      return_type: "V"
      parameter {
        name: "treatsFilePackagesAsDirectories"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prompt"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPrompt:"
      return_type: "V"
      parameter {
        name: "prompt"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nameFieldLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNameFieldLabel:"
      return_type: "V"
      parameter {
        name: "nameFieldLabel"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nameFieldStringValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNameFieldStringValue:"
      return_type: "V"
      parameter {
        name: "nameFieldStringValue"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "message"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMessage:"
      return_type: "V"
      parameter {
        name: "message"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validateVisibleColumns"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "showsHiddenFiles"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsHiddenFiles:"
      return_type: "V"
      parameter {
        name: "showsHiddenFiles"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsTagField"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsTagField:"
      return_type: "V"
      parameter {
        name: "showsTagField"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tagNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTagNames:"
      return_type: "V"
      parameter {
        name: "tagNames"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ok:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheetModalForWindow:completionHandler:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSInteger))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSInteger))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModal"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "directoryURL"
    type: "LNSURL;"
  }
  property {
    name: "allowedFileTypes"
    type: "LNSArray;"
  }
  property {
    name: "allowsOtherFileTypes"
    type: "Z"
  }
  property {
    name: "accessoryView"
    type: "LNSView;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSOpenSavePanelDelegate>)"
  }
  property {
    name: "expanded"
    type: "Z"
  }
  property {
    name: "canCreateDirectories"
    type: "Z"
  }
  property {
    name: "canSelectHiddenExtension"
    type: "Z"
  }
  property {
    name: "extensionHidden"
    type: "Z"
  }
  property {
    name: "treatsFilePackagesAsDirectories"
    type: "Z"
  }
  property {
    name: "prompt"
    type: "LNSString;"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "nameFieldLabel"
    type: "LNSString;"
  }
  property {
    name: "nameFieldStringValue"
    type: "LNSString;"
  }
  property {
    name: "message"
    type: "LNSString;"
  }
  property {
    name: "showsHiddenFiles"
    type: "Z"
  }
  property {
    name: "showsTagField"
    type: "Z"
  }
  property {
    name: "tagNames"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSavePanel.h"
}
class {
  name: "NSOpenPanel"
  base_class: "NSSavePanel"
  category: "NSOpenPanel+NSDeprecated"
  method {
    function {
      name: "openPanel"
      return_type: "LNSOpenPanel;"
    }
    class_method: true
  }
  method {
    function {
      name: "URLs"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "resolvesAliases"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setResolvesAliases:"
      return_type: "V"
      parameter {
        name: "resolvesAliases"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canChooseDirectories"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanChooseDirectories:"
      return_type: "V"
      parameter {
        name: "canChooseDirectories"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsMultipleSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsMultipleSelection:"
      return_type: "V"
      parameter {
        name: "allowsMultipleSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canChooseFiles"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanChooseFiles:"
      return_type: "V"
      parameter {
        name: "canChooseFiles"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canResolveUbiquitousConflicts"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanResolveUbiquitousConflicts:"
      return_type: "V"
      parameter {
        name: "canResolveUbiquitousConflicts"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canDownloadUbiquitousContents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanDownloadUbiquitousContents:"
      return_type: "V"
      parameter {
        name: "canDownloadUbiquitousContents"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "URLs"
    type: "LNSArray;"
  }
  property {
    name: "resolvesAliases"
    type: "Z"
  }
  property {
    name: "canChooseDirectories"
    type: "Z"
  }
  property {
    name: "allowsMultipleSelection"
    type: "Z"
  }
  property {
    name: "canChooseFiles"
    type: "Z"
  }
  property {
    name: "canResolveUbiquitousConflicts"
    type: "Z"
  }
  property {
    name: "canDownloadUbiquitousContents"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenPanel.h"
}
class {
  name: "NSPageLayout"
  base_class: "NSObject"
  category: "NSPageLayout+NSDeprecated"
  method {
    function {
      name: "pageLayout"
      return_type: "LNSPageLayout;"
    }
    class_method: true
  }
  method {
    function {
      name: "addAccessoryController:"
      return_type: "V"
      parameter {
        name: "accessoryController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAccessoryController:"
      return_type: "V"
      parameter {
        name: "accessoryController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryControllers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didEndSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalWithPrintInfo:"
      return_type: "I"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModal"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "printInfo"
      return_type: "LNSPrintInfo;"
    }
    class_method: false
  }
  property {
    name: "accessoryControllers"
    type: "LNSArray;"
  }
  property {
    name: "printInfo"
    type: "LNSPrintInfo;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPageLayout.h"
}
class {
  name: "NSPasteboardItem"
  base_class: "NSObject"
  protocol: "NSPasteboardWriting"
  protocol: "NSPasteboardReading"
  method {
    function {
      name: "types"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "availableTypeFromArray:"
      return_type: "LNSString;"
      parameter {
        name: "types"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDataProvider:forTypes:"
      return_type: "Z"
      parameter {
        name: "dataProvider"
        type: "X(Unexposed.id<NSPasteboardItemDataProvider>)"
      }
      parameter {
        name: "types"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setData:forType:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setString:forType:"
      return_type: "Z"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setPropertyList:forType:"
      return_type: "Z"
      parameter {
        name: "propertyList"
        type: "OI"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataForType:"
      return_type: "LNSData;"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringForType:"
      return_type: "LNSString;"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "propertyListForType:"
      return_type: "OI"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "types"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboardItem.h"
}
class {
  name: "NSMenuItemCell"
  base_class: "NSButtonCell"
  method {
    function {
      name: "menuItem"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenuItem:"
      return_type: "V"
      parameter {
        name: "menuItem"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "needsSizing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsSizing:"
      return_type: "V"
      parameter {
        name: "needsSizing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "calcSize"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "needsDisplay"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsDisplay:"
      return_type: "V"
      parameter {
        name: "needsDisplay"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stateImageWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "imageWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "titleWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalentWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "stateImageRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyEquivalentRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawSeparatorItemWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawStateImageWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawImageWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawTitleWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawKeyEquivalentWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawBorderAndBackgroundWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tag"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "menuItem"
    type: "LNSMenuItem;"
  }
  property {
    name: "needsSizing"
    type: "Z"
  }
  property {
    name: "needsDisplay"
    type: "Z"
  }
  property {
    name: "stateImageWidth"
    type: "D"
  }
  property {
    name: "imageWidth"
    type: "D"
  }
  property {
    name: "titleWidth"
    type: "D"
  }
  property {
    name: "keyEquivalentWidth"
    type: "D"
  }
  property {
    name: "tag"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenuItemCell.h"
}
class {
  name: "NSPopUpButton"
  base_class: "NSButton"
  method {
    function {
      name: "initWithFrame:pullsDown:"
      return_type: "OI"
      parameter {
        name: "buttonFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pullsDown"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPullsDown:"
      return_type: "V"
      parameter {
        name: "pullsDown"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoenablesItems"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoenablesItems:"
      return_type: "V"
      parameter {
        name: "autoenablesItems"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredEdge"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredEdge:"
      return_type: "V"
      parameter {
        name: "preferredEdge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemWithTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemsWithTitles:"
      return_type: "V"
      parameter {
        name: "itemTitles"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertItemWithTitle:atIndex:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemWithTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllItems"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "itemArray"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItem:"
      return_type: "I"
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTitle:"
      return_type: "I"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTag:"
      return_type: "I"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithRepresentedObject:"
      return_type: "I"
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTarget:andAction:"
      return_type: "I"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "actionSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtIndex:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemWithTitle:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lastItem"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectItem:"
      return_type: "V"
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemWithTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemWithTag:"
      return_type: "Z"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedItem"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfSelectedItem"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedTag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "synchronizeTitleAndSelectedItem"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "itemTitleAtIndex:"
      return_type: "LNSString;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemTitles"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "titleOfSelectedItem"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "menu"
    type: "LNSMenu;"
  }
  property {
    name: "pullsDown"
    type: "Z"
  }
  property {
    name: "autoenablesItems"
    type: "Z"
  }
  property {
    name: "preferredEdge"
    type: "UI"
  }
  property {
    name: "itemArray"
    type: "LNSArray;"
  }
  property {
    name: "numberOfItems"
    type: "I"
  }
  property {
    name: "lastItem"
    type: "LNSMenuItem;"
  }
  property {
    name: "selectedItem"
    type: "LNSMenuItem;"
  }
  property {
    name: "indexOfSelectedItem"
    type: "I"
  }
  property {
    name: "selectedTag"
    type: "I"
  }
  property {
    name: "itemTitles"
    type: "LNSArray;"
  }
  property {
    name: "titleOfSelectedItem"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPopUpButton.h"
}
class {
  name: "NSPrintInfo"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSPrintInfo+NSDeprecated"
  method {
    function {
      name: "setSharedPrintInfo:"
      return_type: "V"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "sharedPrintInfo"
      return_type: "LNSPrintInfo;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithDictionary:"
      return_type: "OI"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dictionary"
      return_type: "LNSMutableDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "paperName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPaperName:"
      return_type: "V"
      parameter {
        name: "paperName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paperSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPaperSize:"
      return_type: "V"
      parameter {
        name: "paperSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orientation"
      return_type: "X(Enum.enum NSPaperOrientation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setOrientation:"
      return_type: "V"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSPaperOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scalingFactor"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setScalingFactor:"
      return_type: "V"
      parameter {
        name: "scalingFactor"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "leftMargin"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLeftMargin:"
      return_type: "V"
      parameter {
        name: "leftMargin"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rightMargin"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRightMargin:"
      return_type: "V"
      parameter {
        name: "rightMargin"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "topMargin"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTopMargin:"
      return_type: "V"
      parameter {
        name: "topMargin"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bottomMargin"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setBottomMargin:"
      return_type: "V"
      parameter {
        name: "bottomMargin"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHorizontallyCentered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHorizontallyCentered:"
      return_type: "V"
      parameter {
        name: "horizontallyCentered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isVerticallyCentered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticallyCentered:"
      return_type: "V"
      parameter {
        name: "verticallyCentered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "horizontalPagination"
      return_type: "X(Enum.enum NSPrintingPaginationMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setHorizontalPagination:"
      return_type: "V"
      parameter {
        name: "horizontalPagination"
        type: "X(Enum.enum NSPrintingPaginationMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "verticalPagination"
      return_type: "X(Enum.enum NSPrintingPaginationMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticalPagination:"
      return_type: "V"
      parameter {
        name: "verticalPagination"
        type: "X(Enum.enum NSPrintingPaginationMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "jobDisposition"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setJobDisposition:"
      return_type: "V"
      parameter {
        name: "jobDisposition"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printer"
      return_type: "LNSPrinter;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPrinter:"
      return_type: "V"
      parameter {
        name: "printer"
        type: "LNSPrinter;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setUpPrintOperationDefaultValues"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "imageablePageBounds"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "localizedPaperName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "defaultPrinter"
      return_type: "LNSPrinter;"
    }
    class_method: true
  }
  method {
    function {
      name: "printSettings"
      return_type: "LNSMutableDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "PMPrintSession"
      return_type: "*V;"
    }
    class_method: false
  }
  method {
    function {
      name: "PMPageFormat"
      return_type: "*V;"
    }
    class_method: false
  }
  method {
    function {
      name: "PMPrintSettings"
      return_type: "*V;"
    }
    class_method: false
  }
  method {
    function {
      name: "updateFromPMPageFormat"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "updateFromPMPrintSettings"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectionOnly"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionOnly:"
      return_type: "V"
      parameter {
        name: "selectionOnly"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeSettingsFromPDFInfo:"
      return_type: "V"
      parameter {
        name: "inPDFInfo"
        type: "LNSPDFInfo;"
      }
    }
    class_method: false
  }
  property {
    name: "paperName"
    type: "LNSString;"
  }
  property {
    name: "paperSize"
    type: "RCGSize;"
  }
  property {
    name: "orientation"
    type: "X(Enum.enum NSPaperOrientation)"
  }
  property {
    name: "scalingFactor"
    type: "D"
  }
  property {
    name: "leftMargin"
    type: "D"
  }
  property {
    name: "rightMargin"
    type: "D"
  }
  property {
    name: "topMargin"
    type: "D"
  }
  property {
    name: "bottomMargin"
    type: "D"
  }
  property {
    name: "horizontallyCentered"
    type: "Z"
  }
  property {
    name: "verticallyCentered"
    type: "Z"
  }
  property {
    name: "horizontalPagination"
    type: "X(Enum.enum NSPrintingPaginationMode)"
  }
  property {
    name: "verticalPagination"
    type: "X(Enum.enum NSPrintingPaginationMode)"
  }
  property {
    name: "jobDisposition"
    type: "LNSString;"
  }
  property {
    name: "printer"
    type: "LNSPrinter;"
  }
  property {
    name: "imageablePageBounds"
    type: "RCGRect;"
  }
  property {
    name: "localizedPaperName"
    type: "LNSString;"
  }
  property {
    name: "printSettings"
    type: "LNSMutableDictionary;"
  }
  property {
    name: "selectionOnly"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrintInfo.h"
}
class {
  name: "NSPrintOperation"
  base_class: "NSObject"
  category: "NSPrintOperation+NSDeprecated"
  method {
    function {
      name: "printOperationWithView:printInfo:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "PDFOperationWithView:insideRect:toData:printInfo:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "data"
        type: "LNSMutableData;"
      }
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "PDFOperationWithView:insideRect:toPath:printInfo:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "EPSOperationWithView:insideRect:toData:printInfo:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "data"
        type: "LNSMutableData;"
      }
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "EPSOperationWithView:insideRect:toPath:printInfo:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "printOperationWithView:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "PDFOperationWithView:insideRect:toData:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "data"
        type: "LNSMutableData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "EPSOperationWithView:insideRect:toData:"
      return_type: "LNSPrintOperation;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "data"
        type: "LNSMutableData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "currentOperation"
      return_type: "LNSPrintOperation;"
    }
    class_method: true
  }
  method {
    function {
      name: "setCurrentOperation:"
      return_type: "V"
      parameter {
        name: "operation"
        type: "LNSPrintOperation;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "isCopyingOperation"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "preferredRenderingQuality"
      return_type: "X(Enum.enum NSPrintRenderingQuality)"
    }
    class_method: false
  }
  method {
    function {
      name: "jobTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setJobTitle:"
      return_type: "V"
      parameter {
        name: "jobTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsPrintPanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsPrintPanel:"
      return_type: "V"
      parameter {
        name: "showsPrintPanel"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsProgressPanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsProgressPanel:"
      return_type: "V"
      parameter {
        name: "showsProgressPanel"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printPanel"
      return_type: "LNSPrintPanel;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPrintPanel:"
      return_type: "V"
      parameter {
        name: "printPanel"
        type: "LNSPrintPanel;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "PDFPanel"
      return_type: "LNSPDFPanel;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPDFPanel:"
      return_type: "V"
      parameter {
        name: "PDFPanel"
        type: "LNSPDFPanel;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canSpawnSeparateThread"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanSpawnSeparateThread:"
      return_type: "V"
      parameter {
        name: "canSpawnSeparateThread"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageOrder"
      return_type: "X(Enum.enum NSPrintingPageOrder)"
    }
    class_method: false
  }
  method {
    function {
      name: "setPageOrder:"
      return_type: "V"
      parameter {
        name: "pageOrder"
        type: "X(Enum.enum NSPrintingPageOrder)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runOperationModalForWindow:delegate:didRunSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didRunSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runOperation"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "printInfo"
      return_type: "LNSPrintInfo;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPrintInfo:"
      return_type: "V"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "context"
      return_type: "LNSGraphicsContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "pageRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentPage"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "createContext"
      return_type: "LNSGraphicsContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "destroyContext"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "deliverResult"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "cleanUpOperation"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "copyingOperation"
    type: "Z"
  }
  property {
    name: "preferredRenderingQuality"
    type: "X(Enum.enum NSPrintRenderingQuality)"
  }
  property {
    name: "jobTitle"
    type: "LNSString;"
  }
  property {
    name: "showsPrintPanel"
    type: "Z"
  }
  property {
    name: "showsProgressPanel"
    type: "Z"
  }
  property {
    name: "printPanel"
    type: "LNSPrintPanel;"
  }
  property {
    name: "PDFPanel"
    type: "LNSPDFPanel;"
  }
  property {
    name: "canSpawnSeparateThread"
    type: "Z"
  }
  property {
    name: "pageOrder"
    type: "X(Enum.enum NSPrintingPageOrder)"
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  property {
    name: "printInfo"
    type: "LNSPrintInfo;"
  }
  property {
    name: "context"
    type: "LNSGraphicsContext;"
  }
  property {
    name: "pageRange"
    type: "R_NSRange;"
  }
  property {
    name: "currentPage"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrintOperation.h"
}
class {
  name: "NSPrintPanel"
  base_class: "NSObject"
  category: "NSPrintPanel+NSDeprecated"
  method {
    function {
      name: "printPanel"
      return_type: "LNSPrintPanel;"
    }
    class_method: true
  }
  method {
    function {
      name: "addAccessoryController:"
      return_type: "V"
      parameter {
        name: "accessoryController"
        type: "X(Unexposed.NSViewController<NSPrintPanelAccessorizing>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAccessoryController:"
      return_type: "V"
      parameter {
        name: "accessoryController"
        type: "X(Unexposed.NSViewController<NSPrintPanelAccessorizing>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryControllers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "options"
      return_type: "X(Enum.enum NSPrintPanelOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "setOptions:"
      return_type: "V"
      parameter {
        name: "options"
        type: "X(Enum.enum NSPrintPanelOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultButtonTitle:"
      return_type: "V"
      parameter {
        name: "defaultButtonTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultButtonTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "helpAnchor"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHelpAnchor:"
      return_type: "V"
      parameter {
        name: "helpAnchor"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "jobStyleHint"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setJobStyleHint:"
      return_type: "V"
      parameter {
        name: "jobStyleHint"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didEndSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalWithPrintInfo:"
      return_type: "I"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModal"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "printInfo"
      return_type: "LNSPrintInfo;"
    }
    class_method: false
  }
  property {
    name: "accessoryControllers"
    type: "LNSArray;"
  }
  property {
    name: "options"
    type: "X(Enum.enum NSPrintPanelOptions)"
  }
  property {
    name: "helpAnchor"
    type: "LNSString;"
  }
  property {
    name: "jobStyleHint"
    type: "LNSString;"
  }
  property {
    name: "printInfo"
    type: "LNSPrintInfo;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrintPanel.h"
}
class {
  name: "NSPDFInfo"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setURL:"
      return_type: "V"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFileExtensionHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setFileExtensionHidden:"
      return_type: "V"
      parameter {
        name: "fileExtensionHidden"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tagNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTagNames:"
      return_type: "V"
      parameter {
        name: "tagNames"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orientation"
      return_type: "X(Enum.enum NSPaperOrientation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setOrientation:"
      return_type: "V"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSPaperOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paperSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPaperSize:"
      return_type: "V"
      parameter {
        name: "paperSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributes"
      return_type: "LNSMutableDictionary;"
    }
    class_method: false
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "fileExtensionHidden"
    type: "Z"
  }
  property {
    name: "tagNames"
    type: "LNSArray;"
  }
  property {
    name: "orientation"
    type: "X(Enum.enum NSPaperOrientation)"
  }
  property {
    name: "paperSize"
    type: "RCGSize;"
  }
  property {
    name: "attributes"
    type: "LNSMutableDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPDFInfo.h"
}
class {
  name: "NSPDFPanel"
  base_class: "NSObject"
  method {
    function {
      name: "panel"
      return_type: "LNSPDFPanel;"
    }
    class_method: true
  }
  method {
    function {
      name: "accessoryController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessoryController:"
      return_type: "V"
      parameter {
        name: "accessoryController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "options"
      return_type: "X(Enum.enum NSPDFPanelOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "setOptions:"
      return_type: "V"
      parameter {
        name: "options"
        type: "X(Enum.enum NSPDFPanelOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultFileName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultFileName:"
      return_type: "V"
      parameter {
        name: "defaultFileName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheetWithPDFInfo:modalForWindow:completionHandler:"
      return_type: "V"
      parameter {
        name: "pdfInfo"
        type: "LNSPDFInfo;"
      }
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSInteger))"
      }
    }
    class_method: false
  }
  property {
    name: "accessoryController"
    type: "LNSViewController;"
  }
  property {
    name: "options"
    type: "X(Enum.enum NSPDFPanelOptions)"
  }
  property {
    name: "defaultFileName"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPDFPanel.h"
}
class {
  name: "NSMediaLibraryBrowserController"
  base_class: "NSObject"
  method {
    function {
      name: "isVisible"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setVisible:"
      return_type: "V"
      parameter {
        name: "visible"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFrame:"
      return_type: "V"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mediaLibraries"
      return_type: "X(Enum.enum NSMediaLibrary)"
    }
    class_method: false
  }
  method {
    function {
      name: "setMediaLibraries:"
      return_type: "V"
      parameter {
        name: "mediaLibraries"
        type: "X(Enum.enum NSMediaLibrary)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharedMediaLibraryBrowserController"
      return_type: "LNSMediaLibraryBrowserController;"
    }
    class_method: true
  }
  method {
    function {
      name: "togglePanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "visible"
    type: "Z"
  }
  property {
    name: "frame"
    type: "RCGRect;"
  }
  property {
    name: "mediaLibraries"
    type: "X(Enum.enum NSMediaLibrary)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMediaLibraryBrowserController.h"
}
class {
  name: "NSScreen"
  base_class: "NSObject"
  category: "NSScreen+NSDeprecated"
  method {
    function {
      name: "screens"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "mainScreen"
      return_type: "LNSScreen;"
    }
    class_method: true
  }
  method {
    function {
      name: "deepestScreen"
      return_type: "LNSScreen;"
    }
    class_method: true
  }
  method {
    function {
      name: "screensHaveSeparateSpaces"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "depth"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "frame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "visibleFrame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "deviceDescription"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "colorSpace"
      return_type: "LNSColorSpace;"
    }
    class_method: false
  }
  method {
    function {
      name: "supportedWindowDepths"
      return_type: "*cI;"
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectToBacking:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRectFromBacking:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backingAlignedRect:options:"
      return_type: "RCGRect;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSAlignmentOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backingScaleFactor"
      return_type: "D"
    }
    class_method: false
  }
  property {
    name: "depth"
    type: "I"
  }
  property {
    name: "frame"
    type: "RCGRect;"
  }
  property {
    name: "visibleFrame"
    type: "RCGRect;"
  }
  property {
    name: "deviceDescription"
    type: "LNSDictionary;"
  }
  property {
    name: "colorSpace"
    type: "LNSColorSpace;"
  }
  property {
    name: "supportedWindowDepths"
    type: "*cI;"
  }
  property {
    name: "backingScaleFactor"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSScreen.h"
}
class {
  name: "NSScroller"
  base_class: "NSControl"
  category: "NSScroller+NSDeprecated"
  method {
    function {
      name: "isCompatibleWithOverlayScrollers"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "scrollerWidthForControlSize:scrollerStyle:"
      return_type: "D"
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
      parameter {
        name: "scrollerStyle"
        type: "X(Enum.enum NSScrollerStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "scrollerWidthForControlSize:"
      return_type: "D"
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "scrollerWidth"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "preferredScrollerStyle"
      return_type: "X(Enum.enum NSScrollerStyle)"
    }
    class_method: true
  }
  method {
    function {
      name: "scrollerStyle"
      return_type: "X(Enum.enum NSScrollerStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setScrollerStyle:"
      return_type: "V"
      parameter {
        name: "scrollerStyle"
        type: "X(Enum.enum NSScrollerStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "knobStyle"
      return_type: "X(Enum.enum NSScrollerKnobStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setKnobStyle:"
      return_type: "V"
      parameter {
        name: "knobStyle"
        type: "X(Enum.enum NSScrollerKnobStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawParts"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "rectForPart:"
      return_type: "RCGRect;"
      parameter {
        name: "partCode"
        type: "X(Enum.enum NSScrollerPart)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkSpaceForParts"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "usableParts"
      return_type: "X(Enum.enum NSUsableScrollerParts)"
    }
    class_method: false
  }
  method {
    function {
      name: "arrowsPosition"
      return_type: "X(Enum.enum NSScrollArrowPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setArrowsPosition:"
      return_type: "V"
      parameter {
        name: "arrowsPosition"
        type: "X(Enum.enum NSScrollArrowPosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlTint"
      return_type: "X(Enum.enum NSControlTint)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlTint:"
      return_type: "V"
      parameter {
        name: "controlTint"
        type: "X(Enum.enum NSControlTint)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlSize"
      return_type: "X(Enum.enum NSControlSize)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlSize:"
      return_type: "V"
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawArrow:highlight:"
      return_type: "V"
      parameter {
        name: "whichArrow"
        type: "X(Enum.enum NSScrollerArrow)"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawKnob"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "drawKnobSlotInRect:highlight:"
      return_type: "V"
      parameter {
        name: "slotRect"
        type: "RCGRect;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlight:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "testPart:"
      return_type: "X(Enum.enum NSScrollerPart)"
      parameter {
        name: "thePoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackKnob:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackScrollButtons:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hitPart"
      return_type: "X(Enum.enum NSScrollerPart)"
    }
    class_method: false
  }
  method {
    function {
      name: "knobProportion"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setKnobProportion:"
      return_type: "V"
      parameter {
        name: "proportion"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "scrollerStyle"
    type: "X(Enum.enum NSScrollerStyle)"
  }
  property {
    name: "knobStyle"
    type: "X(Enum.enum NSScrollerKnobStyle)"
  }
  property {
    name: "usableParts"
    type: "X(Enum.enum NSUsableScrollerParts)"
  }
  property {
    name: "arrowsPosition"
    type: "X(Enum.enum NSScrollArrowPosition)"
  }
  property {
    name: "controlTint"
    type: "X(Enum.enum NSControlTint)"
  }
  property {
    name: "controlSize"
    type: "X(Enum.enum NSControlSize)"
  }
  property {
    name: "hitPart"
    type: "X(Enum.enum NSScrollerPart)"
  }
  property {
    name: "knobProportion"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSScroller.h"
}
class {
  name: "NSTextFinder"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "client"
      return_type: "X(Unexposed.id<NSTextFinderClient>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setClient:"
      return_type: "V"
      parameter {
        name: "client"
        type: "X(Unexposed.id<NSTextFinderClient>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performAction:"
      return_type: "V"
      parameter {
        name: "op"
        type: "X(Enum.enum NSTextFinderAction)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validateAction:"
      return_type: "Z"
      parameter {
        name: "op"
        type: "X(Enum.enum NSTextFinderAction)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "findBarContainer"
      return_type: "X(Unexposed.id<NSTextFinderBarContainer>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFindBarContainer:"
      return_type: "V"
      parameter {
        name: "findBarContainer"
        type: "X(Unexposed.id<NSTextFinderBarContainer>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelFindIndicator"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "findIndicatorNeedsUpdate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setFindIndicatorNeedsUpdate:"
      return_type: "V"
      parameter {
        name: "findIndicatorNeedsUpdate"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isIncrementalSearchingEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncrementalSearchingEnabled:"
      return_type: "V"
      parameter {
        name: "incrementalSearchingEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "incrementalSearchingShouldDimContentView"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncrementalSearchingShouldDimContentView:"
      return_type: "V"
      parameter {
        name: "incrementalSearchingShouldDimContentView"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "incrementalMatchRanges"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "drawIncrementalMatchHighlightInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "noteClientStringWillChange"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "client"
    type: "X(Unexposed.id<NSTextFinderClient>)"
  }
  property {
    name: "findBarContainer"
    type: "X(Unexposed.id<NSTextFinderBarContainer>)"
  }
  property {
    name: "findIndicatorNeedsUpdate"
    type: "Z"
  }
  property {
    name: "incrementalSearchingEnabled"
    type: "Z"
  }
  property {
    name: "incrementalSearchingShouldDimContentView"
    type: "Z"
  }
  property {
    name: "incrementalMatchRanges"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextFinder.h"
}
class {
  name: "NSScrollView"
  base_class: "NSView"
  protocol: "NSTextFinderBarContainer"
  category: "NSScrollView+NSRulerSupport"
  category: "NSScrollView+NSFindBarSupport"
  method {
    function {
      name: "initWithFrame:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameSizeForContentSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:"
      return_type: "RCGSize;"
      parameter {
        name: "cSize"
        type: "RCGSize;"
      }
      parameter {
        name: "horizontalScrollerClass"
        type: "OC"
      }
      parameter {
        name: "verticalScrollerClass"
        type: "OC"
      }
      parameter {
        name: "aType"
        type: "X(Enum.enum NSBorderType)"
      }
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
      parameter {
        name: "scrollerStyle"
        type: "X(Enum.enum NSScrollerStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "contentSizeForFrameSize:horizontalScrollerClass:verticalScrollerClass:borderType:controlSize:scrollerStyle:"
      return_type: "RCGSize;"
      parameter {
        name: "fSize"
        type: "RCGSize;"
      }
      parameter {
        name: "horizontalScrollerClass"
        type: "OC"
      }
      parameter {
        name: "verticalScrollerClass"
        type: "OC"
      }
      parameter {
        name: "aType"
        type: "X(Enum.enum NSBorderType)"
      }
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
      parameter {
        name: "scrollerStyle"
        type: "X(Enum.enum NSScrollerStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:"
      return_type: "RCGSize;"
      parameter {
        name: "cSize"
        type: "RCGSize;"
      }
      parameter {
        name: "hFlag"
        type: "Z"
      }
      parameter {
        name: "vFlag"
        type: "Z"
      }
      parameter {
        name: "aType"
        type: "X(Enum.enum NSBorderType)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:"
      return_type: "RCGSize;"
      parameter {
        name: "fSize"
        type: "RCGSize;"
      }
      parameter {
        name: "hFlag"
        type: "Z"
      }
      parameter {
        name: "vFlag"
        type: "Z"
      }
      parameter {
        name: "aType"
        type: "X(Enum.enum NSBorderType)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "documentVisibleRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "contentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "documentView"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDocumentView:"
      return_type: "V"
      parameter {
        name: "documentView"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentView"
      return_type: "LNSClipView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentView:"
      return_type: "V"
      parameter {
        name: "contentView"
        type: "LNSClipView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documentCursor"
      return_type: "LNSCursor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDocumentCursor:"
      return_type: "V"
      parameter {
        name: "documentCursor"
        type: "LNSCursor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "borderType"
      return_type: "X(Enum.enum NSBorderType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBorderType:"
      return_type: "V"
      parameter {
        name: "borderType"
        type: "X(Enum.enum NSBorderType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasVerticalScroller"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasVerticalScroller:"
      return_type: "V"
      parameter {
        name: "hasVerticalScroller"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasHorizontalScroller"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasHorizontalScroller:"
      return_type: "V"
      parameter {
        name: "hasHorizontalScroller"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "verticalScroller"
      return_type: "LNSScroller;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticalScroller:"
      return_type: "V"
      parameter {
        name: "verticalScroller"
        type: "LNSScroller;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "horizontalScroller"
      return_type: "LNSScroller;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHorizontalScroller:"
      return_type: "V"
      parameter {
        name: "horizontalScroller"
        type: "LNSScroller;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autohidesScrollers"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutohidesScrollers:"
      return_type: "V"
      parameter {
        name: "autohidesScrollers"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "horizontalLineScroll"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setHorizontalLineScroll:"
      return_type: "V"
      parameter {
        name: "horizontalLineScroll"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "verticalLineScroll"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticalLineScroll:"
      return_type: "V"
      parameter {
        name: "verticalLineScroll"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineScroll"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineScroll:"
      return_type: "V"
      parameter {
        name: "lineScroll"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "horizontalPageScroll"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setHorizontalPageScroll:"
      return_type: "V"
      parameter {
        name: "horizontalPageScroll"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "verticalPageScroll"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticalPageScroll:"
      return_type: "V"
      parameter {
        name: "verticalPageScroll"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageScroll"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setPageScroll:"
      return_type: "V"
      parameter {
        name: "pageScroll"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollsDynamically"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setScrollsDynamically:"
      return_type: "V"
      parameter {
        name: "scrollsDynamically"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tile"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "reflectScrolledClipView:"
      return_type: "V"
      parameter {
        name: "cView"
        type: "LNSClipView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollWheel:"
      return_type: "V"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollerStyle"
      return_type: "X(Enum.enum NSScrollerStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setScrollerStyle:"
      return_type: "V"
      parameter {
        name: "scrollerStyle"
        type: "X(Enum.enum NSScrollerStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollerKnobStyle"
      return_type: "X(Enum.enum NSScrollerKnobStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setScrollerKnobStyle:"
      return_type: "V"
      parameter {
        name: "scrollerKnobStyle"
        type: "X(Enum.enum NSScrollerKnobStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "flashScrollers"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "horizontalScrollElasticity"
      return_type: "X(Enum.enum NSScrollElasticity)"
    }
    class_method: false
  }
  method {
    function {
      name: "setHorizontalScrollElasticity:"
      return_type: "V"
      parameter {
        name: "horizontalScrollElasticity"
        type: "X(Enum.enum NSScrollElasticity)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "verticalScrollElasticity"
      return_type: "X(Enum.enum NSScrollElasticity)"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticalScrollElasticity:"
      return_type: "V"
      parameter {
        name: "verticalScrollElasticity"
        type: "X(Enum.enum NSScrollElasticity)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesPredominantAxisScrolling"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesPredominantAxisScrolling:"
      return_type: "V"
      parameter {
        name: "usesPredominantAxisScrolling"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsMagnification"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsMagnification:"
      return_type: "V"
      parameter {
        name: "allowsMagnification"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "magnification"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMagnification:"
      return_type: "V"
      parameter {
        name: "magnification"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxMagnification"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxMagnification:"
      return_type: "V"
      parameter {
        name: "maxMagnification"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minMagnification"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinMagnification:"
      return_type: "V"
      parameter {
        name: "minMagnification"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "magnifyToFitRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMagnification:centeredAtPoint:"
      return_type: "V"
      parameter {
        name: "magnification"
        type: "D"
      }
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addFloatingSubview:forAxis:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "axis"
        type: "X(Enum.enum NSEventGestureAxis)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "automaticallyAdjustsContentInsets"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticallyAdjustsContentInsets:"
      return_type: "V"
      parameter {
        name: "automaticallyAdjustsContentInsets"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentInsets"
      return_type: "RNSEdgeInsets;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentInsets:"
      return_type: "V"
      parameter {
        name: "contentInsets"
        type: "RNSEdgeInsets;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollerInsets"
      return_type: "RNSEdgeInsets;"
    }
    class_method: false
  }
  method {
    function {
      name: "setScrollerInsets:"
      return_type: "V"
      parameter {
        name: "scrollerInsets"
        type: "RNSEdgeInsets;"
      }
    }
    class_method: false
  }
  property {
    name: "documentVisibleRect"
    type: "RCGRect;"
  }
  property {
    name: "contentSize"
    type: "RCGSize;"
  }
  property {
    name: "documentView"
    type: "OI"
  }
  property {
    name: "contentView"
    type: "LNSClipView;"
  }
  property {
    name: "documentCursor"
    type: "LNSCursor;"
  }
  property {
    name: "borderType"
    type: "X(Enum.enum NSBorderType)"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "hasVerticalScroller"
    type: "Z"
  }
  property {
    name: "hasHorizontalScroller"
    type: "Z"
  }
  property {
    name: "verticalScroller"
    type: "LNSScroller;"
  }
  property {
    name: "horizontalScroller"
    type: "LNSScroller;"
  }
  property {
    name: "autohidesScrollers"
    type: "Z"
  }
  property {
    name: "horizontalLineScroll"
    type: "D"
  }
  property {
    name: "verticalLineScroll"
    type: "D"
  }
  property {
    name: "lineScroll"
    type: "D"
  }
  property {
    name: "horizontalPageScroll"
    type: "D"
  }
  property {
    name: "verticalPageScroll"
    type: "D"
  }
  property {
    name: "pageScroll"
    type: "D"
  }
  property {
    name: "scrollsDynamically"
    type: "Z"
  }
  property {
    name: "scrollerStyle"
    type: "X(Enum.enum NSScrollerStyle)"
  }
  property {
    name: "scrollerKnobStyle"
    type: "X(Enum.enum NSScrollerKnobStyle)"
  }
  property {
    name: "horizontalScrollElasticity"
    type: "X(Enum.enum NSScrollElasticity)"
  }
  property {
    name: "verticalScrollElasticity"
    type: "X(Enum.enum NSScrollElasticity)"
  }
  property {
    name: "usesPredominantAxisScrolling"
    type: "Z"
  }
  property {
    name: "allowsMagnification"
    type: "Z"
  }
  property {
    name: "magnification"
    type: "D"
  }
  property {
    name: "maxMagnification"
    type: "D"
  }
  property {
    name: "minMagnification"
    type: "D"
  }
  property {
    name: "automaticallyAdjustsContentInsets"
    type: "Z"
  }
  property {
    name: "contentInsets"
    type: "RNSEdgeInsets;"
  }
  property {
    name: "scrollerInsets"
    type: "RNSEdgeInsets;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSScrollView.h"
}
class {
  name: "NSSegmentedControl"
  base_class: "NSControl"
  method {
    function {
      name: "segmentCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setSegmentCount:"
      return_type: "V"
      parameter {
        name: "segmentCount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedSegment"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedSegment:"
      return_type: "V"
      parameter {
        name: "selectedSegment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectSegmentWithTag:"
      return_type: "Z"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setWidth:forSegment:"
      return_type: "V"
      parameter {
        name: "width"
        type: "D"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "widthForSegment:"
      return_type: "D"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:forSegment:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageForSegment:"
      return_type: "LNSImage;"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setImageScaling:forSegment:"
      return_type: "V"
      parameter {
        name: "scaling"
        type: "X(Enum.enum NSImageScaling)"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageScalingForSegment:"
      return_type: "X(Enum.enum NSImageScaling)"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLabel:forSegment:"
      return_type: "V"
      parameter {
        name: "label"
        type: "LNSString;"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "labelForSegment:"
      return_type: "LNSString;"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:forSegment:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuForSegment:"
      return_type: "LNSMenu;"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelected:forSegment:"
      return_type: "V"
      parameter {
        name: "selected"
        type: "Z"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectedForSegment:"
      return_type: "Z"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:forSegment:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabledForSegment:"
      return_type: "Z"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "segmentStyle"
      return_type: "X(Enum.enum NSSegmentStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSegmentStyle:"
      return_type: "V"
      parameter {
        name: "segmentStyle"
        type: "X(Enum.enum NSSegmentStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSpringLoaded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSpringLoaded:"
      return_type: "V"
      parameter {
        name: "springLoaded"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackingMode"
      return_type: "X(Enum.enum NSSegmentSwitchTracking)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTrackingMode:"
      return_type: "V"
      parameter {
        name: "trackingMode"
        type: "X(Enum.enum NSSegmentSwitchTracking)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleValueForSelectedSegment"
      return_type: "D"
    }
    class_method: false
  }
  property {
    name: "segmentCount"
    type: "I"
  }
  property {
    name: "selectedSegment"
    type: "I"
  }
  property {
    name: "segmentStyle"
    type: "X(Enum.enum NSSegmentStyle)"
  }
  property {
    name: "springLoaded"
    type: "Z"
  }
  property {
    name: "trackingMode"
    type: "X(Enum.enum NSSegmentSwitchTracking)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSegmentedControl.h"
}
class {
  name: "NSSegmentedCell"
  base_class: "NSActionCell"
  category: "NSSegmentedCell+NSSegmentBackgroundStyle"
  method {
    function {
      name: "segmentCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setSegmentCount:"
      return_type: "V"
      parameter {
        name: "segmentCount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedSegment"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedSegment:"
      return_type: "V"
      parameter {
        name: "selectedSegment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectSegmentWithTag:"
      return_type: "Z"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeNextSegmentKey"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "makePreviousSegmentKey"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "trackingMode"
      return_type: "X(Enum.enum NSSegmentSwitchTracking)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTrackingMode:"
      return_type: "V"
      parameter {
        name: "trackingMode"
        type: "X(Enum.enum NSSegmentSwitchTracking)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setWidth:forSegment:"
      return_type: "V"
      parameter {
        name: "width"
        type: "D"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "widthForSegment:"
      return_type: "D"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:forSegment:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageForSegment:"
      return_type: "LNSImage;"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setImageScaling:forSegment:"
      return_type: "V"
      parameter {
        name: "scaling"
        type: "X(Enum.enum NSImageScaling)"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageScalingForSegment:"
      return_type: "X(Enum.enum NSImageScaling)"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLabel:forSegment:"
      return_type: "V"
      parameter {
        name: "label"
        type: "LNSString;"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "labelForSegment:"
      return_type: "LNSString;"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelected:forSegment:"
      return_type: "V"
      parameter {
        name: "selected"
        type: "Z"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectedForSegment:"
      return_type: "Z"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:forSegment:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabledForSegment:"
      return_type: "Z"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:forSegment:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuForSegment:"
      return_type: "LNSMenu;"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setToolTip:forSegment:"
      return_type: "V"
      parameter {
        name: "toolTip"
        type: "LNSString;"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolTipForSegment:"
      return_type: "LNSString;"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTag:forSegment:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tagForSegment:"
      return_type: "I"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "segmentStyle"
      return_type: "X(Enum.enum NSSegmentStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSegmentStyle:"
      return_type: "V"
      parameter {
        name: "segmentStyle"
        type: "X(Enum.enum NSSegmentStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawSegment:inFrame:withView:"
      return_type: "V"
      parameter {
        name: "segment"
        type: "I"
      }
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  property {
    name: "segmentCount"
    type: "I"
  }
  property {
    name: "selectedSegment"
    type: "I"
  }
  property {
    name: "trackingMode"
    type: "X(Enum.enum NSSegmentSwitchTracking)"
  }
  property {
    name: "segmentStyle"
    type: "X(Enum.enum NSSegmentStyle)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSegmentedCell.h"
}
class {
  name: "NSSharingService"
  base_class: "NSObject"
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSSharingServiceDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSSharingServiceDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "alternateImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "menuItemTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenuItemTitle:"
      return_type: "V"
      parameter {
        name: "menuItemTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recipients"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRecipients:"
      return_type: "V"
      parameter {
        name: "recipients"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subject"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSubject:"
      return_type: "V"
      parameter {
        name: "subject"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "messageBody"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "permanentLink"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "accountName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "attachmentFileURLs"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "sharingServicesForItems:"
      return_type: "LNSArray;"
      parameter {
        name: "items"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "sharingServiceNamed:"
      return_type: "LNSSharingService;"
      parameter {
        name: "serviceName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithTitle:image:alternateImage:handler:"
      return_type: "OI"
      parameter {
        name: "title"
        type: "LNSString;"
      }
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "alternateImage"
        type: "LNSImage;"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canPerformWithItems:"
      return_type: "Z"
      parameter {
        name: "items"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performWithItems:"
      return_type: "V"
      parameter {
        name: "items"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSSharingServiceDelegate>)"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "alternateImage"
    type: "LNSImage;"
  }
  property {
    name: "menuItemTitle"
    type: "LNSString;"
  }
  property {
    name: "recipients"
    type: "LNSArray;"
  }
  property {
    name: "subject"
    type: "LNSString;"
  }
  property {
    name: "messageBody"
    type: "LNSString;"
  }
  property {
    name: "permanentLink"
    type: "LNSURL;"
  }
  property {
    name: "accountName"
    type: "LNSString;"
  }
  property {
    name: "attachmentFileURLs"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSharingService.h"
}
class {
  name: "NSSharingServicePicker"
  base_class: "NSObject"
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSSharingServicePickerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSSharingServicePickerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithItems:"
      return_type: "OI"
      parameter {
        name: "items"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showRelativeToRect:ofView:preferredEdge:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "preferredEdge"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSSharingServicePickerDelegate>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSharingService.h"
}
class {
  name: "NSSliderCell"
  base_class: "NSActionCell"
  category: "NSSliderCell+NSTickMarkSupport"
  method {
    function {
      name: "prefersTrackingUntilMouseUp"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "minValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinValue:"
      return_type: "V"
      parameter {
        name: "minValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxValue:"
      return_type: "V"
      parameter {
        name: "maxValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "altIncrementValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAltIncrementValue:"
      return_type: "V"
      parameter {
        name: "altIncrementValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sliderType"
      return_type: "X(Enum.enum NSSliderType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSliderType:"
      return_type: "V"
      parameter {
        name: "sliderType"
        type: "X(Enum.enum NSSliderType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isVertical"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "trackRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "knobThickness"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "knobRectFlipped:"
      return_type: "RCGRect;"
      parameter {
        name: "flipped"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawKnob:"
      return_type: "V"
      parameter {
        name: "knobRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawKnob"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "barRectFlipped:"
      return_type: "RCGRect;"
      parameter {
        name: "flipped"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawBarInside:flipped:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "flipped"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleColor:"
      return_type: "V"
      parameter {
        name: "newColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleFont:"
      return_type: "V"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleCell:"
      return_type: "V"
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setKnobThickness:"
      return_type: "V"
      parameter {
        name: "aFloat"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "minValue"
    type: "D"
  }
  property {
    name: "maxValue"
    type: "D"
  }
  property {
    name: "altIncrementValue"
    type: "D"
  }
  property {
    name: "sliderType"
    type: "X(Enum.enum NSSliderType)"
  }
  property {
    name: "vertical"
    type: "I"
  }
  property {
    name: "trackRect"
    type: "RCGRect;"
  }
  property {
    name: "knobThickness"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSliderCell.h"
}
class {
  name: "NSSlider"
  base_class: "NSControl"
  protocol: "NSAccessibilitySlider"
  category: "NSSlider+NSTickMarkSupport"
  method {
    function {
      name: "sliderType"
      return_type: "X(Enum.enum NSSliderType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSliderType:"
      return_type: "V"
      parameter {
        name: "sliderType"
        type: "X(Enum.enum NSSliderType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinValue:"
      return_type: "V"
      parameter {
        name: "minValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxValue:"
      return_type: "V"
      parameter {
        name: "maxValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "altIncrementValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAltIncrementValue:"
      return_type: "V"
      parameter {
        name: "altIncrementValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "knobThickness"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "isVertical"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsFirstMouse:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleCell:"
      return_type: "V"
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleColor:"
      return_type: "V"
      parameter {
        name: "newColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleFont:"
      return_type: "V"
      parameter {
        name: "fontObj"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "titleFont"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setKnobThickness:"
      return_type: "V"
      parameter {
        name: "aFloat"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "backgroundImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  property {
    name: "sliderType"
    type: "X(Enum.enum NSSliderType)"
  }
  property {
    name: "minValue"
    type: "D"
  }
  property {
    name: "maxValue"
    type: "D"
  }
  property {
    name: "altIncrementValue"
    type: "D"
  }
  property {
    name: "knobThickness"
    type: "D"
  }
  property {
    name: "vertical"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSlider.h"
}
class {
  name: "NSStackView"
  base_class: "NSView"
  method {
    function {
      name: "stackViewWithViews:"
      return_type: "OI"
      parameter {
        name: "views"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSStackViewDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSStackViewDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orientation"
      return_type: "X(Enum.enum NSUserInterfaceLayoutOrientation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setOrientation:"
      return_type: "V"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSUserInterfaceLayoutOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignment"
      return_type: "X(Enum.enum NSLayoutAttribute)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlignment:"
      return_type: "V"
      parameter {
        name: "alignment"
        type: "X(Enum.enum NSLayoutAttribute)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "edgeInsets"
      return_type: "RNSEdgeInsets;"
    }
    class_method: false
  }
  method {
    function {
      name: "setEdgeInsets:"
      return_type: "V"
      parameter {
        name: "edgeInsets"
        type: "RNSEdgeInsets;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addView:inGravity:"
      return_type: "V"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
      parameter {
        name: "gravity"
        type: "X(Enum.enum NSStackViewGravity)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertView:atIndex:inGravity:"
      return_type: "V"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "gravity"
        type: "X(Enum.enum NSStackViewGravity)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeView:"
      return_type: "V"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewsInGravity:"
      return_type: "LNSArray;"
      parameter {
        name: "gravity"
        type: "X(Enum.enum NSStackViewGravity)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setViews:inGravity:"
      return_type: "V"
      parameter {
        name: "views"
        type: "LNSArray;"
      }
      parameter {
        name: "gravity"
        type: "X(Enum.enum NSStackViewGravity)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "views"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "detachedViews"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVisibilityPriority:forView:"
      return_type: "V"
      parameter {
        name: "priority"
        type: "F"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "visibilityPriorityForView:"
      return_type: "F"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spacing"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setSpacing:"
      return_type: "V"
      parameter {
        name: "spacing"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCustomSpacing:afterView:"
      return_type: "V"
      parameter {
        name: "spacing"
        type: "D"
      }
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "customSpacingAfterView:"
      return_type: "D"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasEqualSpacing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasEqualSpacing:"
      return_type: "V"
      parameter {
        name: "hasEqualSpacing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clippingResistancePriorityForOrientation:"
      return_type: "F"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setClippingResistancePriority:forOrientation:"
      return_type: "V"
      parameter {
        name: "clippingResistancePriority"
        type: "F"
      }
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "huggingPriorityForOrientation:"
      return_type: "F"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setHuggingPriority:forOrientation:"
      return_type: "V"
      parameter {
        name: "huggingPriority"
        type: "F"
      }
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSStackViewDelegate>)"
  }
  property {
    name: "orientation"
    type: "X(Enum.enum NSUserInterfaceLayoutOrientation)"
  }
  property {
    name: "alignment"
    type: "X(Enum.enum NSLayoutAttribute)"
  }
  property {
    name: "edgeInsets"
    type: "RNSEdgeInsets;"
  }
  property {
    name: "views"
    type: "LNSArray;"
  }
  property {
    name: "detachedViews"
    type: "LNSArray;"
  }
  property {
    name: "spacing"
    type: "D"
  }
  property {
    name: "hasEqualSpacing"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStackView.h"
}
class {
  name: "NSTextFieldCell"
  base_class: "NSActionCell"
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextColor:"
      return_type: "V"
      parameter {
        name: "textColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setUpFieldEditorAttributes:"
      return_type: "LNSText;"
      parameter {
        name: "textObj"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bezelStyle"
      return_type: "X(Enum.enum NSTextFieldBezelStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBezelStyle:"
      return_type: "V"
      parameter {
        name: "bezelStyle"
        type: "X(Enum.enum NSTextFieldBezelStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderString:"
      return_type: "V"
      parameter {
        name: "placeholderString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderAttributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderAttributedString:"
      return_type: "V"
      parameter {
        name: "placeholderAttributedString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setWantsNotificationForMarkedText:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedInputSourceLocales"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedInputSourceLocales:"
      return_type: "V"
      parameter {
        name: "allowedInputSourceLocales"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "textColor"
    type: "LNSColor;"
  }
  property {
    name: "bezelStyle"
    type: "X(Enum.enum NSTextFieldBezelStyle)"
  }
  property {
    name: "placeholderString"
    type: "LNSString;"
  }
  property {
    name: "placeholderAttributedString"
    type: "LNSAttributedString;"
  }
  property {
    name: "allowedInputSourceLocales"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextFieldCell.h"
}
class {
  name: "NSTextField"
  base_class: "NSControl"
  protocol: "NSUserInterfaceValidations"
  protocol: "NSAccessibilityNavigableStaticText"
  category: "NSTextField+NSTextFieldAttributedStringMethods"
  category: "NSTextField+NSDeprecated"
  method {
    function {
      name: "placeholderString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderString:"
      return_type: "V"
      parameter {
        name: "placeholderString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderAttributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderAttributedString:"
      return_type: "V"
      parameter {
        name: "placeholderAttributedString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextColor:"
      return_type: "V"
      parameter {
        name: "textColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBordered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBordered:"
      return_type: "V"
      parameter {
        name: "bordered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBezeled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBezeled:"
      return_type: "V"
      parameter {
        name: "bezeled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectable:"
      return_type: "V"
      parameter {
        name: "selectable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectText:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSTextFieldDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSTextFieldDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textShouldBeginEditing:"
      return_type: "Z"
      parameter {
        name: "textObject"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textShouldEndEditing:"
      return_type: "Z"
      parameter {
        name: "textObject"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidBeginEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidEndEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "bezelStyle"
      return_type: "X(Enum.enum NSTextFieldBezelStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBezelStyle:"
      return_type: "V"
      parameter {
        name: "bezelStyle"
        type: "X(Enum.enum NSTextFieldBezelStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredMaxLayoutWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredMaxLayoutWidth:"
      return_type: "V"
      parameter {
        name: "preferredMaxLayoutWidth"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "placeholderString"
    type: "LNSString;"
  }
  property {
    name: "placeholderAttributedString"
    type: "LNSAttributedString;"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "textColor"
    type: "LNSColor;"
  }
  property {
    name: "bordered"
    type: "Z"
  }
  property {
    name: "bezeled"
    type: "Z"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "selectable"
    type: "Z"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSTextFieldDelegate>)"
  }
  property {
    name: "acceptsFirstResponder"
    type: "Z"
  }
  property {
    name: "bezelStyle"
    type: "X(Enum.enum NSTextFieldBezelStyle)"
  }
  property {
    name: "preferredMaxLayoutWidth"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextField.h"
}
class {
  name: "NSGlyphGenerator"
  base_class: "NSObject"
  method {
    function {
      name: "generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:"
      return_type: "V"
      parameter {
        name: "glyphStorage"
        type: "X(Unexposed.id<NSGlyphStorage>)"
      }
      parameter {
        name: "nChars"
        type: "UI"
      }
      parameter {
        name: "glyphIndex"
        type: "*UI;"
      }
      parameter {
        name: "charIndex"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharedGlyphGenerator"
      return_type: "LNSGlyphGenerator;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGlyphGenerator.h"
}
class {
  name: "NSTextStorage"
  base_class: "NSMutableAttributedString"
  category: "NSTextStorage+Scripting"
  method {
    function {
      name: "addLayoutManager:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "LNSLayoutManager;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeLayoutManager:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "LNSLayoutManager;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManagers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "edited:range:changeInLength:"
      return_type: "V"
      parameter {
        name: "editedMask"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "delta"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "processEditing"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateAttributesInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ensureAttributesAreFixedInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fixesAttributesLazily"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "editedMask"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "editedRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "changeInLength"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSTextStorageDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSTextStorageDelegate>)"
      }
    }
    class_method: false
  }
  property {
    name: "layoutManagers"
    type: "LNSArray;"
  }
  property {
    name: "fixesAttributesLazily"
    type: "Z"
  }
  property {
    name: "editedMask"
    type: "UI"
  }
  property {
    name: "editedRange"
    type: "R_NSRange;"
  }
  property {
    name: "changeInLength"
    type: "I"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSTextStorageDelegate>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextStorage.h"
}
class {
  name: "NSLayoutManager"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSGlyphStorage"
  category: "NSLayoutManager+NSTextViewSupport"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "textStorage"
      return_type: "LNSTextStorage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextStorage:"
      return_type: "V"
      parameter {
        name: "textStorage"
        type: "LNSTextStorage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "replaceTextStorage:"
      return_type: "V"
      parameter {
        name: "newTextStorage"
        type: "LNSTextStorage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphGenerator"
      return_type: "LNSGlyphGenerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "setGlyphGenerator:"
      return_type: "V"
      parameter {
        name: "glyphGenerator"
        type: "LNSGlyphGenerator;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "typesetter"
      return_type: "LNSTypesetter;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTypesetter:"
      return_type: "V"
      parameter {
        name: "typesetter"
        type: "LNSTypesetter;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSLayoutManagerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSLayoutManagerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textContainers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "addTextContainer:"
      return_type: "V"
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertTextContainer:atIndex:"
      return_type: "V"
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTextContainerAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textContainerChangedGeometry:"
      return_type: "V"
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textContainerChangedTextView:"
      return_type: "V"
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundLayoutEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundLayoutEnabled:"
      return_type: "V"
      parameter {
        name: "backgroundLayoutEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesScreenFonts"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesScreenFonts:"
      return_type: "V"
      parameter {
        name: "usesScreenFonts"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsInvisibleCharacters"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsInvisibleCharacters:"
      return_type: "V"
      parameter {
        name: "showsInvisibleCharacters"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsControlCharacters"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsControlCharacters:"
      return_type: "V"
      parameter {
        name: "showsControlCharacters"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenationFactor"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setHyphenationFactor:"
      return_type: "V"
      parameter {
        name: "hyphenationFactor"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultAttachmentScaling"
      return_type: "X(Enum.enum NSImageScaling)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultAttachmentScaling:"
      return_type: "V"
      parameter {
        name: "defaultAttachmentScaling"
        type: "X(Enum.enum NSImageScaling)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "typesetterBehavior"
      return_type: "X(Enum.enum NSTypesetterBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTypesetterBehavior:"
      return_type: "V"
      parameter {
        name: "typesetterBehavior"
        type: "X(Enum.enum NSTypesetterBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutOptions"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsNonContiguousLayout"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsNonContiguousLayout:"
      return_type: "V"
      parameter {
        name: "allowsNonContiguousLayout"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasNonContiguousLayout"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "delta"
        type: "I"
      }
      parameter {
        name: "actualCharRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateLayoutForCharacterRange:actualCharacterRange:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualCharRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "actualCharRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateDisplayForCharacterRange:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateDisplayForGlyphRange:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textStorage:edited:range:changeInLength:invalidatedRange:"
      return_type: "V"
      parameter {
        name: "str"
        type: "LNSTextStorage;"
      }
      parameter {
        name: "editedMask"
        type: "X(Enum.enum NSTextStorageEditedOptions)"
      }
      parameter {
        name: "newCharRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "delta"
        type: "I"
      }
      parameter {
        name: "invalidatedCharRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ensureGlyphsForCharacterRange:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ensureGlyphsForGlyphRange:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ensureLayoutForCharacterRange:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ensureLayoutForGlyphRange:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ensureLayoutForTextContainer:"
      return_type: "V"
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ensureLayoutForBoundingRect:inTextContainer:"
      return_type: "V"
      parameter {
        name: "bounds"
        type: "RCGRect;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:"
      return_type: "V"
      parameter {
        name: "glyphs"
        type: "*cUI;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertGlyph:atGlyphIndex:characterIndex:"
      return_type: "V"
      parameter {
        name: "glyph"
        type: "UI"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceGlyphAtIndex:withGlyph:"
      return_type: "V"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "newGlyph"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteGlyphsInRange:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCharacterIndex:forGlyphAtIndex:"
      return_type: "V"
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setIntAttribute:value:forGlyphAtIndex:"
      return_type: "V"
      parameter {
        name: "attributeTag"
        type: "I"
      }
      parameter {
        name: "val"
        type: "I"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateGlyphsOnLayoutInvalidationForGlyphRange:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfGlyphs"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "glyphAtIndex:isValidIndex:"
      return_type: "UI"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "isValidIndex"
        type: "*Z;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphAtIndex:"
      return_type: "UI"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isValidGlyphIndex:"
      return_type: "Z"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "characterIndexForGlyphAtIndex:"
      return_type: "UI"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphIndexForCharacterAtIndex:"
      return_type: "UI"
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intAttribute:forGlyphAtIndex:"
      return_type: "I"
      parameter {
        name: "attributeTag"
        type: "I"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:"
      return_type: "UI"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "glyphBuffer"
        type: "*UI;"
      }
      parameter {
        name: "charIndexBuffer"
        type: "*UI;"
      }
      parameter {
        name: "inscribeBuffer"
        type: "*X(Enum.enum NSGlyphInscription);"
      }
      parameter {
        name: "elasticBuffer"
        type: "*Z;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:"
      return_type: "UI"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "glyphBuffer"
        type: "*UI;"
      }
      parameter {
        name: "charIndexBuffer"
        type: "*UI;"
      }
      parameter {
        name: "inscribeBuffer"
        type: "*X(Enum.enum NSGlyphInscription);"
      }
      parameter {
        name: "elasticBuffer"
        type: "*Z;"
      }
      parameter {
        name: "bidiLevelBuffer"
        type: "*UB;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getGlyphs:range:"
      return_type: "UI"
      parameter {
        name: "glyphArray"
        type: "*UI;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTextContainer:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLineFragmentRect:forGlyphRange:usedRect:"
      return_type: "V"
      parameter {
        name: "fragmentRect"
        type: "RCGRect;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "usedRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setExtraLineFragmentRect:usedRect:textContainer:"
      return_type: "V"
      parameter {
        name: "fragmentRect"
        type: "RCGRect;"
      }
      parameter {
        name: "usedRect"
        type: "RCGRect;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLocation:forStartOfGlyphRange:"
      return_type: "V"
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLocations:startingGlyphIndexes:count:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "locations"
        type: "*RCGPoint;;"
      }
      parameter {
        name: "glyphIndexes"
        type: "*UI;"
      }
      parameter {
        name: "count"
        type: "UI"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setNotShownAttribute:forGlyphAtIndex:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsOutsideLineFragment:forGlyphAtIndex:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAttachmentSize:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "attachmentSize"
        type: "RCGSize;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getFirstUnlaidCharacterIndex:glyphIndex:"
      return_type: "V"
      parameter {
        name: "charIndex"
        type: "*UI;"
      }
      parameter {
        name: "glyphIndex"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstUnlaidCharacterIndex"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "firstUnlaidGlyphIndex"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "textContainerForGlyphAtIndex:effectiveRange:"
      return_type: "LNSTextContainer;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveGlyphRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usedRectForTextContainer:"
      return_type: "RCGRect;"
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineFragmentRectForGlyphAtIndex:effectiveRange:"
      return_type: "RCGRect;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveGlyphRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:"
      return_type: "RCGRect;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveGlyphRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:"
      return_type: "RCGRect;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveGlyphRange"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:"
      return_type: "RCGRect;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveGlyphRange"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:"
      return_type: "LNSTextContainer;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveGlyphRange"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "extraLineFragmentRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "extraLineFragmentUsedRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "extraLineFragmentTextContainer"
      return_type: "LNSTextContainer;"
    }
    class_method: false
  }
  method {
    function {
      name: "locationForGlyphAtIndex:"
      return_type: "RCGPoint;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "notShownAttributeForGlyphAtIndex:"
      return_type: "Z"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsOutsideLineFragmentForGlyphAtIndex:"
      return_type: "Z"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attachmentSizeForGlyphAtIndex:"
      return_type: "RCGSize;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLayoutRect:forTextBlock:glyphRange:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "block"
        type: "LNSTextBlock;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBoundsRect:forTextBlock:glyphRange:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "block"
        type: "LNSTextBlock;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutRectForTextBlock:glyphRange:"
      return_type: "RCGRect;"
      parameter {
        name: "block"
        type: "LNSTextBlock;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundsRectForTextBlock:glyphRange:"
      return_type: "RCGRect;"
      parameter {
        name: "block"
        type: "LNSTextBlock;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutRectForTextBlock:atIndex:effectiveRange:"
      return_type: "RCGRect;"
      parameter {
        name: "block"
        type: "LNSTextBlock;"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveGlyphRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundsRectForTextBlock:atIndex:effectiveRange:"
      return_type: "RCGRect;"
      parameter {
        name: "block"
        type: "LNSTextBlock;"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveGlyphRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphRangeForCharacterRange:actualCharacterRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualCharRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "characterRangeForGlyphRange:actualGlyphRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualGlyphRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphRangeForTextContainer:"
      return_type: "R_NSRange;"
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfNominallySpacedGlyphsContainingIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:"
      return_type: "*RCGRect;;"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "selCharRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "rectCount"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:"
      return_type: "*RCGRect;;"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "selGlyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "rectCount"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundingRectForGlyphRange:inTextContainer:"
      return_type: "RCGRect;"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphRangeForBoundingRect:inTextContainer:"
      return_type: "R_NSRange;"
      parameter {
        name: "bounds"
        type: "RCGRect;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:"
      return_type: "R_NSRange;"
      parameter {
        name: "bounds"
        type: "RCGRect;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:"
      return_type: "UI"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "partialFraction"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphIndexForPoint:inTextContainer:"
      return_type: "UI"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fractionOfDistanceThroughGlyphForPoint:inTextContainer:"
      return_type: "D"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:"
      return_type: "UI"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "partialFraction"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:"
      return_type: "UI"
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "aFlag"
        type: "Z"
      }
      parameter {
        name: "dFlag"
        type: "Z"
      }
      parameter {
        name: "positions"
        type: "*D;"
      }
      parameter {
        name: "charIndexes"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "temporaryAttributesAtCharacterIndex:effectiveRange:"
      return_type: "LNSDictionary;"
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveCharRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTemporaryAttributes:forCharacterRange:"
      return_type: "V"
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addTemporaryAttributes:forCharacterRange:"
      return_type: "V"
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTemporaryAttribute:forCharacterRange:"
      return_type: "V"
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "temporaryAttribute:atCharacterIndex:effectiveRange:"
      return_type: "OI"
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:"
      return_type: "OI"
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "rangeLimit"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:"
      return_type: "LNSDictionary;"
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "rangeLimit"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addTemporaryAttribute:value:forCharacterRange:"
      return_type: "V"
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substituteFontForFont:"
      return_type: "LNSFont;"
      parameter {
        name: "originalFont"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultLineHeightForFont:"
      return_type: "D"
      parameter {
        name: "theFont"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultBaselineOffsetForFont:"
      return_type: "D"
      parameter {
        name: "theFont"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesFontLeading"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesFontLeading:"
      return_type: "V"
      parameter {
        name: "usesFontLeading"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "textStorage"
    type: "LNSTextStorage;"
  }
  property {
    name: "attributedString"
    type: "LNSAttributedString;"
  }
  property {
    name: "glyphGenerator"
    type: "LNSGlyphGenerator;"
  }
  property {
    name: "typesetter"
    type: "LNSTypesetter;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSLayoutManagerDelegate>)"
  }
  property {
    name: "textContainers"
    type: "LNSArray;"
  }
  property {
    name: "backgroundLayoutEnabled"
    type: "Z"
  }
  property {
    name: "usesScreenFonts"
    type: "Z"
  }
  property {
    name: "showsInvisibleCharacters"
    type: "Z"
  }
  property {
    name: "showsControlCharacters"
    type: "Z"
  }
  property {
    name: "hyphenationFactor"
    type: "F"
  }
  property {
    name: "defaultAttachmentScaling"
    type: "X(Enum.enum NSImageScaling)"
  }
  property {
    name: "typesetterBehavior"
    type: "X(Enum.enum NSTypesetterBehavior)"
  }
  property {
    name: "layoutOptions"
    type: "UI"
  }
  property {
    name: "allowsNonContiguousLayout"
    type: "Z"
  }
  property {
    name: "hasNonContiguousLayout"
    type: "Z"
  }
  property {
    name: "numberOfGlyphs"
    type: "UI"
  }
  property {
    name: "firstUnlaidCharacterIndex"
    type: "UI"
  }
  property {
    name: "firstUnlaidGlyphIndex"
    type: "UI"
  }
  property {
    name: "extraLineFragmentRect"
    type: "RCGRect;"
  }
  property {
    name: "extraLineFragmentUsedRect"
    type: "RCGRect;"
  }
  property {
    name: "extraLineFragmentTextContainer"
    type: "LNSTextContainer;"
  }
  property {
    name: "usesFontLeading"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutManager.h"
}
class {
  name: "NSTextContainer"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSTextLayoutOrientationProvider"
  method {
    function {
      name: "initWithContainerSize:"
      return_type: "OI"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManager"
      return_type: "LNSLayoutManager;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLayoutManager:"
      return_type: "V"
      parameter {
        name: "layoutManager"
        type: "LNSLayoutManager;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceLayoutManager:"
      return_type: "V"
      parameter {
        name: "newLayoutManager"
        type: "LNSLayoutManager;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView"
      return_type: "LNSTextView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextView:"
      return_type: "V"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "widthTracksTextView"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setWidthTracksTextView:"
      return_type: "V"
      parameter {
        name: "widthTracksTextView"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "heightTracksTextView"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHeightTracksTextView:"
      return_type: "V"
      parameter {
        name: "heightTracksTextView"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containerSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContainerSize:"
      return_type: "V"
      parameter {
        name: "containerSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineFragmentPadding"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineFragmentPadding:"
      return_type: "V"
      parameter {
        name: "lineFragmentPadding"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:"
      return_type: "RCGRect;"
      parameter {
        name: "proposedRect"
        type: "RCGRect;"
      }
      parameter {
        name: "sweepDirection"
        type: "X(Enum.enum NSLineSweepDirection)"
      }
      parameter {
        name: "movementDirection"
        type: "X(Enum.enum NSLineMovementDirection)"
      }
      parameter {
        name: "remainingRect"
        type: "*RCGRect;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSimpleRectangularTextContainer"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "containsPoint:"
      return_type: "Z"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  property {
    name: "layoutManager"
    type: "LNSLayoutManager;"
  }
  property {
    name: "textView"
    type: "LNSTextView;"
  }
  property {
    name: "widthTracksTextView"
    type: "Z"
  }
  property {
    name: "heightTracksTextView"
    type: "Z"
  }
  property {
    name: "containerSize"
    type: "RCGSize;"
  }
  property {
    name: "lineFragmentPadding"
    type: "D"
  }
  property {
    name: "simpleRectangularTextContainer"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextContainer.h"
}
class {
  name: "NSTokenFieldCell"
  base_class: "NSTextFieldCell"
  method {
    function {
      name: "tokenStyle"
      return_type: "X(Enum.enum NSTokenStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTokenStyle:"
      return_type: "V"
      parameter {
        name: "tokenStyle"
        type: "X(Enum.enum NSTokenStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completionDelay"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompletionDelay:"
      return_type: "V"
      parameter {
        name: "completionDelay"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultCompletionDelay"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "tokenizingCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTokenizingCharacterSet:"
      return_type: "V"
      parameter {
        name: "tokenizingCharacterSet"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultTokenizingCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSTokenFieldCellDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSTokenFieldCellDelegate>)"
      }
    }
    class_method: false
  }
  property {
    name: "tokenStyle"
    type: "X(Enum.enum NSTokenStyle)"
  }
  property {
    name: "completionDelay"
    type: "D"
  }
  property {
    name: "tokenizingCharacterSet"
    type: "LNSCharacterSet;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSTokenFieldCellDelegate>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTokenFieldCell.h"
}
class {
  name: "NSTokenField"
  base_class: "NSTextField"
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "X(Unexposed.id<NSTokenFieldDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSTokenFieldDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "tokenStyle"
      return_type: "X(Enum.enum NSTokenStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTokenStyle:"
      return_type: "V"
      parameter {
        name: "tokenStyle"
        type: "X(Enum.enum NSTokenStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completionDelay"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompletionDelay:"
      return_type: "V"
      parameter {
        name: "completionDelay"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultCompletionDelay"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "tokenizingCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTokenizingCharacterSet:"
      return_type: "V"
      parameter {
        name: "tokenizingCharacterSet"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultTokenizingCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  property {
    name: "tokenStyle"
    type: "X(Enum.enum NSTokenStyle)"
  }
  property {
    name: "completionDelay"
    type: "D"
  }
  property {
    name: "tokenizingCharacterSet"
    type: "LNSCharacterSet;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTokenField.h"
}
class {
  name: "NSTrackingArea"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithRect:options:owner:userInfo:"
      return_type: "OI"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSTrackingAreaOptions)"
      }
      parameter {
        name: "owner"
        type: "OI"
      }
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "options"
      return_type: "X(Enum.enum NSTrackingAreaOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "owner"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  property {
    name: "rect"
    type: "RCGRect;"
  }
  property {
    name: "options"
    type: "X(Enum.enum NSTrackingAreaOptions)"
  }
  property {
    name: "owner"
    type: "OI"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTrackingArea.h"
}
class {
  name: "NSWindowController"
  base_class: "NSResponder"
  protocol: "NSCoding"
  protocol: "NSSeguePerforming"
  category: "NSWindowController+NSWindowControllerStoryboardingMethods"
  category: "NSWindowController+NSWindowControllerDismissing"
  method {
    function {
      name: "initWithWindow:"
      return_type: "OI"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithWindowNibName:"
      return_type: "OI"
      parameter {
        name: "windowNibName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithWindowNibName:owner:"
      return_type: "OI"
      parameter {
        name: "windowNibName"
        type: "LNSString;"
      }
      parameter {
        name: "owner"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithWindowNibPath:owner:"
      return_type: "OI"
      parameter {
        name: "windowNibPath"
        type: "LNSString;"
      }
      parameter {
        name: "owner"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowNibName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "windowNibPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "owner"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "windowFrameAutosaveName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setWindowFrameAutosaveName:"
      return_type: "V"
      parameter {
        name: "windowFrameAutosaveName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldCascadeWindows"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldCascadeWindows:"
      return_type: "V"
      parameter {
        name: "shouldCascadeWindows"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "document"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDocument:"
      return_type: "V"
      parameter {
        name: "document"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDocumentEdited:"
      return_type: "V"
      parameter {
        name: "dirtyFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldCloseDocument"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldCloseDocument:"
      return_type: "V"
      parameter {
        name: "shouldCloseDocument"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "synchronizeWindowTitleWithDocumentName"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "windowTitleForDocumentDisplayName:"
      return_type: "LNSString;"
      parameter {
        name: "displayName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentViewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentViewController:"
      return_type: "V"
      parameter {
        name: "contentViewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "setWindow:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isWindowLoaded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillLoad"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidLoad"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "loadWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "close"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "showWindow:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "windowNibName"
    type: "LNSString;"
  }
  property {
    name: "windowNibPath"
    type: "LNSString;"
  }
  property {
    name: "owner"
    type: "OI"
  }
  property {
    name: "windowFrameAutosaveName"
    type: "LNSString;"
  }
  property {
    name: "shouldCascadeWindows"
    type: "Z"
  }
  property {
    name: "document"
    type: "OI"
  }
  property {
    name: "shouldCloseDocument"
    type: "Z"
  }
  property {
    name: "contentViewController"
    type: "LNSViewController;"
  }
  property {
    name: "window"
    type: "LNSWindow;"
  }
  property {
    name: "windowLoaded"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowController.h"
}
class {
  name: "NSComboBox"
  base_class: "NSTextField"
  method {
    function {
      name: "hasVerticalScroller"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasVerticalScroller:"
      return_type: "V"
      parameter {
        name: "hasVerticalScroller"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intercellSpacing"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIntercellSpacing:"
      return_type: "V"
      parameter {
        name: "intercellSpacing"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setItemHeight:"
      return_type: "V"
      parameter {
        name: "itemHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfVisibleItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfVisibleItems:"
      return_type: "V"
      parameter {
        name: "numberOfVisibleItems"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isButtonBordered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setButtonBordered:"
      return_type: "V"
      parameter {
        name: "buttonBordered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadData"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "noteNumberOfItemsChanged"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "usesDataSource"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesDataSource:"
      return_type: "V"
      parameter {
        name: "usesDataSource"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollItemAtIndexToTop:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollItemAtIndexToVisible:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deselectItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfSelectedItem"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "completes"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompletes:"
      return_type: "V"
      parameter {
        name: "completes"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSComboBoxDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "X(Unexposed.id<NSComboBoxDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataSource"
      return_type: "X(Unexposed.id<NSComboBoxDataSource>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDataSource:"
      return_type: "V"
      parameter {
        name: "dataSource"
        type: "X(Unexposed.id<NSComboBoxDataSource>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemWithObjectValue:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemsWithObjectValues:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertItemWithObjectValue:atIndex:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemWithObjectValue:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllItems"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemWithObjectValue:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemObjectValueAtIndex:"
      return_type: "OI"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectValueOfSelectedItem"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithObjectValue:"
      return_type: "I"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectValues"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "hasVerticalScroller"
    type: "Z"
  }
  property {
    name: "intercellSpacing"
    type: "RCGSize;"
  }
  property {
    name: "itemHeight"
    type: "D"
  }
  property {
    name: "numberOfVisibleItems"
    type: "I"
  }
  property {
    name: "buttonBordered"
    type: "Z"
  }
  property {
    name: "usesDataSource"
    type: "Z"
  }
  property {
    name: "indexOfSelectedItem"
    type: "I"
  }
  property {
    name: "numberOfItems"
    type: "I"
  }
  property {
    name: "completes"
    type: "Z"
  }
  property {
    name: "dataSource"
    type: "X(Unexposed.id<NSComboBoxDataSource>)"
  }
  property {
    name: "objectValueOfSelectedItem"
    type: "OI"
  }
  property {
    name: "objectValues"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSComboBox.h"
}
class {
  name: "NSComboBoxCell"
  base_class: "NSTextFieldCell"
  method {
    function {
      name: "hasVerticalScroller"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasVerticalScroller:"
      return_type: "V"
      parameter {
        name: "hasVerticalScroller"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intercellSpacing"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIntercellSpacing:"
      return_type: "V"
      parameter {
        name: "intercellSpacing"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setItemHeight:"
      return_type: "V"
      parameter {
        name: "itemHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfVisibleItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfVisibleItems:"
      return_type: "V"
      parameter {
        name: "numberOfVisibleItems"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isButtonBordered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setButtonBordered:"
      return_type: "V"
      parameter {
        name: "buttonBordered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadData"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "noteNumberOfItemsChanged"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "usesDataSource"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesDataSource:"
      return_type: "V"
      parameter {
        name: "usesDataSource"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollItemAtIndexToTop:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollItemAtIndexToVisible:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deselectItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfSelectedItem"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "completes"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompletes:"
      return_type: "V"
      parameter {
        name: "completes"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completedString:"
      return_type: "LNSString;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataSource"
      return_type: "X(Unexposed.id<NSComboBoxCellDataSource>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDataSource:"
      return_type: "V"
      parameter {
        name: "dataSource"
        type: "X(Unexposed.id<NSComboBoxCellDataSource>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemWithObjectValue:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemsWithObjectValues:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertItemWithObjectValue:atIndex:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemWithObjectValue:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllItems"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemWithObjectValue:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemObjectValueAtIndex:"
      return_type: "OI"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectValueOfSelectedItem"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithObjectValue:"
      return_type: "I"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectValues"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "hasVerticalScroller"
    type: "Z"
  }
  property {
    name: "intercellSpacing"
    type: "RCGSize;"
  }
  property {
    name: "itemHeight"
    type: "D"
  }
  property {
    name: "numberOfVisibleItems"
    type: "I"
  }
  property {
    name: "buttonBordered"
    type: "Z"
  }
  property {
    name: "usesDataSource"
    type: "Z"
  }
  property {
    name: "indexOfSelectedItem"
    type: "I"
  }
  property {
    name: "numberOfItems"
    type: "I"
  }
  property {
    name: "completes"
    type: "Z"
  }
  property {
    name: "dataSource"
    type: "X(Unexposed.id<NSComboBoxCellDataSource>)"
  }
  property {
    name: "objectValueOfSelectedItem"
    type: "OI"
  }
  property {
    name: "objectValues"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSComboBoxCell.h"
}
class {
  name: "NSInputManager"
  base_class: "NSObject"
  protocol: "NSTextInput"
  method {
    function {
      name: "currentInputManager"
      return_type: "LNSInputManager;"
    }
    class_method: true
  }
  method {
    function {
      name: "cycleToNextInputLanguage:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "cycleToNextInputServerInLanguage:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithName:host:"
      return_type: "LNSInputManager;"
      parameter {
        name: "inputServerName"
        type: "LNSString;"
      }
      parameter {
        name: "hostName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedInputManagerName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "markedTextAbandoned:"
      return_type: "V"
      parameter {
        name: "cli"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "markedTextSelectionChanged:client:"
      return_type: "V"
      parameter {
        name: "newSel"
        type: "R_NSRange;"
      }
      parameter {
        name: "cli"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsToInterpretAllKeystrokes"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "language"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "server"
      return_type: "LNSInputServer;"
    }
    class_method: false
  }
  method {
    function {
      name: "wantsToHandleMouseEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "handleMouseEvent:"
      return_type: "Z"
      parameter {
        name: "theMouseEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsToDelayTextChangeNotifications"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSInputManager.h"
}
class {
  name: "NSTextAttachmentCell"
  base_class: "NSCell"
  protocol: "NSTextAttachmentCell"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextAttachment.h"
}
class {
  name: "NSTextAttachment"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithFileWrapper:"
      return_type: "OI"
      parameter {
        name: "fileWrapper"
        type: "LNSFileWrapper;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileWrapper"
      return_type: "LNSFileWrapper;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFileWrapper:"
      return_type: "V"
      parameter {
        name: "fileWrapper"
        type: "LNSFileWrapper;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attachmentCell"
      return_type: "X(Unexposed.id<NSTextAttachmentCell>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttachmentCell:"
      return_type: "V"
      parameter {
        name: "attachmentCell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
    }
    class_method: false
  }
  property {
    name: "fileWrapper"
    type: "LNSFileWrapper;"
  }
  property {
    name: "attachmentCell"
    type: "X(Unexposed.id<NSTextAttachmentCell>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextAttachment.h"
}
class {
  name: "NSTextView"
  base_class: "NSText"
  protocol: "NSUserInterfaceValidations"
  protocol: "NSTextInputClient"
  protocol: "NSTextLayoutOrientationProvider"
  protocol: "NSDraggingSource"
  protocol: "NSTextInput"
  protocol: "NSAccessibilityNavigableStaticText"
  category: "NSTextView+NSCompletion"
  category: "NSTextView+NSPasteboard"
  category: "NSTextView+NSDragging"
  category: "NSTextView+NSSharing"
  category: "NSTextView+NSTextChecking"
  category: "NSTextView+NSQuickLookPreview"
  category: "NSTextView+NSTextView_SharingService"
  category: "NSTextView+NSDeprecated"
  method {
    function {
      name: "initWithFrame:textContainer:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "container"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFrame:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textContainer"
      return_type: "LNSTextContainer;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextContainer:"
      return_type: "V"
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceTextContainer:"
      return_type: "V"
      parameter {
        name: "newContainer"
        type: "LNSTextContainer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textContainerInset"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextContainerInset:"
      return_type: "V"
      parameter {
        name: "textContainerInset"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textContainerOrigin"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateTextContainerOrigin"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManager"
      return_type: "LNSLayoutManager;"
    }
    class_method: false
  }
  method {
    function {
      name: "textStorage"
      return_type: "LNSTextStorage;"
    }
    class_method: false
  }
  method {
    function {
      name: "insertText:"
      return_type: "V"
      parameter {
        name: "insertString"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setConstrainedFrameSize:"
      return_type: "V"
      parameter {
        name: "desiredSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAlignment:range:"
      return_type: "V"
      parameter {
        name: "alignment"
        type: "X(Enum.enum NSTextAlignment)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBaseWritingDirection:range:"
      return_type: "V"
      parameter {
        name: "writingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "turnOffKerning:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tightenKerning:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loosenKerning:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "useStandardKerning:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "turnOffLigatures:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "useStandardLigatures:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "useAllLigatures:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "raiseBaseline:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lowerBaseline:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleTraditionalCharacterShape:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outline:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performFindPanelAction:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignJustified:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeColor:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeAttributes:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeDocumentBackgroundColor:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontSpacingPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontLinkPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontListPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontTablePanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:didMoveMarker:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:didRemoveMarker:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:didAddMarker:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:shouldMoveMarker:"
      return_type: "Z"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:shouldAddMarker:"
      return_type: "Z"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:willMoveMarker:toLocation:"
      return_type: "D"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
      parameter {
        name: "location"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:shouldRemoveMarker:"
      return_type: "Z"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:willAddMarker:atLocation:"
      return_type: "D"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
      parameter {
        name: "location"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:handleMouseDown:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsDisplayInRect:avoidAdditionalLayout:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldDrawInsertionPoint"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "drawInsertionPointInRect:color:turnedOn:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "color"
        type: "LNSColor;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawViewBackgroundInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateRuler"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "updateFontPanel"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "updateDragTypeRegistration"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "selectionRangeForProposedRange:granularity:"
      return_type: "R_NSRange;"
      parameter {
        name: "proposedCharRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "granularity"
        type: "X(Enum.enum NSSelectionGranularity)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clickedOnLink:atIndex:"
      return_type: "V"
      parameter {
        name: "link"
        type: "OI"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startSpeaking:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stopSpeaking:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLayoutOrientation:"
      return_type: "V"
      parameter {
        name: "theOrientation"
        type: "X(Enum.enum NSTextLayoutOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeLayoutOrientation:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "characterIndexForInsertionAtPoint:"
      return_type: "UI"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  property {
    name: "textContainer"
    type: "LNSTextContainer;"
  }
  property {
    name: "textContainerInset"
    type: "RCGSize;"
  }
  property {
    name: "textContainerOrigin"
    type: "RCGPoint;"
  }
  property {
    name: "layoutManager"
    type: "LNSLayoutManager;"
  }
  property {
    name: "textStorage"
    type: "LNSTextStorage;"
  }
  property {
    name: "shouldDrawInsertionPoint"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
class {
  name: "NSTableView"
  base_class: "NSControl"
  protocol: "NSUserInterfaceValidations"
  protocol: "NSTextViewDelegate"
  protocol: "NSDraggingSource"
  protocol: "NSAccessibilityTable"
  category: "NSTableView+NSDeprecated"
  method {
    function {
      name: "initWithFrame:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDataSource:"
      return_type: "V"
      parameter {
        name: "aSource"
        type: "X(Unexposed.id<NSTableViewDataSource>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataSource"
      return_type: "X(Unexposed.id<NSTableViewDataSource>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSTableViewDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSTableViewDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "headerView"
      return_type: "LNSTableHeaderView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHeaderView:"
      return_type: "V"
      parameter {
        name: "headerView"
        type: "LNSTableHeaderView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cornerView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCornerView:"
      return_type: "V"
      parameter {
        name: "cornerView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsColumnReordering"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsColumnReordering:"
      return_type: "V"
      parameter {
        name: "allowsColumnReordering"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsColumnResizing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsColumnResizing:"
      return_type: "V"
      parameter {
        name: "allowsColumnResizing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnAutoresizingStyle"
      return_type: "X(Enum.enum NSTableViewColumnAutoresizingStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setColumnAutoresizingStyle:"
      return_type: "V"
      parameter {
        name: "columnAutoresizingStyle"
        type: "X(Enum.enum NSTableViewColumnAutoresizingStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "gridStyleMask"
      return_type: "X(Enum.enum NSTableViewGridLineStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setGridStyleMask:"
      return_type: "V"
      parameter {
        name: "gridStyleMask"
        type: "X(Enum.enum NSTableViewGridLineStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intercellSpacing"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIntercellSpacing:"
      return_type: "V"
      parameter {
        name: "intercellSpacing"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesAlternatingRowBackgroundColors"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesAlternatingRowBackgroundColors:"
      return_type: "V"
      parameter {
        name: "usesAlternatingRowBackgroundColors"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "gridColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setGridColor:"
      return_type: "V"
      parameter {
        name: "gridColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowSizeStyle"
      return_type: "X(Enum.enum NSTableViewRowSizeStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setRowSizeStyle:"
      return_type: "V"
      parameter {
        name: "rowSizeStyle"
        type: "X(Enum.enum NSTableViewRowSizeStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "effectiveRowSizeStyle"
      return_type: "X(Enum.enum NSTableViewRowSizeStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "rowHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRowHeight:"
      return_type: "V"
      parameter {
        name: "rowHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "noteHeightOfRowsWithIndexesChanged:"
      return_type: "V"
      parameter {
        name: "indexSet"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableColumns"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfColumns"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfRows"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "addTableColumn:"
      return_type: "V"
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTableColumn:"
      return_type: "V"
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveColumn:toColumn:"
      return_type: "V"
      parameter {
        name: "oldIndex"
        type: "I"
      }
      parameter {
        name: "newIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnWithIdentifier:"
      return_type: "I"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableColumnWithIdentifier:"
      return_type: "LNSTableColumn;"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tile"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "sizeToFit"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "sizeLastColumnToFit"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "scrollRowToVisible:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollColumnToVisible:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadData"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "noteNumberOfRowsChanged"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "reloadDataForRowIndexes:columnIndexes:"
      return_type: "V"
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "columnIndexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "editedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "editedRow"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "clickedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "clickedRow"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "doubleAction"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleAction:"
      return_type: "V"
      parameter {
        name: "doubleAction"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSortDescriptors:"
      return_type: "V"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setIndicatorImage:inTableColumn:"
      return_type: "V"
      parameter {
        name: "anImage"
        type: "LNSImage;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indicatorImageInTableColumn:"
      return_type: "LNSImage;"
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlightedTableColumn"
      return_type: "LNSTableColumn;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHighlightedTableColumn:"
      return_type: "V"
      parameter {
        name: "highlightedTableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "verticalMotionCanBeginDrag"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticalMotionCanBeginDrag:"
      return_type: "V"
      parameter {
        name: "verticalMotionCanBeginDrag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canDragRowsWithIndexes:atPoint:"
      return_type: "Z"
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "mouseDownPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dragImageForRowsWithIndexes:tableColumns:event:offset:"
      return_type: "LNSImage;"
      parameter {
        name: "dragRows"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "tableColumns"
        type: "LNSArray;"
      }
      parameter {
        name: "dragEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "dragImageOffset"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingSourceOperationMask:forLocal:"
      return_type: "V"
      parameter {
        name: "mask"
        type: "X(Enum.enum NSDragOperation)"
      }
      parameter {
        name: "isLocal"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDropRow:dropOperation:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "dropOperation"
        type: "X(Enum.enum NSTableViewDropOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsMultipleSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsMultipleSelection:"
      return_type: "V"
      parameter {
        name: "allowsMultipleSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsEmptySelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsEmptySelection:"
      return_type: "V"
      parameter {
        name: "allowsEmptySelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsColumnSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsColumnSelection:"
      return_type: "V"
      parameter {
        name: "allowsColumnSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectAll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deselectAll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectColumnIndexes:byExtendingSelection:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "extend"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectRowIndexes:byExtendingSelection:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "extend"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedColumnIndexes"
      return_type: "LNSIndexSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRowIndexes"
      return_type: "LNSIndexSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "deselectColumn:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deselectRow:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRow"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "isColumnSelected:"
      return_type: "Z"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isRowSelected:"
      return_type: "Z"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfSelectedColumns"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfSelectedRows"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsTypeSelect"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsTypeSelect:"
      return_type: "V"
      parameter {
        name: "allowsTypeSelect"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionHighlightStyle"
      return_type: "X(Enum.enum NSTableViewSelectionHighlightStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionHighlightStyle:"
      return_type: "V"
      parameter {
        name: "selectionHighlightStyle"
        type: "X(Enum.enum NSTableViewSelectionHighlightStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingDestinationFeedbackStyle"
      return_type: "X(Enum.enum NSTableViewDraggingDestinationFeedbackStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingDestinationFeedbackStyle:"
      return_type: "V"
      parameter {
        name: "draggingDestinationFeedbackStyle"
        type: "X(Enum.enum NSTableViewDraggingDestinationFeedbackStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectOfColumn:"
      return_type: "RCGRect;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectOfRow:"
      return_type: "RCGRect;"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnIndexesInRect:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowsInRect:"
      return_type: "R_NSRange;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnAtPoint:"
      return_type: "I"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowAtPoint:"
      return_type: "I"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameOfCellAtColumn:row:"
      return_type: "RCGRect;"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosaveName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutosaveName:"
      return_type: "V"
      parameter {
        name: "autosaveName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosaveTableColumns"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutosaveTableColumns:"
      return_type: "V"
      parameter {
        name: "autosaveTableColumns"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "editColumn:row:withEvent:select:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "select"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawRow:clipRect:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "clipRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlightSelectionInClipRect:"
      return_type: "V"
      parameter {
        name: "clipRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawGridInClipRect:"
      return_type: "V"
      parameter {
        name: "clipRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawBackgroundInClipRect:"
      return_type: "V"
      parameter {
        name: "clipRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewAtColumn:row:makeIfNecessary:"
      return_type: "OI"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "makeIfNecessary"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowViewAtRow:makeIfNecessary:"
      return_type: "OI"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "makeIfNecessary"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowForView:"
      return_type: "I"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnForView:"
      return_type: "I"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeViewWithIdentifier:owner:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "owner"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateAvailableRowViewsUsingBlock:"
      return_type: "V"
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSTableRowView *, NSInteger))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "floatsGroupRows"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setFloatsGroupRows:"
      return_type: "V"
      parameter {
        name: "floatsGroupRows"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginUpdates"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "endUpdates"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "insertRowsAtIndexes:withAnimation:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "animationOptions"
        type: "X(Enum.enum NSTableViewAnimationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeRowsAtIndexes:withAnimation:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "animationOptions"
        type: "X(Enum.enum NSTableViewAnimationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveRowAtIndex:toIndex:"
      return_type: "V"
      parameter {
        name: "oldIndex"
        type: "I"
      }
      parameter {
        name: "newIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerNib:forIdentifier:"
      return_type: "V"
      parameter {
        name: "nib"
        type: "LNSNib;"
      }
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registeredNibsByIdentifier"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "didAddRowView:forRow:"
      return_type: "V"
      parameter {
        name: "rowView"
        type: "LNSTableRowView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "didRemoveRowView:forRow:"
      return_type: "V"
      parameter {
        name: "rowView"
        type: "LNSTableRowView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesStaticContents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesStaticContents:"
      return_type: "V"
      parameter {
        name: "usesStaticContents"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "headerView"
    type: "LNSTableHeaderView;"
  }
  property {
    name: "cornerView"
    type: "LNSView;"
  }
  property {
    name: "allowsColumnReordering"
    type: "Z"
  }
  property {
    name: "allowsColumnResizing"
    type: "Z"
  }
  property {
    name: "columnAutoresizingStyle"
    type: "X(Enum.enum NSTableViewColumnAutoresizingStyle)"
  }
  property {
    name: "gridStyleMask"
    type: "X(Enum.enum NSTableViewGridLineStyle)"
  }
  property {
    name: "intercellSpacing"
    type: "RCGSize;"
  }
  property {
    name: "usesAlternatingRowBackgroundColors"
    type: "Z"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "gridColor"
    type: "LNSColor;"
  }
  property {
    name: "rowSizeStyle"
    type: "X(Enum.enum NSTableViewRowSizeStyle)"
  }
  property {
    name: "effectiveRowSizeStyle"
    type: "X(Enum.enum NSTableViewRowSizeStyle)"
  }
  property {
    name: "rowHeight"
    type: "D"
  }
  property {
    name: "tableColumns"
    type: "LNSArray;"
  }
  property {
    name: "numberOfColumns"
    type: "I"
  }
  property {
    name: "numberOfRows"
    type: "I"
  }
  property {
    name: "editedColumn"
    type: "I"
  }
  property {
    name: "editedRow"
    type: "I"
  }
  property {
    name: "clickedColumn"
    type: "I"
  }
  property {
    name: "clickedRow"
    type: "I"
  }
  property {
    name: "doubleAction"
    type: "OS"
  }
  property {
    name: "sortDescriptors"
    type: "LNSArray;"
  }
  property {
    name: "highlightedTableColumn"
    type: "LNSTableColumn;"
  }
  property {
    name: "verticalMotionCanBeginDrag"
    type: "Z"
  }
  property {
    name: "allowsMultipleSelection"
    type: "Z"
  }
  property {
    name: "allowsEmptySelection"
    type: "Z"
  }
  property {
    name: "allowsColumnSelection"
    type: "Z"
  }
  property {
    name: "selectedColumnIndexes"
    type: "LNSIndexSet;"
  }
  property {
    name: "selectedRowIndexes"
    type: "LNSIndexSet;"
  }
  property {
    name: "selectedColumn"
    type: "I"
  }
  property {
    name: "selectedRow"
    type: "I"
  }
  property {
    name: "numberOfSelectedColumns"
    type: "I"
  }
  property {
    name: "numberOfSelectedRows"
    type: "I"
  }
  property {
    name: "allowsTypeSelect"
    type: "Z"
  }
  property {
    name: "selectionHighlightStyle"
    type: "X(Enum.enum NSTableViewSelectionHighlightStyle)"
  }
  property {
    name: "draggingDestinationFeedbackStyle"
    type: "X(Enum.enum NSTableViewDraggingDestinationFeedbackStyle)"
  }
  property {
    name: "autosaveName"
    type: "LNSString;"
  }
  property {
    name: "autosaveTableColumns"
    type: "Z"
  }
  property {
    name: "floatsGroupRows"
    type: "Z"
  }
  property {
    name: "registeredNibsByIdentifier"
    type: "LNSDictionary;"
  }
  property {
    name: "usesStaticContents"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableView.h"
}
class {
  name: "NSTableCellView"
  base_class: "NSView"
  method {
    function {
      name: "objectValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectValue:"
      return_type: "V"
      parameter {
        name: "objectValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textField"
      return_type: "LNSTextField;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextField:"
      return_type: "V"
      parameter {
        name: "textField"
        type: "LNSTextField;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageView"
      return_type: "LNSImageView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageView:"
      return_type: "V"
      parameter {
        name: "imageView"
        type: "LNSImageView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundStyle"
      return_type: "X(Enum.enum NSBackgroundStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundStyle:"
      return_type: "V"
      parameter {
        name: "backgroundStyle"
        type: "X(Enum.enum NSBackgroundStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowSizeStyle"
      return_type: "X(Enum.enum NSTableViewRowSizeStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setRowSizeStyle:"
      return_type: "V"
      parameter {
        name: "rowSizeStyle"
        type: "X(Enum.enum NSTableViewRowSizeStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingImageComponents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "objectValue"
    type: "OI"
  }
  property {
    name: "textField"
    type: "LNSTextField;"
  }
  property {
    name: "imageView"
    type: "LNSImageView;"
  }
  property {
    name: "backgroundStyle"
    type: "X(Enum.enum NSBackgroundStyle)"
  }
  property {
    name: "rowSizeStyle"
    type: "X(Enum.enum NSTableViewRowSizeStyle)"
  }
  property {
    name: "draggingImageComponents"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableCellView.h"
}
class {
  name: "NSTableColumn"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSUserInterfaceItemIdentification"
  category: "NSTableColumn+NSDeprecated"
  method {
    function {
      name: "initWithIdentifier:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIdentifier:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView"
      return_type: "LNSTableView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTableView:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "width"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setWidth:"
      return_type: "V"
      parameter {
        name: "width"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinWidth:"
      return_type: "V"
      parameter {
        name: "minWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxWidth:"
      return_type: "V"
      parameter {
        name: "maxWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "headerCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setHeaderCell:"
      return_type: "V"
      parameter {
        name: "headerCell"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeToFit"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "sortDescriptorPrototype"
      return_type: "LNSSortDescriptor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSortDescriptorPrototype:"
      return_type: "V"
      parameter {
        name: "sortDescriptorPrototype"
        type: "LNSSortDescriptor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resizingMask"
      return_type: "X(Enum.enum NSTableColumnResizingOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "setResizingMask:"
      return_type: "V"
      parameter {
        name: "resizingMask"
        type: "X(Enum.enum NSTableColumnResizingOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "headerToolTip"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHeaderToolTip:"
      return_type: "V"
      parameter {
        name: "headerToolTip"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHidden:"
      return_type: "V"
      parameter {
        name: "hidden"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  property {
    name: "tableView"
    type: "LNSTableView;"
  }
  property {
    name: "width"
    type: "D"
  }
  property {
    name: "minWidth"
    type: "D"
  }
  property {
    name: "maxWidth"
    type: "D"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "headerCell"
    type: "OI"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "sortDescriptorPrototype"
    type: "LNSSortDescriptor;"
  }
  property {
    name: "resizingMask"
    type: "X(Enum.enum NSTableColumnResizingOptions)"
  }
  property {
    name: "headerToolTip"
    type: "LNSString;"
  }
  property {
    name: "hidden"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableColumn.h"
}
class {
  name: "NSTableHeaderCell"
  base_class: "NSTextFieldCell"
  method {
    function {
      name: "drawSortIndicatorWithFrame:inView:ascending:priority:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "ascending"
        type: "Z"
      }
      parameter {
        name: "priority"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortIndicatorRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "theRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableHeaderCell.h"
}
class {
  name: "NSTableHeaderView"
  base_class: "NSView"
  method {
    function {
      name: "tableView"
      return_type: "LNSTableView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTableView:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "draggedDistance"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "resizedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "headerRectOfColumn:"
      return_type: "RCGRect;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "columnAtPoint:"
      return_type: "I"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  property {
    name: "tableView"
    type: "LNSTableView;"
  }
  property {
    name: "draggedColumn"
    type: "I"
  }
  property {
    name: "draggedDistance"
    type: "D"
  }
  property {
    name: "resizedColumn"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableHeaderView.h"
}
class {
  name: "NSTableRowView"
  base_class: "NSView"
  protocol: "NSAccessibilityRow"
  method {
    function {
      name: "selectionHighlightStyle"
      return_type: "X(Enum.enum NSTableViewSelectionHighlightStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionHighlightStyle:"
      return_type: "V"
      parameter {
        name: "selectionHighlightStyle"
        type: "X(Enum.enum NSTableViewSelectionHighlightStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEmphasized"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEmphasized:"
      return_type: "V"
      parameter {
        name: "emphasized"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isGroupRowStyle"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setGroupRowStyle:"
      return_type: "V"
      parameter {
        name: "groupRowStyle"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSelected"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelected:"
      return_type: "V"
      parameter {
        name: "selected"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isPreviousRowSelected"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreviousRowSelected:"
      return_type: "V"
      parameter {
        name: "previousRowSelected"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isNextRowSelected"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNextRowSelected:"
      return_type: "V"
      parameter {
        name: "nextRowSelected"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFloating"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setFloating:"
      return_type: "V"
      parameter {
        name: "floating"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isTargetForDropOperation"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTargetForDropOperation:"
      return_type: "V"
      parameter {
        name: "targetForDropOperation"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingDestinationFeedbackStyle"
      return_type: "X(Enum.enum NSTableViewDraggingDestinationFeedbackStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingDestinationFeedbackStyle:"
      return_type: "V"
      parameter {
        name: "draggingDestinationFeedbackStyle"
        type: "X(Enum.enum NSTableViewDraggingDestinationFeedbackStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indentationForDropOperation"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndentationForDropOperation:"
      return_type: "V"
      parameter {
        name: "indentationForDropOperation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "interiorBackgroundStyle"
      return_type: "X(Enum.enum NSBackgroundStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawBackgroundInRect:"
      return_type: "V"
      parameter {
        name: "dirtyRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawSelectionInRect:"
      return_type: "V"
      parameter {
        name: "dirtyRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawSeparatorInRect:"
      return_type: "V"
      parameter {
        name: "dirtyRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawDraggingDestinationFeedbackInRect:"
      return_type: "V"
      parameter {
        name: "dirtyRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewAtColumn:"
      return_type: "OI"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfColumns"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "selectionHighlightStyle"
    type: "X(Enum.enum NSTableViewSelectionHighlightStyle)"
  }
  property {
    name: "emphasized"
    type: "Z"
  }
  property {
    name: "groupRowStyle"
    type: "Z"
  }
  property {
    name: "selected"
    type: "Z"
  }
  property {
    name: "previousRowSelected"
    type: "Z"
  }
  property {
    name: "nextRowSelected"
    type: "Z"
  }
  property {
    name: "floating"
    type: "Z"
  }
  property {
    name: "targetForDropOperation"
    type: "Z"
  }
  property {
    name: "draggingDestinationFeedbackStyle"
    type: "X(Enum.enum NSTableViewDraggingDestinationFeedbackStyle)"
  }
  property {
    name: "indentationForDropOperation"
    type: "D"
  }
  property {
    name: "interiorBackgroundStyle"
    type: "X(Enum.enum NSBackgroundStyle)"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "numberOfColumns"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableRowView.h"
}
class {
  name: "NSOutlineView"
  base_class: "NSTableView"
  protocol: "NSAccessibilityOutline"
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "X(Unexposed.id<NSOutlineViewDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSOutlineViewDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDataSource:"
      return_type: "V"
      parameter {
        name: "aSource"
        type: "X(Unexposed.id<NSOutlineViewDataSource>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataSource"
      return_type: "X(Unexposed.id<NSOutlineViewDataSource>)"
    }
    class_method: false
  }
  method {
    function {
      name: "outlineTableColumn"
      return_type: "LNSTableColumn;"
    }
    class_method: false
  }
  method {
    function {
      name: "setOutlineTableColumn:"
      return_type: "V"
      parameter {
        name: "outlineTableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isExpandable:"
      return_type: "Z"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfChildrenOfItem:"
      return_type: "I"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "child:ofItem:"
      return_type: "OI"
      parameter {
        name: "index"
        type: "I"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "expandItem:expandChildren:"
      return_type: "V"
      parameter {
        name: "item"
        type: "OI"
      }
      parameter {
        name: "expandChildren"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "expandItem:"
      return_type: "V"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collapseItem:collapseChildren:"
      return_type: "V"
      parameter {
        name: "item"
        type: "OI"
      }
      parameter {
        name: "collapseChildren"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collapseItem:"
      return_type: "V"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadItem:reloadChildren:"
      return_type: "V"
      parameter {
        name: "item"
        type: "OI"
      }
      parameter {
        name: "reloadChildren"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadItem:"
      return_type: "V"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parentForItem:"
      return_type: "OI"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtRow:"
      return_type: "OI"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowForItem:"
      return_type: "I"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "levelForItem:"
      return_type: "I"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "levelForRow:"
      return_type: "I"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isItemExpanded:"
      return_type: "Z"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indentationPerLevel"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndentationPerLevel:"
      return_type: "V"
      parameter {
        name: "indentationPerLevel"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indentationMarkerFollowsCell"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndentationMarkerFollowsCell:"
      return_type: "V"
      parameter {
        name: "indentationMarkerFollowsCell"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoresizesOutlineColumn"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoresizesOutlineColumn:"
      return_type: "V"
      parameter {
        name: "autoresizesOutlineColumn"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameOfOutlineCellAtRow:"
      return_type: "RCGRect;"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDropItem:dropChildIndex:"
      return_type: "V"
      parameter {
        name: "item"
        type: "OI"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldCollapseAutoExpandedItemsForDeposited:"
      return_type: "Z"
      parameter {
        name: "deposited"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autosaveExpandedItems"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutosaveExpandedItems:"
      return_type: "V"
      parameter {
        name: "autosaveExpandedItems"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertItemsAtIndexes:inParent:withAnimation:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "parent"
        type: "OI"
      }
      parameter {
        name: "animationOptions"
        type: "X(Enum.enum NSTableViewAnimationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemsAtIndexes:inParent:withAnimation:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "parent"
        type: "OI"
      }
      parameter {
        name: "animationOptions"
        type: "X(Enum.enum NSTableViewAnimationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveItemAtIndex:inParent:toIndex:inParent:"
      return_type: "V"
      parameter {
        name: "fromIndex"
        type: "I"
      }
      parameter {
        name: "oldParent"
        type: "OI"
      }
      parameter {
        name: "toIndex"
        type: "I"
      }
      parameter {
        name: "newParent"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertRowsAtIndexes:withAnimation:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "animationOptions"
        type: "X(Enum.enum NSTableViewAnimationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeRowsAtIndexes:withAnimation:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "animationOptions"
        type: "X(Enum.enum NSTableViewAnimationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveRowAtIndex:toIndex:"
      return_type: "V"
      parameter {
        name: "oldIndex"
        type: "I"
      }
      parameter {
        name: "newIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userInterfaceLayoutDirection"
      return_type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserInterfaceLayoutDirection:"
      return_type: "V"
      parameter {
        name: "userInterfaceLayoutDirection"
        type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
      }
    }
    class_method: false
  }
  property {
    name: "outlineTableColumn"
    type: "LNSTableColumn;"
  }
  property {
    name: "indentationPerLevel"
    type: "D"
  }
  property {
    name: "indentationMarkerFollowsCell"
    type: "Z"
  }
  property {
    name: "autoresizesOutlineColumn"
    type: "Z"
  }
  property {
    name: "autosaveExpandedItems"
    type: "Z"
  }
  property {
    name: "userInterfaceLayoutDirection"
    type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOutlineView.h"
}
class {
  name: "NSInputServer"
  base_class: "NSObject"
  protocol: "NSInputServiceProvider"
  protocol: "NSInputServerMouseTracker"
  method {
    function {
      name: "initWithDelegate:name:"
      return_type: "OI"
      parameter {
        name: "aDelegate"
        type: "OI"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSInputServer.h"
}
class {
  name: "NSRulerMarker"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithRulerView:markerLocation:image:imageOrigin:"
      return_type: "OI"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "location"
        type: "D"
      }
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "imageOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ruler"
      return_type: "LNSRulerView;"
    }
    class_method: false
  }
  method {
    function {
      name: "markerLocation"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMarkerLocation:"
      return_type: "V"
      parameter {
        name: "markerLocation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageOrigin"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageOrigin:"
      return_type: "V"
      parameter {
        name: "imageOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isMovable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setMovable:"
      return_type: "V"
      parameter {
        name: "movable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isRemovable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRemovable:"
      return_type: "V"
      parameter {
        name: "removable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDragging"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "representedObject"
      return_type: "X(Unexposed.id<NSCopying>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepresentedObject:"
      return_type: "V"
      parameter {
        name: "representedObject"
        type: "X(Unexposed.id<NSCopying>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageRectInRuler"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "thicknessRequiredInRuler"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "drawRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackMouse:adding:"
      return_type: "Z"
      parameter {
        name: "mouseDownEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "isAdding"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "ruler"
    type: "LNSRulerView;"
  }
  property {
    name: "markerLocation"
    type: "D"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "imageOrigin"
    type: "RCGPoint;"
  }
  property {
    name: "movable"
    type: "Z"
  }
  property {
    name: "removable"
    type: "Z"
  }
  property {
    name: "dragging"
    type: "Z"
  }
  property {
    name: "representedObject"
    type: "X(Unexposed.id<NSCopying>)"
  }
  property {
    name: "imageRectInRuler"
    type: "RCGRect;"
  }
  property {
    name: "thicknessRequiredInRuler"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSRulerMarker.h"
}
class {
  name: "NSRulerView"
  base_class: "NSView"
  method {
    function {
      name: "registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:"
      return_type: "V"
      parameter {
        name: "unitName"
        type: "LNSString;"
      }
      parameter {
        name: "abbreviation"
        type: "LNSString;"
      }
      parameter {
        name: "conversionFactor"
        type: "D"
      }
      parameter {
        name: "stepUpCycle"
        type: "LNSArray;"
      }
      parameter {
        name: "stepDownCycle"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithScrollView:orientation:"
      return_type: "OI"
      parameter {
        name: "scrollView"
        type: "LNSScrollView;"
      }
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSRulerOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollView"
      return_type: "LNSScrollView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setScrollView:"
      return_type: "V"
      parameter {
        name: "scrollView"
        type: "LNSScrollView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orientation"
      return_type: "X(Enum.enum NSRulerOrientation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setOrientation:"
      return_type: "V"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSRulerOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "baselineLocation"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "requiredThickness"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "ruleThickness"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRuleThickness:"
      return_type: "V"
      parameter {
        name: "ruleThickness"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reservedThicknessForMarkers"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setReservedThicknessForMarkers:"
      return_type: "V"
      parameter {
        name: "reservedThicknessForMarkers"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reservedThicknessForAccessoryView"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setReservedThicknessForAccessoryView:"
      return_type: "V"
      parameter {
        name: "reservedThicknessForAccessoryView"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "measurementUnits"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMeasurementUnits:"
      return_type: "V"
      parameter {
        name: "measurementUnits"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "originOffset"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setOriginOffset:"
      return_type: "V"
      parameter {
        name: "originOffset"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clientView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setClientView:"
      return_type: "V"
      parameter {
        name: "clientView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addMarker:"
      return_type: "V"
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeMarker:"
      return_type: "V"
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "markers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMarkers:"
      return_type: "V"
      parameter {
        name: "markers"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackMarker:withMouseEvent:"
      return_type: "Z"
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "accessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveRulerlineFromLocation:toLocation:"
      return_type: "V"
      parameter {
        name: "oldLocation"
        type: "D"
      }
      parameter {
        name: "newLocation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateHashMarks"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "drawHashMarksAndLabelsInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawMarkersInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFlipped"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "scrollView"
    type: "LNSScrollView;"
  }
  property {
    name: "orientation"
    type: "X(Enum.enum NSRulerOrientation)"
  }
  property {
    name: "baselineLocation"
    type: "D"
  }
  property {
    name: "requiredThickness"
    type: "D"
  }
  property {
    name: "ruleThickness"
    type: "D"
  }
  property {
    name: "reservedThicknessForMarkers"
    type: "D"
  }
  property {
    name: "reservedThicknessForAccessoryView"
    type: "D"
  }
  property {
    name: "measurementUnits"
    type: "LNSString;"
  }
  property {
    name: "originOffset"
    type: "D"
  }
  property {
    name: "clientView"
    type: "LNSView;"
  }
  property {
    name: "markers"
    type: "LNSArray;"
  }
  property {
    name: "accessoryView"
    type: "LNSView;"
  }
  property {
    name: "flipped"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSRulerView.h"
}
class {
  name: "NSSecureTextField"
  base_class: "NSTextField"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSecureTextField.h"
}
class {
  name: "NSSecureTextFieldCell"
  base_class: "NSTextFieldCell"
  method {
    function {
      name: "echosBullets"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEchosBullets:"
      return_type: "V"
      parameter {
        name: "echosBullets"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "echosBullets"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSecureTextField.h"
}
class {
  name: "NSProgressIndicator"
  base_class: "NSView"
  protocol: "NSAccessibilityProgressIndicator"
  category: "NSProgressIndicator+NSProgressIndicatorDeprecated"
  method {
    function {
      name: "isIndeterminate"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndeterminate:"
      return_type: "V"
      parameter {
        name: "indeterminate"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBezeled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBezeled:"
      return_type: "V"
      parameter {
        name: "bezeled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlTint"
      return_type: "X(Enum.enum NSControlTint)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlTint:"
      return_type: "V"
      parameter {
        name: "controlTint"
        type: "X(Enum.enum NSControlTint)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlSize"
      return_type: "X(Enum.enum NSControlSize)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlSize:"
      return_type: "V"
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleValue:"
      return_type: "V"
      parameter {
        name: "doubleValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "incrementBy:"
      return_type: "V"
      parameter {
        name: "delta"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinValue:"
      return_type: "V"
      parameter {
        name: "minValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxValue:"
      return_type: "V"
      parameter {
        name: "maxValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesThreadedAnimation"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesThreadedAnimation:"
      return_type: "V"
      parameter {
        name: "usesThreadedAnimation"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startAnimation:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stopAnimation:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "style"
      return_type: "X(Enum.enum NSProgressIndicatorStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setStyle:"
      return_type: "V"
      parameter {
        name: "style"
        type: "X(Enum.enum NSProgressIndicatorStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeToFit"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isDisplayedWhenStopped"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDisplayedWhenStopped:"
      return_type: "V"
      parameter {
        name: "displayedWhenStopped"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "indeterminate"
    type: "Z"
  }
  property {
    name: "bezeled"
    type: "Z"
  }
  property {
    name: "controlTint"
    type: "X(Enum.enum NSControlTint)"
  }
  property {
    name: "controlSize"
    type: "X(Enum.enum NSControlSize)"
  }
  property {
    name: "doubleValue"
    type: "D"
  }
  property {
    name: "minValue"
    type: "D"
  }
  property {
    name: "maxValue"
    type: "D"
  }
  property {
    name: "usesThreadedAnimation"
    type: "Z"
  }
  property {
    name: "style"
    type: "X(Enum.enum NSProgressIndicatorStyle)"
  }
  property {
    name: "displayedWhenStopped"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSProgressIndicator.h"
}
class {
  name: "NSTabView"
  base_class: "NSView"
  method {
    function {
      name: "selectTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectTabViewItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectTabViewItemWithIdentifier:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeSelectedTabViewItemFromSender:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectFirstTabViewItem:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectLastTabViewItem:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectNextTabViewItem:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectPreviousTabViewItem:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedTabViewItem"
      return_type: "LNSTabViewItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "font"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFont:"
      return_type: "V"
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabViewType"
      return_type: "X(Enum.enum NSTabViewType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTabViewType:"
      return_type: "V"
      parameter {
        name: "tabViewType"
        type: "X(Enum.enum NSTabViewType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabViewItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsTruncatedLabels"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsTruncatedLabels:"
      return_type: "V"
      parameter {
        name: "allowsTruncatedLabels"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minimumSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlTint"
      return_type: "X(Enum.enum NSControlTint)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlTint:"
      return_type: "V"
      parameter {
        name: "controlTint"
        type: "X(Enum.enum NSControlTint)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlSize"
      return_type: "X(Enum.enum NSControlSize)"
    }
    class_method: false
  }
  method {
    function {
      name: "setControlSize:"
      return_type: "V"
      parameter {
        name: "controlSize"
        type: "X(Enum.enum NSControlSize)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertTabViewItem:atIndex:"
      return_type: "V"
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSTabViewDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSTabViewDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabViewItemAtPoint:"
      return_type: "LNSTabViewItem;"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfTabViewItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfTabViewItem:"
      return_type: "I"
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabViewItemAtIndex:"
      return_type: "LNSTabViewItem;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfTabViewItemWithIdentifier:"
      return_type: "I"
      parameter {
        name: "identifier"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "selectedTabViewItem"
    type: "LNSTabViewItem;"
  }
  property {
    name: "font"
    type: "LNSFont;"
  }
  property {
    name: "tabViewType"
    type: "X(Enum.enum NSTabViewType)"
  }
  property {
    name: "tabViewItems"
    type: "LNSArray;"
  }
  property {
    name: "allowsTruncatedLabels"
    type: "Z"
  }
  property {
    name: "minimumSize"
    type: "RCGSize;"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "controlTint"
    type: "X(Enum.enum NSControlTint)"
  }
  property {
    name: "controlSize"
    type: "X(Enum.enum NSControlSize)"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSTabViewDelegate>)"
  }
  property {
    name: "contentRect"
    type: "RCGRect;"
  }
  property {
    name: "numberOfTabViewItems"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTabView.h"
}
class {
  name: "NSToolbar"
  base_class: "NSObject"
  category: "NSToolbar+NSDeprecated"
  method {
    function {
      name: "initWithIdentifier:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertItemWithItemIdentifier:atIndex:"
      return_type: "V"
      parameter {
        name: "itemIdentifier"
        type: "LNSString;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSToolbarDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSToolbarDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isVisible"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setVisible:"
      return_type: "V"
      parameter {
        name: "visible"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runCustomizationPalette:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "customizationPaletteIsRunning"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "displayMode"
      return_type: "X(Enum.enum NSToolbarDisplayMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDisplayMode:"
      return_type: "V"
      parameter {
        name: "displayMode"
        type: "X(Enum.enum NSToolbarDisplayMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedItemIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedItemIdentifier:"
      return_type: "V"
      parameter {
        name: "selectedItemIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeMode"
      return_type: "X(Enum.enum NSToolbarSizeMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSizeMode:"
      return_type: "V"
      parameter {
        name: "sizeMode"
        type: "X(Enum.enum NSToolbarSizeMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsBaselineSeparator"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsBaselineSeparator:"
      return_type: "V"
      parameter {
        name: "showsBaselineSeparator"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsUserCustomization"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsUserCustomization:"
      return_type: "V"
      parameter {
        name: "allowsUserCustomization"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "items"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "visibleItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "autosavesConfiguration"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutosavesConfiguration:"
      return_type: "V"
      parameter {
        name: "autosavesConfiguration"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setConfigurationFromDictionary:"
      return_type: "V"
      parameter {
        name: "configDict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "configurationDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "validateVisibleItems"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsExtensionItems"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsExtensionItems:"
      return_type: "V"
      parameter {
        name: "allowsExtensionItems"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSToolbarDelegate>)"
  }
  property {
    name: "visible"
    type: "Z"
  }
  property {
    name: "customizationPaletteIsRunning"
    type: "Z"
  }
  property {
    name: "displayMode"
    type: "X(Enum.enum NSToolbarDisplayMode)"
  }
  property {
    name: "selectedItemIdentifier"
    type: "LNSString;"
  }
  property {
    name: "sizeMode"
    type: "X(Enum.enum NSToolbarSizeMode)"
  }
  property {
    name: "showsBaselineSeparator"
    type: "Z"
  }
  property {
    name: "allowsUserCustomization"
    type: "Z"
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  property {
    name: "items"
    type: "LNSArray;"
  }
  property {
    name: "visibleItems"
    type: "LNSArray;"
  }
  property {
    name: "autosavesConfiguration"
    type: "Z"
  }
  property {
    name: "configurationDictionary"
    type: "LNSDictionary;"
  }
  property {
    name: "allowsExtensionItems"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSToolbar.h"
}
class {
  name: "NSTabViewController"
  base_class: "NSViewController"
  protocol: "NSTabViewDelegate"
  protocol: "NSToolbarDelegate"
  method {
    function {
      name: "tabStyle"
      return_type: "X(Enum.enum NSTabViewControllerTabStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTabStyle:"
      return_type: "V"
      parameter {
        name: "tabStyle"
        type: "X(Enum.enum NSTabViewControllerTabStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabView"
      return_type: "LNSTabView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTabView:"
      return_type: "V"
      parameter {
        name: "tabView"
        type: "LNSTabView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "transitionOptions"
      return_type: "X(Enum.enum NSViewControllerTransitionOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTransitionOptions:"
      return_type: "V"
      parameter {
        name: "transitionOptions"
        type: "X(Enum.enum NSViewControllerTransitionOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canPropagateSelectedChildViewControllerTitle"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanPropagateSelectedChildViewControllerTitle:"
      return_type: "V"
      parameter {
        name: "canPropagateSelectedChildViewControllerTitle"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabViewItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTabViewItems:"
      return_type: "V"
      parameter {
        name: "tabViewItems"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedTabViewItemIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedTabViewItemIndex:"
      return_type: "V"
      parameter {
        name: "selectedTabViewItemIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertTabViewItem:atIndex:"
      return_type: "V"
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabViewItemForViewController:"
      return_type: "LNSTabViewItem;"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidLoad"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "tabView:willSelectTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabView"
        type: "LNSTabView;"
      }
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabView:didSelectTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabView"
        type: "LNSTabView;"
      }
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabView:shouldSelectTabViewItem:"
      return_type: "Z"
      parameter {
        name: "tabView"
        type: "LNSTabView;"
      }
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:"
      return_type: "LNSToolbarItem;"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
      parameter {
        name: "itemIdentifier"
        type: "LNSString;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbarDefaultItemIdentifiers:"
      return_type: "LNSArray;"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbarAllowedItemIdentifiers:"
      return_type: "LNSArray;"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbarSelectableItemIdentifiers:"
      return_type: "LNSArray;"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
    }
    class_method: false
  }
  property {
    name: "tabStyle"
    type: "X(Enum.enum NSTabViewControllerTabStyle)"
  }
  property {
    name: "tabView"
    type: "LNSTabView;"
  }
  property {
    name: "transitionOptions"
    type: "X(Enum.enum NSViewControllerTransitionOptions)"
  }
  property {
    name: "canPropagateSelectedChildViewControllerTitle"
    type: "Z"
  }
  property {
    name: "tabViewItems"
    type: "LNSArray;"
  }
  property {
    name: "selectedTabViewItemIndex"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTabViewController.h"
}
class {
  name: "NSTabViewItem"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "tabViewItemWithViewController:"
      return_type: "OI"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithIdentifier:"
      return_type: "OI"
      parameter {
        name: "identifier"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "identifier"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setIdentifier:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "color"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setColor:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "label"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLabel:"
      return_type: "V"
      parameter {
        name: "label"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "setViewController:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabState"
      return_type: "X(Enum.enum NSTabState)"
    }
    class_method: false
  }
  method {
    function {
      name: "tabView"
      return_type: "LNSTabView;"
    }
    class_method: false
  }
  method {
    function {
      name: "initialFirstResponder"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInitialFirstResponder:"
      return_type: "V"
      parameter {
        name: "initialFirstResponder"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolTip"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setToolTip:"
      return_type: "V"
      parameter {
        name: "toolTip"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawLabel:inRect:"
      return_type: "V"
      parameter {
        name: "shouldTruncateLabel"
        type: "Z"
      }
      parameter {
        name: "labelRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeOfLabel:"
      return_type: "RCGSize;"
      parameter {
        name: "computeMin"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "identifier"
    type: "OI"
  }
  property {
    name: "color"
    type: "LNSColor;"
  }
  property {
    name: "label"
    type: "LNSString;"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  property {
    name: "viewController"
    type: "LNSViewController;"
  }
  property {
    name: "tabState"
    type: "X(Enum.enum NSTabState)"
  }
  property {
    name: "tabView"
    type: "LNSTabView;"
  }
  property {
    name: "initialFirstResponder"
    type: "LNSView;"
  }
  property {
    name: "toolTip"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTabViewItem.h"
}
class {
  name: "NSPopUpButtonCell"
  base_class: "NSMenuItemCell"
  method {
    function {
      name: "initTextCell:pullsDown:"
      return_type: "OI"
      parameter {
        name: "stringValue"
        type: "LNSString;"
      }
      parameter {
        name: "pullDown"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pullsDown"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPullsDown:"
      return_type: "V"
      parameter {
        name: "pullsDown"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoenablesItems"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoenablesItems:"
      return_type: "V"
      parameter {
        name: "autoenablesItems"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredEdge"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredEdge:"
      return_type: "V"
      parameter {
        name: "preferredEdge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesItemFromMenu"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesItemFromMenu:"
      return_type: "V"
      parameter {
        name: "usesItemFromMenu"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "altersStateOfSelectedItem"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAltersStateOfSelectedItem:"
      return_type: "V"
      parameter {
        name: "altersStateOfSelectedItem"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemWithTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addItemsWithTitles:"
      return_type: "V"
      parameter {
        name: "itemTitles"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertItemWithTitle:atIndex:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemWithTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllItems"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "itemArray"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfItems"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItem:"
      return_type: "I"
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTitle:"
      return_type: "I"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTag:"
      return_type: "I"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithRepresentedObject:"
      return_type: "I"
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfItemWithTarget:andAction:"
      return_type: "I"
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "actionSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtIndex:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemWithTitle:"
      return_type: "LNSMenuItem;"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lastItem"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectItem:"
      return_type: "V"
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemWithTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectItemWithTag:"
      return_type: "Z"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedItem"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfSelectedItem"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "synchronizeTitleAndSelectedItem"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "itemTitleAtIndex:"
      return_type: "LNSString;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemTitles"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "titleOfSelectedItem"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "attachPopUpWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dismissPopUp"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "performClickWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrowPosition"
      return_type: "X(Enum.enum NSPopUpArrowPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setArrowPosition:"
      return_type: "V"
      parameter {
        name: "arrowPosition"
        type: "X(Enum.enum NSPopUpArrowPosition)"
      }
    }
    class_method: false
  }
  property {
    name: "menu"
    type: "LNSMenu;"
  }
  property {
    name: "pullsDown"
    type: "Z"
  }
  property {
    name: "autoenablesItems"
    type: "Z"
  }
  property {
    name: "preferredEdge"
    type: "UI"
  }
  property {
    name: "usesItemFromMenu"
    type: "Z"
  }
  property {
    name: "altersStateOfSelectedItem"
    type: "Z"
  }
  property {
    name: "itemArray"
    type: "LNSArray;"
  }
  property {
    name: "numberOfItems"
    type: "I"
  }
  property {
    name: "lastItem"
    type: "LNSMenuItem;"
  }
  property {
    name: "selectedItem"
    type: "LNSMenuItem;"
  }
  property {
    name: "indexOfSelectedItem"
    type: "I"
  }
  property {
    name: "itemTitles"
    type: "LNSArray;"
  }
  property {
    name: "titleOfSelectedItem"
    type: "LNSString;"
  }
  property {
    name: "arrowPosition"
    type: "X(Enum.enum NSPopUpArrowPosition)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPopUpButtonCell.h"
}
class {
  name: "NSBezierPath"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  category: "NSBezierPath+NSBezierPathDeprecated"
  method {
    function {
      name: "bezierPath"
      return_type: "LNSBezierPath;"
    }
    class_method: true
  }
  method {
    function {
      name: "bezierPathWithRect:"
      return_type: "LNSBezierPath;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "bezierPathWithOvalInRect:"
      return_type: "LNSBezierPath;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "bezierPathWithRoundedRect:xRadius:yRadius:"
      return_type: "LNSBezierPath;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "xRadius"
        type: "D"
      }
      parameter {
        name: "yRadius"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fillRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "strokeRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "clipRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "strokeLineFromPoint:toPoint:"
      return_type: "V"
      parameter {
        name: "point1"
        type: "RCGPoint;"
      }
      parameter {
        name: "point2"
        type: "RCGPoint;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "drawPackedGlyphs:atPoint:"
      return_type: "V"
      parameter {
        name: "packedGlyphs"
        type: "*cC;"
      }
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultMiterLimit:"
      return_type: "V"
      parameter {
        name: "limit"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultMiterLimit"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultFlatness:"
      return_type: "V"
      parameter {
        name: "flatness"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultFlatness"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultWindingRule:"
      return_type: "V"
      parameter {
        name: "windingRule"
        type: "X(Enum.enum NSWindingRule)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultWindingRule"
      return_type: "X(Enum.enum NSWindingRule)"
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultLineCapStyle:"
      return_type: "V"
      parameter {
        name: "lineCapStyle"
        type: "X(Enum.enum NSLineCapStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultLineCapStyle"
      return_type: "X(Enum.enum NSLineCapStyle)"
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultLineJoinStyle:"
      return_type: "V"
      parameter {
        name: "lineJoinStyle"
        type: "X(Enum.enum NSLineJoinStyle)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultLineJoinStyle"
      return_type: "X(Enum.enum NSLineJoinStyle)"
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultLineWidth:"
      return_type: "V"
      parameter {
        name: "lineWidth"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultLineWidth"
      return_type: "D"
    }
    class_method: true
  }
  method {
    function {
      name: "moveToPoint:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineToPoint:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "curveToPoint:controlPoint1:controlPoint2:"
      return_type: "V"
      parameter {
        name: "endPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "controlPoint1"
        type: "RCGPoint;"
      }
      parameter {
        name: "controlPoint2"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "closePath"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllPoints"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "relativeMoveToPoint:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "relativeLineToPoint:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "relativeCurveToPoint:controlPoint1:controlPoint2:"
      return_type: "V"
      parameter {
        name: "endPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "controlPoint1"
        type: "RCGPoint;"
      }
      parameter {
        name: "controlPoint2"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineWidth:"
      return_type: "V"
      parameter {
        name: "lineWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineCapStyle"
      return_type: "X(Enum.enum NSLineCapStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineCapStyle:"
      return_type: "V"
      parameter {
        name: "lineCapStyle"
        type: "X(Enum.enum NSLineCapStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineJoinStyle"
      return_type: "X(Enum.enum NSLineJoinStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineJoinStyle:"
      return_type: "V"
      parameter {
        name: "lineJoinStyle"
        type: "X(Enum.enum NSLineJoinStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windingRule"
      return_type: "X(Enum.enum NSWindingRule)"
    }
    class_method: false
  }
  method {
    function {
      name: "setWindingRule:"
      return_type: "V"
      parameter {
        name: "windingRule"
        type: "X(Enum.enum NSWindingRule)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "miterLimit"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMiterLimit:"
      return_type: "V"
      parameter {
        name: "miterLimit"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "flatness"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setFlatness:"
      return_type: "V"
      parameter {
        name: "flatness"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getLineDash:count:phase:"
      return_type: "V"
      parameter {
        name: "pattern"
        type: "*D;"
      }
      parameter {
        name: "count"
        type: "*I;"
      }
      parameter {
        name: "phase"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLineDash:count:phase:"
      return_type: "V"
      parameter {
        name: "pattern"
        type: "*cD;"
      }
      parameter {
        name: "count"
        type: "I"
      }
      parameter {
        name: "phase"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stroke"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "fill"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "addClip"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setClip"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "bezierPathByFlatteningPath"
      return_type: "LNSBezierPath;"
    }
    class_method: false
  }
  method {
    function {
      name: "bezierPathByReversingPath"
      return_type: "LNSBezierPath;"
    }
    class_method: false
  }
  method {
    function {
      name: "transformUsingAffineTransform:"
      return_type: "V"
      parameter {
        name: "transform"
        type: "LNSAffineTransform;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEmpty"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "currentPoint"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "controlPointBounds"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "bounds"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "elementCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "elementAtIndex:associatedPoints:"
      return_type: "X(Enum.enum NSBezierPathElement)"
      parameter {
        name: "index"
        type: "I"
      }
      parameter {
        name: "points"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "elementAtIndex:"
      return_type: "X(Enum.enum NSBezierPathElement)"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAssociatedPoints:atIndex:"
      return_type: "V"
      parameter {
        name: "points"
        type: "*RCGPoint;;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPath:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSBezierPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithPoints:count:"
      return_type: "V"
      parameter {
        name: "points"
        type: "*RCGPoint;;"
      }
      parameter {
        name: "count"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithOvalInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:"
      return_type: "V"
      parameter {
        name: "center"
        type: "RCGPoint;"
      }
      parameter {
        name: "radius"
        type: "D"
      }
      parameter {
        name: "startAngle"
        type: "D"
      }
      parameter {
        name: "endAngle"
        type: "D"
      }
      parameter {
        name: "clockwise"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:"
      return_type: "V"
      parameter {
        name: "center"
        type: "RCGPoint;"
      }
      parameter {
        name: "radius"
        type: "D"
      }
      parameter {
        name: "startAngle"
        type: "D"
      }
      parameter {
        name: "endAngle"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithArcFromPoint:toPoint:radius:"
      return_type: "V"
      parameter {
        name: "point1"
        type: "RCGPoint;"
      }
      parameter {
        name: "point2"
        type: "RCGPoint;"
      }
      parameter {
        name: "radius"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithGlyph:inFont:"
      return_type: "V"
      parameter {
        name: "glyph"
        type: "UI"
      }
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithGlyphs:count:inFont:"
      return_type: "V"
      parameter {
        name: "glyphs"
        type: "*UI;"
      }
      parameter {
        name: "count"
        type: "I"
      }
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithPackedGlyphs:"
      return_type: "V"
      parameter {
        name: "packedGlyphs"
        type: "*cC;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendBezierPathWithRoundedRect:xRadius:yRadius:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "xRadius"
        type: "D"
      }
      parameter {
        name: "yRadius"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsPoint:"
      return_type: "Z"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  property {
    name: "lineWidth"
    type: "D"
  }
  property {
    name: "lineCapStyle"
    type: "X(Enum.enum NSLineCapStyle)"
  }
  property {
    name: "lineJoinStyle"
    type: "X(Enum.enum NSLineJoinStyle)"
  }
  property {
    name: "windingRule"
    type: "X(Enum.enum NSWindingRule)"
  }
  property {
    name: "miterLimit"
    type: "D"
  }
  property {
    name: "flatness"
    type: "D"
  }
  property {
    name: "bezierPathByFlatteningPath"
    type: "LNSBezierPath;"
  }
  property {
    name: "bezierPathByReversingPath"
    type: "LNSBezierPath;"
  }
  property {
    name: "empty"
    type: "Z"
  }
  property {
    name: "currentPoint"
    type: "RCGPoint;"
  }
  property {
    name: "controlPointBounds"
    type: "RCGRect;"
  }
  property {
    name: "bounds"
    type: "RCGRect;"
  }
  property {
    name: "elementCount"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBezierPath.h"
}
class {
  name: "NSPICTImageRep"
  base_class: "NSImageRep"
  method {
    function {
      name: "imageRepWithData:"
      return_type: "OI"
      parameter {
        name: "pictData"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "pictData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "PICTRepresentation"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "boundingBox"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  property {
    name: "PICTRepresentation"
    type: "LNSData;"
  }
  property {
    name: "boundingBox"
    type: "RCGRect;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPICTImageRep.h"
}
class {
  name: "NSStatusBar"
  base_class: "NSObject"
  method {
    function {
      name: "systemStatusBar"
      return_type: "LNSStatusBar;"
    }
    class_method: true
  }
  method {
    function {
      name: "statusItemWithLength:"
      return_type: "LNSStatusItem;"
      parameter {
        name: "length"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeStatusItem:"
      return_type: "V"
      parameter {
        name: "item"
        type: "LNSStatusItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isVertical"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "thickness"
      return_type: "D"
    }
    class_method: false
  }
  property {
    name: "vertical"
    type: "Z"
  }
  property {
    name: "thickness"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStatusBar.h"
}
class {
  name: "NSStatusBarButton"
  base_class: "NSButton"
  method {
    function {
      name: "appearsDisabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAppearsDisabled:"
      return_type: "V"
      parameter {
        name: "appearsDisabled"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "appearsDisabled"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStatusBarButton.h"
}
class {
  name: "NSStatusItem"
  base_class: "NSObject"
  category: "NSStatusItem+NSStatusItemDeprecated"
  method {
    function {
      name: "statusBar"
      return_type: "LNSStatusBar;"
    }
    class_method: false
  }
  method {
    function {
      name: "length"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLength:"
      return_type: "V"
      parameter {
        name: "length"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "button"
      return_type: "LNSStatusBarButton;"
    }
    class_method: false
  }
  property {
    name: "statusBar"
    type: "LNSStatusBar;"
  }
  property {
    name: "length"
    type: "D"
  }
  property {
    name: "menu"
    type: "LNSMenu;"
  }
  property {
    name: "button"
    type: "LNSStatusBarButton;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStatusItem.h"
}
class {
  name: "NSSound"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  protocol: "NSPasteboardReading"
  protocol: "NSPasteboardWriting"
  category: "NSSound+NSDeprecated"
  method {
    function {
      name: "soundNamed:"
      return_type: "LNSSound;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfURL:byReference:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "byRef"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfFile:byReference:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "byRef"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "Z"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "canInitWithPasteboard:"
      return_type: "Z"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "soundUnfilteredTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithPasteboard:"
      return_type: "OI"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToPasteboard:"
      return_type: "V"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "play"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "pause"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "resume"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "stop"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isPlaying"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSSoundDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSSoundDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "duration"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "volume"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setVolume:"
      return_type: "V"
      parameter {
        name: "volume"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentTime"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrentTime:"
      return_type: "V"
      parameter {
        name: "currentTime"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loops"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setLoops:"
      return_type: "V"
      parameter {
        name: "loops"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "playbackDeviceIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaybackDeviceIdentifier:"
      return_type: "V"
      parameter {
        name: "playbackDeviceIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setChannelMapping:"
      return_type: "V"
      parameter {
        name: "channelMapping"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "channelMapping"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "playing"
    type: "Z"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSSoundDelegate>)"
  }
  property {
    name: "duration"
    type: "D"
  }
  property {
    name: "volume"
    type: "F"
  }
  property {
    name: "currentTime"
    type: "D"
  }
  property {
    name: "loops"
    type: "Z"
  }
  property {
    name: "playbackDeviceIdentifier"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSound.h"
}
class {
  name: "NSMovie"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithMovie:"
      return_type: "OI"
      parameter {
        name: "movie"
        type: "LQTMovie;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "QTMovie"
      return_type: "LQTMovie;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMovie.h"
}
class {
  name: "NSPDFImageRep"
  base_class: "NSImageRep"
  method {
    function {
      name: "imageRepWithData:"
      return_type: "OI"
      parameter {
        name: "pdfData"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "pdfData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "PDFRepresentation"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "bounds"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentPage"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrentPage:"
      return_type: "V"
      parameter {
        name: "currentPage"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageCount"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "PDFRepresentation"
    type: "LNSData;"
  }
  property {
    name: "bounds"
    type: "RCGRect;"
  }
  property {
    name: "currentPage"
    type: "I"
  }
  property {
    name: "pageCount"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPDFImageRep.h"
}
class {
  name: "NSDrawer"
  base_class: "NSResponder"
  protocol: "NSAccessibilityElement"
  protocol: "NSAccessibility"
  method {
    function {
      name: "initWithContentSize:preferredEdge:"
      return_type: "OI"
      parameter {
        name: "contentSize"
        type: "RCGSize;"
      }
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parentWindow"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "setParentWindow:"
      return_type: "V"
      parameter {
        name: "parentWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentView:"
      return_type: "V"
      parameter {
        name: "contentView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredEdge"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredEdge:"
      return_type: "V"
      parameter {
        name: "preferredEdge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSDrawerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSDrawerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "open"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "openOnEdge:"
      return_type: "V"
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "close"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "open:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "close:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggle:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "state"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "edge"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "contentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentSize:"
      return_type: "V"
      parameter {
        name: "contentSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minContentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinContentSize:"
      return_type: "V"
      parameter {
        name: "minContentSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxContentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxContentSize:"
      return_type: "V"
      parameter {
        name: "maxContentSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "leadingOffset"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLeadingOffset:"
      return_type: "V"
      parameter {
        name: "leadingOffset"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trailingOffset"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTrailingOffset:"
      return_type: "V"
      parameter {
        name: "trailingOffset"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "parentWindow"
    type: "LNSWindow;"
  }
  property {
    name: "contentView"
    type: "LNSView;"
  }
  property {
    name: "preferredEdge"
    type: "UI"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSDrawerDelegate>)"
  }
  property {
    name: "state"
    type: "I"
  }
  property {
    name: "edge"
    type: "UI"
  }
  property {
    name: "contentSize"
    type: "RCGSize;"
  }
  property {
    name: "minContentSize"
    type: "RCGSize;"
  }
  property {
    name: "maxContentSize"
    type: "RCGSize;"
  }
  property {
    name: "leadingOffset"
    type: "D"
  }
  property {
    name: "trailingOffset"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDrawer.h"
}
class {
  name: "NSOpenGLPixelFormat"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "initWithAttributes:"
      return_type: "OI"
      parameter {
        name: "attribs"
        type: "*cUI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "attribs"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGLPixelFormatObj:"
      return_type: "LNSOpenGLPixelFormat;"
      parameter {
        name: "format"
        type: "*R_CGLPixelFormatObject;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributes"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributes:"
      return_type: "V"
      parameter {
        name: "attribs"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getValues:forAttribute:forVirtualScreen:"
      return_type: "V"
      parameter {
        name: "vals"
        type: "*I;"
      }
      parameter {
        name: "attrib"
        type: "UI"
      }
      parameter {
        name: "screen"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfVirtualScreens"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "CGLPixelFormatObj"
      return_type: "*R_CGLPixelFormatObject;;"
    }
    class_method: false
  }
  property {
    name: "numberOfVirtualScreens"
    type: "I"
  }
  property {
    name: "CGLPixelFormatObj"
    type: "*R_CGLPixelFormatObject;;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenGL.h"
}
class {
  name: "NSOpenGLPixelBuffer"
  base_class: "NSObject"
  method {
    function {
      name: "initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:"
      return_type: "OI"
      parameter {
        name: "target"
        type: "UI"
      }
      parameter {
        name: "format"
        type: "UI"
      }
      parameter {
        name: "maxLevel"
        type: "I"
      }
      parameter {
        name: "pixelsWide"
        type: "I"
      }
      parameter {
        name: "pixelsHigh"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGLPBufferObj:"
      return_type: "LNSOpenGLPixelBuffer;"
      parameter {
        name: "pbuffer"
        type: "*R_CGLPBufferObject;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "CGLPBufferObj"
      return_type: "*R_CGLPBufferObject;;"
    }
    class_method: false
  }
  method {
    function {
      name: "pixelsWide"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "pixelsHigh"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "textureTarget"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "textureInternalFormat"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "textureMaxMipMapLevel"
      return_type: "I"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenGL.h"
}
class {
  name: "NSOpenGLContext"
  base_class: "NSObject"
  protocol: "NSLocking"
  category: "NSOpenGLContext+NSOpenGLPixelBufer"
  method {
    function {
      name: "initWithFormat:shareContext:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSOpenGLPixelFormat;"
      }
      parameter {
        name: "share"
        type: "LNSOpenGLContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCGLContextObj:"
      return_type: "LNSOpenGLContext;"
      parameter {
        name: "context"
        type: "*R_CGLContextObject;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pixelFormat"
      return_type: "LNSOpenGLPixelFormat;"
    }
    class_method: false
  }
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFullScreen"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setOffScreen:width:height:rowbytes:"
      return_type: "V"
      parameter {
        name: "baseaddr"
        type: "*V;"
      }
      parameter {
        name: "width"
        type: "I"
      }
      parameter {
        name: "height"
        type: "I"
      }
      parameter {
        name: "rowbytes"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clearDrawable"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "update"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "flushBuffer"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "makeCurrentContext"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "clearCurrentContext"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "currentContext"
      return_type: "LNSOpenGLContext;"
    }
    class_method: true
  }
  method {
    function {
      name: "copyAttributesFromContext:withMask:"
      return_type: "V"
      parameter {
        name: "context"
        type: "LNSOpenGLContext;"
      }
      parameter {
        name: "mask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValues:forParameter:"
      return_type: "V"
      parameter {
        name: "vals"
        type: "*cI;"
      }
      parameter {
        name: "param"
        type: "X(Enum.enum NSOpenGLContextParameter)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getValues:forParameter:"
      return_type: "V"
      parameter {
        name: "vals"
        type: "*I;"
      }
      parameter {
        name: "param"
        type: "X(Enum.enum NSOpenGLContextParameter)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentVirtualScreen"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setCurrentVirtualScreen:"
      return_type: "V"
      parameter {
        name: "currentVirtualScreen"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createTexture:fromView:internalFormat:"
      return_type: "V"
      parameter {
        name: "target"
        type: "UI"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "format"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "CGLContextObj"
      return_type: "*R_CGLContextObject;;"
    }
    class_method: false
  }
  property {
    name: "pixelFormat"
    type: "LNSOpenGLPixelFormat;"
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  property {
    name: "currentVirtualScreen"
    type: "I"
  }
  property {
    name: "CGLContextObj"
    type: "*R_CGLContextObject;;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenGL.h"
}
class {
  name: "CALayer"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "CAMediaTiming"
  method {
    function {
      name: "layer"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithLayer:"
      return_type: "OI"
      parameter {
        name: "layer"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentationLayer"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "modelLayer"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "defaultValueForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "needsDisplayForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "shouldArchiveValueForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bounds"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBounds:"
      return_type: "V"
      parameter {
        name: "bounds"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "position"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPosition:"
      return_type: "V"
      parameter {
        name: "position"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "zPosition"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setZPosition:"
      return_type: "V"
      parameter {
        name: "zPosition"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "anchorPoint"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnchorPoint:"
      return_type: "V"
      parameter {
        name: "anchorPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "anchorPointZ"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnchorPointZ:"
      return_type: "V"
      parameter {
        name: "anchorPointZ"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "transform"
      return_type: "RCATransform3D;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTransform:"
      return_type: "V"
      parameter {
        name: "transform"
        type: "RCATransform3D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "affineTransform"
      return_type: "RCGAffineTransform;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAffineTransform:"
      return_type: "V"
      parameter {
        name: "m"
        type: "RCGAffineTransform;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFrame:"
      return_type: "V"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHidden:"
      return_type: "V"
      parameter {
        name: "hidden"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDoubleSided"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleSided:"
      return_type: "V"
      parameter {
        name: "doubleSided"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isGeometryFlipped"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setGeometryFlipped:"
      return_type: "V"
      parameter {
        name: "geometryFlipped"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsAreFlipped"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "superlayer"
      return_type: "LCALayer;"
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromSuperlayer"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "sublayers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSublayers:"
      return_type: "V"
      parameter {
        name: "sublayers"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addSublayer:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertSublayer:atIndex:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertSublayer:below:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
      parameter {
        name: "sibling"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertSublayer:above:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
      parameter {
        name: "sibling"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceSublayer:with:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
      parameter {
        name: "layer2"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sublayerTransform"
      return_type: "RCATransform3D;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSublayerTransform:"
      return_type: "V"
      parameter {
        name: "sublayerTransform"
        type: "RCATransform3D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mask"
      return_type: "LCALayer;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMask:"
      return_type: "V"
      parameter {
        name: "mask"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "masksToBounds"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setMasksToBounds:"
      return_type: "V"
      parameter {
        name: "masksToBounds"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPoint:fromLayer:"
      return_type: "RCGPoint;"
      parameter {
        name: "p"
        type: "RCGPoint;"
      }
      parameter {
        name: "l"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertPoint:toLayer:"
      return_type: "RCGPoint;"
      parameter {
        name: "p"
        type: "RCGPoint;"
      }
      parameter {
        name: "l"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRect:fromLayer:"
      return_type: "RCGRect;"
      parameter {
        name: "r"
        type: "RCGRect;"
      }
      parameter {
        name: "l"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertRect:toLayer:"
      return_type: "RCGRect;"
      parameter {
        name: "r"
        type: "RCGRect;"
      }
      parameter {
        name: "l"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertTime:fromLayer:"
      return_type: "D"
      parameter {
        name: "t"
        type: "D"
      }
      parameter {
        name: "l"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertTime:toLayer:"
      return_type: "D"
      parameter {
        name: "t"
        type: "D"
      }
      parameter {
        name: "l"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hitTest:"
      return_type: "LCALayer;"
      parameter {
        name: "p"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsPoint:"
      return_type: "Z"
      parameter {
        name: "p"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contents"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setContents:"
      return_type: "V"
      parameter {
        name: "contents"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentsRect:"
      return_type: "V"
      parameter {
        name: "contentsRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsGravity"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentsGravity:"
      return_type: "V"
      parameter {
        name: "contentsGravity"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsScale"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentsScale:"
      return_type: "V"
      parameter {
        name: "contentsScale"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentsCenter"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContentsCenter:"
      return_type: "V"
      parameter {
        name: "contentsCenter"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minificationFilter"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinificationFilter:"
      return_type: "V"
      parameter {
        name: "minificationFilter"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "magnificationFilter"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMagnificationFilter:"
      return_type: "V"
      parameter {
        name: "magnificationFilter"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minificationFilterBias"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinificationFilterBias:"
      return_type: "V"
      parameter {
        name: "minificationFilterBias"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOpaque"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setOpaque:"
      return_type: "V"
      parameter {
        name: "opaque"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "display"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsDisplay"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsDisplayInRect:"
      return_type: "V"
      parameter {
        name: "r"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "needsDisplay"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "displayIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "needsDisplayOnBoundsChange"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsDisplayOnBoundsChange:"
      return_type: "V"
      parameter {
        name: "needsDisplayOnBoundsChange"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsAsynchronously"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsAsynchronously:"
      return_type: "V"
      parameter {
        name: "drawsAsynchronously"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInContext:"
      return_type: "V"
      parameter {
        name: "ctx"
        type: "*RCGContext;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "renderInContext:"
      return_type: "V"
      parameter {
        name: "ctx"
        type: "*RCGContext;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "edgeAntialiasingMask"
      return_type: "X(Enum.enum CAEdgeAntialiasingMask)"
    }
    class_method: false
  }
  method {
    function {
      name: "setEdgeAntialiasingMask:"
      return_type: "V"
      parameter {
        name: "edgeAntialiasingMask"
        type: "X(Enum.enum CAEdgeAntialiasingMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "*RCGColor;;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "*RCGColor;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cornerRadius"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setCornerRadius:"
      return_type: "V"
      parameter {
        name: "cornerRadius"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "borderWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setBorderWidth:"
      return_type: "V"
      parameter {
        name: "borderWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "borderColor"
      return_type: "*RCGColor;;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBorderColor:"
      return_type: "V"
      parameter {
        name: "borderColor"
        type: "*RCGColor;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "opacity"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setOpacity:"
      return_type: "V"
      parameter {
        name: "opacity"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compositingFilter"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompositingFilter:"
      return_type: "V"
      parameter {
        name: "compositingFilter"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "filters"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFilters:"
      return_type: "V"
      parameter {
        name: "filters"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundFilters"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundFilters:"
      return_type: "V"
      parameter {
        name: "backgroundFilters"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldRasterize"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldRasterize:"
      return_type: "V"
      parameter {
        name: "shouldRasterize"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rasterizationScale"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRasterizationScale:"
      return_type: "V"
      parameter {
        name: "rasterizationScale"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadowColor"
      return_type: "*RCGColor;;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadowColor:"
      return_type: "V"
      parameter {
        name: "shadowColor"
        type: "*RCGColor;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadowOpacity"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadowOpacity:"
      return_type: "V"
      parameter {
        name: "shadowOpacity"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadowOffset"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadowOffset:"
      return_type: "V"
      parameter {
        name: "shadowOffset"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadowRadius"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadowRadius:"
      return_type: "V"
      parameter {
        name: "shadowRadius"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadowPath"
      return_type: "*cRCGPath;;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadowPath:"
      return_type: "V"
      parameter {
        name: "shadowPath"
        type: "*cRCGPath;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoresizingMask"
      return_type: "X(Enum.enum CAAutoresizingMask)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoresizingMask:"
      return_type: "V"
      parameter {
        name: "autoresizingMask"
        type: "X(Enum.enum CAAutoresizingMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManager"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setLayoutManager:"
      return_type: "V"
      parameter {
        name: "layoutManager"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredFrameSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsLayout"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "needsLayout"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "layoutIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "layoutSublayers"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resizeSublayersWithOldSize:"
      return_type: "V"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resizeWithOldSuperlayerSize:"
      return_type: "V"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultActionForKey:"
      return_type: "X(Unexposed.id<CAAction>)"
      parameter {
        name: "event"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "actionForKey:"
      return_type: "X(Unexposed.id<CAAction>)"
      parameter {
        name: "event"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "actions"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setActions:"
      return_type: "V"
      parameter {
        name: "actions"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addAnimation:forKey:"
      return_type: "V"
      parameter {
        name: "anim"
        type: "LCAAnimation;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllAnimations"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "removeAnimationForKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animationKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "animationForKey:"
      return_type: "LCAAnimation;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "style"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setStyle:"
      return_type: "V"
      parameter {
        name: "style"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  property {
    name: "bounds"
    type: "RCGRect;"
  }
  property {
    name: "position"
    type: "RCGPoint;"
  }
  property {
    name: "zPosition"
    type: "D"
  }
  property {
    name: "anchorPoint"
    type: "RCGPoint;"
  }
  property {
    name: "anchorPointZ"
    type: "D"
  }
  property {
    name: "transform"
    type: "RCATransform3D;"
  }
  property {
    name: "frame"
    type: "RCGRect;"
  }
  property {
    name: "hidden"
    type: "Z"
  }
  property {
    name: "doubleSided"
    type: "Z"
  }
  property {
    name: "geometryFlipped"
    type: "Z"
  }
  property {
    name: "superlayer"
    type: "LCALayer;"
  }
  property {
    name: "sublayers"
    type: "LNSArray;"
  }
  property {
    name: "sublayerTransform"
    type: "RCATransform3D;"
  }
  property {
    name: "mask"
    type: "LCALayer;"
  }
  property {
    name: "masksToBounds"
    type: "Z"
  }
  property {
    name: "contents"
    type: "OI"
  }
  property {
    name: "contentsRect"
    type: "RCGRect;"
  }
  property {
    name: "contentsGravity"
    type: "LNSString;"
  }
  property {
    name: "contentsScale"
    type: "D"
  }
  property {
    name: "contentsCenter"
    type: "RCGRect;"
  }
  property {
    name: "minificationFilter"
    type: "LNSString;"
  }
  property {
    name: "magnificationFilter"
    type: "LNSString;"
  }
  property {
    name: "minificationFilterBias"
    type: "F"
  }
  property {
    name: "opaque"
    type: "Z"
  }
  property {
    name: "needsDisplayOnBoundsChange"
    type: "Z"
  }
  property {
    name: "drawsAsynchronously"
    type: "Z"
  }
  property {
    name: "edgeAntialiasingMask"
    type: "X(Enum.enum CAEdgeAntialiasingMask)"
  }
  property {
    name: "backgroundColor"
    type: "*RCGColor;;"
  }
  property {
    name: "cornerRadius"
    type: "D"
  }
  property {
    name: "borderWidth"
    type: "D"
  }
  property {
    name: "borderColor"
    type: "*RCGColor;;"
  }
  property {
    name: "opacity"
    type: "F"
  }
  property {
    name: "compositingFilter"
    type: "OI"
  }
  property {
    name: "filters"
    type: "LNSArray;"
  }
  property {
    name: "backgroundFilters"
    type: "LNSArray;"
  }
  property {
    name: "shouldRasterize"
    type: "Z"
  }
  property {
    name: "rasterizationScale"
    type: "D"
  }
  property {
    name: "shadowColor"
    type: "*RCGColor;;"
  }
  property {
    name: "shadowOpacity"
    type: "F"
  }
  property {
    name: "shadowOffset"
    type: "RCGSize;"
  }
  property {
    name: "shadowRadius"
    type: "D"
  }
  property {
    name: "shadowPath"
    type: "*cRCGPath;;"
  }
  property {
    name: "autoresizingMask"
    type: "X(Enum.enum CAAutoresizingMask)"
  }
  property {
    name: "layoutManager"
    type: "OI"
  }
  property {
    name: "actions"
    type: "LNSDictionary;"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "delegate"
    type: "OI"
  }
  property {
    name: "style"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/CALayer.h"
}
class {
  name: "CAOpenGLLayer"
  base_class: "CALayer"
  method {
    function {
      name: "isAsynchronous"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAsynchronous:"
      return_type: "V"
      parameter {
        name: "asynchronous"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canDrawInCGLContext:pixelFormat:forLayerTime:displayTime:"
      return_type: "Z"
      parameter {
        name: "ctx"
        type: "*R_CGLContextObject;;"
      }
      parameter {
        name: "pf"
        type: "*R_CGLPixelFormatObject;;"
      }
      parameter {
        name: "t"
        type: "D"
      }
      parameter {
        name: "ts"
        type: "*cRCVTimeStamp;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInCGLContext:pixelFormat:forLayerTime:displayTime:"
      return_type: "V"
      parameter {
        name: "ctx"
        type: "*R_CGLContextObject;;"
      }
      parameter {
        name: "pf"
        type: "*R_CGLPixelFormatObject;;"
      }
      parameter {
        name: "t"
        type: "D"
      }
      parameter {
        name: "ts"
        type: "*cRCVTimeStamp;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copyCGLPixelFormatForDisplayMask:"
      return_type: "*R_CGLPixelFormatObject;;"
      parameter {
        name: "mask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "releaseCGLPixelFormat:"
      return_type: "V"
      parameter {
        name: "pf"
        type: "*R_CGLPixelFormatObject;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copyCGLContextForPixelFormat:"
      return_type: "*R_CGLContextObject;;"
      parameter {
        name: "pf"
        type: "*R_CGLPixelFormatObject;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "releaseCGLContext:"
      return_type: "V"
      parameter {
        name: "ctx"
        type: "*R_CGLContextObject;;"
      }
    }
    class_method: false
  }
  property {
    name: "asynchronous"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/CAOpenGLLayer.h"
}
class {
  name: "NSOpenGLLayer"
  base_class: "CAOpenGLLayer"
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openGLPixelFormat"
      return_type: "LNSOpenGLPixelFormat;"
    }
    class_method: false
  }
  method {
    function {
      name: "setOpenGLPixelFormat:"
      return_type: "V"
      parameter {
        name: "openGLPixelFormat"
        type: "LNSOpenGLPixelFormat;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openGLContext"
      return_type: "LNSOpenGLContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "setOpenGLContext:"
      return_type: "V"
      parameter {
        name: "openGLContext"
        type: "LNSOpenGLContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openGLPixelFormatForDisplayMask:"
      return_type: "LNSOpenGLPixelFormat;"
      parameter {
        name: "mask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openGLContextForPixelFormat:"
      return_type: "LNSOpenGLContext;"
      parameter {
        name: "pixelFormat"
        type: "LNSOpenGLPixelFormat;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:"
      return_type: "Z"
      parameter {
        name: "context"
        type: "LNSOpenGLContext;"
      }
      parameter {
        name: "pixelFormat"
        type: "LNSOpenGLPixelFormat;"
      }
      parameter {
        name: "t"
        type: "D"
      }
      parameter {
        name: "ts"
        type: "*cRCVTimeStamp;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:"
      return_type: "V"
      parameter {
        name: "context"
        type: "LNSOpenGLContext;"
      }
      parameter {
        name: "pixelFormat"
        type: "LNSOpenGLPixelFormat;"
      }
      parameter {
        name: "t"
        type: "D"
      }
      parameter {
        name: "ts"
        type: "*cRCVTimeStamp;;"
      }
    }
    class_method: false
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  property {
    name: "openGLPixelFormat"
    type: "LNSOpenGLPixelFormat;"
  }
  property {
    name: "openGLContext"
    type: "LNSOpenGLContext;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenGLLayer.h"
}
class {
  name: "NSOpenGLView"
  base_class: "NSView"
  method {
    function {
      name: "defaultPixelFormat"
      return_type: "LNSOpenGLPixelFormat;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithFrame:pixelFormat:"
      return_type: "OI"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "format"
        type: "LNSOpenGLPixelFormat;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openGLContext"
      return_type: "LNSOpenGLContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "setOpenGLContext:"
      return_type: "V"
      parameter {
        name: "openGLContext"
        type: "LNSOpenGLContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clearGLContext"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "update"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "reshape"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "pixelFormat"
      return_type: "LNSOpenGLPixelFormat;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPixelFormat:"
      return_type: "V"
      parameter {
        name: "pixelFormat"
        type: "LNSOpenGLPixelFormat;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prepareOpenGL"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "openGLContext"
    type: "LNSOpenGLContext;"
  }
  property {
    name: "pixelFormat"
    type: "LNSOpenGLPixelFormat;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenGLView.h"
}
class {
  name: "NSToolbarItem"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSValidatedUserInterfaceItem"
  method {
    function {
      name: "initWithItemIdentifier:"
      return_type: "OI"
      parameter {
        name: "itemIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "toolbar"
      return_type: "LNSToolbar;"
    }
    class_method: false
  }
  method {
    function {
      name: "label"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLabel:"
      return_type: "V"
      parameter {
        name: "label"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paletteLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPaletteLabel:"
      return_type: "V"
      parameter {
        name: "paletteLabel"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolTip"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setToolTip:"
      return_type: "V"
      parameter {
        name: "toolTip"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuFormRepresentation"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenuFormRepresentation:"
      return_type: "V"
      parameter {
        name: "menuFormRepresentation"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setTag:"
      return_type: "V"
      parameter {
        name: "tag"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinSize:"
      return_type: "V"
      parameter {
        name: "minSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxSize:"
      return_type: "V"
      parameter {
        name: "maxSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "visibilityPriority"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setVisibilityPriority:"
      return_type: "V"
      parameter {
        name: "visibilityPriority"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "autovalidates"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutovalidates:"
      return_type: "V"
      parameter {
        name: "autovalidates"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsDuplicatesInToolbar"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "itemIdentifier"
    type: "LNSString;"
  }
  property {
    name: "toolbar"
    type: "LNSToolbar;"
  }
  property {
    name: "label"
    type: "LNSString;"
  }
  property {
    name: "paletteLabel"
    type: "LNSString;"
  }
  property {
    name: "toolTip"
    type: "LNSString;"
  }
  property {
    name: "menuFormRepresentation"
    type: "LNSMenuItem;"
  }
  property {
    name: "tag"
    type: "I"
  }
  property {
    name: "target"
    type: "OI"
  }
  property {
    name: "action"
    type: "OS"
  }
  property {
    name: "enabled"
    type: "Z"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  property {
    name: "minSize"
    type: "RCGSize;"
  }
  property {
    name: "maxSize"
    type: "RCGSize;"
  }
  property {
    name: "visibilityPriority"
    type: "I"
  }
  property {
    name: "autovalidates"
    type: "Z"
  }
  property {
    name: "allowsDuplicatesInToolbar"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSToolbarItem.h"
}
class {
  name: "NSToolbarItemGroup"
  base_class: "NSToolbarItem"
  method {
    function {
      name: "subitems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSubitems:"
      return_type: "V"
      parameter {
        name: "subitems"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "subitems"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSToolbarItemGroup.h"
}
class {
  name: "NSStepper"
  base_class: "NSControl"
  protocol: "NSAccessibilityStepper"
  method {
    function {
      name: "minValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinValue:"
      return_type: "V"
      parameter {
        name: "minValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxValue:"
      return_type: "V"
      parameter {
        name: "maxValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "increment"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncrement:"
      return_type: "V"
      parameter {
        name: "increment"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueWraps"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setValueWraps:"
      return_type: "V"
      parameter {
        name: "valueWraps"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autorepeat"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutorepeat:"
      return_type: "V"
      parameter {
        name: "autorepeat"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "minValue"
    type: "D"
  }
  property {
    name: "maxValue"
    type: "D"
  }
  property {
    name: "increment"
    type: "D"
  }
  property {
    name: "valueWraps"
    type: "Z"
  }
  property {
    name: "autorepeat"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStepper.h"
}
class {
  name: "NSStepperCell"
  base_class: "NSActionCell"
  method {
    function {
      name: "minValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinValue:"
      return_type: "V"
      parameter {
        name: "minValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxValue:"
      return_type: "V"
      parameter {
        name: "maxValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "increment"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncrement:"
      return_type: "V"
      parameter {
        name: "increment"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueWraps"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setValueWraps:"
      return_type: "V"
      parameter {
        name: "valueWraps"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autorepeat"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutorepeat:"
      return_type: "V"
      parameter {
        name: "autorepeat"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "minValue"
    type: "D"
  }
  property {
    name: "maxValue"
    type: "D"
  }
  property {
    name: "increment"
    type: "D"
  }
  property {
    name: "valueWraps"
    type: "Z"
  }
  property {
    name: "autorepeat"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStepperCell.h"
}
class {
  name: "NSGlyphInfo"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSSecureCoding"
  method {
    function {
      name: "glyphInfoWithGlyphName:forFont:baseString:"
      return_type: "LNSGlyphInfo;"
      parameter {
        name: "glyphName"
        type: "LNSString;"
      }
      parameter {
        name: "font"
        type: "LNSFont;"
      }
      parameter {
        name: "theString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "glyphInfoWithGlyph:forFont:baseString:"
      return_type: "LNSGlyphInfo;"
      parameter {
        name: "glyph"
        type: "UI"
      }
      parameter {
        name: "font"
        type: "LNSFont;"
      }
      parameter {
        name: "theString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "glyphInfoWithCharacterIdentifier:collection:baseString:"
      return_type: "LNSGlyphInfo;"
      parameter {
        name: "cid"
        type: "UI"
      }
      parameter {
        name: "characterCollection"
        type: "X(Enum.enum NSCharacterCollection)"
      }
      parameter {
        name: "theString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "glyphName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "characterIdentifier"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "characterCollection"
      return_type: "X(Enum.enum NSCharacterCollection)"
    }
    class_method: false
  }
  property {
    name: "glyphName"
    type: "LNSString;"
  }
  property {
    name: "characterIdentifier"
    type: "UI"
  }
  property {
    name: "characterCollection"
    type: "X(Enum.enum NSCharacterCollection)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGlyphInfo.h"
}
class {
  name: "NSShadow"
  base_class: "NSObject"
  protocol: "NSCopying"
  protocol: "NSCoding"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "shadowOffset"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadowOffset:"
      return_type: "V"
      parameter {
        name: "shadowOffset"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadowBlurRadius"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadowBlurRadius:"
      return_type: "V"
      parameter {
        name: "shadowBlurRadius"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shadowColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShadowColor:"
      return_type: "V"
      parameter {
        name: "shadowColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "set"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "shadowOffset"
    type: "RCGSize;"
  }
  property {
    name: "shadowBlurRadius"
    type: "D"
  }
  property {
    name: "shadowColor"
    type: "LNSColor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSShadow.h"
}
class {
  name: "NSTypesetter"
  base_class: "NSObject"
  category: "NSTypesetter+NSLayoutPhaseInterface"
  category: "NSTypesetter+NSGlyphStorageInterface"
  method {
    function {
      name: "usesFontLeading"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesFontLeading:"
      return_type: "V"
      parameter {
        name: "usesFontLeading"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "typesetterBehavior"
      return_type: "X(Enum.enum NSTypesetterBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTypesetterBehavior:"
      return_type: "V"
      parameter {
        name: "typesetterBehavior"
        type: "X(Enum.enum NSTypesetterBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenationFactor"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setHyphenationFactor:"
      return_type: "V"
      parameter {
        name: "hyphenationFactor"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineFragmentPadding"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineFragmentPadding:"
      return_type: "V"
      parameter {
        name: "lineFragmentPadding"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substituteFontForFont:"
      return_type: "LNSFont;"
      parameter {
        name: "originalFont"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textTabForGlyphLocation:writingDirection:maxLocation:"
      return_type: "LNSTextTab;"
      parameter {
        name: "glyphLocation"
        type: "D"
      }
      parameter {
        name: "direction"
        type: "X(Enum.enum NSWritingDirection)"
      }
      parameter {
        name: "maxLocation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bidiProcessingEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBidiProcessingEnabled:"
      return_type: "V"
      parameter {
        name: "bidiProcessingEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedString:"
      return_type: "V"
      parameter {
        name: "attributedString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setParagraphGlyphRange:separatorGlyphRange:"
      return_type: "V"
      parameter {
        name: "paragraphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "paragraphSeparatorRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphGlyphRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSeparatorGlyphRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphCharacterRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSeparatorCharacterRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "layoutParagraphAtPoint:"
      return_type: "UI"
      parameter {
        name: "lineFragmentOrigin"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginParagraph"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "endParagraph"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "beginLineWithGlyphAtIndex:"
      return_type: "V"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endLineWithGlyphRange:"
      return_type: "V"
      parameter {
        name: "lineGlyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:"
      return_type: "D"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:"
      return_type: "D"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:"
      return_type: "D"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:"
      return_type: "V"
      parameter {
        name: "lineFragmentRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "lineFragmentUsedRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "paragraphSeparatorGlyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "lineOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributesForExtraLineFragment"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "actionForControlCharacterAtIndex:"
      return_type: "X(Enum.enum NSTypesetterControlCharacterAction)"
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManager"
      return_type: "LNSLayoutManager;"
    }
    class_method: false
  }
  method {
    function {
      name: "textContainers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentTextContainer"
      return_type: "LNSTextContainer;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentParagraphStyle"
      return_type: "LNSParagraphStyle;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHardInvalidation:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:"
      return_type: "V"
      parameter {
        name: "layoutManager"
        type: "LNSLayoutManager;"
      }
      parameter {
        name: "startGlyphIndex"
        type: "UI"
      }
      parameter {
        name: "maxNumLines"
        type: "UI"
      }
      parameter {
        name: "nextGlyph"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:"
      return_type: "R_NSRange;"
      parameter {
        name: "characterRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "layoutManager"
        type: "LNSLayoutManager;"
      }
      parameter {
        name: "maxNumLines"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:"
      return_type: "RCGSize;"
      parameter {
        name: "layoutMgr"
        type: "LNSLayoutManager;"
      }
      parameter {
        name: "nominallySpacedGlyphsRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "packedGlyphs"
        type: "*cUB;"
      }
      parameter {
        name: "packedGlyphsCount"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "baselineOffsetInLayoutManager:glyphIndex:"
      return_type: "D"
      parameter {
        name: "layoutMgr"
        type: "LNSLayoutManager;"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharedSystemTypesetter"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "sharedSystemTypesetterForBehavior:"
      return_type: "OI"
      parameter {
        name: "theBehavior"
        type: "X(Enum.enum NSTypesetterBehavior)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultTypesetterBehavior"
      return_type: "X(Enum.enum NSTypesetterBehavior)"
    }
    class_method: true
  }
  property {
    name: "usesFontLeading"
    type: "Z"
  }
  property {
    name: "typesetterBehavior"
    type: "X(Enum.enum NSTypesetterBehavior)"
  }
  property {
    name: "hyphenationFactor"
    type: "F"
  }
  property {
    name: "lineFragmentPadding"
    type: "D"
  }
  property {
    name: "bidiProcessingEnabled"
    type: "Z"
  }
  property {
    name: "attributedString"
    type: "LNSAttributedString;"
  }
  property {
    name: "paragraphGlyphRange"
    type: "R_NSRange;"
  }
  property {
    name: "paragraphSeparatorGlyphRange"
    type: "R_NSRange;"
  }
  property {
    name: "paragraphCharacterRange"
    type: "R_NSRange;"
  }
  property {
    name: "paragraphSeparatorCharacterRange"
    type: "R_NSRange;"
  }
  property {
    name: "attributesForExtraLineFragment"
    type: "LNSDictionary;"
  }
  property {
    name: "layoutManager"
    type: "LNSLayoutManager;"
  }
  property {
    name: "textContainers"
    type: "LNSArray;"
  }
  property {
    name: "currentTextContainer"
    type: "LNSTextContainer;"
  }
  property {
    name: "currentParagraphStyle"
    type: "LNSParagraphStyle;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTypesetter.h"
}
class {
  name: "NSATSTypesetter"
  base_class: "NSTypesetter"
  category: "NSATSTypesetter+NSPantherCompatibility"
  category: "NSATSTypesetter+NSPrimitiveInterface"
  category: "NSATSTypesetter+NSLayoutPhaseInterface"
  category: "NSATSTypesetter+NSGlyphStorageInterface"
  method {
    function {
      name: "sharedTypesetter"
      return_type: "LNSATSTypesetter;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSATSTypesetter.h"
}
class {
  name: "NSSearchField"
  base_class: "NSTextField"
  method {
    function {
      name: "recentSearches"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRecentSearches:"
      return_type: "V"
      parameter {
        name: "recentSearches"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recentsAutosaveName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRecentsAutosaveName:"
      return_type: "V"
      parameter {
        name: "recentsAutosaveName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "searchMenuTemplate"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSearchMenuTemplate:"
      return_type: "V"
      parameter {
        name: "searchMenuTemplate"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendsWholeSearchString"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSendsWholeSearchString:"
      return_type: "V"
      parameter {
        name: "sendsWholeSearchString"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumRecents"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaximumRecents:"
      return_type: "V"
      parameter {
        name: "maximumRecents"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendsSearchStringImmediately"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSendsSearchStringImmediately:"
      return_type: "V"
      parameter {
        name: "sendsSearchStringImmediately"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "recentSearches"
    type: "LNSArray;"
  }
  property {
    name: "recentsAutosaveName"
    type: "LNSString;"
  }
  property {
    name: "searchMenuTemplate"
    type: "LNSMenu;"
  }
  property {
    name: "sendsWholeSearchString"
    type: "Z"
  }
  property {
    name: "maximumRecents"
    type: "I"
  }
  property {
    name: "sendsSearchStringImmediately"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSearchField.h"
}
class {
  name: "NSSearchFieldCell"
  base_class: "NSTextFieldCell"
  method {
    function {
      name: "searchButtonCell"
      return_type: "LNSButtonCell;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSearchButtonCell:"
      return_type: "V"
      parameter {
        name: "searchButtonCell"
        type: "LNSButtonCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelButtonCell"
      return_type: "LNSButtonCell;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCancelButtonCell:"
      return_type: "V"
      parameter {
        name: "cancelButtonCell"
        type: "LNSButtonCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resetSearchButtonCell"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "resetCancelButtonCell"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "searchTextRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "searchButtonRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelButtonRectForBounds:"
      return_type: "RCGRect;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "searchMenuTemplate"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSearchMenuTemplate:"
      return_type: "V"
      parameter {
        name: "searchMenuTemplate"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendsWholeSearchString"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSendsWholeSearchString:"
      return_type: "V"
      parameter {
        name: "sendsWholeSearchString"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumRecents"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaximumRecents:"
      return_type: "V"
      parameter {
        name: "maximumRecents"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recentSearches"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRecentSearches:"
      return_type: "V"
      parameter {
        name: "recentSearches"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recentsAutosaveName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRecentsAutosaveName:"
      return_type: "V"
      parameter {
        name: "recentsAutosaveName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendsSearchStringImmediately"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSendsSearchStringImmediately:"
      return_type: "V"
      parameter {
        name: "sendsSearchStringImmediately"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "searchButtonCell"
    type: "LNSButtonCell;"
  }
  property {
    name: "cancelButtonCell"
    type: "LNSButtonCell;"
  }
  property {
    name: "searchMenuTemplate"
    type: "LNSMenu;"
  }
  property {
    name: "sendsWholeSearchString"
    type: "Z"
  }
  property {
    name: "maximumRecents"
    type: "I"
  }
  property {
    name: "recentSearches"
    type: "LNSArray;"
  }
  property {
    name: "recentsAutosaveName"
    type: "LNSString;"
  }
  property {
    name: "sendsSearchStringImmediately"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSearchFieldCell.h"
}
class {
  name: "NSController"
  base_class: "NSObject"
  protocol: "NSCoding"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectDidBeginEditing:"
      return_type: "V"
      parameter {
        name: "editor"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectDidEndEditing:"
      return_type: "V"
      parameter {
        name: "editor"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "discardEditing"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "commitEditing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "commitEditingWithDelegate:didCommitSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didCommitSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditing"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "editing"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSController.h"
}
class {
  name: "NSObjectController"
  base_class: "NSController"
  category: "NSObjectController+NSManagedController"
  method {
    function {
      name: "initWithContent:"
      return_type: "OI"
      parameter {
        name: "content"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "content"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setContent:"
      return_type: "V"
      parameter {
        name: "content"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selection"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "automaticallyPreparesContent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticallyPreparesContent:"
      return_type: "V"
      parameter {
        name: "automaticallyPreparesContent"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prepareContent"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "objectClass"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectClass:"
      return_type: "V"
      parameter {
        name: "objectClass"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "newObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "add:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canAdd"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "remove:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canRemove"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "validateUserInterfaceItem:"
      return_type: "Z"
      parameter {
        name: "item"
        type: "X(Unexposed.id<NSValidatedUserInterfaceItem>)"
      }
    }
    class_method: false
  }
  property {
    name: "content"
    type: "OI"
  }
  property {
    name: "selection"
    type: "OI"
  }
  property {
    name: "selectedObjects"
    type: "LNSArray;"
  }
  property {
    name: "automaticallyPreparesContent"
    type: "Z"
  }
  property {
    name: "objectClass"
    type: "OC"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "canAdd"
    type: "Z"
  }
  property {
    name: "canRemove"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSObjectController.h"
}
class {
  name: "NSArrayController"
  base_class: "NSObjectController"
  method {
    function {
      name: "rearrangeObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "automaticallyRearrangesObjects"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticallyRearrangesObjects:"
      return_type: "V"
      parameter {
        name: "automaticallyRearrangesObjects"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "automaticRearrangementKeyPaths"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "didChangeArrangementCriteria"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "sortDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSortDescriptors:"
      return_type: "V"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "filterPredicate"
      return_type: "LNSPredicate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFilterPredicate:"
      return_type: "V"
      parameter {
        name: "filterPredicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clearsFilterPredicateOnInsertion"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setClearsFilterPredicateOnInsertion:"
      return_type: "V"
      parameter {
        name: "clearsFilterPredicateOnInsertion"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrangeObjects:"
      return_type: "LNSArray;"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrangedObjects"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "avoidsEmptySelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAvoidsEmptySelection:"
      return_type: "V"
      parameter {
        name: "avoidsEmptySelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preservesSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreservesSelection:"
      return_type: "V"
      parameter {
        name: "preservesSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectsInsertedObjects"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectsInsertedObjects:"
      return_type: "V"
      parameter {
        name: "selectsInsertedObjects"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alwaysUsesMultipleValuesMarker"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlwaysUsesMultipleValuesMarker:"
      return_type: "V"
      parameter {
        name: "alwaysUsesMultipleValuesMarker"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionIndexes:"
      return_type: "Z"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionIndexes"
      return_type: "LNSIndexSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionIndex:"
      return_type: "Z"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionIndex"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "addSelectionIndexes:"
      return_type: "Z"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeSelectionIndexes:"
      return_type: "Z"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedObjects:"
      return_type: "Z"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "addSelectedObjects:"
      return_type: "Z"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeSelectedObjects:"
      return_type: "Z"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "add:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "remove:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insert:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canInsert"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "selectNext:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectPrevious:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canSelectNext"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "canSelectPrevious"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addObjects:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertObject:atArrangedObjectIndex:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertObjects:atArrangedObjectIndexes:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectAtArrangedObjectIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsAtArrangedObjectIndexes:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjects:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "automaticallyRearrangesObjects"
    type: "Z"
  }
  property {
    name: "automaticRearrangementKeyPaths"
    type: "LNSArray;"
  }
  property {
    name: "sortDescriptors"
    type: "LNSArray;"
  }
  property {
    name: "filterPredicate"
    type: "LNSPredicate;"
  }
  property {
    name: "clearsFilterPredicateOnInsertion"
    type: "Z"
  }
  property {
    name: "arrangedObjects"
    type: "OI"
  }
  property {
    name: "avoidsEmptySelection"
    type: "Z"
  }
  property {
    name: "preservesSelection"
    type: "Z"
  }
  property {
    name: "selectsInsertedObjects"
    type: "Z"
  }
  property {
    name: "alwaysUsesMultipleValuesMarker"
    type: "Z"
  }
  property {
    name: "selectionIndexes"
    type: "LNSIndexSet;"
  }
  property {
    name: "selectionIndex"
    type: "UI"
  }
  property {
    name: "selectedObjects"
    type: "LNSArray;"
  }
  property {
    name: "canInsert"
    type: "Z"
  }
  property {
    name: "canSelectNext"
    type: "Z"
  }
  property {
    name: "canSelectPrevious"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSArrayController.h"
}
class {
  name: "NSDictionaryController"
  base_class: "NSArrayController"
  method {
    function {
      name: "newObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "initialKey"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInitialKey:"
      return_type: "V"
      parameter {
        name: "initialKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initialValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setInitialValue:"
      return_type: "V"
      parameter {
        name: "initialValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "includedKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncludedKeys:"
      return_type: "V"
      parameter {
        name: "includedKeys"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "excludedKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setExcludedKeys:"
      return_type: "V"
      parameter {
        name: "excludedKeys"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedKeyDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocalizedKeyDictionary:"
      return_type: "V"
      parameter {
        name: "localizedKeyDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedKeyTable"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocalizedKeyTable:"
      return_type: "V"
      parameter {
        name: "localizedKeyTable"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "initialKey"
    type: "LNSString;"
  }
  property {
    name: "initialValue"
    type: "OI"
  }
  property {
    name: "includedKeys"
    type: "LNSArray;"
  }
  property {
    name: "excludedKeys"
    type: "LNSArray;"
  }
  property {
    name: "localizedKeyDictionary"
    type: "LNSDictionary;"
  }
  property {
    name: "localizedKeyTable"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDictionaryController.h"
}
class {
  name: "NSTreeNode"
  base_class: "NSObject"
  method {
    function {
      name: "treeNodeWithRepresentedObject:"
      return_type: "OI"
      parameter {
        name: "modelObject"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithRepresentedObject:"
      return_type: "OI"
      parameter {
        name: "modelObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "representedObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "indexPath"
      return_type: "LNSIndexPath;"
    }
    class_method: false
  }
  method {
    function {
      name: "isLeaf"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "childNodes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "mutableChildNodes"
      return_type: "LNSMutableArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "descendantNodeAtIndexPath:"
      return_type: "LNSTreeNode;"
      parameter {
        name: "indexPath"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parentNode"
      return_type: "LNSTreeNode;"
    }
    class_method: false
  }
  method {
    function {
      name: "sortWithSortDescriptors:recursively:"
      return_type: "V"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
      parameter {
        name: "recursively"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "representedObject"
    type: "OI"
  }
  property {
    name: "indexPath"
    type: "LNSIndexPath;"
  }
  property {
    name: "leaf"
    type: "Z"
  }
  property {
    name: "childNodes"
    type: "LNSArray;"
  }
  property {
    name: "mutableChildNodes"
    type: "LNSMutableArray;"
  }
  property {
    name: "parentNode"
    type: "LNSTreeNode;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTreeNode.h"
}
class {
  name: "NSTreeController"
  base_class: "NSObjectController"
  method {
    function {
      name: "rearrangeObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "arrangedObjects"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "childrenKeyPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setChildrenKeyPath:"
      return_type: "V"
      parameter {
        name: "childrenKeyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "countKeyPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCountKeyPath:"
      return_type: "V"
      parameter {
        name: "countKeyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "leafKeyPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLeafKeyPath:"
      return_type: "V"
      parameter {
        name: "leafKeyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortDescriptors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSortDescriptors:"
      return_type: "V"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "content"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setContent:"
      return_type: "V"
      parameter {
        name: "content"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "add:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "remove:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addChild:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insert:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertChild:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canInsert"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "canInsertChild"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "canAddChild"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "insertObject:atArrangedObjectIndexPath:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "indexPath"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertObjects:atArrangedObjectIndexPaths:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
      parameter {
        name: "indexPaths"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectAtArrangedObjectIndexPath:"
      return_type: "V"
      parameter {
        name: "indexPath"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsAtArrangedObjectIndexPaths:"
      return_type: "V"
      parameter {
        name: "indexPaths"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "avoidsEmptySelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAvoidsEmptySelection:"
      return_type: "V"
      parameter {
        name: "avoidsEmptySelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preservesSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreservesSelection:"
      return_type: "V"
      parameter {
        name: "preservesSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectsInsertedObjects"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectsInsertedObjects:"
      return_type: "V"
      parameter {
        name: "selectsInsertedObjects"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alwaysUsesMultipleValuesMarker"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlwaysUsesMultipleValuesMarker:"
      return_type: "V"
      parameter {
        name: "alwaysUsesMultipleValuesMarker"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionIndexPaths:"
      return_type: "Z"
      parameter {
        name: "indexPaths"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionIndexPaths"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionIndexPath:"
      return_type: "Z"
      parameter {
        name: "indexPath"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionIndexPath"
      return_type: "LNSIndexPath;"
    }
    class_method: false
  }
  method {
    function {
      name: "addSelectionIndexPaths:"
      return_type: "Z"
      parameter {
        name: "indexPaths"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeSelectionIndexPaths:"
      return_type: "Z"
      parameter {
        name: "indexPaths"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedNodes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "moveNode:toIndexPath:"
      return_type: "V"
      parameter {
        name: "node"
        type: "LNSTreeNode;"
      }
      parameter {
        name: "indexPath"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveNodes:toIndexPath:"
      return_type: "V"
      parameter {
        name: "nodes"
        type: "LNSArray;"
      }
      parameter {
        name: "startingIndexPath"
        type: "LNSIndexPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "childrenKeyPathForNode:"
      return_type: "LNSString;"
      parameter {
        name: "node"
        type: "LNSTreeNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "countKeyPathForNode:"
      return_type: "LNSString;"
      parameter {
        name: "node"
        type: "LNSTreeNode;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "leafKeyPathForNode:"
      return_type: "LNSString;"
      parameter {
        name: "node"
        type: "LNSTreeNode;"
      }
    }
    class_method: false
  }
  property {
    name: "arrangedObjects"
    type: "OI"
  }
  property {
    name: "childrenKeyPath"
    type: "LNSString;"
  }
  property {
    name: "countKeyPath"
    type: "LNSString;"
  }
  property {
    name: "leafKeyPath"
    type: "LNSString;"
  }
  property {
    name: "sortDescriptors"
    type: "LNSArray;"
  }
  property {
    name: "content"
    type: "OI"
  }
  property {
    name: "canInsert"
    type: "Z"
  }
  property {
    name: "canInsertChild"
    type: "Z"
  }
  property {
    name: "canAddChild"
    type: "Z"
  }
  property {
    name: "avoidsEmptySelection"
    type: "Z"
  }
  property {
    name: "preservesSelection"
    type: "Z"
  }
  property {
    name: "selectsInsertedObjects"
    type: "Z"
  }
  property {
    name: "alwaysUsesMultipleValuesMarker"
    type: "Z"
  }
  property {
    name: "selectedObjects"
    type: "LNSArray;"
  }
  property {
    name: "selectionIndexPaths"
    type: "LNSArray;"
  }
  property {
    name: "selectionIndexPath"
    type: "LNSIndexPath;"
  }
  property {
    name: "selectedNodes"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTreeController.h"
}
class {
  name: "NSUserDefaultsController"
  base_class: "NSController"
  method {
    function {
      name: "sharedUserDefaultsController"
      return_type: "LNSUserDefaultsController;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithDefaults:initialValues:"
      return_type: "OI"
      parameter {
        name: "defaults"
        type: "LNSUserDefaults;"
      }
      parameter {
        name: "initialValues"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaults"
      return_type: "LNSUserDefaults;"
    }
    class_method: false
  }
  method {
    function {
      name: "initialValues"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInitialValues:"
      return_type: "V"
      parameter {
        name: "initialValues"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appliesImmediately"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAppliesImmediately:"
      return_type: "V"
      parameter {
        name: "appliesImmediately"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasUnappliedChanges"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "values"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "revert:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "save:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "revertToInitialValues:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "defaults"
    type: "LNSUserDefaults;"
  }
  property {
    name: "initialValues"
    type: "LNSDictionary;"
  }
  property {
    name: "appliesImmediately"
    type: "Z"
  }
  property {
    name: "hasUnappliedChanges"
    type: "Z"
  }
  property {
    name: "values"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSUserDefaultsController.h"
}
class {
  name: "NSTextList"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "initWithMarkerFormat:options:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "markerFormat"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "listOptions"
      return_type: "X(Enum.enum NSTextListOptions)"
    }
    class_method: false
  }
  method {
    function {
      name: "markerForItemNumber:"
      return_type: "LNSString;"
      parameter {
        name: "itemNum"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "startingItemNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setStartingItemNumber:"
      return_type: "V"
      parameter {
        name: "startingItemNumber"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "markerFormat"
    type: "LNSString;"
  }
  property {
    name: "listOptions"
    type: "X(Enum.enum NSTextListOptions)"
  }
  property {
    name: "startingItemNumber"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextList.h"
}
class {
  name: "NSTextBlock"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:type:forDimension:"
      return_type: "V"
      parameter {
        name: "val"
        type: "D"
      }
      parameter {
        name: "type"
        type: "X(Enum.enum NSTextBlockValueType)"
      }
      parameter {
        name: "dimension"
        type: "X(Enum.enum NSTextBlockDimension)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueForDimension:"
      return_type: "D"
      parameter {
        name: "dimension"
        type: "X(Enum.enum NSTextBlockDimension)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueTypeForDimension:"
      return_type: "X(Enum.enum NSTextBlockValueType)"
      parameter {
        name: "dimension"
        type: "X(Enum.enum NSTextBlockDimension)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setContentWidth:type:"
      return_type: "V"
      parameter {
        name: "val"
        type: "D"
      }
      parameter {
        name: "type"
        type: "X(Enum.enum NSTextBlockValueType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentWidth"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "contentWidthValueType"
      return_type: "X(Enum.enum NSTextBlockValueType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setWidth:type:forLayer:edge:"
      return_type: "V"
      parameter {
        name: "val"
        type: "D"
      }
      parameter {
        name: "type"
        type: "X(Enum.enum NSTextBlockValueType)"
      }
      parameter {
        name: "layer"
        type: "X(Enum.enum NSTextBlockLayer)"
      }
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setWidth:type:forLayer:"
      return_type: "V"
      parameter {
        name: "val"
        type: "D"
      }
      parameter {
        name: "type"
        type: "X(Enum.enum NSTextBlockValueType)"
      }
      parameter {
        name: "layer"
        type: "X(Enum.enum NSTextBlockLayer)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "widthForLayer:edge:"
      return_type: "D"
      parameter {
        name: "layer"
        type: "X(Enum.enum NSTextBlockLayer)"
      }
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "widthValueTypeForLayer:edge:"
      return_type: "X(Enum.enum NSTextBlockValueType)"
      parameter {
        name: "layer"
        type: "X(Enum.enum NSTextBlockLayer)"
      }
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "verticalAlignment"
      return_type: "X(Enum.enum NSTextBlockVerticalAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticalAlignment:"
      return_type: "V"
      parameter {
        name: "verticalAlignment"
        type: "X(Enum.enum NSTextBlockVerticalAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBorderColor:forEdge:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBorderColor:"
      return_type: "V"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "borderColorForEdge:"
      return_type: "LNSColor;"
      parameter {
        name: "edge"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectForLayoutAtPoint:inRect:textContainer:characterRange:"
      return_type: "RCGRect;"
      parameter {
        name: "startingPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundsRectForContentRect:inRect:textContainer:characterRange:"
      return_type: "RCGRect;"
      parameter {
        name: "contentRect"
        type: "RCGRect;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawBackgroundWithFrame:inView:characterRange:layoutManager:"
      return_type: "V"
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "layoutManager"
        type: "LNSLayoutManager;"
      }
    }
    class_method: false
  }
  property {
    name: "contentWidth"
    type: "D"
  }
  property {
    name: "contentWidthValueType"
    type: "X(Enum.enum NSTextBlockValueType)"
  }
  property {
    name: "verticalAlignment"
    type: "X(Enum.enum NSTextBlockVerticalAlignment)"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextTable.h"
}
class {
  name: "NSTextTableBlock"
  base_class: "NSTextBlock"
  method {
    function {
      name: "initWithTable:startingRow:rowSpan:startingColumn:columnSpan:"
      return_type: "OI"
      parameter {
        name: "table"
        type: "LNSTextTable;"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "rowSpan"
        type: "I"
      }
      parameter {
        name: "col"
        type: "I"
      }
      parameter {
        name: "colSpan"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "table"
      return_type: "LNSTextTable;"
    }
    class_method: false
  }
  method {
    function {
      name: "startingRow"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "rowSpan"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "startingColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "columnSpan"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "table"
    type: "LNSTextTable;"
  }
  property {
    name: "startingRow"
    type: "I"
  }
  property {
    name: "rowSpan"
    type: "I"
  }
  property {
    name: "startingColumn"
    type: "I"
  }
  property {
    name: "columnSpan"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextTable.h"
}
class {
  name: "NSTextTable"
  base_class: "NSTextBlock"
  method {
    function {
      name: "numberOfColumns"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfColumns:"
      return_type: "V"
      parameter {
        name: "numberOfColumns"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutAlgorithm"
      return_type: "X(Enum.enum NSTextTableLayoutAlgorithm)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLayoutAlgorithm:"
      return_type: "V"
      parameter {
        name: "layoutAlgorithm"
        type: "X(Enum.enum NSTextTableLayoutAlgorithm)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collapsesBorders"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCollapsesBorders:"
      return_type: "V"
      parameter {
        name: "collapsesBorders"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hidesEmptyCells"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHidesEmptyCells:"
      return_type: "V"
      parameter {
        name: "hidesEmptyCells"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:"
      return_type: "RCGRect;"
      parameter {
        name: "block"
        type: "LNSTextTableBlock;"
      }
      parameter {
        name: "startingPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundsRectForBlock:contentRect:inRect:textContainer:characterRange:"
      return_type: "RCGRect;"
      parameter {
        name: "block"
        type: "LNSTextTableBlock;"
      }
      parameter {
        name: "contentRect"
        type: "RCGRect;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:"
      return_type: "V"
      parameter {
        name: "block"
        type: "LNSTextTableBlock;"
      }
      parameter {
        name: "frameRect"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "layoutManager"
        type: "LNSLayoutManager;"
      }
    }
    class_method: false
  }
  property {
    name: "numberOfColumns"
    type: "UI"
  }
  property {
    name: "layoutAlgorithm"
    type: "X(Enum.enum NSTextTableLayoutAlgorithm)"
  }
  property {
    name: "collapsesBorders"
    type: "Z"
  }
  property {
    name: "hidesEmptyCells"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextTable.h"
}
class {
  name: "NSDatePickerCell"
  base_class: "NSActionCell"
  method {
    function {
      name: "datePickerStyle"
      return_type: "X(Enum.enum NSDatePickerStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDatePickerStyle:"
      return_type: "V"
      parameter {
        name: "datePickerStyle"
        type: "X(Enum.enum NSDatePickerStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextColor:"
      return_type: "V"
      parameter {
        name: "textColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "datePickerMode"
      return_type: "X(Enum.enum NSDatePickerMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDatePickerMode:"
      return_type: "V"
      parameter {
        name: "datePickerMode"
        type: "X(Enum.enum NSDatePickerMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "datePickerElements"
      return_type: "X(Enum.enum NSDatePickerElementFlags)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDatePickerElements:"
      return_type: "V"
      parameter {
        name: "datePickerElements"
        type: "X(Enum.enum NSDatePickerElementFlags)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "calendar"
      return_type: "LNSCalendar;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCalendar:"
      return_type: "V"
      parameter {
        name: "calendar"
        type: "LNSCalendar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "locale"
      return_type: "LNSLocale;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocale:"
      return_type: "V"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeZone:"
      return_type: "V"
      parameter {
        name: "timeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateValue"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDateValue:"
      return_type: "V"
      parameter {
        name: "dateValue"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeInterval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeInterval:"
      return_type: "V"
      parameter {
        name: "timeInterval"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinDate:"
      return_type: "V"
      parameter {
        name: "minDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxDate:"
      return_type: "V"
      parameter {
        name: "maxDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSDatePickerCellDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSDatePickerCellDelegate>)"
      }
    }
    class_method: false
  }
  property {
    name: "datePickerStyle"
    type: "X(Enum.enum NSDatePickerStyle)"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "textColor"
    type: "LNSColor;"
  }
  property {
    name: "datePickerMode"
    type: "X(Enum.enum NSDatePickerMode)"
  }
  property {
    name: "datePickerElements"
    type: "X(Enum.enum NSDatePickerElementFlags)"
  }
  property {
    name: "calendar"
    type: "LNSCalendar;"
  }
  property {
    name: "locale"
    type: "LNSLocale;"
  }
  property {
    name: "timeZone"
    type: "LNSTimeZone;"
  }
  property {
    name: "dateValue"
    type: "LNSDate;"
  }
  property {
    name: "timeInterval"
    type: "D"
  }
  property {
    name: "minDate"
    type: "LNSDate;"
  }
  property {
    name: "maxDate"
    type: "LNSDate;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSDatePickerCellDelegate>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDatePickerCell.h"
}
class {
  name: "NSDatePicker"
  base_class: "NSControl"
  method {
    function {
      name: "datePickerStyle"
      return_type: "X(Enum.enum NSDatePickerStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDatePickerStyle:"
      return_type: "V"
      parameter {
        name: "datePickerStyle"
        type: "X(Enum.enum NSDatePickerStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBezeled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBezeled:"
      return_type: "V"
      parameter {
        name: "bezeled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isBordered"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBordered:"
      return_type: "V"
      parameter {
        name: "bordered"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextColor:"
      return_type: "V"
      parameter {
        name: "textColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "datePickerMode"
      return_type: "X(Enum.enum NSDatePickerMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDatePickerMode:"
      return_type: "V"
      parameter {
        name: "datePickerMode"
        type: "X(Enum.enum NSDatePickerMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "datePickerElements"
      return_type: "X(Enum.enum NSDatePickerElementFlags)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDatePickerElements:"
      return_type: "V"
      parameter {
        name: "datePickerElements"
        type: "X(Enum.enum NSDatePickerElementFlags)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "calendar"
      return_type: "LNSCalendar;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCalendar:"
      return_type: "V"
      parameter {
        name: "calendar"
        type: "LNSCalendar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "locale"
      return_type: "LNSLocale;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocale:"
      return_type: "V"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeZone:"
      return_type: "V"
      parameter {
        name: "timeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateValue"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDateValue:"
      return_type: "V"
      parameter {
        name: "dateValue"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeInterval"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeInterval:"
      return_type: "V"
      parameter {
        name: "timeInterval"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinDate:"
      return_type: "V"
      parameter {
        name: "minDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxDate:"
      return_type: "V"
      parameter {
        name: "maxDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSDatePickerCellDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSDatePickerCellDelegate>)"
      }
    }
    class_method: false
  }
  property {
    name: "datePickerStyle"
    type: "X(Enum.enum NSDatePickerStyle)"
  }
  property {
    name: "bezeled"
    type: "Z"
  }
  property {
    name: "bordered"
    type: "Z"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "textColor"
    type: "LNSColor;"
  }
  property {
    name: "datePickerMode"
    type: "X(Enum.enum NSDatePickerMode)"
  }
  property {
    name: "datePickerElements"
    type: "X(Enum.enum NSDatePickerElementFlags)"
  }
  property {
    name: "calendar"
    type: "LNSCalendar;"
  }
  property {
    name: "locale"
    type: "LNSLocale;"
  }
  property {
    name: "timeZone"
    type: "LNSTimeZone;"
  }
  property {
    name: "dateValue"
    type: "LNSDate;"
  }
  property {
    name: "timeInterval"
    type: "D"
  }
  property {
    name: "minDate"
    type: "LNSDate;"
  }
  property {
    name: "maxDate"
    type: "LNSDate;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSDatePickerCellDelegate>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDatePicker.h"
}
class {
  name: "NSLevelIndicatorCell"
  base_class: "NSActionCell"
  method {
    function {
      name: "initWithLevelIndicatorStyle:"
      return_type: "OI"
      parameter {
        name: "levelIndicatorStyle"
        type: "X(Enum.enum NSLevelIndicatorStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "levelIndicatorStyle"
      return_type: "X(Enum.enum NSLevelIndicatorStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLevelIndicatorStyle:"
      return_type: "V"
      parameter {
        name: "levelIndicatorStyle"
        type: "X(Enum.enum NSLevelIndicatorStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinValue:"
      return_type: "V"
      parameter {
        name: "minValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxValue:"
      return_type: "V"
      parameter {
        name: "maxValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "warningValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setWarningValue:"
      return_type: "V"
      parameter {
        name: "warningValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "criticalValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setCriticalValue:"
      return_type: "V"
      parameter {
        name: "criticalValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tickMarkPosition"
      return_type: "X(Enum.enum NSTickMarkPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTickMarkPosition:"
      return_type: "V"
      parameter {
        name: "tickMarkPosition"
        type: "X(Enum.enum NSTickMarkPosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfTickMarks"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfTickMarks:"
      return_type: "V"
      parameter {
        name: "numberOfTickMarks"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfMajorTickMarks"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfMajorTickMarks:"
      return_type: "V"
      parameter {
        name: "numberOfMajorTickMarks"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectOfTickMarkAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tickMarkValueAtIndex:"
      return_type: "D"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  property {
    name: "levelIndicatorStyle"
    type: "X(Enum.enum NSLevelIndicatorStyle)"
  }
  property {
    name: "minValue"
    type: "D"
  }
  property {
    name: "maxValue"
    type: "D"
  }
  property {
    name: "warningValue"
    type: "D"
  }
  property {
    name: "criticalValue"
    type: "D"
  }
  property {
    name: "tickMarkPosition"
    type: "X(Enum.enum NSTickMarkPosition)"
  }
  property {
    name: "numberOfTickMarks"
    type: "I"
  }
  property {
    name: "numberOfMajorTickMarks"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLevelIndicatorCell.h"
}
class {
  name: "NSLevelIndicator"
  base_class: "NSControl"
  method {
    function {
      name: "levelIndicatorStyle"
      return_type: "X(Enum.enum NSLevelIndicatorStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLevelIndicatorStyle:"
      return_type: "V"
      parameter {
        name: "levelIndicatorStyle"
        type: "X(Enum.enum NSLevelIndicatorStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinValue:"
      return_type: "V"
      parameter {
        name: "minValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxValue:"
      return_type: "V"
      parameter {
        name: "maxValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "warningValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setWarningValue:"
      return_type: "V"
      parameter {
        name: "warningValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "criticalValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setCriticalValue:"
      return_type: "V"
      parameter {
        name: "criticalValue"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tickMarkPosition"
      return_type: "X(Enum.enum NSTickMarkPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTickMarkPosition:"
      return_type: "V"
      parameter {
        name: "tickMarkPosition"
        type: "X(Enum.enum NSTickMarkPosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfTickMarks"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfTickMarks:"
      return_type: "V"
      parameter {
        name: "numberOfTickMarks"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfMajorTickMarks"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfMajorTickMarks:"
      return_type: "V"
      parameter {
        name: "numberOfMajorTickMarks"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tickMarkValueAtIndex:"
      return_type: "D"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectOfTickMarkAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "levelIndicatorStyle"
    type: "X(Enum.enum NSLevelIndicatorStyle)"
  }
  property {
    name: "minValue"
    type: "D"
  }
  property {
    name: "maxValue"
    type: "D"
  }
  property {
    name: "warningValue"
    type: "D"
  }
  property {
    name: "criticalValue"
    type: "D"
  }
  property {
    name: "tickMarkPosition"
    type: "X(Enum.enum NSTickMarkPosition)"
  }
  property {
    name: "numberOfTickMarks"
    type: "I"
  }
  property {
    name: "numberOfMajorTickMarks"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLevelIndicator.h"
}
class {
  name: "NSPersistentDocument"
  base_class: "NSDocument"
  category: "NSPersistentDocument+NSDeprecated"
  method {
    function {
      name: "managedObjectContext"
      return_type: "LNSManagedObjectContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "setManagedObjectContext:"
      return_type: "V"
      parameter {
        name: "managedObjectContext"
        type: "LNSManagedObjectContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "managedObjectModel"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "fileType"
        type: "LNSString;"
      }
      parameter {
        name: "configuration"
        type: "LNSString;"
      }
      parameter {
        name: "storeOptions"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "persistentStoreTypeForFileType:"
      return_type: "LNSString;"
      parameter {
        name: "fileType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:ofType:forSaveOperation:originalContentsURL:error:"
      return_type: "Z"
      parameter {
        name: "absoluteURL"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "absoluteOriginalContentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromURL:ofType:error:"
      return_type: "Z"
      parameter {
        name: "absoluteURL"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "revertToContentsOfURL:ofType:error:"
      return_type: "Z"
      parameter {
        name: "inAbsoluteURL"
        type: "LNSURL;"
      }
      parameter {
        name: "inTypeName"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  property {
    name: "managedObjectContext"
    type: "LNSManagedObjectContext;"
  }
  property {
    name: "managedObjectModel"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPersistentDocument.h"
}
class {
  name: "NSRuleEditor"
  base_class: "NSControl"
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSRuleEditorDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSRuleEditorDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formattingStringsFilename"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormattingStringsFilename:"
      return_type: "V"
      parameter {
        name: "formattingStringsFilename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "formattingDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormattingDictionary:"
      return_type: "V"
      parameter {
        name: "formattingDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reloadCriteria"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "nestingMode"
      return_type: "X(Enum.enum NSRuleEditorNestingMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setNestingMode:"
      return_type: "V"
      parameter {
        name: "nestingMode"
        type: "X(Enum.enum NSRuleEditorNestingMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRowHeight:"
      return_type: "V"
      parameter {
        name: "rowHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canRemoveAllRows"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanRemoveAllRows:"
      return_type: "V"
      parameter {
        name: "canRemoveAllRows"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "predicate"
      return_type: "LNSPredicate;"
    }
    class_method: false
  }
  method {
    function {
      name: "reloadPredicate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "predicateForRow:"
      return_type: "LNSPredicate;"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfRows"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "subrowIndexesForRow:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "rowIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "criteriaForRow:"
      return_type: "LNSArray;"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayValuesForRow:"
      return_type: "LNSArray;"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowForDisplayValue:"
      return_type: "I"
      parameter {
        name: "displayValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowTypeForRow:"
      return_type: "X(Enum.enum NSRuleEditorRowType)"
      parameter {
        name: "rowIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parentRowForRow:"
      return_type: "I"
      parameter {
        name: "rowIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addRow:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertRowAtIndex:withType:asSubrowOfRow:animate:"
      return_type: "V"
      parameter {
        name: "rowIndex"
        type: "I"
      }
      parameter {
        name: "rowType"
        type: "X(Enum.enum NSRuleEditorRowType)"
      }
      parameter {
        name: "parentRow"
        type: "I"
      }
      parameter {
        name: "shouldAnimate"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCriteria:andDisplayValues:forRowAtIndex:"
      return_type: "V"
      parameter {
        name: "criteria"
        type: "LNSArray;"
      }
      parameter {
        name: "values"
        type: "LNSArray;"
      }
      parameter {
        name: "rowIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeRowAtIndex:"
      return_type: "V"
      parameter {
        name: "rowIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeRowsAtIndexes:includeSubrows:"
      return_type: "V"
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "includeSubrows"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRowIndexes"
      return_type: "LNSIndexSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectRowIndexes:byExtendingSelection:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "extend"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowClass"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "setRowClass:"
      return_type: "V"
      parameter {
        name: "rowClass"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rowTypeKeyPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRowTypeKeyPath:"
      return_type: "V"
      parameter {
        name: "rowTypeKeyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subrowsKeyPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSubrowsKeyPath:"
      return_type: "V"
      parameter {
        name: "subrowsKeyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "criteriaKeyPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCriteriaKeyPath:"
      return_type: "V"
      parameter {
        name: "criteriaKeyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayValuesKeyPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDisplayValuesKeyPath:"
      return_type: "V"
      parameter {
        name: "displayValuesKeyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSRuleEditorDelegate>)"
  }
  property {
    name: "formattingStringsFilename"
    type: "LNSString;"
  }
  property {
    name: "formattingDictionary"
    type: "LNSDictionary;"
  }
  property {
    name: "nestingMode"
    type: "X(Enum.enum NSRuleEditorNestingMode)"
  }
  property {
    name: "rowHeight"
    type: "D"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "canRemoveAllRows"
    type: "Z"
  }
  property {
    name: "predicate"
    type: "LNSPredicate;"
  }
  property {
    name: "numberOfRows"
    type: "I"
  }
  property {
    name: "selectedRowIndexes"
    type: "LNSIndexSet;"
  }
  property {
    name: "rowClass"
    type: "OC"
  }
  property {
    name: "rowTypeKeyPath"
    type: "LNSString;"
  }
  property {
    name: "subrowsKeyPath"
    type: "LNSString;"
  }
  property {
    name: "criteriaKeyPath"
    type: "LNSString;"
  }
  property {
    name: "displayValuesKeyPath"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSRuleEditor.h"
}
class {
  name: "NSPredicateEditor"
  base_class: "NSRuleEditor"
  method {
    function {
      name: "rowTemplates"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRowTemplates:"
      return_type: "V"
      parameter {
        name: "rowTemplates"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "rowTemplates"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPredicateEditor.h"
}
class {
  name: "NSPropertyDescription"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "entity"
      return_type: "LNSEntityDescription;"
    }
    class_method: false
  }
  method {
    function {
      name: "name"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setName:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOptional"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setOptional:"
      return_type: "V"
      parameter {
        name: "optional"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isTransient"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTransient:"
      return_type: "V"
      parameter {
        name: "transient"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validationPredicates"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "validationWarnings"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setValidationPredicates:withValidationWarnings:"
      return_type: "V"
      parameter {
        name: "validationPredicates"
        type: "LNSArray;"
      }
      parameter {
        name: "validationWarnings"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userInfo"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserInfo:"
      return_type: "V"
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isIndexed"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndexed:"
      return_type: "V"
      parameter {
        name: "indexed"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "versionHash"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "versionHashModifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVersionHashModifier:"
      return_type: "V"
      parameter {
        name: "versionHashModifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isIndexedBySpotlight"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIndexedBySpotlight:"
      return_type: "V"
      parameter {
        name: "indexedBySpotlight"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isStoredInExternalRecord"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setStoredInExternalRecord:"
      return_type: "V"
      parameter {
        name: "storedInExternalRecord"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "renamingIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRenamingIdentifier:"
      return_type: "V"
      parameter {
        name: "renamingIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "entity"
    type: "LNSEntityDescription;"
  }
  property {
    name: "name"
    type: "LNSString;"
  }
  property {
    name: "optional"
    type: "Z"
  }
  property {
    name: "transient"
    type: "Z"
  }
  property {
    name: "validationPredicates"
    type: "LNSArray;"
  }
  property {
    name: "validationWarnings"
    type: "LNSArray;"
  }
  property {
    name: "userInfo"
    type: "LNSDictionary;"
  }
  property {
    name: "indexed"
    type: "Z"
  }
  property {
    name: "versionHash"
    type: "LNSData;"
  }
  property {
    name: "versionHashModifier"
    type: "LNSString;"
  }
  property {
    name: "indexedBySpotlight"
    type: "Z"
  }
  property {
    name: "storedInExternalRecord"
    type: "Z"
  }
  property {
    name: "renamingIdentifier"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/CoreData.framework/Headers/NSPropertyDescription.h"
}
class {
  name: "NSAttributeDescription"
  base_class: "NSPropertyDescription"
  method {
    function {
      name: "attributeType"
      return_type: "X(Enum.enum NSAttributeType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributeType:"
      return_type: "V"
      parameter {
        name: "attributeType"
        type: "X(Enum.enum NSAttributeType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributeValueClassName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributeValueClassName:"
      return_type: "V"
      parameter {
        name: "attributeValueClassName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultValue:"
      return_type: "V"
      parameter {
        name: "defaultValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "versionHash"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "valueTransformerName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setValueTransformerName:"
      return_type: "V"
      parameter {
        name: "valueTransformerName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsExternalBinaryDataStorage"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsExternalBinaryDataStorage:"
      return_type: "V"
      parameter {
        name: "allowsExternalBinaryDataStorage"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "attributeType"
    type: "X(Enum.enum NSAttributeType)"
  }
  property {
    name: "attributeValueClassName"
    type: "LNSString;"
  }
  property {
    name: "defaultValue"
    type: "OI"
  }
  property {
    name: "versionHash"
    type: "LNSData;"
  }
  property {
    name: "valueTransformerName"
    type: "LNSString;"
  }
  property {
    name: "allowsExternalBinaryDataStorage"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/CoreData.framework/Headers/NSAttributeDescription.h"
}
class {
  name: "NSPredicateEditorRowTemplate"
  base_class: "NSObject"
  protocol: "NSCoding"
  protocol: "NSCopying"
  method {
    function {
      name: "matchForPredicate:"
      return_type: "D"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "templateViews"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPredicate:"
      return_type: "V"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "predicateWithSubpredicates:"
      return_type: "LNSPredicate;"
      parameter {
        name: "subpredicates"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayableSubpredicatesOfPredicate:"
      return_type: "LNSArray;"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithLeftExpressions:rightExpressions:modifier:operators:options:"
      return_type: "OI"
      parameter {
        name: "leftExpressions"
        type: "LNSArray;"
      }
      parameter {
        name: "rightExpressions"
        type: "LNSArray;"
      }
      parameter {
        name: "modifier"
        type: "X(Enum.enum NSComparisonPredicateModifier)"
      }
      parameter {
        name: "operators"
        type: "LNSArray;"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:"
      return_type: "OI"
      parameter {
        name: "leftExpressions"
        type: "LNSArray;"
      }
      parameter {
        name: "attributeType"
        type: "X(Enum.enum NSAttributeType)"
      }
      parameter {
        name: "modifier"
        type: "X(Enum.enum NSComparisonPredicateModifier)"
      }
      parameter {
        name: "operators"
        type: "LNSArray;"
      }
      parameter {
        name: "options"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCompoundTypes:"
      return_type: "OI"
      parameter {
        name: "compoundTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "leftExpressions"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "rightExpressions"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "rightExpressionAttributeType"
      return_type: "X(Enum.enum NSAttributeType)"
    }
    class_method: false
  }
  method {
    function {
      name: "modifier"
      return_type: "X(Enum.enum NSComparisonPredicateModifier)"
    }
    class_method: false
  }
  method {
    function {
      name: "operators"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "options"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "compoundTypes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "templatesWithAttributeKeyPaths:inEntityDescription:"
      return_type: "LNSArray;"
      parameter {
        name: "keyPaths"
        type: "LNSArray;"
      }
      parameter {
        name: "entityDescription"
        type: "LNSEntityDescription;"
      }
    }
    class_method: true
  }
  property {
    name: "templateViews"
    type: "LNSArray;"
  }
  property {
    name: "leftExpressions"
    type: "LNSArray;"
  }
  property {
    name: "rightExpressions"
    type: "LNSArray;"
  }
  property {
    name: "rightExpressionAttributeType"
    type: "X(Enum.enum NSAttributeType)"
  }
  property {
    name: "modifier"
    type: "X(Enum.enum NSComparisonPredicateModifier)"
  }
  property {
    name: "operators"
    type: "LNSArray;"
  }
  property {
    name: "options"
    type: "UI"
  }
  property {
    name: "compoundTypes"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPredicateEditorRowTemplate.h"
}
class {
  name: "NSPathCell"
  base_class: "NSActionCell"
  protocol: "NSOpenSavePanelDelegate"
  method {
    function {
      name: "pathStyle"
      return_type: "X(Enum.enum NSPathStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setPathStyle:"
      return_type: "V"
      parameter {
        name: "pathStyle"
        type: "X(Enum.enum NSPathStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setURL:"
      return_type: "V"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectValue:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "X(Unexposed.id<NSCopying>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedTypes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedTypes:"
      return_type: "V"
      parameter {
        name: "allowedTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSPathCellDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSPathCellDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathComponentCellClass"
      return_type: "OC"
    }
    class_method: true
  }
  method {
    function {
      name: "pathComponentCells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPathComponentCells:"
      return_type: "V"
      parameter {
        name: "pathComponentCells"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectOfPathComponentCell:withFrame:inView:"
      return_type: "RCGRect;"
      parameter {
        name: "cell"
        type: "LNSPathComponentCell;"
      }
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathComponentCellAtPoint:withFrame:inView:"
      return_type: "LNSPathComponentCell;"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clickedPathComponentCell"
      return_type: "LNSPathComponentCell;"
    }
    class_method: false
  }
  method {
    function {
      name: "mouseEntered:withFrame:inView:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseExited:withFrame:inView:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleAction"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleAction:"
      return_type: "V"
      parameter {
        name: "doubleAction"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderString:"
      return_type: "V"
      parameter {
        name: "placeholderString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderAttributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderAttributedString:"
      return_type: "V"
      parameter {
        name: "placeholderAttributedString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  property {
    name: "pathStyle"
    type: "X(Enum.enum NSPathStyle)"
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "allowedTypes"
    type: "LNSArray;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSPathCellDelegate>)"
  }
  property {
    name: "pathComponentCells"
    type: "LNSArray;"
  }
  property {
    name: "clickedPathComponentCell"
    type: "LNSPathComponentCell;"
  }
  property {
    name: "doubleAction"
    type: "OS"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "placeholderString"
    type: "LNSString;"
  }
  property {
    name: "placeholderAttributedString"
    type: "LNSAttributedString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPathCell.h"
}
class {
  name: "NSPathControl"
  base_class: "NSControl"
  category: "NSPathControl+NSDeprecated"
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedTypes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedTypes:"
      return_type: "V"
      parameter {
        name: "allowedTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderString:"
      return_type: "V"
      parameter {
        name: "placeholderString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "placeholderAttributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPlaceholderAttributedString:"
      return_type: "V"
      parameter {
        name: "placeholderAttributedString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setURL:"
      return_type: "V"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleAction"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleAction:"
      return_type: "V"
      parameter {
        name: "doubleAction"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathStyle"
      return_type: "X(Enum.enum NSPathStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setPathStyle:"
      return_type: "V"
      parameter {
        name: "pathStyle"
        type: "X(Enum.enum NSPathStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "clickedPathItem"
      return_type: "LNSPathControlItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "pathItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPathItems:"
      return_type: "V"
      parameter {
        name: "pathItems"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSPathControlDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSPathControlDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingSourceOperationMask:forLocal:"
      return_type: "V"
      parameter {
        name: "mask"
        type: "X(Enum.enum NSDragOperation)"
      }
      parameter {
        name: "isLocal"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenu:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "allowedTypes"
    type: "LNSArray;"
  }
  property {
    name: "placeholderString"
    type: "LNSString;"
  }
  property {
    name: "placeholderAttributedString"
    type: "LNSAttributedString;"
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "doubleAction"
    type: "OS"
  }
  property {
    name: "pathStyle"
    type: "X(Enum.enum NSPathStyle)"
  }
  property {
    name: "clickedPathItem"
    type: "LNSPathControlItem;"
  }
  property {
    name: "pathItems"
    type: "LNSArray;"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSPathControlDelegate>)"
  }
  property {
    name: "menu"
    type: "LNSMenu;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPathControl.h"
}
class {
  name: "NSPathComponentCell"
  base_class: "NSTextFieldCell"
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setURL:"
      return_type: "V"
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPathComponentCell.h"
}
class {
  name: "NSPathControlItem"
  base_class: "NSObject"
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedTitle:"
      return_type: "V"
      parameter {
        name: "attributedTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "attributedTitle"
    type: "LNSAttributedString;"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPathControlItem.h"
}
class {
  name: "NSPageController"
  base_class: "NSViewController"
  protocol: "NSAnimatablePropertyContainer"
  protocol: "NSCoding"
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSPageControllerDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSPageControllerDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedViewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "transitionStyle"
      return_type: "X(Enum.enum NSPageControllerTransitionStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTransitionStyle:"
      return_type: "V"
      parameter {
        name: "transitionStyle"
        type: "X(Enum.enum NSPageControllerTransitionStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrangedObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setArrangedObjects:"
      return_type: "V"
      parameter {
        name: "arrangedObjects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedIndex:"
      return_type: "V"
      parameter {
        name: "selectedIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "navigateForwardToObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completeTransition"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "navigateBack:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "navigateForward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeSelectedIndexFrom:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSPageControllerDelegate>)"
  }
  property {
    name: "selectedViewController"
    type: "LNSViewController;"
  }
  property {
    name: "transitionStyle"
    type: "X(Enum.enum NSPageControllerTransitionStyle)"
  }
  property {
    name: "arrangedObjects"
    type: "LNSArray;"
  }
  property {
    name: "selectedIndex"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPageController.h"
}
class {
  name: "NSCollectionViewItem"
  base_class: "NSViewController"
  protocol: "NSCopying"
  method {
    function {
      name: "collectionView"
      return_type: "LNSCollectionView;"
    }
    class_method: false
  }
  method {
    function {
      name: "isSelected"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelected:"
      return_type: "V"
      parameter {
        name: "selected"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageView"
      return_type: "LNSImageView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageView:"
      return_type: "V"
      parameter {
        name: "imageView"
        type: "LNSImageView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textField"
      return_type: "LNSTextField;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextField:"
      return_type: "V"
      parameter {
        name: "textField"
        type: "LNSTextField;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingImageComponents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "collectionView"
    type: "LNSCollectionView;"
  }
  property {
    name: "selected"
    type: "Z"
  }
  property {
    name: "imageView"
    type: "LNSImageView;"
  }
  property {
    name: "textField"
    type: "LNSTextField;"
  }
  property {
    name: "draggingImageComponents"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCollectionView.h"
}
class {
  name: "NSCollectionView"
  base_class: "NSView"
  protocol: "NSDraggingSource"
  protocol: "NSDraggingDestination"
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSCollectionViewDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSCollectionViewDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "content"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setContent:"
      return_type: "V"
      parameter {
        name: "content"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectable:"
      return_type: "V"
      parameter {
        name: "selectable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsMultipleSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsMultipleSelection:"
      return_type: "V"
      parameter {
        name: "allowsMultipleSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionIndexes"
      return_type: "LNSIndexSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionIndexes:"
      return_type: "V"
      parameter {
        name: "selectionIndexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "newItemForRepresentedObject:"
      return_type: "LNSCollectionViewItem;"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemPrototype"
      return_type: "LNSCollectionViewItem;"
    }
    class_method: false
  }
  method {
    function {
      name: "setItemPrototype:"
      return_type: "V"
      parameter {
        name: "itemPrototype"
        type: "LNSCollectionViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxNumberOfRows"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxNumberOfRows:"
      return_type: "V"
      parameter {
        name: "maxNumberOfRows"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxNumberOfColumns"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxNumberOfColumns:"
      return_type: "V"
      parameter {
        name: "maxNumberOfColumns"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minItemSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMinItemSize:"
      return_type: "V"
      parameter {
        name: "minItemSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maxItemSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaxItemSize:"
      return_type: "V"
      parameter {
        name: "maxItemSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColors"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColors:"
      return_type: "V"
      parameter {
        name: "backgroundColors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemAtIndex:"
      return_type: "LNSCollectionViewItem;"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameForItemAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameForItemAtIndex:withNumberOfItems:"
      return_type: "RCGRect;"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "numberOfItems"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingSourceOperationMask:forLocal:"
      return_type: "V"
      parameter {
        name: "dragOperationMask"
        type: "X(Enum.enum NSDragOperation)"
      }
      parameter {
        name: "localDestination"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingImageForItemsAtIndexes:withEvent:offset:"
      return_type: "LNSImage;"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "dragImageOffset"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSCollectionViewDelegate>)"
  }
  property {
    name: "firstResponder"
    type: "Z"
  }
  property {
    name: "content"
    type: "LNSArray;"
  }
  property {
    name: "selectable"
    type: "Z"
  }
  property {
    name: "allowsMultipleSelection"
    type: "Z"
  }
  property {
    name: "selectionIndexes"
    type: "LNSIndexSet;"
  }
  property {
    name: "itemPrototype"
    type: "LNSCollectionViewItem;"
  }
  property {
    name: "maxNumberOfRows"
    type: "UI"
  }
  property {
    name: "maxNumberOfColumns"
    type: "UI"
  }
  property {
    name: "minItemSize"
    type: "RCGSize;"
  }
  property {
    name: "maxItemSize"
    type: "RCGSize;"
  }
  property {
    name: "backgroundColors"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCollectionView.h"
}
class {
  name: "NSTextInputContext"
  base_class: "NSObject"
  method {
    function {
      name: "currentInputContext"
      return_type: "LNSTextInputContext;"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithClient:"
      return_type: "OI"
      parameter {
        name: "theClient"
        type: "X(Unexposed.id<NSTextInputClient>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "client"
      return_type: "X(Unexposed.id<NSTextInputClient>)"
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsGlyphInfo"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAcceptsGlyphInfo:"
      return_type: "V"
      parameter {
        name: "acceptsGlyphInfo"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedInputSourceLocales"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedInputSourceLocales:"
      return_type: "V"
      parameter {
        name: "allowedInputSourceLocales"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "activate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "deactivate"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "handleEvent:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "discardMarkedText"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateCharacterCoordinates"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "keyboardInputSources"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedKeyboardInputSource"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedKeyboardInputSource:"
      return_type: "V"
      parameter {
        name: "selectedKeyboardInputSource"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedNameForInputSource:"
      return_type: "LNSString;"
      parameter {
        name: "inputSourceIdentifier"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  property {
    name: "client"
    type: "X(Unexposed.id<NSTextInputClient>)"
  }
  property {
    name: "acceptsGlyphInfo"
    type: "Z"
  }
  property {
    name: "allowedInputSourceLocales"
    type: "LNSArray;"
  }
  property {
    name: "keyboardInputSources"
    type: "LNSArray;"
  }
  property {
    name: "selectedKeyboardInputSource"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextInputContext.h"
}
class {
  name: "NSTextAlternatives"
  base_class: "NSObject"
  method {
    function {
      name: "initWithPrimaryString:alternativeStrings:"
      return_type: "OI"
      parameter {
        name: "primaryString"
        type: "LNSString;"
      }
      parameter {
        name: "alternativeStrings"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "primaryString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "alternativeStrings"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "noteSelectedAlternativeString:"
      return_type: "V"
      parameter {
        name: "alternativeString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "primaryString"
    type: "LNSString;"
  }
  property {
    name: "alternativeStrings"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextAlternatives.h"
}
class {
  name: "NSVisualEffectView"
  base_class: "NSView"
  method {
    function {
      name: "material"
      return_type: "X(Enum.enum NSVisualEffectMaterial)"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaterial:"
      return_type: "V"
      parameter {
        name: "material"
        type: "X(Enum.enum NSVisualEffectMaterial)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "interiorBackgroundStyle"
      return_type: "X(Enum.enum NSBackgroundStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "blendingMode"
      return_type: "X(Enum.enum NSVisualEffectBlendingMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBlendingMode:"
      return_type: "V"
      parameter {
        name: "blendingMode"
        type: "X(Enum.enum NSVisualEffectBlendingMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "state"
      return_type: "X(Enum.enum NSVisualEffectState)"
    }
    class_method: false
  }
  method {
    function {
      name: "setState:"
      return_type: "V"
      parameter {
        name: "state"
        type: "X(Enum.enum NSVisualEffectState)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maskImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMaskImage:"
      return_type: "V"
      parameter {
        name: "maskImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidMoveToWindow"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillMoveToWindow:"
      return_type: "V"
      parameter {
        name: "newWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  property {
    name: "material"
    type: "X(Enum.enum NSVisualEffectMaterial)"
  }
  property {
    name: "interiorBackgroundStyle"
    type: "X(Enum.enum NSBackgroundStyle)"
  }
  property {
    name: "blendingMode"
    type: "X(Enum.enum NSVisualEffectBlendingMode)"
  }
  property {
    name: "state"
    type: "X(Enum.enum NSVisualEffectState)"
  }
  property {
    name: "maskImage"
    type: "LNSImage;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSVisualEffectView.h"
}
class {
  name: "NSTitlebarAccessoryViewController"
  base_class: "NSViewController"
  method {
    function {
      name: "layoutAttribute"
      return_type: "X(Enum.enum NSLayoutAttribute)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLayoutAttribute:"
      return_type: "V"
      parameter {
        name: "layoutAttribute"
        type: "X(Enum.enum NSLayoutAttribute)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fullScreenMinHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setFullScreenMinHeight:"
      return_type: "V"
      parameter {
        name: "fullScreenMinHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillAppear"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidAppear"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "viewDidDisappear"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "layoutAttribute"
    type: "X(Enum.enum NSLayoutAttribute)"
  }
  property {
    name: "fullScreenMinHeight"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTitlebarAccessoryViewController.h"
}
class {
  name: "CAAnimation"
}
class {
  name: "CALayerArray"
}
class {
  name: "CAMediaTimingFunction"
}
class {
  name: "CIContext"
}
class {
  name: "CIFilter"
}
class {
  name: "CIFilterShape"
}
class {
  name: "NSCachedURLResponseInternal"
}
class {
  name: "NSControlAuxiliary"
}
class {
  name: "NSDisplayLink"
}
class {
  name: "NSEntityDescription"
}
class {
  name: "NSFetchRequest"
}
class {
  name: "NSHTTPCookieInternal"
}
class {
  name: "NSHTTPCookieStorageInternal"
}
class {
  name: "NSHTTPURLResponseInternal"
}
class {
  name: "NSIBObjectData"
}
class {
  name: "NSManagedObjectContext"
}
class {
  name: "NSManagedObjectModel"
}
class {
  name: "NSMouseTracker"
}
class {
  name: "NSPredicateOperator"
}
class {
  name: "NSPredicateTemplate"
}
class {
  name: "NSRunStorage"
}
class {
  name: "NSSavePanelAuxiliary"
}
class {
  name: "NSSortedArray"
}
class {
  name: "NSStorage"
}
class {
  name: "NSTabWell"
}
class {
  name: "NSToolbarItemViewer"
}
class {
  name: "NSURLAuthenticationChallengeInternal"
}
class {
  name: "NSURLCacheInternal"
}
class {
  name: "NSURLConnectionInternal"
}
class {
  name: "NSURLCredentialInternal"
}
class {
  name: "NSURLCredentialStorageInternal"
}
class {
  name: "NSURLDownloadInternal"
}
class {
  name: "NSURLProtectionSpaceInternal"
}
class {
  name: "NSURLProtocolInternal"
}
class {
  name: "NSURLRequestInternal"
}
class {
  name: "NSURLResponseInternal"
}
class {
  name: "NSWindowAuxiliary"
}
class {
  name: "QTMovie"
}
class {
  name: "_NSImageAuxiliary"
}
class {
  name: "_NSOVRowEntry"
}
class {
  name: "_NSViewAuxiliary"
}
protocol {
  name: "NSObject"
  method {
    function {
      name: "isEqual:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hash"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "superclass"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "class"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "self"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "performSelector:"
      return_type: "OI"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSelector:withObject:"
      return_type: "OI"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSelector:withObject:withObject:"
      return_type: "OI"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "object1"
        type: "OI"
      }
      parameter {
        name: "object2"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isProxy"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isKindOfClass:"
      return_type: "Z"
      parameter {
        name: "aClass"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isMemberOfClass:"
      return_type: "Z"
      parameter {
        name: "aClass"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "conformsToProtocol:"
      return_type: "Z"
      parameter {
        name: "aProtocol"
        type: "LProtocol;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "respondsToSelector:"
      return_type: "Z"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "retain"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "release"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "autorelease"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "retainCount"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "zone"
      return_type: "*R_NSZone;;"
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "debugDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "hash"
    type: "UI"
  }
  property {
    name: "superclass"
    type: "OC"
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  property {
    name: "debugDescription"
    type: "LNSString;"
  }
  container: ""
  location_file: "/usr/include/objc/NSObject.h"
}
protocol {
  name: "OS_dispatch_object"
  container: ""
  location_file: "/usr/include/dispatch/object.h"
}
protocol {
  name: "OS_dispatch_queue"
  base_protocol: "OS_dispatch_object"
  container: ""
  location_file: "/usr/include/dispatch/queue.h"
}
protocol {
  name: "OS_dispatch_queue_attr"
  base_protocol: "OS_dispatch_object"
  container: ""
  location_file: "/usr/include/dispatch/queue.h"
}
protocol {
  name: "OS_dispatch_source"
  base_protocol: "OS_dispatch_object"
  container: ""
  location_file: "/usr/include/dispatch/source.h"
}
protocol {
  name: "OS_dispatch_group"
  base_protocol: "OS_dispatch_object"
  container: ""
  location_file: "/usr/include/dispatch/group.h"
}
protocol {
  name: "OS_dispatch_semaphore"
  base_protocol: "OS_dispatch_object"
  container: ""
  location_file: "/usr/include/dispatch/semaphore.h"
}
protocol {
  name: "OS_dispatch_data"
  base_protocol: "OS_dispatch_object"
  container: ""
  location_file: "/usr/include/dispatch/data.h"
}
protocol {
  name: "OS_dispatch_io"
  base_protocol: "OS_dispatch_object"
  container: ""
  location_file: "/usr/include/dispatch/io.h"
}
protocol {
  name: "NSCopying"
  method {
    function {
      name: "copyWithZone:"
      return_type: "OI"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObject.h"
}
protocol {
  name: "NSMutableCopying"
  method {
    function {
      name: "mutableCopyWithZone:"
      return_type: "OI"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObject.h"
}
protocol {
  name: "NSCoding"
  method {
    function {
      name: "encodeWithCoder:"
      return_type: "V"
      parameter {
        name: "aCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObject.h"
}
protocol {
  name: "NSSecureCoding"
  base_protocol: "NSCoding"
  method {
    function {
      name: "supportsSecureCoding"
      return_type: "Z"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObject.h"
}
protocol {
  name: "NSDiscardableContent"
  method {
    function {
      name: "beginContentAccess"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "endContentAccess"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "discardContentIfPossible"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isContentDiscarded"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObject.h"
}
protocol {
  name: "NSFastEnumeration"
  method {
    function {
      name: "countByEnumeratingWithState:objects:count:"
      return_type: "UI"
      parameter {
        name: "state"
        type: "*RNSFastEnumerationState;;"
      }
      parameter {
        name: "buffer"
        type: "X(IncompleteArray.id [])"
      }
      parameter {
        name: "len"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSEnumerator.h"
}
protocol {
  name: "NSDecimalNumberBehaviors"
  method {
    function {
      name: "roundingMode"
      return_type: "X(Enum.enum NSRoundingMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "scale"
      return_type: "S"
    }
    class_method: false
  }
  method {
    function {
      name: "exceptionDuringOperation:error:leftOperand:rightOperand:"
      return_type: "LNSDecimalNumber;"
      parameter {
        name: "operation"
        type: "OS"
      }
      parameter {
        name: "error"
        type: "X(Enum.enum NSCalculationError)"
      }
      parameter {
        name: "leftOperand"
        type: "LNSDecimalNumber;"
      }
      parameter {
        name: "rightOperand"
        type: "LNSDecimalNumber;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDecimalNumber.h"
}
protocol {
  name: "NSFileManagerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "fileManager:shouldCopyItemAtPath:toPath:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldCopyItemAtURL:toURL:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldMoveItemAtPath:toPath:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldMoveItemAtURL:toURL:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldProceedAfterError:movingItemAtPath:toPath:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldProceedAfterError:movingItemAtURL:toURL:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldLinkItemAtPath:toPath:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldLinkItemAtURL:toURL:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "srcPath"
        type: "LNSString;"
      }
      parameter {
        name: "dstPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "srcURL"
        type: "LNSURL;"
      }
      parameter {
        name: "dstURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldRemoveItemAtPath:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldRemoveItemAtURL:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldProceedAfterError:removingItemAtPath:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:shouldProceedAfterError:removingItemAtURL:"
      return_type: "Z"
      parameter {
        name: "fileManager"
        type: "LNSFileManager;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "URL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileManager.h"
}
protocol {
  name: "NSKeyedArchiverDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "archiver:willEncodeObject:"
      return_type: "OI"
      parameter {
        name: "archiver"
        type: "LNSKeyedArchiver;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "archiver:didEncodeObject:"
      return_type: "V"
      parameter {
        name: "archiver"
        type: "LNSKeyedArchiver;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "archiver:willReplaceObject:withObject:"
      return_type: "V"
      parameter {
        name: "archiver"
        type: "LNSKeyedArchiver;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "newObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "archiverWillFinish:"
      return_type: "V"
      parameter {
        name: "archiver"
        type: "LNSKeyedArchiver;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "archiverDidFinish:"
      return_type: "V"
      parameter {
        name: "archiver"
        type: "LNSKeyedArchiver;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyedArchiver.h"
}
protocol {
  name: "NSKeyedUnarchiverDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "unarchiver:cannotDecodeObjectOfClassName:originalClasses:"
      return_type: "OC"
      parameter {
        name: "unarchiver"
        type: "LNSKeyedUnarchiver;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "classNames"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unarchiver:didDecodeObject:"
      return_type: "OI"
      parameter {
        name: "unarchiver"
        type: "LNSKeyedUnarchiver;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unarchiver:willReplaceObject:withObject:"
      return_type: "V"
      parameter {
        name: "unarchiver"
        type: "LNSKeyedUnarchiver;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "newObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unarchiverWillFinish:"
      return_type: "V"
      parameter {
        name: "unarchiver"
        type: "LNSKeyedUnarchiver;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unarchiverDidFinish:"
      return_type: "V"
      parameter {
        name: "unarchiver"
        type: "LNSKeyedUnarchiver;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyedArchiver.h"
}
protocol {
  name: "NSLocking"
  method {
    function {
      name: "lock"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "unlock"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLock.h"
}
protocol {
  name: "NSPortDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "handlePortMessage:"
      return_type: "V"
      parameter {
        name: "message"
        type: "LNSPortMessage;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPort.h"
}
protocol {
  name: "NSMachPortDelegate"
  base_protocol: "NSPortDelegate"
  method {
    function {
      name: "handleMachMessage:"
      return_type: "V"
      parameter {
        name: "msg"
        type: "*V;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPort.h"
}
protocol {
  name: "NSStreamDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "stream:handleEvent:"
      return_type: "V"
      parameter {
        name: "aStream"
        type: "LNSStream;"
      }
      parameter {
        name: "eventCode"
        type: "X(Enum.enum NSStreamEvent)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSStream.h"
}
protocol {
  name: "NSURLHandleClient"
  method {
    function {
      name: "URLHandle:resourceDataDidBecomeAvailable:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURLHandle;"
      }
      parameter {
        name: "newBytes"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLHandleResourceDidBeginLoading:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURLHandle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLHandleResourceDidFinishLoading:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURLHandle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLHandleResourceDidCancelLoading:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURLHandle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLHandle:resourceDidFailLoadingWithReason:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURLHandle;"
      }
      parameter {
        name: "reason"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLHandle.h"
}
protocol {
  name: "NSURLAuthenticationChallengeSender"
  base_protocol: "NSObject"
  method {
    function {
      name: "useCredential:forAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "continueWithoutCredentialForAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performDefaultHandlingForAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rejectProtectionSpaceAndContinueWithChallenge:"
      return_type: "V"
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLAuthenticationChallenge.h"
}
protocol {
  name: "NSURLConnectionDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "connection:didFailWithError:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connectionShouldUseCredentialStorage:"
      return_type: "Z"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:willSendRequestForAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:canAuthenticateAgainstProtectionSpace:"
      return_type: "Z"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "protectionSpace"
        type: "LNSURLProtectionSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:didReceiveAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:didCancelAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLConnection.h"
}
protocol {
  name: "NSURLConnectionDataDelegate"
  base_protocol: "NSURLConnectionDelegate"
  method {
    function {
      name: "connection:willSendRequest:redirectResponse:"
      return_type: "LNSURLRequest;"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:didReceiveResponse:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:didReceiveData:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:needNewBodyStream:"
      return_type: "LNSInputStream;"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "bytesWritten"
        type: "I"
      }
      parameter {
        name: "totalBytesWritten"
        type: "I"
      }
      parameter {
        name: "totalBytesExpectedToWrite"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:willCacheResponse:"
      return_type: "LNSCachedURLResponse;"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "cachedResponse"
        type: "LNSCachedURLResponse;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connectionDidFinishLoading:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLConnection.h"
}
protocol {
  name: "NSURLConnectionDownloadDelegate"
  base_protocol: "NSURLConnectionDelegate"
  method {
    function {
      name: "connection:didWriteData:totalBytesWritten:expectedTotalBytes:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "bytesWritten"
        type: "J"
      }
      parameter {
        name: "totalBytesWritten"
        type: "J"
      }
      parameter {
        name: "expectedTotalBytes"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connectionDidResumeDownloading:totalBytesWritten:expectedTotalBytes:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "totalBytesWritten"
        type: "J"
      }
      parameter {
        name: "expectedTotalBytes"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connectionDidFinishDownloading:destinationURL:"
      return_type: "V"
      parameter {
        name: "connection"
        type: "LNSURLConnection;"
      }
      parameter {
        name: "destinationURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLConnection.h"
}
protocol {
  name: "NSURLProtocolClient"
  base_protocol: "NSObject"
  method {
    function {
      name: "URLProtocol:wasRedirectedToRequest:redirectResponse:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LNSURLProtocol;"
      }
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "redirectResponse"
        type: "LNSURLResponse;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLProtocol:cachedResponseIsValid:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LNSURLProtocol;"
      }
      parameter {
        name: "cachedResponse"
        type: "LNSCachedURLResponse;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLProtocol:didReceiveResponse:cacheStoragePolicy:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LNSURLProtocol;"
      }
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
      parameter {
        name: "policy"
        type: "X(Enum.enum NSURLCacheStoragePolicy)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLProtocol:didLoadData:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LNSURLProtocol;"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLProtocolDidFinishLoading:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LNSURLProtocol;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLProtocol:didFailWithError:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LNSURLProtocol;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLProtocol:didReceiveAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LNSURLProtocol;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLProtocol:didCancelAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "protocol"
        type: "LNSURLProtocol;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLProtocol.h"
}
protocol {
  name: "NSXMLParserDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "parserDidStartDocument:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parserDidEndDocument:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundNotationDeclarationWithName:publicID:systemID:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "publicID"
        type: "LNSString;"
      }
      parameter {
        name: "systemID"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "publicID"
        type: "LNSString;"
      }
      parameter {
        name: "systemID"
        type: "LNSString;"
      }
      parameter {
        name: "notationName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "attributeName"
        type: "LNSString;"
      }
      parameter {
        name: "elementName"
        type: "LNSString;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "defaultValue"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundElementDeclarationWithName:model:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "elementName"
        type: "LNSString;"
      }
      parameter {
        name: "model"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundInternalEntityDeclarationWithName:value:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "value"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundExternalEntityDeclarationWithName:publicID:systemID:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "publicID"
        type: "LNSString;"
      }
      parameter {
        name: "systemID"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:didStartElement:namespaceURI:qualifiedName:attributes:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "elementName"
        type: "LNSString;"
      }
      parameter {
        name: "namespaceURI"
        type: "LNSString;"
      }
      parameter {
        name: "qName"
        type: "LNSString;"
      }
      parameter {
        name: "attributeDict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:didEndElement:namespaceURI:qualifiedName:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "elementName"
        type: "LNSString;"
      }
      parameter {
        name: "namespaceURI"
        type: "LNSString;"
      }
      parameter {
        name: "qName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:didStartMappingPrefix:toURI:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "prefix"
        type: "LNSString;"
      }
      parameter {
        name: "namespaceURI"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:didEndMappingPrefix:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "prefix"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundCharacters:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundIgnorableWhitespace:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "whitespaceString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundProcessingInstructionWithTarget:data:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "target"
        type: "LNSString;"
      }
      parameter {
        name: "data"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundComment:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "comment"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:foundCDATA:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "CDATABlock"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:resolveExternalEntityName:systemID:"
      return_type: "LNSData;"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "systemID"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:parseErrorOccurred:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "parseError"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "parser:validationErrorOccurred:"
      return_type: "V"
      parameter {
        name: "parser"
        type: "LNSXMLParser;"
      }
      parameter {
        name: "validationError"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLParser.h"
}
protocol {
  name: "NSCacheDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "cache:willEvictObject:"
      return_type: "V"
      parameter {
        name: "cache"
        type: "LNSCache;"
      }
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCache.h"
}
protocol {
  name: "NSExtensionRequestHandling"
  base_protocol: "NSObject"
  method {
    function {
      name: "beginRequestWithExtensionContext:"
      return_type: "V"
      parameter {
        name: "context"
        type: "LNSExtensionContext;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSExtensionRequestHandling.h"
}
protocol {
  name: "NSFilePresenter"
  base_protocol: "NSObject"
  method {
    function {
      name: "presentedItemURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "presentedItemOperationQueue"
      return_type: "LNSOperationQueue;"
    }
    class_method: false
  }
  method {
    function {
      name: "primaryPresentedItemURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "relinquishPresentedItemToReader:"
      return_type: "V"
      parameter {
        name: "reader"
        type: "X(BlockPointer.void (^)(void (^)(void)))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "relinquishPresentedItemToWriter:"
      return_type: "V"
      parameter {
        name: "writer"
        type: "X(BlockPointer.void (^)(void (^)(void)))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "savePresentedItemChangesWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accommodatePresentedItemDeletionWithCompletionHandler:"
      return_type: "V"
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedItemDidMoveToURL:"
      return_type: "V"
      parameter {
        name: "newURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedItemDidChange"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "presentedItemDidGainVersion:"
      return_type: "V"
      parameter {
        name: "version"
        type: "LNSFileVersion;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedItemDidLoseVersion:"
      return_type: "V"
      parameter {
        name: "version"
        type: "LNSFileVersion;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedItemDidResolveConflictVersion:"
      return_type: "V"
      parameter {
        name: "version"
        type: "LNSFileVersion;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accommodatePresentedSubitemDeletionAtURL:completionHandler:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedSubitemDidAppearAtURL:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedSubitemAtURL:didMoveToURL:"
      return_type: "V"
      parameter {
        name: "oldURL"
        type: "LNSURL;"
      }
      parameter {
        name: "newURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedSubitemDidChangeAtURL:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedSubitemAtURL:didGainVersion:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "version"
        type: "LNSFileVersion;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedSubitemAtURL:didLoseVersion:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "version"
        type: "LNSFileVersion;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedSubitemAtURL:didResolveConflictVersion:"
      return_type: "V"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "version"
        type: "LNSFileVersion;"
      }
    }
    class_method: false
  }
  property {
    name: "presentedItemURL"
    type: "LNSURL;"
  }
  property {
    name: "presentedItemOperationQueue"
    type: "LNSOperationQueue;"
  }
  property {
    name: "primaryPresentedItemURL"
    type: "LNSURL;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFilePresenter.h"
}
protocol {
  name: "NSMetadataQueryDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "metadataQuery:replacementObjectForResultObject:"
      return_type: "OI"
      parameter {
        name: "query"
        type: "LNSMetadataQuery;"
      }
      parameter {
        name: "result"
        type: "LNSMetadataItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "metadataQuery:replacementValueForAttribute:value:"
      return_type: "OI"
      parameter {
        name: "query"
        type: "LNSMetadataQuery;"
      }
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "attrValue"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSMetadata.h"
}
protocol {
  name: "NSNetServiceDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "netServiceWillPublish:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceDidPublish:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netService:didNotPublish:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
      parameter {
        name: "errorDict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceWillResolve:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceDidResolveAddress:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netService:didNotResolve:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
      parameter {
        name: "errorDict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceDidStop:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netService:didUpdateTXTRecordData:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netService:didAcceptConnectionWithInputStream:outputStream:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSNetService;"
      }
      parameter {
        name: "inputStream"
        type: "LNSInputStream;"
      }
      parameter {
        name: "outputStream"
        type: "LNSOutputStream;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNetServices.h"
}
protocol {
  name: "NSNetServiceBrowserDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "netServiceBrowserWillSearch:"
      return_type: "V"
      parameter {
        name: "aNetServiceBrowser"
        type: "LNSNetServiceBrowser;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceBrowserDidStopSearch:"
      return_type: "V"
      parameter {
        name: "aNetServiceBrowser"
        type: "LNSNetServiceBrowser;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceBrowser:didNotSearch:"
      return_type: "V"
      parameter {
        name: "aNetServiceBrowser"
        type: "LNSNetServiceBrowser;"
      }
      parameter {
        name: "errorDict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceBrowser:didFindDomain:moreComing:"
      return_type: "V"
      parameter {
        name: "aNetServiceBrowser"
        type: "LNSNetServiceBrowser;"
      }
      parameter {
        name: "domainString"
        type: "LNSString;"
      }
      parameter {
        name: "moreComing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceBrowser:didFindService:moreComing:"
      return_type: "V"
      parameter {
        name: "aNetServiceBrowser"
        type: "LNSNetServiceBrowser;"
      }
      parameter {
        name: "aNetService"
        type: "LNSNetService;"
      }
      parameter {
        name: "moreComing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceBrowser:didRemoveDomain:moreComing:"
      return_type: "V"
      parameter {
        name: "aNetServiceBrowser"
        type: "LNSNetServiceBrowser;"
      }
      parameter {
        name: "domainString"
        type: "LNSString;"
      }
      parameter {
        name: "moreComing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "netServiceBrowser:didRemoveService:moreComing:"
      return_type: "V"
      parameter {
        name: "aNetServiceBrowser"
        type: "LNSNetServiceBrowser;"
      }
      parameter {
        name: "aNetService"
        type: "LNSNetService;"
      }
      parameter {
        name: "moreComing"
        type: "Z"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNetServices.h"
}
protocol {
  name: "NSURLSessionDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "URLSession:didBecomeInvalidWithError:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:didReceiveChallenge:completionHandler:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSessionDidFinishEventsForBackgroundURLSession:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
protocol {
  name: "NSURLSessionTaskDelegate"
  base_protocol: "NSURLSessionDelegate"
  method {
    function {
      name: "URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "response"
        type: "LNSHTTPURLResponse;"
      }
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSURLRequest *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:task:didReceiveChallenge:completionHandler:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:task:needNewBodyStream:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSInputStream *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "bytesSent"
        type: "J"
      }
      parameter {
        name: "totalBytesSent"
        type: "J"
      }
      parameter {
        name: "totalBytesExpectedToSend"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:task:didCompleteWithError:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
protocol {
  name: "NSURLSessionDataDelegate"
  base_protocol: "NSURLSessionTaskDelegate"
  method {
    function {
      name: "URLSession:dataTask:didReceiveResponse:completionHandler:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "dataTask"
        type: "LNSURLSessionDataTask;"
      }
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSURLSessionResponseDisposition))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:dataTask:didBecomeDownloadTask:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "dataTask"
        type: "LNSURLSessionDataTask;"
      }
      parameter {
        name: "downloadTask"
        type: "LNSURLSessionDownloadTask;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:dataTask:didReceiveData:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "dataTask"
        type: "LNSURLSessionDataTask;"
      }
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:dataTask:willCacheResponse:completionHandler:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "dataTask"
        type: "LNSURLSessionDataTask;"
      }
      parameter {
        name: "proposedResponse"
        type: "LNSCachedURLResponse;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSCachedURLResponse *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
protocol {
  name: "NSURLSessionDownloadDelegate"
  base_protocol: "NSURLSessionTaskDelegate"
  method {
    function {
      name: "URLSession:downloadTask:didFinishDownloadingToURL:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "downloadTask"
        type: "LNSURLSessionDownloadTask;"
      }
      parameter {
        name: "location"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "downloadTask"
        type: "LNSURLSessionDownloadTask;"
      }
      parameter {
        name: "bytesWritten"
        type: "J"
      }
      parameter {
        name: "totalBytesWritten"
        type: "J"
      }
      parameter {
        name: "totalBytesExpectedToWrite"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSURLSession;"
      }
      parameter {
        name: "downloadTask"
        type: "LNSURLSessionDownloadTask;"
      }
      parameter {
        name: "fileOffset"
        type: "J"
      }
      parameter {
        name: "expectedTotalBytes"
        type: "J"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
protocol {
  name: "NSUserActivityDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "userActivityWillSave:"
      return_type: "V"
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userActivityWasContinued:"
      return_type: "V"
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userActivity:didReceiveInputStream:outputStream:"
      return_type: "V"
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
      parameter {
        name: "inputStream"
        type: "LNSInputStream;"
      }
      parameter {
        name: "outputStream"
        type: "LNSOutputStream;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserActivity.h"
}
protocol {
  name: "NSConnectionDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "makeNewConnection:sender:"
      return_type: "Z"
      parameter {
        name: "conn"
        type: "LNSConnection;"
      }
      parameter {
        name: "ancestor"
        type: "LNSConnection;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:shouldMakeNewConnection:"
      return_type: "Z"
      parameter {
        name: "ancestor"
        type: "LNSConnection;"
      }
      parameter {
        name: "conn"
        type: "LNSConnection;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "authenticationDataForComponents:"
      return_type: "LNSData;"
      parameter {
        name: "components"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "authenticateComponents:withData:"
      return_type: "Z"
      parameter {
        name: "components"
        type: "LNSArray;"
      }
      parameter {
        name: "signature"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "createConversationForConnection:"
      return_type: "OI"
      parameter {
        name: "conn"
        type: "LNSConnection;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "connection:handleRequest:"
      return_type: "Z"
      parameter {
        name: "connection"
        type: "LNSConnection;"
      }
      parameter {
        name: "doreq"
        type: "LNSDistantObjectRequest;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSConnection.h"
}
protocol {
  name: "NSURLDownloadDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "downloadDidBegin:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:willSendRequest:redirectResponse:"
      return_type: "LNSURLRequest;"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "redirectResponse"
        type: "LNSURLResponse;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:canAuthenticateAgainstProtectionSpace:"
      return_type: "Z"
      parameter {
        name: "connection"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "protectionSpace"
        type: "LNSURLProtectionSpace;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:didReceiveAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:didCancelAuthenticationChallenge:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "challenge"
        type: "LNSURLAuthenticationChallenge;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "downloadShouldUseCredentialStorage:"
      return_type: "Z"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:didReceiveResponse:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:willResumeWithResponse:fromByte:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "response"
        type: "LNSURLResponse;"
      }
      parameter {
        name: "startingByte"
        type: "J"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:didReceiveDataOfLength:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:shouldDecodeSourceDataOfMIMEType:"
      return_type: "Z"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "encodingType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:decideDestinationWithSuggestedFilename:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:didCreateDestination:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "downloadDidFinish:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "download:didFailWithError:"
      return_type: "V"
      parameter {
        name: "download"
        type: "LNSURLDownload;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLDownload.h"
}
protocol {
  name: "OS_xpc_object"
  container: ""
  location_file: "/usr/include/xpc/xpc.h"
}
protocol {
  name: "NSSpellServerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "spellServer:findMisspelledWordInString:language:wordCount:countOnly:"
      return_type: "R_NSRange;"
      parameter {
        name: "sender"
        type: "LNSSpellServer;"
      }
      parameter {
        name: "stringToCheck"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "wordCount"
        type: "*I;"
      }
      parameter {
        name: "countOnly"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellServer:suggestGuessesForWord:inLanguage:"
      return_type: "LNSArray;"
      parameter {
        name: "sender"
        type: "LNSSpellServer;"
      }
      parameter {
        name: "word"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellServer:didLearnWord:inLanguage:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpellServer;"
      }
      parameter {
        name: "word"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellServer:didForgetWord:inLanguage:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpellServer;"
      }
      parameter {
        name: "word"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellServer:suggestCompletionsForPartialWordRange:inString:language:"
      return_type: "LNSArray;"
      parameter {
        name: "sender"
        type: "LNSSpellServer;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellServer:checkGrammarInString:language:details:"
      return_type: "R_NSRange;"
      parameter {
        name: "sender"
        type: "LNSSpellServer;"
      }
      parameter {
        name: "stringToCheck"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
      parameter {
        name: "details"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellServer:checkString:offset:types:options:orthography:wordCount:"
      return_type: "LNSArray;"
      parameter {
        name: "sender"
        type: "LNSSpellServer;"
      }
      parameter {
        name: "stringToCheck"
        type: "LNSString;"
      }
      parameter {
        name: "offset"
        type: "UI"
      }
      parameter {
        name: "checkingTypes"
        type: "UJ"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "orthography"
        type: "LNSOrthography;"
      }
      parameter {
        name: "wordCount"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellServer:recordResponse:toCorrection:forWord:language:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpellServer;"
      }
      parameter {
        name: "response"
        type: "UI"
      }
      parameter {
        name: "correction"
        type: "LNSString;"
      }
      parameter {
        name: "word"
        type: "LNSString;"
      }
      parameter {
        name: "language"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSpellServer.h"
}
protocol {
  name: "NSUserNotificationCenterDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "userNotificationCenter:didDeliverNotification:"
      return_type: "V"
      parameter {
        name: "center"
        type: "LNSUserNotificationCenter;"
      }
      parameter {
        name: "notification"
        type: "LNSUserNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userNotificationCenter:didActivateNotification:"
      return_type: "V"
      parameter {
        name: "center"
        type: "LNSUserNotificationCenter;"
      }
      parameter {
        name: "notification"
        type: "LNSUserNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userNotificationCenter:shouldPresentNotification:"
      return_type: "Z"
      parameter {
        name: "center"
        type: "LNSUserNotificationCenter;"
      }
      parameter {
        name: "notification"
        type: "LNSUserNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSUserNotification.h"
}
protocol {
  name: "NSXPCProxyCreating"
  method {
    function {
      name: "remoteObjectProxy"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "remoteObjectProxyWithErrorHandler:"
      return_type: "OI"
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSError *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXPCConnection.h"
}
protocol {
  name: "NSXPCListenerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "listener:shouldAcceptNewConnection:"
      return_type: "Z"
      parameter {
        name: "listener"
        type: "LNSXPCListener;"
      }
      parameter {
        name: "newConnection"
        type: "LNSXPCConnection;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXPCConnection.h"
}
protocol {
  name: "NSAccessibilityElement"
  base_protocol: "NSObject"
  method {
    function {
      name: "accessibilityFrame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityParent"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityFocused"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityGroup"
  base_protocol: "NSAccessibilityElement"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityButton"
  base_protocol: "NSAccessibilityElement"
  method {
    function {
      name: "accessibilityLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformPress"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilitySwitch"
  base_protocol: "NSAccessibilityButton"
  method {
    function {
      name: "accessibilityValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformIncrement"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformDecrement"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityRadioButton"
  base_protocol: "NSAccessibilityButton"
  method {
    function {
      name: "accessibilityValue"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityCheckBox"
  base_protocol: "NSAccessibilityButton"
  method {
    function {
      name: "accessibilityValue"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityStaticText"
  base_protocol: "NSAccessibilityElement"
  method {
    function {
      name: "accessibilityValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityAttributedStringForRange:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleCharacterRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityNavigableStaticText"
  base_protocol: "NSAccessibilityStaticText"
  method {
    function {
      name: "accessibilityStringForRange:"
      return_type: "LNSString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityLineForIndex:"
      return_type: "I"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRangeForLine:"
      return_type: "R_NSRange;"
      parameter {
        name: "lineNumber"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFrameForRange:"
      return_type: "RCGRect;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityProgressIndicator"
  base_protocol: "NSAccessibilityGroup"
  method {
    function {
      name: "accessibilityValue"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityStepper"
  base_protocol: "NSAccessibilityElement"
  method {
    function {
      name: "accessibilityLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformIncrement"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformDecrement"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityValue"
      return_type: "OI"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilitySlider"
  base_protocol: "NSAccessibilityElement"
  method {
    function {
      name: "accessibilityLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformIncrement"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformDecrement"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityImage"
  base_protocol: "NSAccessibilityElement"
  method {
    function {
      name: "accessibilityLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityContainsTransientUI"
  base_protocol: "NSAccessibilityElement"
  method {
    function {
      name: "accessibilityPerformShowAlternateUI"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformShowDefaultUI"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityAlternateUIVisible"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityTable"
  base_protocol: "NSAccessibilityGroup"
  method {
    function {
      name: "accessibilityLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedRows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelectedRows:"
      return_type: "V"
      parameter {
        name: "selectedRows"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleRows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityColumns"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleColumns"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedColumns"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityHeaderGroup"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedCells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleCells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRowHeaderUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityColumnHeaderUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityOutline"
  base_protocol: "NSAccessibilityTable"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityList"
  base_protocol: "NSAccessibilityTable"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityRow"
  base_protocol: "NSAccessibilityGroup"
  method {
    function {
      name: "accessibilityIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDisclosureLevel"
      return_type: "I"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityLayoutArea"
  base_protocol: "NSAccessibilityGroup"
  method {
    function {
      name: "accessibilityLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityChildren"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedChildren"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFocusedUIElement"
      return_type: "OI"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibilityLayoutItem"
  base_protocol: "NSAccessibilityGroup"
  method {
    function {
      name: "setAccessibilityFrame:"
      return_type: "V"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSAccessibility"
  base_protocol: "NSObject"
  method {
    function {
      name: "isAccessibilityElement"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityElement:"
      return_type: "V"
      parameter {
        name: "accessibilityElement"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFrame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityFrame:"
      return_type: "V"
      parameter {
        name: "accessibilityFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityFocused"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityFocused:"
      return_type: "V"
      parameter {
        name: "accessibilityFocused"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityActivationPoint"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityActivationPoint:"
      return_type: "V"
      parameter {
        name: "accessibilityActivationPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityTopLevelUIElement"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityTopLevelUIElement:"
      return_type: "V"
      parameter {
        name: "accessibilityTopLevelUIElement"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityURL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityURL:"
      return_type: "V"
      parameter {
        name: "accessibilityURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityValue:"
      return_type: "V"
      parameter {
        name: "accessibilityValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityValueDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityValueDescription:"
      return_type: "V"
      parameter {
        name: "accessibilityValueDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleChildren"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityVisibleChildren:"
      return_type: "V"
      parameter {
        name: "accessibilityVisibleChildren"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySubrole"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySubrole:"
      return_type: "V"
      parameter {
        name: "accessibilitySubrole"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityTitle:"
      return_type: "V"
      parameter {
        name: "accessibilityTitle"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityTitleUIElement"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityTitleUIElement:"
      return_type: "V"
      parameter {
        name: "accessibilityTitleUIElement"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityNextContents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityNextContents:"
      return_type: "V"
      parameter {
        name: "accessibilityNextContents"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityOrientation"
      return_type: "X(Enum.enum NSAccessibilityOrientation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityOrientation:"
      return_type: "V"
      parameter {
        name: "accessibilityOrientation"
        type: "X(Enum.enum NSAccessibilityOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityOverflowButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityOverflowButton:"
      return_type: "V"
      parameter {
        name: "accessibilityOverflowButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityParent"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityParent:"
      return_type: "V"
      parameter {
        name: "accessibilityParent"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPlaceholderValue"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityPlaceholderValue:"
      return_type: "V"
      parameter {
        name: "accessibilityPlaceholderValue"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPreviousContents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityPreviousContents:"
      return_type: "V"
      parameter {
        name: "accessibilityPreviousContents"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRole"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityRole:"
      return_type: "V"
      parameter {
        name: "accessibilityRole"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRoleDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityRoleDescription:"
      return_type: "V"
      parameter {
        name: "accessibilityRoleDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySearchButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySearchButton:"
      return_type: "V"
      parameter {
        name: "accessibilitySearchButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySearchMenu"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySearchMenu:"
      return_type: "V"
      parameter {
        name: "accessibilitySearchMenu"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilitySelected"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelected:"
      return_type: "V"
      parameter {
        name: "accessibilitySelected"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedChildren"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelectedChildren:"
      return_type: "V"
      parameter {
        name: "accessibilitySelectedChildren"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityServesAsTitleForUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityServesAsTitleForUIElements:"
      return_type: "V"
      parameter {
        name: "accessibilityServesAsTitleForUIElements"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityShownMenu"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityShownMenu:"
      return_type: "V"
      parameter {
        name: "accessibilityShownMenu"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMinValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMinValue:"
      return_type: "V"
      parameter {
        name: "accessibilityMinValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMaxValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMaxValue:"
      return_type: "V"
      parameter {
        name: "accessibilityMaxValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityLinkedUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityLinkedUIElements:"
      return_type: "V"
      parameter {
        name: "accessibilityLinkedUIElements"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityWindow"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityWindow:"
      return_type: "V"
      parameter {
        name: "accessibilityWindow"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityIdentifier:"
      return_type: "V"
      parameter {
        name: "accessibilityIdentifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityHelp"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityHelp:"
      return_type: "V"
      parameter {
        name: "accessibilityHelp"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFilename"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityFilename:"
      return_type: "V"
      parameter {
        name: "accessibilityFilename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityExpanded"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityExpanded:"
      return_type: "V"
      parameter {
        name: "accessibilityExpanded"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityEdited"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityEdited:"
      return_type: "V"
      parameter {
        name: "accessibilityEdited"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityEnabled:"
      return_type: "V"
      parameter {
        name: "accessibilityEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityChildren"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityChildren:"
      return_type: "V"
      parameter {
        name: "accessibilityChildren"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityClearButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityClearButton:"
      return_type: "V"
      parameter {
        name: "accessibilityClearButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityCancelButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityCancelButton:"
      return_type: "V"
      parameter {
        name: "accessibilityCancelButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityProtectedContent"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityProtectedContent:"
      return_type: "V"
      parameter {
        name: "accessibilityProtectedContent"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityContents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityContents:"
      return_type: "V"
      parameter {
        name: "accessibilityContents"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityLabel"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityLabel:"
      return_type: "V"
      parameter {
        name: "accessibilityLabel"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityAlternateUIVisible"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityAlternateUIVisible:"
      return_type: "V"
      parameter {
        name: "accessibilityAlternateUIVisible"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySharedFocusElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySharedFocusElements:"
      return_type: "V"
      parameter {
        name: "accessibilitySharedFocusElements"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityApplicationFocusedUIElement"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityApplicationFocusedUIElement:"
      return_type: "V"
      parameter {
        name: "accessibilityApplicationFocusedUIElement"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMainWindow"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMainWindow:"
      return_type: "V"
      parameter {
        name: "accessibilityMainWindow"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityHidden:"
      return_type: "V"
      parameter {
        name: "accessibilityHidden"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityFrontmost"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityFrontmost:"
      return_type: "V"
      parameter {
        name: "accessibilityFrontmost"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFocusedWindow"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityFocusedWindow:"
      return_type: "V"
      parameter {
        name: "accessibilityFocusedWindow"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityWindows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityWindows:"
      return_type: "V"
      parameter {
        name: "accessibilityWindows"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityExtrasMenuBar"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityExtrasMenuBar:"
      return_type: "V"
      parameter {
        name: "accessibilityExtrasMenuBar"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMenuBar"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMenuBar:"
      return_type: "V"
      parameter {
        name: "accessibilityMenuBar"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityColumnTitles"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityColumnTitles:"
      return_type: "V"
      parameter {
        name: "accessibilityColumnTitles"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityOrderedByRow"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityOrderedByRow:"
      return_type: "V"
      parameter {
        name: "accessibilityOrderedByRow"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityHorizontalUnits"
      return_type: "X(Enum.enum NSAccessibilityUnits)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityHorizontalUnits:"
      return_type: "V"
      parameter {
        name: "accessibilityHorizontalUnits"
        type: "X(Enum.enum NSAccessibilityUnits)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVerticalUnits"
      return_type: "X(Enum.enum NSAccessibilityUnits)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityVerticalUnits:"
      return_type: "V"
      parameter {
        name: "accessibilityVerticalUnits"
        type: "X(Enum.enum NSAccessibilityUnits)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityHorizontalUnitDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityHorizontalUnitDescription:"
      return_type: "V"
      parameter {
        name: "accessibilityHorizontalUnitDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVerticalUnitDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityVerticalUnitDescription:"
      return_type: "V"
      parameter {
        name: "accessibilityVerticalUnitDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityLayoutPointForScreenPoint:"
      return_type: "RCGPoint;"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityLayoutSizeForScreenSize:"
      return_type: "RCGSize;"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityScreenPointForLayoutPoint:"
      return_type: "RCGPoint;"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityScreenSizeForLayoutSize:"
      return_type: "RCGSize;"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityHandles"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityHandles:"
      return_type: "V"
      parameter {
        name: "accessibilityHandles"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityWarningValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityWarningValue:"
      return_type: "V"
      parameter {
        name: "accessibilityWarningValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityCriticalValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityCriticalValue:"
      return_type: "V"
      parameter {
        name: "accessibilityCriticalValue"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityDisclosed"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityDisclosed:"
      return_type: "V"
      parameter {
        name: "accessibilityDisclosed"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDisclosedByRow"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityDisclosedByRow:"
      return_type: "V"
      parameter {
        name: "accessibilityDisclosedByRow"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDisclosedRows"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityDisclosedRows:"
      return_type: "V"
      parameter {
        name: "accessibilityDisclosedRows"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDisclosureLevel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityDisclosureLevel:"
      return_type: "V"
      parameter {
        name: "accessibilityDisclosureLevel"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMarkerUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMarkerUIElements:"
      return_type: "V"
      parameter {
        name: "accessibilityMarkerUIElements"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMarkerValues"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMarkerValues:"
      return_type: "V"
      parameter {
        name: "accessibilityMarkerValues"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMarkerGroupUIElement"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMarkerGroupUIElement:"
      return_type: "V"
      parameter {
        name: "accessibilityMarkerGroupUIElement"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityUnits"
      return_type: "X(Enum.enum NSAccessibilityUnits)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityUnits:"
      return_type: "V"
      parameter {
        name: "accessibilityUnits"
        type: "X(Enum.enum NSAccessibilityUnits)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityUnitDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityUnitDescription:"
      return_type: "V"
      parameter {
        name: "accessibilityUnitDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRulerMarkerType"
      return_type: "X(Enum.enum NSAccessibilityRulerMarkerType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityRulerMarkerType:"
      return_type: "V"
      parameter {
        name: "accessibilityRulerMarkerType"
        type: "X(Enum.enum NSAccessibilityRulerMarkerType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMarkerTypeDescription"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMarkerTypeDescription:"
      return_type: "V"
      parameter {
        name: "accessibilityMarkerTypeDescription"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityHorizontalScrollBar"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityHorizontalScrollBar:"
      return_type: "V"
      parameter {
        name: "accessibilityHorizontalScrollBar"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVerticalScrollBar"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityVerticalScrollBar:"
      return_type: "V"
      parameter {
        name: "accessibilityVerticalScrollBar"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityAllowedValues"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityAllowedValues:"
      return_type: "V"
      parameter {
        name: "accessibilityAllowedValues"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityLabelUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityLabelUIElements:"
      return_type: "V"
      parameter {
        name: "accessibilityLabelUIElements"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityLabelValue"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityLabelValue:"
      return_type: "V"
      parameter {
        name: "accessibilityLabelValue"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySplitters"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySplitters:"
      return_type: "V"
      parameter {
        name: "accessibilitySplitters"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDecrementButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityDecrementButton:"
      return_type: "V"
      parameter {
        name: "accessibilityDecrementButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityIncrementButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityIncrementButton:"
      return_type: "V"
      parameter {
        name: "accessibilityIncrementButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityTabs"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityTabs:"
      return_type: "V"
      parameter {
        name: "accessibilityTabs"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityHeader"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityHeader:"
      return_type: "V"
      parameter {
        name: "accessibilityHeader"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityColumnCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityColumnCount:"
      return_type: "V"
      parameter {
        name: "accessibilityColumnCount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRowCount"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityRowCount:"
      return_type: "V"
      parameter {
        name: "accessibilityRowCount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityIndex:"
      return_type: "V"
      parameter {
        name: "accessibilityIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityColumns"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityColumns:"
      return_type: "V"
      parameter {
        name: "accessibilityColumns"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityRows:"
      return_type: "V"
      parameter {
        name: "accessibilityRows"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleRows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityVisibleRows:"
      return_type: "V"
      parameter {
        name: "accessibilityVisibleRows"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedRows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelectedRows:"
      return_type: "V"
      parameter {
        name: "accessibilitySelectedRows"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleColumns"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityVisibleColumns:"
      return_type: "V"
      parameter {
        name: "accessibilityVisibleColumns"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedColumns"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelectedColumns:"
      return_type: "V"
      parameter {
        name: "accessibilitySelectedColumns"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySortDirection"
      return_type: "X(Enum.enum NSAccessibilitySortDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySortDirection:"
      return_type: "V"
      parameter {
        name: "accessibilitySortDirection"
        type: "X(Enum.enum NSAccessibilitySortDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRowHeaderUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityRowHeaderUIElements:"
      return_type: "V"
      parameter {
        name: "accessibilityRowHeaderUIElements"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedCells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelectedCells:"
      return_type: "V"
      parameter {
        name: "accessibilitySelectedCells"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleCells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityVisibleCells:"
      return_type: "V"
      parameter {
        name: "accessibilityVisibleCells"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityColumnHeaderUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityColumnHeaderUIElements:"
      return_type: "V"
      parameter {
        name: "accessibilityColumnHeaderUIElements"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityCellForColumn:row:"
      return_type: "OI"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRowIndexRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityRowIndexRange:"
      return_type: "V"
      parameter {
        name: "accessibilityRowIndexRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityColumnIndexRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityColumnIndexRange:"
      return_type: "V"
      parameter {
        name: "accessibilityColumnIndexRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityInsertionPointLineNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityInsertionPointLineNumber:"
      return_type: "V"
      parameter {
        name: "accessibilityInsertionPointLineNumber"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySharedCharacterRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySharedCharacterRange:"
      return_type: "V"
      parameter {
        name: "accessibilitySharedCharacterRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySharedTextUIElements"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySharedTextUIElements:"
      return_type: "V"
      parameter {
        name: "accessibilitySharedTextUIElements"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityVisibleCharacterRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityVisibleCharacterRange:"
      return_type: "V"
      parameter {
        name: "accessibilityVisibleCharacterRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityNumberOfCharacters"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityNumberOfCharacters:"
      return_type: "V"
      parameter {
        name: "accessibilityNumberOfCharacters"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedText"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelectedText:"
      return_type: "V"
      parameter {
        name: "accessibilitySelectedText"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedTextRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelectedTextRange:"
      return_type: "V"
      parameter {
        name: "accessibilitySelectedTextRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySelectedTextRanges"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilitySelectedTextRanges:"
      return_type: "V"
      parameter {
        name: "accessibilitySelectedTextRanges"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityAttributedStringForRange:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRangeForLine:"
      return_type: "R_NSRange;"
      parameter {
        name: "line"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityStringForRange:"
      return_type: "LNSString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRangeForPosition:"
      return_type: "R_NSRange;"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRangeForIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFrameForRange:"
      return_type: "RCGRect;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityRTFForRange:"
      return_type: "LNSData;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityStyleRangeForIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityLineForIndex:"
      return_type: "I"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityToolbarButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityToolbarButton:"
      return_type: "V"
      parameter {
        name: "accessibilityToolbarButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityModal"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityModal:"
      return_type: "V"
      parameter {
        name: "accessibilityModal"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityProxy"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityProxy:"
      return_type: "V"
      parameter {
        name: "accessibilityProxy"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityMain"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMain:"
      return_type: "V"
      parameter {
        name: "accessibilityMain"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFullScreenButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityFullScreenButton:"
      return_type: "V"
      parameter {
        name: "accessibilityFullScreenButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityGrowArea"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityGrowArea:"
      return_type: "V"
      parameter {
        name: "accessibilityGrowArea"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDocument"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityDocument:"
      return_type: "V"
      parameter {
        name: "accessibilityDocument"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDefaultButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityDefaultButton:"
      return_type: "V"
      parameter {
        name: "accessibilityDefaultButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityCloseButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityCloseButton:"
      return_type: "V"
      parameter {
        name: "accessibilityCloseButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityZoomButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityZoomButton:"
      return_type: "V"
      parameter {
        name: "accessibilityZoomButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityMinimizeButton"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMinimizeButton:"
      return_type: "V"
      parameter {
        name: "accessibilityMinimizeButton"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilityMinimized"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAccessibilityMinimized:"
      return_type: "V"
      parameter {
        name: "accessibilityMinimized"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformCancel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformConfirm"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformDecrement"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformDelete"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformIncrement"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformPick"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformPress"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformRaise"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformShowAlternateUI"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformShowDefaultUI"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformShowMenu"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isAccessibilitySelectorAllowed:"
      return_type: "Z"
      parameter {
        name: "selector"
        type: "OS"
      }
    }
    class_method: false
  }
  property {
    name: "accessibilityElement"
    type: "Z"
  }
  property {
    name: "accessibilityFrame"
    type: "RCGRect;"
  }
  property {
    name: "accessibilityFocused"
    type: "Z"
  }
  property {
    name: "accessibilityActivationPoint"
    type: "RCGPoint;"
  }
  property {
    name: "accessibilityTopLevelUIElement"
    type: "OI"
  }
  property {
    name: "accessibilityURL"
    type: "LNSURL;"
  }
  property {
    name: "accessibilityValue"
    type: "OI"
  }
  property {
    name: "accessibilityValueDescription"
    type: "LNSString;"
  }
  property {
    name: "accessibilityVisibleChildren"
    type: "LNSArray;"
  }
  property {
    name: "accessibilitySubrole"
    type: "LNSString;"
  }
  property {
    name: "accessibilityTitle"
    type: "LNSString;"
  }
  property {
    name: "accessibilityTitleUIElement"
    type: "OI"
  }
  property {
    name: "accessibilityNextContents"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityOrientation"
    type: "X(Enum.enum NSAccessibilityOrientation)"
  }
  property {
    name: "accessibilityOverflowButton"
    type: "OI"
  }
  property {
    name: "accessibilityParent"
    type: "OI"
  }
  property {
    name: "accessibilityPlaceholderValue"
    type: "LNSString;"
  }
  property {
    name: "accessibilityPreviousContents"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityRole"
    type: "LNSString;"
  }
  property {
    name: "accessibilityRoleDescription"
    type: "LNSString;"
  }
  property {
    name: "accessibilitySearchButton"
    type: "OI"
  }
  property {
    name: "accessibilitySearchMenu"
    type: "OI"
  }
  property {
    name: "accessibilitySelected"
    type: "Z"
  }
  property {
    name: "accessibilitySelectedChildren"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityServesAsTitleForUIElements"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityShownMenu"
    type: "OI"
  }
  property {
    name: "accessibilityMinValue"
    type: "OI"
  }
  property {
    name: "accessibilityMaxValue"
    type: "OI"
  }
  property {
    name: "accessibilityLinkedUIElements"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityWindow"
    type: "OI"
  }
  property {
    name: "accessibilityIdentifier"
    type: "LNSString;"
  }
  property {
    name: "accessibilityHelp"
    type: "LNSString;"
  }
  property {
    name: "accessibilityFilename"
    type: "LNSString;"
  }
  property {
    name: "accessibilityExpanded"
    type: "Z"
  }
  property {
    name: "accessibilityEdited"
    type: "Z"
  }
  property {
    name: "accessibilityEnabled"
    type: "Z"
  }
  property {
    name: "accessibilityChildren"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityClearButton"
    type: "OI"
  }
  property {
    name: "accessibilityCancelButton"
    type: "OI"
  }
  property {
    name: "accessibilityProtectedContent"
    type: "Z"
  }
  property {
    name: "accessibilityContents"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityLabel"
    type: "LNSString;"
  }
  property {
    name: "accessibilityAlternateUIVisible"
    type: "Z"
  }
  property {
    name: "accessibilitySharedFocusElements"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityApplicationFocusedUIElement"
    type: "OI"
  }
  property {
    name: "accessibilityMainWindow"
    type: "OI"
  }
  property {
    name: "accessibilityHidden"
    type: "Z"
  }
  property {
    name: "accessibilityFrontmost"
    type: "Z"
  }
  property {
    name: "accessibilityFocusedWindow"
    type: "OI"
  }
  property {
    name: "accessibilityWindows"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityExtrasMenuBar"
    type: "OI"
  }
  property {
    name: "accessibilityMenuBar"
    type: "OI"
  }
  property {
    name: "accessibilityColumnTitles"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityOrderedByRow"
    type: "Z"
  }
  property {
    name: "accessibilityHorizontalUnits"
    type: "X(Enum.enum NSAccessibilityUnits)"
  }
  property {
    name: "accessibilityVerticalUnits"
    type: "X(Enum.enum NSAccessibilityUnits)"
  }
  property {
    name: "accessibilityHorizontalUnitDescription"
    type: "LNSString;"
  }
  property {
    name: "accessibilityVerticalUnitDescription"
    type: "LNSString;"
  }
  property {
    name: "accessibilityHandles"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityWarningValue"
    type: "OI"
  }
  property {
    name: "accessibilityCriticalValue"
    type: "OI"
  }
  property {
    name: "accessibilityDisclosed"
    type: "Z"
  }
  property {
    name: "accessibilityDisclosedByRow"
    type: "OI"
  }
  property {
    name: "accessibilityDisclosedRows"
    type: "OI"
  }
  property {
    name: "accessibilityDisclosureLevel"
    type: "I"
  }
  property {
    name: "accessibilityMarkerUIElements"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityMarkerValues"
    type: "OI"
  }
  property {
    name: "accessibilityMarkerGroupUIElement"
    type: "OI"
  }
  property {
    name: "accessibilityUnits"
    type: "X(Enum.enum NSAccessibilityUnits)"
  }
  property {
    name: "accessibilityUnitDescription"
    type: "LNSString;"
  }
  property {
    name: "accessibilityRulerMarkerType"
    type: "X(Enum.enum NSAccessibilityRulerMarkerType)"
  }
  property {
    name: "accessibilityMarkerTypeDescription"
    type: "LNSString;"
  }
  property {
    name: "accessibilityHorizontalScrollBar"
    type: "OI"
  }
  property {
    name: "accessibilityVerticalScrollBar"
    type: "OI"
  }
  property {
    name: "accessibilityAllowedValues"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityLabelUIElements"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityLabelValue"
    type: "F"
  }
  property {
    name: "accessibilitySplitters"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityDecrementButton"
    type: "OI"
  }
  property {
    name: "accessibilityIncrementButton"
    type: "OI"
  }
  property {
    name: "accessibilityTabs"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityHeader"
    type: "OI"
  }
  property {
    name: "accessibilityColumnCount"
    type: "I"
  }
  property {
    name: "accessibilityRowCount"
    type: "I"
  }
  property {
    name: "accessibilityIndex"
    type: "I"
  }
  property {
    name: "accessibilityColumns"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityRows"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityVisibleRows"
    type: "LNSArray;"
  }
  property {
    name: "accessibilitySelectedRows"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityVisibleColumns"
    type: "LNSArray;"
  }
  property {
    name: "accessibilitySelectedColumns"
    type: "LNSArray;"
  }
  property {
    name: "accessibilitySortDirection"
    type: "X(Enum.enum NSAccessibilitySortDirection)"
  }
  property {
    name: "accessibilityRowHeaderUIElements"
    type: "LNSArray;"
  }
  property {
    name: "accessibilitySelectedCells"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityVisibleCells"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityColumnHeaderUIElements"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityRowIndexRange"
    type: "R_NSRange;"
  }
  property {
    name: "accessibilityColumnIndexRange"
    type: "R_NSRange;"
  }
  property {
    name: "accessibilityInsertionPointLineNumber"
    type: "I"
  }
  property {
    name: "accessibilitySharedCharacterRange"
    type: "R_NSRange;"
  }
  property {
    name: "accessibilitySharedTextUIElements"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityVisibleCharacterRange"
    type: "R_NSRange;"
  }
  property {
    name: "accessibilityNumberOfCharacters"
    type: "I"
  }
  property {
    name: "accessibilitySelectedText"
    type: "LNSString;"
  }
  property {
    name: "accessibilitySelectedTextRange"
    type: "R_NSRange;"
  }
  property {
    name: "accessibilitySelectedTextRanges"
    type: "LNSArray;"
  }
  property {
    name: "accessibilityToolbarButton"
    type: "OI"
  }
  property {
    name: "accessibilityModal"
    type: "Z"
  }
  property {
    name: "accessibilityProxy"
    type: "OI"
  }
  property {
    name: "accessibilityMain"
    type: "Z"
  }
  property {
    name: "accessibilityFullScreenButton"
    type: "OI"
  }
  property {
    name: "accessibilityGrowArea"
    type: "OI"
  }
  property {
    name: "accessibilityDocument"
    type: "LNSString;"
  }
  property {
    name: "accessibilityDefaultButton"
    type: "OI"
  }
  property {
    name: "accessibilityCloseButton"
    type: "OI"
  }
  property {
    name: "accessibilityZoomButton"
    type: "OI"
  }
  property {
    name: "accessibilityMinimizeButton"
    type: "OI"
  }
  property {
    name: "accessibilityMinimized"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibilityProtocols.h"
}
protocol {
  name: "NSValidatedUserInterfaceItem"
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "tag"
      return_type: "I"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSUserInterfaceValidation.h"
}
protocol {
  name: "NSUserInterfaceValidations"
  method {
    function {
      name: "validateUserInterfaceItem:"
      return_type: "Z"
      parameter {
        name: "anItem"
        type: "X(Unexposed.id<NSValidatedUserInterfaceItem>)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSUserInterfaceValidation.h"
}
protocol {
  name: "NSApplicationDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "applicationShouldTerminate:"
      return_type: "X(Enum.enum NSApplicationTerminateReply)"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:openFile:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:openFiles:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
      parameter {
        name: "filenames"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:openTempFile:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationShouldOpenUntitledFile:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationOpenUntitledFile:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:openFileWithoutUI:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:printFile:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:printFiles:withSettings:showPrintPanels:"
      return_type: "X(Enum.enum NSApplicationPrintReply)"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "fileNames"
        type: "LNSArray;"
      }
      parameter {
        name: "printSettings"
        type: "LNSDictionary;"
      }
      parameter {
        name: "showPrintPanels"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationShouldTerminateAfterLastWindowClosed:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationShouldHandleReopen:hasVisibleWindows:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDockMenu:"
      return_type: "LNSMenu;"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:willPresentError:"
      return_type: "LNSError;"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:didRegisterForRemoteNotificationsWithDeviceToken:"
      return_type: "V"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "deviceToken"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:didFailToRegisterForRemoteNotificationsWithError:"
      return_type: "V"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:didReceiveRemoteNotification:"
      return_type: "V"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "userInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:willEncodeRestorableState:"
      return_type: "V"
      parameter {
        name: "app"
        type: "LNSApplication;"
      }
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:didDecodeRestorableState:"
      return_type: "V"
      parameter {
        name: "app"
        type: "LNSApplication;"
      }
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:willContinueUserActivityWithType:"
      return_type: "Z"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "userActivityType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:continueUserActivity:restorationHandler:"
      return_type: "Z"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
      parameter {
        name: "restorationHandler"
        type: "X(BlockPointer.void (^)(NSArray *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:didFailToContinueUserActivityWithType:error:"
      return_type: "V"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "userActivityType"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:didUpdateUserActivity:"
      return_type: "V"
      parameter {
        name: "application"
        type: "LNSApplication;"
      }
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationWillFinishLaunching:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDidFinishLaunching:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationWillHide:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDidHide:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationWillUnhide:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDidUnhide:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationWillBecomeActive:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDidBecomeActive:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationWillResignActive:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDidResignActive:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationWillUpdate:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDidUpdate:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationWillTerminate:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDidChangeScreenParameters:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applicationDidChangeOcclusionState:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
protocol {
  name: "NSServicesMenuRequestor"
  base_protocol: "NSObject"
  method {
    function {
      name: "writeSelectionToPasteboard:types:"
      return_type: "Z"
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "types"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readSelectionFromPasteboard:"
      return_type: "Z"
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
protocol {
  name: "NSAnimationDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "animationShouldStart:"
      return_type: "Z"
      parameter {
        name: "animation"
        type: "LNSAnimation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animationDidStop:"
      return_type: "V"
      parameter {
        name: "animation"
        type: "LNSAnimation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animationDidEnd:"
      return_type: "V"
      parameter {
        name: "animation"
        type: "LNSAnimation;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animation:valueForProgress:"
      return_type: "F"
      parameter {
        name: "animation"
        type: "LNSAnimation;"
      }
      parameter {
        name: "progress"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animation:didReachProgressMark:"
      return_type: "V"
      parameter {
        name: "animation"
        type: "LNSAnimation;"
      }
      parameter {
        name: "progress"
        type: "F"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAnimation.h"
}
protocol {
  name: "NSAnimatablePropertyContainer"
  method {
    function {
      name: "animator"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "animations"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimations:"
      return_type: "V"
      parameter {
        name: "animations"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animationForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultAnimationForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAnimation.h"
}
protocol {
  name: "NSUserInterfaceItemIdentification"
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIdentifier:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSUserInterfaceItemIdentification.h"
}
protocol {
  name: "NSDraggingInfo"
  base_protocol: "NSObject"
  method {
    function {
      name: "draggingDestinationWindow"
      return_type: "LNSWindow;"
    }
    class_method: false
  }
  method {
    function {
      name: "draggingSourceOperationMask"
      return_type: "X(Enum.enum NSDragOperation)"
    }
    class_method: false
  }
  method {
    function {
      name: "draggingLocation"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "draggedImageLocation"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "draggedImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "draggingPasteboard"
      return_type: "LNSPasteboard;"
    }
    class_method: false
  }
  method {
    function {
      name: "draggingSource"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "draggingSequenceNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "slideDraggedImageTo:"
      return_type: "V"
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "namesOfPromisedFilesDroppedAtDestination:"
      return_type: "LNSArray;"
      parameter {
        name: "dropDestination"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingFormation"
      return_type: "X(Enum.enum NSDraggingFormation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDraggingFormation:"
      return_type: "V"
      parameter {
        name: "draggingFormation"
        type: "X(Enum.enum NSDraggingFormation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animatesToDestination"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimatesToDestination:"
      return_type: "V"
      parameter {
        name: "animatesToDestination"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfValidItemsForDrop"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfValidItemsForDrop:"
      return_type: "V"
      parameter {
        name: "numberOfValidItemsForDrop"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "enumOpts"
        type: "X(Enum.enum NSDraggingItemEnumerationOptions)"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "classArray"
        type: "LNSArray;"
      }
      parameter {
        name: "searchOptions"
        type: "LNSDictionary;"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSDraggingItem *, NSInteger, BOOL *))"
      }
    }
    class_method: false
  }
  property {
    name: "draggingFormation"
    type: "X(Enum.enum NSDraggingFormation)"
  }
  property {
    name: "animatesToDestination"
    type: "Z"
  }
  property {
    name: "numberOfValidItemsForDrop"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDragging.h"
}
protocol {
  name: "NSDraggingDestination"
  base_protocol: "NSObject"
  method {
    function {
      name: "draggingEntered:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingUpdated:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingExited:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "prepareForDragOperation:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performDragOperation:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "concludeDragOperation:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingEnded:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsPeriodicDraggingUpdates"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "updateDraggingItemsForDrag:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDragging.h"
}
protocol {
  name: "NSDraggingSource"
  base_protocol: "NSObject"
  method {
    function {
      name: "draggingSession:sourceOperationMaskForDraggingContext:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "context"
        type: "X(Enum.enum NSDraggingContext)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingSession:willBeginAtPoint:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingSession:movedToPoint:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingSession:endedAtPoint:operation:"
      return_type: "V"
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "operation"
        type: "X(Enum.enum NSDragOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ignoreModifierKeysForDraggingSession:"
      return_type: "Z"
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDragging.h"
}
protocol {
  name: "NSAppearanceCustomization"
  base_protocol: "NSObject"
  method {
    function {
      name: "appearance"
      return_type: "LNSAppearance;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAppearance:"
      return_type: "V"
      parameter {
        name: "appearance"
        type: "LNSAppearance;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "effectiveAppearance"
      return_type: "LNSAppearance;"
    }
    class_method: false
  }
  property {
    name: "appearance"
    type: "LNSAppearance;"
  }
  property {
    name: "effectiveAppearance"
    type: "LNSAppearance;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAppearance.h"
}
protocol {
  name: "NSChangeSpelling"
  method {
    function {
      name: "changeSpelling:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSpellProtocol.h"
}
protocol {
  name: "NSIgnoreMisspelledWords"
  method {
    function {
      name: "ignoreSpelling:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSpellProtocol.h"
}
protocol {
  name: "NSTextDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "textShouldBeginEditing:"
      return_type: "Z"
      parameter {
        name: "textObject"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textShouldEndEditing:"
      return_type: "Z"
      parameter {
        name: "textObject"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidBeginEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidEndEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSText.h"
}
protocol {
  name: "NSAlertDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "alertShowHelp:"
      return_type: "Z"
      parameter {
        name: "alert"
        type: "LNSAlert;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAlert.h"
}
protocol {
  name: "NSControlTextEditingDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "control:textShouldBeginEditing:"
      return_type: "Z"
      parameter {
        name: "control"
        type: "LNSControl;"
      }
      parameter {
        name: "fieldEditor"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "control:textShouldEndEditing:"
      return_type: "Z"
      parameter {
        name: "control"
        type: "LNSControl;"
      }
      parameter {
        name: "fieldEditor"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "control:didFailToFormatString:errorDescription:"
      return_type: "Z"
      parameter {
        name: "control"
        type: "LNSControl;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "control:didFailToValidatePartialString:errorDescription:"
      return_type: "V"
      parameter {
        name: "control"
        type: "LNSControl;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "control:isValidObject:"
      return_type: "Z"
      parameter {
        name: "control"
        type: "LNSControl;"
      }
      parameter {
        name: "obj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "control:textView:doCommandBySelector:"
      return_type: "Z"
      parameter {
        name: "control"
        type: "LNSControl;"
      }
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "commandSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "control:textView:completions:forPartialWordRange:indexOfSelectedItem:"
      return_type: "LNSArray;"
      parameter {
        name: "control"
        type: "LNSControl;"
      }
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "words"
        type: "LNSArray;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "index"
        type: "*I;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSControl.h"
}
protocol {
  name: "NSDockTilePlugIn"
  base_protocol: "NSObject"
  method {
    function {
      name: "setDockTile:"
      return_type: "V"
      parameter {
        name: "dockTile"
        type: "LNSDockTile;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dockMenu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDockTile.h"
}
protocol {
  name: "NSWindowDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "windowShouldClose:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillReturnFieldEditor:toObject:"
      return_type: "OI"
      parameter {
        name: "sender"
        type: "LNSWindow;"
      }
      parameter {
        name: "client"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillResize:toSize:"
      return_type: "RCGSize;"
      parameter {
        name: "sender"
        type: "LNSWindow;"
      }
      parameter {
        name: "frameSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillUseStandardFrame:defaultFrame:"
      return_type: "RCGRect;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "newFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowShouldZoom:toFrame:"
      return_type: "Z"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "newFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillReturnUndoManager:"
      return_type: "LNSUndoManager;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:willPositionSheet:usingRect:"
      return_type: "RCGRect;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "sheet"
        type: "LNSWindow;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:shouldPopUpDocumentPathMenu:"
      return_type: "Z"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:shouldDragDocumentWithEvent:from:withPasteboard:"
      return_type: "Z"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "dragImageLocation"
        type: "RCGPoint;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:willUseFullScreenContentSize:"
      return_type: "RCGSize;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "proposedSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:willUseFullScreenPresentationOptions:"
      return_type: "X(Enum.enum NSApplicationPresentationOptions)"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "proposedOptions"
        type: "X(Enum.enum NSApplicationPresentationOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "customWindowsToEnterFullScreenForWindow:"
      return_type: "LNSArray;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:startCustomAnimationToEnterFullScreenWithDuration:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "duration"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidFailToEnterFullScreen:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "customWindowsToExitFullScreenForWindow:"
      return_type: "LNSArray;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:startCustomAnimationToExitFullScreenWithDuration:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "duration"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "customWindowsToEnterFullScreenForWindow:onScreen:"
      return_type: "LNSArray;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:startCustomAnimationToEnterFullScreenOnScreen:withDuration:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
      parameter {
        name: "duration"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidFailToExitFullScreen:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:willResizeForVersionBrowserWithMaxPreferredSize:maxAllowedSize:"
      return_type: "RCGSize;"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "maxPreferredFrameSize"
        type: "RCGSize;"
      }
      parameter {
        name: "maxAllowedFrameSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:willEncodeRestorableState:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "state"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "window:didDecodeRestorableState:"
      return_type: "V"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "state"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidResize:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidExpose:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillMove:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidMove:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidBecomeKey:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidResignKey:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidBecomeMain:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidResignMain:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillClose:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillMiniaturize:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidMiniaturize:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidDeminiaturize:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidUpdate:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidChangeScreen:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidChangeScreenProfile:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidChangeBackingProperties:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillBeginSheet:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidEndSheet:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillStartLiveResize:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidEndLiveResize:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillEnterFullScreen:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidEnterFullScreen:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillExitFullScreen:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidExitFullScreen:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillEnterVersionBrowser:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidEnterVersionBrowser:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowWillExitVersionBrowser:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidExitVersionBrowser:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowDidChangeOcclusionState:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindow.h"
}
protocol {
  name: "NSMatrixDelegate"
  base_protocol: "NSControlTextEditingDelegate"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMatrix.h"
}
protocol {
  name: "NSMenuDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "menuNeedsUpdate:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfItemsInMenu:"
      return_type: "I"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menu:updateItem:atIndex:shouldCancel:"
      return_type: "Z"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
      parameter {
        name: "index"
        type: "I"
      }
      parameter {
        name: "shouldCancel"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuHasKeyEquivalent:forEvent:target:action:"
      return_type: "Z"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "target"
        type: "*OI;"
      }
      parameter {
        name: "action"
        type: "*OS;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuWillOpen:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuDidClose:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menu:willHighlightItem:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "item"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "confinementRectForMenu:onScreen:"
      return_type: "RCGRect;"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenu.h"
}
protocol {
  name: "NSPasteboardWriting"
  base_protocol: "NSObject"
  method {
    function {
      name: "writableTypesForPasteboard:"
      return_type: "LNSArray;"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writingOptionsForType:pasteboard:"
      return_type: "X(Enum.enum NSPasteboardWritingOptions)"
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pasteboardPropertyListForType:"
      return_type: "OI"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h"
}
protocol {
  name: "NSPasteboardReading"
  base_protocol: "NSObject"
  method {
    function {
      name: "readableTypesForPasteboard:"
      return_type: "LNSArray;"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "readingOptionsForType:pasteboard:"
      return_type: "X(Enum.enum NSPasteboardReadingOptions)"
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithPasteboardPropertyList:ofType:"
      return_type: "OI"
      parameter {
        name: "propertyList"
        type: "OI"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h"
}
protocol {
  name: "NSPopoverDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "popoverShouldClose:"
      return_type: "Z"
      parameter {
        name: "popover"
        type: "LNSPopover;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "popoverShouldDetach:"
      return_type: "Z"
      parameter {
        name: "popover"
        type: "LNSPopover;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "detachableWindowForPopover:"
      return_type: "LNSWindow;"
      parameter {
        name: "popover"
        type: "LNSPopover;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "popoverWillShow:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "popoverDidShow:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "popoverWillClose:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "popoverDidClose:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPopover.h"
}
protocol {
  name: "NSSeguePerforming"
  base_protocol: "NSObject"
  method {
    function {
      name: "prepareForSegue:sender:"
      return_type: "V"
      parameter {
        name: "segue"
        type: "LNSStoryboardSegue;"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSegueWithIdentifier:sender:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldPerformSegueWithIdentifier:sender:"
      return_type: "Z"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStoryboardSegue.h"
}
protocol {
  name: "NSViewControllerPresentationAnimator"
  base_protocol: "NSObject"
  method {
    function {
      name: "animatePresentationOfViewController:fromViewController:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
      parameter {
        name: "fromViewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animateDismissalOfViewController:fromViewController:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
      parameter {
        name: "fromViewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSViewController.h"
}
protocol {
  name: "NSBrowserDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "browser:numberOfRowsInColumn:"
      return_type: "I"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:createRowsForColumn:inMatrix:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "matrix"
        type: "LNSMatrix;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:numberOfChildrenOfItem:"
      return_type: "I"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:child:ofItem:"
      return_type: "OI"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "index"
        type: "I"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:isLeafItem:"
      return_type: "Z"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:objectValueForItem:"
      return_type: "OI"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:heightOfRow:inColumn:"
      return_type: "D"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "columnIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rootItemForBrowser:"
      return_type: "OI"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:setObjectValue:forItem:"
      return_type: "V"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:shouldEditItem:"
      return_type: "Z"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:willDisplayCell:atRow:column:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
      parameter {
        name: "cell"
        type: "OI"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:titleOfColumn:"
      return_type: "LNSString;"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:selectCellWithString:inColumn:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
      parameter {
        name: "title"
        type: "LNSString;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:selectRow:inColumn:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:isColumnValid:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browserWillScroll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browserDidScroll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSBrowser;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:shouldSizeColumn:forUserResize:toWidth:"
      return_type: "D"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "columnIndex"
        type: "I"
      }
      parameter {
        name: "forUserResize"
        type: "Z"
      }
      parameter {
        name: "suggestedWidth"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:sizeToFitWidthOfColumn:"
      return_type: "D"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "columnIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browserColumnConfigurationDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:shouldShowCellExpansionForRow:column:"
      return_type: "Z"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:writeRowsWithIndexes:inColumn:toPasteboard:"
      return_type: "Z"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:inColumn:"
      return_type: "LNSArray;"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "dropDestination"
        type: "LNSURL;"
      }
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:canDragRowsWithIndexes:inColumn:withEvent:"
      return_type: "Z"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:"
      return_type: "LNSImage;"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "dragImageOffset"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:validateDrop:proposedRow:column:dropOperation:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "info"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "row"
        type: "*I;"
      }
      parameter {
        name: "column"
        type: "*I;"
      }
      parameter {
        name: "dropOperation"
        type: "*X(Enum.enum NSBrowserDropOperation);"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:acceptDrop:atRow:column:dropOperation:"
      return_type: "Z"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "info"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "dropOperation"
        type: "X(Enum.enum NSBrowserDropOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:typeSelectStringForRow:inColumn:"
      return_type: "LNSString;"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:shouldTypeSelectForEvent:withCurrentSearchString:"
      return_type: "Z"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:"
      return_type: "I"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "startRow"
        type: "I"
      }
      parameter {
        name: "endRow"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:previewViewControllerForLeafItem:"
      return_type: "LNSViewController;"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:headerViewControllerForItem:"
      return_type: "LNSViewController;"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:didChangeLastColumn:toColumn:"
      return_type: "V"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "oldLastColumn"
        type: "I"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "browser:selectionIndexesForProposedSelection:inColumn:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "browser"
        type: "LNSBrowser;"
      }
      parameter {
        name: "proposedSelectionIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBrowser.h"
}
protocol {
  name: "NSColorPickingDefault"
  method {
    function {
      name: "initWithPickerMask:colorPanel:"
      return_type: "OI"
      parameter {
        name: "mask"
        type: "UI"
      }
      parameter {
        name: "owningColorPanel"
        type: "LNSColorPanel;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "provideNewButtonImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "insertNewButtonImage:in:"
      return_type: "V"
      parameter {
        name: "newButtonImage"
        type: "LNSImage;"
      }
      parameter {
        name: "buttonCell"
        type: "LNSButtonCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewSizeChanged:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alphaControlAddedOrRemoved:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attachColorList:"
      return_type: "V"
      parameter {
        name: "colorList"
        type: "LNSColorList;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "detachColorList:"
      return_type: "V"
      parameter {
        name: "colorList"
        type: "LNSColorList;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMode:"
      return_type: "V"
      parameter {
        name: "mode"
        type: "X(Enum.enum NSColorPanelMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "buttonToolTip"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "minContentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorPicking.h"
}
protocol {
  name: "NSColorPickingCustom"
  base_protocol: "NSColorPickingDefault"
  method {
    function {
      name: "supportsMode:"
      return_type: "Z"
      parameter {
        name: "mode"
        type: "X(Enum.enum NSColorPanelMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "currentMode"
      return_type: "X(Enum.enum NSColorPanelMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "provideNewView:"
      return_type: "LNSView;"
      parameter {
        name: "initialRequest"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setColor:"
      return_type: "V"
      parameter {
        name: "newColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorPicking.h"
}
protocol {
  name: "NSGestureRecognizerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "gestureRecognizerShouldBegin:"
      return_type: "Z"
      parameter {
        name: "gestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:"
      return_type: "Z"
      parameter {
        name: "gestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
      parameter {
        name: "otherGestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "gestureRecognizer:shouldRequireFailureOfGestureRecognizer:"
      return_type: "Z"
      parameter {
        name: "gestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
      parameter {
        name: "otherGestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:"
      return_type: "Z"
      parameter {
        name: "gestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
      parameter {
        name: "otherGestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGestureRecognizer.h"
}
protocol {
  name: "NSImageDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "imageDidNotDraw:inRect:"
      return_type: "LNSImage;"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image:willLoadRepresentation:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "rep"
        type: "LNSImageRep;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image:didLoadRepresentationHeader:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "rep"
        type: "LNSImageRep;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image:didLoadPartOfRepresentation:withValidRows:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "rep"
        type: "LNSImageRep;"
      }
      parameter {
        name: "rows"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image:didLoadRepresentation:withStatus:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "rep"
        type: "LNSImageRep;"
      }
      parameter {
        name: "status"
        type: "X(Enum.enum NSImageLoadStatus)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSImage.h"
}
protocol {
  name: "NSSpeechRecognizerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "speechRecognizer:didRecognizeCommand:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpeechRecognizer;"
      }
      parameter {
        name: "command"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSpeechRecognizer.h"
}
protocol {
  name: "NSSpeechSynthesizerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "speechSynthesizer:didFinishSpeaking:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpeechSynthesizer;"
      }
      parameter {
        name: "finishedSpeaking"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "speechSynthesizer:willSpeakWord:ofString:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpeechSynthesizer;"
      }
      parameter {
        name: "characterRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "speechSynthesizer:willSpeakPhoneme:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpeechSynthesizer;"
      }
      parameter {
        name: "phonemeOpcode"
        type: "S"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "speechSynthesizer:didEncounterErrorAtIndex:ofString:message:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpeechSynthesizer;"
      }
      parameter {
        name: "characterIndex"
        type: "UI"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "message"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "speechSynthesizer:didEncounterSyncMessage:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSSpeechSynthesizer;"
      }
      parameter {
        name: "message"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSpeechSynthesizer.h"
}
protocol {
  name: "NSSplitViewDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "splitView:canCollapseSubview:"
      return_type: "Z"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "subview"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:"
      return_type: "Z"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "subview"
        type: "LNSView;"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:constrainMinCoordinate:ofSubviewAt:"
      return_type: "D"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "proposedMinimumPosition"
        type: "D"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:constrainMaxCoordinate:ofSubviewAt:"
      return_type: "D"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "proposedMaximumPosition"
        type: "D"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:constrainSplitPosition:ofSubviewAt:"
      return_type: "D"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "proposedPosition"
        type: "D"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:resizeSubviewsWithOldSize:"
      return_type: "V"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "oldSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:shouldAdjustSizeOfSubview:"
      return_type: "Z"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:shouldHideDividerAtIndex:"
      return_type: "Z"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "proposedEffectiveRect"
        type: "RCGRect;"
      }
      parameter {
        name: "drawnRect"
        type: "RCGRect;"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitView:additionalEffectiveRectOfDividerAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "splitView"
        type: "LNSSplitView;"
      }
      parameter {
        name: "dividerIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitViewWillResizeSubviews:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "splitViewDidResizeSubviews:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSplitView.h"
}
protocol {
  name: "NSOpenSavePanelDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "panel:shouldEnableURL:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panel:validateURL:error:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panel:didChangeToDirectoryURL:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panel:userEnteredFilename:confirmed:"
      return_type: "LNSString;"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
      parameter {
        name: "okFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panel:willExpand:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "expanding"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panelSelectionDidChange:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSavePanel.h"
}
protocol {
  name: "NSPasteboardItemDataProvider"
  base_protocol: "NSObject"
  method {
    function {
      name: "pasteboard:item:provideDataForType:"
      return_type: "V"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "item"
        type: "LNSPasteboardItem;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pasteboardFinishedWithDataProvider:"
      return_type: "V"
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboardItem.h"
}
protocol {
  name: "NSPrintPanelAccessorizing"
  method {
    function {
      name: "localizedSummaryItems"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "keyPathsForValuesAffectingPreview"
      return_type: "LNSSet;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrintPanel.h"
}
protocol {
  name: "NSTextFinderClient"
  base_protocol: "NSObject"
  method {
    function {
      name: "isSelectable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsMultipleSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "string"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringAtIndex:effectiveRange:endsWithSearchBoundary:"
      return_type: "LNSString;"
      parameter {
        name: "characterIndex"
        type: "UI"
      }
      parameter {
        name: "outRange"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "outFlag"
        type: "*Z;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringLength"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "firstSelectedRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRanges"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedRanges:"
      return_type: "V"
      parameter {
        name: "selectedRanges"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollRangeToVisible:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldReplaceCharactersInRanges:withStrings:"
      return_type: "Z"
      parameter {
        name: "ranges"
        type: "LNSArray;"
      }
      parameter {
        name: "strings"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceCharactersInRange:withString:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "didReplaceCharacters"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "contentViewAtIndex:effectiveCharacterRange:"
      return_type: "LNSView;"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "outRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectsForCharacterRange:"
      return_type: "LNSArray;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "visibleCharacterRanges"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "drawCharactersInRange:forContentView:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  property {
    name: "selectable"
    type: "Z"
  }
  property {
    name: "allowsMultipleSelection"
    type: "Z"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "string"
    type: "LNSString;"
  }
  property {
    name: "firstSelectedRange"
    type: "R_NSRange;"
  }
  property {
    name: "selectedRanges"
    type: "LNSArray;"
  }
  property {
    name: "visibleCharacterRanges"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextFinder.h"
}
protocol {
  name: "NSTextFinderBarContainer"
  base_protocol: "NSObject"
  method {
    function {
      name: "findBarView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFindBarView:"
      return_type: "V"
      parameter {
        name: "findBarView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFindBarVisible"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setFindBarVisible:"
      return_type: "V"
      parameter {
        name: "findBarVisible"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "findBarViewDidChangeHeight"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "contentView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  property {
    name: "findBarView"
    type: "LNSView;"
  }
  property {
    name: "findBarVisible"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextFinder.h"
}
protocol {
  name: "NSSharingServiceDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "sharingService:willShareItems:"
      return_type: "V"
      parameter {
        name: "sharingService"
        type: "LNSSharingService;"
      }
      parameter {
        name: "items"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharingService:didFailToShareItems:error:"
      return_type: "V"
      parameter {
        name: "sharingService"
        type: "LNSSharingService;"
      }
      parameter {
        name: "items"
        type: "LNSArray;"
      }
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharingService:didShareItems:"
      return_type: "V"
      parameter {
        name: "sharingService"
        type: "LNSSharingService;"
      }
      parameter {
        name: "items"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharingService:sourceFrameOnScreenForShareItem:"
      return_type: "RCGRect;"
      parameter {
        name: "sharingService"
        type: "LNSSharingService;"
      }
      parameter {
        name: "item"
        type: "X(Unexposed.id<NSPasteboardWriting>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharingService:transitionImageForShareItem:contentRect:"
      return_type: "LNSImage;"
      parameter {
        name: "sharingService"
        type: "LNSSharingService;"
      }
      parameter {
        name: "item"
        type: "X(Unexposed.id<NSPasteboardWriting>)"
      }
      parameter {
        name: "contentRect"
        type: "*RCGRect;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharingService:sourceWindowForShareItems:sharingContentScope:"
      return_type: "LNSWindow;"
      parameter {
        name: "sharingService"
        type: "LNSSharingService;"
      }
      parameter {
        name: "items"
        type: "LNSArray;"
      }
      parameter {
        name: "sharingContentScope"
        type: "*X(Enum.enum NSSharingContentScope);"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSharingService.h"
}
protocol {
  name: "NSSharingServicePickerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "sharingServicePicker:sharingServicesForItems:proposedSharingServices:"
      return_type: "LNSArray;"
      parameter {
        name: "sharingServicePicker"
        type: "LNSSharingServicePicker;"
      }
      parameter {
        name: "items"
        type: "LNSArray;"
      }
      parameter {
        name: "proposedServices"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharingServicePicker:delegateForSharingService:"
      return_type: "X(Unexposed.id<NSSharingServiceDelegate>)"
      parameter {
        name: "sharingServicePicker"
        type: "LNSSharingServicePicker;"
      }
      parameter {
        name: "sharingService"
        type: "LNSSharingService;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sharingServicePicker:didChooseSharingService:"
      return_type: "V"
      parameter {
        name: "sharingServicePicker"
        type: "LNSSharingServicePicker;"
      }
      parameter {
        name: "service"
        type: "LNSSharingService;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSharingService.h"
}
protocol {
  name: "NSStackViewDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "stackView:willDetachViews:"
      return_type: "V"
      parameter {
        name: "stackView"
        type: "LNSStackView;"
      }
      parameter {
        name: "views"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stackView:didReattachViews:"
      return_type: "V"
      parameter {
        name: "stackView"
        type: "LNSStackView;"
      }
      parameter {
        name: "views"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStackView.h"
}
protocol {
  name: "NSTextFieldDelegate"
  base_protocol: "NSControlTextEditingDelegate"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextField.h"
}
protocol {
  name: "NSGlyphStorage"
  method {
    function {
      name: "insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:"
      return_type: "V"
      parameter {
        name: "glyphs"
        type: "*cUI;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setIntAttribute:value:forGlyphAtIndex:"
      return_type: "V"
      parameter {
        name: "attributeTag"
        type: "I"
      }
      parameter {
        name: "val"
        type: "I"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "layoutOptions"
      return_type: "UI"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGlyphGenerator.h"
}
protocol {
  name: "NSTextStorageDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "textStorageWillProcessEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textStorageDidProcessEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextStorage.h"
}
protocol {
  name: "NSTextLayoutOrientationProvider"
  method {
    function {
      name: "layoutOrientation"
      return_type: "X(Enum.enum NSTextLayoutOrientation)"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutManager.h"
}
protocol {
  name: "NSLayoutManagerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "layoutManagerDidInvalidateLayout:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSLayoutManager;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManager:didCompleteLayoutForTextContainer:atEnd:"
      return_type: "V"
      parameter {
        name: "layoutManager"
        type: "LNSLayoutManager;"
      }
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "layoutFinishedFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:"
      return_type: "LNSDictionary;"
      parameter {
        name: "layoutManager"
        type: "LNSLayoutManager;"
      }
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
      parameter {
        name: "toScreen"
        type: "Z"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "effectiveCharRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutManager.h"
}
protocol {
  name: "NSTokenFieldCellDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:"
      return_type: "LNSArray;"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "substring"
        type: "LNSString;"
      }
      parameter {
        name: "tokenIndex"
        type: "I"
      }
      parameter {
        name: "selectedIndex"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:shouldAddObjects:atIndex:"
      return_type: "LNSArray;"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "tokens"
        type: "LNSArray;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:displayStringForRepresentedObject:"
      return_type: "LNSString;"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:editingStringForRepresentedObject:"
      return_type: "LNSString;"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:representedObjectForEditingString:"
      return_type: "OI"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "editingString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:writeRepresentedObjects:toPasteboard:"
      return_type: "Z"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:readFromPasteboard:"
      return_type: "LNSArray;"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:menuForRepresentedObject:"
      return_type: "LNSMenu;"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:hasMenuForRepresentedObject:"
      return_type: "Z"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenFieldCell:styleForRepresentedObject:"
      return_type: "X(Enum.enum NSTokenStyle)"
      parameter {
        name: "tokenFieldCell"
        type: "LNSTokenFieldCell;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTokenFieldCell.h"
}
protocol {
  name: "NSTokenFieldDelegate"
  base_protocol: "NSTextFieldDelegate"
  method {
    function {
      name: "tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:"
      return_type: "LNSArray;"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "substring"
        type: "LNSString;"
      }
      parameter {
        name: "tokenIndex"
        type: "I"
      }
      parameter {
        name: "selectedIndex"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:shouldAddObjects:atIndex:"
      return_type: "LNSArray;"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "tokens"
        type: "LNSArray;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:displayStringForRepresentedObject:"
      return_type: "LNSString;"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:editingStringForRepresentedObject:"
      return_type: "LNSString;"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:representedObjectForEditingString:"
      return_type: "OI"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "editingString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:writeRepresentedObjects:toPasteboard:"
      return_type: "Z"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:readFromPasteboard:"
      return_type: "LNSArray;"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:menuForRepresentedObject:"
      return_type: "LNSMenu;"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:hasMenuForRepresentedObject:"
      return_type: "Z"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tokenField:styleForRepresentedObject:"
      return_type: "X(Enum.enum NSTokenStyle)"
      parameter {
        name: "tokenField"
        type: "LNSTokenField;"
      }
      parameter {
        name: "representedObject"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTokenField.h"
}
protocol {
  name: "NSComboBoxDataSource"
  base_protocol: "NSObject"
  method {
    function {
      name: "numberOfItemsInComboBox:"
      return_type: "I"
      parameter {
        name: "aComboBox"
        type: "LNSComboBox;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBox:objectValueForItemAtIndex:"
      return_type: "OI"
      parameter {
        name: "aComboBox"
        type: "LNSComboBox;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBox:indexOfItemWithStringValue:"
      return_type: "UI"
      parameter {
        name: "aComboBox"
        type: "LNSComboBox;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBox:completedString:"
      return_type: "LNSString;"
      parameter {
        name: "aComboBox"
        type: "LNSComboBox;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSComboBox.h"
}
protocol {
  name: "NSComboBoxDelegate"
  base_protocol: "NSTextFieldDelegate"
  method {
    function {
      name: "comboBoxWillPopUp:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBoxWillDismiss:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBoxSelectionDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBoxSelectionIsChanging:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSComboBox.h"
}
protocol {
  name: "NSComboBoxCellDataSource"
  base_protocol: "NSObject"
  method {
    function {
      name: "numberOfItemsInComboBoxCell:"
      return_type: "I"
      parameter {
        name: "comboBoxCell"
        type: "LNSComboBoxCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBoxCell:objectValueForItemAtIndex:"
      return_type: "OI"
      parameter {
        name: "aComboBoxCell"
        type: "LNSComboBoxCell;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBoxCell:indexOfItemWithStringValue:"
      return_type: "UI"
      parameter {
        name: "aComboBoxCell"
        type: "LNSComboBoxCell;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "comboBoxCell:completedString:"
      return_type: "LNSString;"
      parameter {
        name: "aComboBoxCell"
        type: "LNSComboBoxCell;"
      }
      parameter {
        name: "uncompletedString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSComboBoxCell.h"
}
protocol {
  name: "NSTextInput"
  method {
    function {
      name: "insertText:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doCommandBySelector:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMarkedText:selectedRange:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "OI"
      }
      parameter {
        name: "selRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unmarkText"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "hasMarkedText"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "conversationIdentifier"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "attributedSubstringFromRange:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "theRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "markedRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "firstRectForCharacterRange:"
      return_type: "RCGRect;"
      parameter {
        name: "theRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "characterIndexForPoint:"
      return_type: "UI"
      parameter {
        name: "thePoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validAttributesForMarkedText"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSInputManager.h"
}
protocol {
  name: "NSTextAttachmentCell"
  base_protocol: "NSObject"
  method {
    function {
      name: "drawWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsToTrackMouse"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "highlight:withFrame:inView:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackMouse:inRect:ofView:untilMouseUp:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "cellBaselineOffset"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttachment:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "LNSTextAttachment;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attachment"
      return_type: "LNSTextAttachment;"
    }
    class_method: false
  }
  method {
    function {
      name: "drawWithFrame:inView:characterIndex:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawWithFrame:inView:characterIndex:layoutManager:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "layoutManager"
        type: "LNSLayoutManager;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:"
      return_type: "Z"
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "lineFrag"
        type: "RCGRect;"
      }
      parameter {
        name: "position"
        type: "RCGPoint;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextAttachment.h"
}
protocol {
  name: "NSTextInputClient"
  method {
    function {
      name: "insertText:replacementRange:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "OI"
      }
      parameter {
        name: "replacementRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doCommandBySelector:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMarkedText:selectedRange:replacementRange:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "OI"
      }
      parameter {
        name: "selectedRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unmarkText"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "markedRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "hasMarkedText"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "attributedSubstringForProposedRange:actualRange:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validAttributesForMarkedText"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "firstRectForCharacterRange:actualRange:"
      return_type: "RCGRect;"
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "characterIndexForPoint:"
      return_type: "UI"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "fractionOfDistanceThroughGlyphForPoint:"
      return_type: "D"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "baselineDeltaForCharacterAtIndex:"
      return_type: "D"
      parameter {
        name: "anIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowLevel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "drawsVerticallyForCharacterAtIndex:"
      return_type: "Z"
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextInputClient.h"
}
protocol {
  name: "NSTextViewDelegate"
  base_protocol: "NSTextDelegate"
  method {
    function {
      name: "textView:clickedOnLink:atIndex:"
      return_type: "Z"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "link"
        type: "OI"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:clickedOnCell:inRect:atIndex:"
      return_type: "V"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "cell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:doubleClickedOnCell:inRect:atIndex:"
      return_type: "V"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "cell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:draggedCell:inRect:event:atIndex:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "cell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:writablePasteboardTypesForCell:atIndex:"
      return_type: "LNSArray;"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "cell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:writeCell:atIndex:toPasteboard:type:"
      return_type: "Z"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "cell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:willChangeSelectionFromCharacterRange:toCharacterRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "oldSelectedCharRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "newSelectedCharRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:"
      return_type: "LNSArray;"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "oldSelectedCharRanges"
        type: "LNSArray;"
      }
      parameter {
        name: "newSelectedCharRanges"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:shouldChangeTextInRanges:replacementStrings:"
      return_type: "Z"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "affectedRanges"
        type: "LNSArray;"
      }
      parameter {
        name: "replacementStrings"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:shouldChangeTypingAttributes:toAttributes:"
      return_type: "LNSDictionary;"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "oldTypingAttributes"
        type: "LNSDictionary;"
      }
      parameter {
        name: "newTypingAttributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textViewDidChangeSelection:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textViewDidChangeTypingAttributes:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:willDisplayToolTip:forCharacterAtIndex:"
      return_type: "LNSString;"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "tooltip"
        type: "LNSString;"
      }
      parameter {
        name: "characterIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:completions:forPartialWordRange:indexOfSelectedItem:"
      return_type: "LNSArray;"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "words"
        type: "LNSArray;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "index"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:shouldChangeTextInRange:replacementString:"
      return_type: "Z"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "affectedCharRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:doCommandBySelector:"
      return_type: "Z"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "commandSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:shouldSetSpellingState:range:"
      return_type: "I"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "value"
        type: "I"
      }
      parameter {
        name: "affectedCharRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:menu:forEvent:atIndex:"
      return_type: "LNSMenu;"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:willCheckTextInRange:options:types:"
      return_type: "LNSDictionary;"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "checkingTypes"
        type: "*UJ;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:didCheckTextInRange:types:options:results:orthography:wordCount:"
      return_type: "LNSArray;"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "checkingTypes"
        type: "UJ"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "results"
        type: "LNSArray;"
      }
      parameter {
        name: "orthography"
        type: "LNSOrthography;"
      }
      parameter {
        name: "wordCount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:URLForContentsOfTextAttachment:atIndex:"
      return_type: "LNSURL;"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "textAttachment"
        type: "LNSTextAttachment;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:willShowSharingServicePicker:forItems:"
      return_type: "LNSSharingServicePicker;"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "servicePicker"
        type: "LNSSharingServicePicker;"
      }
      parameter {
        name: "items"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "undoManagerForTextView:"
      return_type: "LNSUndoManager;"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:clickedOnLink:"
      return_type: "Z"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "link"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:clickedOnCell:inRect:"
      return_type: "V"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "cell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:doubleClickedOnCell:inRect:"
      return_type: "V"
      parameter {
        name: "textView"
        type: "LNSTextView;"
      }
      parameter {
        name: "cell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textView:draggedCell:inRect:event:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "cell"
        type: "X(Unexposed.id<NSTextAttachmentCell>)"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
protocol {
  name: "NSTableViewDelegate"
  base_protocol: "NSControlTextEditingDelegate"
  method {
    function {
      name: "tableView:viewForTableColumn:row:"
      return_type: "LNSView;"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:rowViewForRow:"
      return_type: "LNSTableRowView;"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:didAddRowView:forRow:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "rowView"
        type: "LNSTableRowView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:didRemoveRowView:forRow:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "rowView"
        type: "LNSTableRowView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:willDisplayCell:forTableColumn:row:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "cell"
        type: "OI"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:shouldEditTableColumn:row:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:"
      return_type: "LNSString;"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
      parameter {
        name: "rect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "mouseLocation"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:shouldShowCellExpansionForTableColumn:row:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:shouldTrackCell:forTableColumn:row:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:dataCellForTableColumn:row:"
      return_type: "LNSCell;"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionShouldChangeInTableView:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:shouldSelectRow:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:selectionIndexesForProposedSelection:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "proposedSelectionIndexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:shouldSelectTableColumn:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:mouseDownInHeaderOfTableColumn:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:didClickTableColumn:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:didDragTableColumn:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:heightOfRow:"
      return_type: "D"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:typeSelectStringForTableColumn:row:"
      return_type: "LNSString;"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:nextTypeSelectMatchFromRow:toRow:forString:"
      return_type: "I"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "startRow"
        type: "I"
      }
      parameter {
        name: "endRow"
        type: "I"
      }
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:shouldTypeSelectForEvent:withCurrentSearchString:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:isGroupRow:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:sizeToFitWidthOfColumn:"
      return_type: "D"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:shouldReorderColumn:toColumn:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "columnIndex"
        type: "I"
      }
      parameter {
        name: "newColumnIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableViewSelectionDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableViewColumnDidMove:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableViewColumnDidResize:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableViewSelectionIsChanging:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableView.h"
}
protocol {
  name: "NSTableViewDataSource"
  base_protocol: "NSObject"
  method {
    function {
      name: "numberOfRowsInTableView:"
      return_type: "I"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:objectValueForTableColumn:row:"
      return_type: "OI"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:setObjectValue:forTableColumn:row:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:sortDescriptorsDidChange:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "oldDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:pasteboardWriterForRow:"
      return_type: "X(Unexposed.id<NSPasteboardWriting>)"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:draggingSession:willBeginAtPoint:forRowIndexes:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:draggingSession:endedAtPoint:operation:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "operation"
        type: "X(Enum.enum NSDragOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:updateDraggingItemsForDrag:"
      return_type: "V"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "draggingInfo"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:writeRowsWithIndexes:toPasteboard:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "rowIndexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:validateDrop:proposedRow:proposedDropOperation:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "info"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "dropOperation"
        type: "X(Enum.enum NSTableViewDropOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:acceptDrop:row:dropOperation:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "info"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "dropOperation"
        type: "X(Enum.enum NSTableViewDropOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:"
      return_type: "LNSArray;"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "dropDestination"
        type: "LNSURL;"
      }
      parameter {
        name: "indexSet"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableView.h"
}
protocol {
  name: "NSOutlineViewDataSource"
  base_protocol: "NSObject"
  method {
    function {
      name: "outlineView:numberOfChildrenOfItem:"
      return_type: "I"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:child:ofItem:"
      return_type: "OI"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "index"
        type: "I"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:isItemExpandable:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:objectValueForTableColumn:byItem:"
      return_type: "OI"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:setObjectValue:forTableColumn:byItem:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:itemForPersistentObject:"
      return_type: "OI"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:persistentObjectForItem:"
      return_type: "OI"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:sortDescriptorsDidChange:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "oldDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:pasteboardWriterForItem:"
      return_type: "X(Unexposed.id<NSPasteboardWriting>)"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:draggingSession:willBeginAtPoint:forItems:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "draggedItems"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:draggingSession:endedAtPoint:operation:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "operation"
        type: "X(Enum.enum NSDragOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:writeItems:toPasteboard:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "items"
        type: "LNSArray;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:updateDraggingItemsForDrag:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "draggingInfo"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:validateDrop:proposedItem:proposedChildIndex:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "info"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "item"
        type: "OI"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:acceptDrop:item:childIndex:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "info"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "item"
        type: "OI"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:"
      return_type: "LNSArray;"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "dropDestination"
        type: "LNSURL;"
      }
      parameter {
        name: "items"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOutlineView.h"
}
protocol {
  name: "NSOutlineViewDelegate"
  base_protocol: "NSControlTextEditingDelegate"
  method {
    function {
      name: "outlineView:viewForTableColumn:item:"
      return_type: "LNSView;"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:rowViewForItem:"
      return_type: "LNSTableRowView;"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:didAddRowView:forRow:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "rowView"
        type: "LNSTableRowView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:didRemoveRowView:forRow:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "rowView"
        type: "LNSTableRowView;"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:willDisplayCell:forTableColumn:item:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "cell"
        type: "OI"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldEditTableColumn:item:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionShouldChangeInOutlineView:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldSelectItem:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:selectionIndexesForProposedSelection:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "proposedSelectionIndexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldSelectTableColumn:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:mouseDownInHeaderOfTableColumn:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:didClickTableColumn:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:didDragTableColumn:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:"
      return_type: "LNSString;"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
      parameter {
        name: "rect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
      parameter {
        name: "mouseLocation"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:heightOfRowByItem:"
      return_type: "D"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:typeSelectStringForTableColumn:item:"
      return_type: "LNSString;"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:nextTypeSelectMatchFromItem:toItem:forString:"
      return_type: "OI"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "startItem"
        type: "OI"
      }
      parameter {
        name: "endItem"
        type: "OI"
      }
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldTypeSelectForEvent:withCurrentSearchString:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldShowCellExpansionForTableColumn:item:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldTrackCell:forTableColumn:item:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:dataCellForTableColumn:item:"
      return_type: "LNSCell;"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:isGroupItem:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldExpandItem:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldCollapseItem:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:willDisplayOutlineCell:forTableColumn:item:"
      return_type: "V"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "cell"
        type: "OI"
      }
      parameter {
        name: "tableColumn"
        type: "LNSTableColumn;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:sizeToFitWidthOfColumn:"
      return_type: "D"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldReorderColumn:toColumn:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "columnIndex"
        type: "I"
      }
      parameter {
        name: "newColumnIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineView:shouldShowOutlineCellForItem:"
      return_type: "Z"
      parameter {
        name: "outlineView"
        type: "LNSOutlineView;"
      }
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineViewSelectionDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineViewColumnDidMove:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineViewColumnDidResize:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineViewSelectionIsChanging:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineViewItemWillExpand:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineViewItemDidExpand:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineViewItemWillCollapse:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outlineViewItemDidCollapse:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOutlineView.h"
}
protocol {
  name: "NSInputServiceProvider"
  method {
    function {
      name: "insertText:client:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "OI"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doCommandBySelector:client:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "markedTextAbandoned:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "markedTextSelectionChanged:client:"
      return_type: "V"
      parameter {
        name: "newSel"
        type: "R_NSRange;"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "terminate:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canBeDisabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "wantsToInterpretAllKeystrokes"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "wantsToHandleMouseEvents"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "wantsToDelayTextChangeNotifications"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "inputClientBecomeActive:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "inputClientResignActive:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "inputClientEnabled:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "inputClientDisabled:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "activeConversationWillChange:fromOldConversation:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "oldConversation"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "activeConversationChanged:toNewConversation:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "newConversation"
        type: "I"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSInputServer.h"
}
protocol {
  name: "NSInputServerMouseTracker"
  method {
    function {
      name: "mouseDownOnCharacterIndex:atCoordinate:withModifier:client:"
      return_type: "Z"
      parameter {
        name: "theIndex"
        type: "UI"
      }
      parameter {
        name: "thePoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "theFlags"
        type: "UI"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:"
      return_type: "Z"
      parameter {
        name: "theIndex"
        type: "UI"
      }
      parameter {
        name: "thePoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "theFlags"
        type: "UI"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseUpOnCharacterIndex:atCoordinate:withModifier:client:"
      return_type: "V"
      parameter {
        name: "theIndex"
        type: "UI"
      }
      parameter {
        name: "thePoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "theFlags"
        type: "UI"
      }
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSInputServer.h"
}
protocol {
  name: "NSTabViewDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "tabView:shouldSelectTabViewItem:"
      return_type: "Z"
      parameter {
        name: "tabView"
        type: "LNSTabView;"
      }
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabView:willSelectTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabView"
        type: "LNSTabView;"
      }
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabView:didSelectTabViewItem:"
      return_type: "V"
      parameter {
        name: "tabView"
        type: "LNSTabView;"
      }
      parameter {
        name: "tabViewItem"
        type: "LNSTabViewItem;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabViewDidChangeNumberOfTabViewItems:"
      return_type: "V"
      parameter {
        name: "tabView"
        type: "LNSTabView;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTabView.h"
}
protocol {
  name: "NSToolbarDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:"
      return_type: "LNSToolbarItem;"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
      parameter {
        name: "itemIdentifier"
        type: "LNSString;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbarDefaultItemIdentifiers:"
      return_type: "LNSArray;"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbarAllowedItemIdentifiers:"
      return_type: "LNSArray;"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbarSelectableItemIdentifiers:"
      return_type: "LNSArray;"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbarWillAddItem:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolbarDidRemoveItem:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSToolbar.h"
}
protocol {
  name: "NSSoundDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "sound:didFinishPlaying:"
      return_type: "V"
      parameter {
        name: "sound"
        type: "LNSSound;"
      }
      parameter {
        name: "aBool"
        type: "Z"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSound.h"
}
protocol {
  name: "NSDrawerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "drawerShouldOpen:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSDrawer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawerShouldClose:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSDrawer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawerWillResizeContents:toSize:"
      return_type: "RCGSize;"
      parameter {
        name: "sender"
        type: "LNSDrawer;"
      }
      parameter {
        name: "contentSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawerWillOpen:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawerDidOpen:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawerWillClose:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawerDidClose:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDrawer.h"
}
protocol {
  name: "CAMediaTiming"
  method {
    function {
      name: "beginTime"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setBeginTime:"
      return_type: "V"
      parameter {
        name: "beginTime"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "duration"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setDuration:"
      return_type: "V"
      parameter {
        name: "duration"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "speed"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setSpeed:"
      return_type: "V"
      parameter {
        name: "speed"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeOffset"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setTimeOffset:"
      return_type: "V"
      parameter {
        name: "timeOffset"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "repeatCount"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepeatCount:"
      return_type: "V"
      parameter {
        name: "repeatCount"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "repeatDuration"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setRepeatDuration:"
      return_type: "V"
      parameter {
        name: "repeatDuration"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoreverses"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoreverses:"
      return_type: "V"
      parameter {
        name: "autoreverses"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fillMode"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFillMode:"
      return_type: "V"
      parameter {
        name: "fillMode"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "beginTime"
    type: "D"
  }
  property {
    name: "duration"
    type: "D"
  }
  property {
    name: "speed"
    type: "F"
  }
  property {
    name: "timeOffset"
    type: "D"
  }
  property {
    name: "repeatCount"
    type: "F"
  }
  property {
    name: "repeatDuration"
    type: "D"
  }
  property {
    name: "autoreverses"
    type: "Z"
  }
  property {
    name: "fillMode"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/CAMediaTiming.h"
}
protocol {
  name: "CAAction"
  method {
    function {
      name: "runActionForKey:object:arguments:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/CALayer.h"
}
protocol {
  name: "NSDatePickerCellDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "datePickerCell:validateProposedDateValue:timeInterval:"
      return_type: "V"
      parameter {
        name: "aDatePickerCell"
        type: "LNSDatePickerCell;"
      }
      parameter {
        name: "proposedDateValue"
        type: "*LNSDate;;"
      }
      parameter {
        name: "proposedTimeInterval"
        type: "*D;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDatePickerCell.h"
}
protocol {
  name: "NSRuleEditorDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "ruleEditor:numberOfChildrenForCriterion:withRowType:"
      return_type: "I"
      parameter {
        name: "editor"
        type: "LNSRuleEditor;"
      }
      parameter {
        name: "criterion"
        type: "OI"
      }
      parameter {
        name: "rowType"
        type: "X(Enum.enum NSRuleEditorRowType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ruleEditor:child:forCriterion:withRowType:"
      return_type: "OI"
      parameter {
        name: "editor"
        type: "LNSRuleEditor;"
      }
      parameter {
        name: "index"
        type: "I"
      }
      parameter {
        name: "criterion"
        type: "OI"
      }
      parameter {
        name: "rowType"
        type: "X(Enum.enum NSRuleEditorRowType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ruleEditor:displayValueForCriterion:inRow:"
      return_type: "OI"
      parameter {
        name: "editor"
        type: "LNSRuleEditor;"
      }
      parameter {
        name: "criterion"
        type: "OI"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:"
      return_type: "LNSDictionary;"
      parameter {
        name: "editor"
        type: "LNSRuleEditor;"
      }
      parameter {
        name: "criterion"
        type: "OI"
      }
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ruleEditorRowsDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSRuleEditor.h"
}
protocol {
  name: "NSPathCellDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "pathCell:willDisplayOpenPanel:"
      return_type: "V"
      parameter {
        name: "pathCell"
        type: "LNSPathCell;"
      }
      parameter {
        name: "openPanel"
        type: "LNSOpenPanel;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathCell:willPopUpMenu:"
      return_type: "V"
      parameter {
        name: "pathCell"
        type: "LNSPathCell;"
      }
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPathCell.h"
}
protocol {
  name: "NSPathControlDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "pathControl:shouldDragItem:withPasteboard:"
      return_type: "Z"
      parameter {
        name: "pathControl"
        type: "LNSPathControl;"
      }
      parameter {
        name: "pathItem"
        type: "LNSPathControlItem;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathControl:shouldDragPathComponentCell:withPasteboard:"
      return_type: "Z"
      parameter {
        name: "pathControl"
        type: "LNSPathControl;"
      }
      parameter {
        name: "pathComponentCell"
        type: "LNSPathComponentCell;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathControl:validateDrop:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "pathControl"
        type: "LNSPathControl;"
      }
      parameter {
        name: "info"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathControl:acceptDrop:"
      return_type: "Z"
      parameter {
        name: "pathControl"
        type: "LNSPathControl;"
      }
      parameter {
        name: "info"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathControl:willDisplayOpenPanel:"
      return_type: "V"
      parameter {
        name: "pathControl"
        type: "LNSPathControl;"
      }
      parameter {
        name: "openPanel"
        type: "LNSOpenPanel;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathControl:willPopUpMenu:"
      return_type: "V"
      parameter {
        name: "pathControl"
        type: "LNSPathControl;"
      }
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPathControl.h"
}
protocol {
  name: "NSPageControllerDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "pageController:identifierForObject:"
      return_type: "LNSString;"
      parameter {
        name: "pageController"
        type: "LNSPageController;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageController:viewControllerForIdentifier:"
      return_type: "LNSViewController;"
      parameter {
        name: "pageController"
        type: "LNSPageController;"
      }
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageController:frameForObject:"
      return_type: "RCGRect;"
      parameter {
        name: "pageController"
        type: "LNSPageController;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageController:prepareViewController:withObject:"
      return_type: "V"
      parameter {
        name: "pageController"
        type: "LNSPageController;"
      }
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageController:didTransitionToObject:"
      return_type: "V"
      parameter {
        name: "pageController"
        type: "LNSPageController;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageControllerWillStartLiveTransition:"
      return_type: "V"
      parameter {
        name: "pageController"
        type: "LNSPageController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageControllerDidEndLiveTransition:"
      return_type: "V"
      parameter {
        name: "pageController"
        type: "LNSPageController;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPageController.h"
}
protocol {
  name: "NSCollectionViewDelegate"
  base_protocol: "NSObject"
  method {
    function {
      name: "collectionView:canDragItemsAtIndexes:withEvent:"
      return_type: "Z"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:writeItemsAtIndexes:toPasteboard:"
      return_type: "Z"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:"
      return_type: "LNSArray;"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "dropURL"
        type: "LNSURL;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:draggingImageForItemsAtIndexes:withEvent:offset:"
      return_type: "LNSImage;"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "dragImageOffset"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:validateDrop:proposedIndex:dropOperation:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "draggingInfo"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "proposedDropIndex"
        type: "*I;"
      }
      parameter {
        name: "proposedDropOperation"
        type: "*X(Enum.enum NSCollectionViewDropOperation);"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:acceptDrop:index:dropOperation:"
      return_type: "Z"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "draggingInfo"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "index"
        type: "I"
      }
      parameter {
        name: "dropOperation"
        type: "X(Enum.enum NSCollectionViewDropOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:pasteboardWriterForItemAtIndex:"
      return_type: "X(Unexposed.id<NSPasteboardWriting>)"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:"
      return_type: "V"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:draggingSession:endedAtPoint:dragOperation:"
      return_type: "V"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "session"
        type: "LNSDraggingSession;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "operation"
        type: "X(Enum.enum NSDragOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "collectionView:updateDraggingItemsForDrag:"
      return_type: "V"
      parameter {
        name: "collectionView"
        type: "LNSCollectionView;"
      }
      parameter {
        name: "draggingInfo"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCollectionView.h"
}
protocol {
  name: "NSUserInterfaceItemSearching"
  base_protocol: "NSObject"
  method {
    function {
      name: "searchForItemsWithSearchString:resultLimit:matchedItemHandler:"
      return_type: "V"
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
      parameter {
        name: "resultLimit"
        type: "I"
      }
      parameter {
        name: "handleMatchedItems"
        type: "X(BlockPointer.void (^)(NSArray *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedTitlesForItem:"
      return_type: "LNSArray;"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performActionForItem:"
      return_type: "V"
      parameter {
        name: "item"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showAllHelpTopicsForSearchString:"
      return_type: "V"
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSUserInterfaceItemSearching.h"
}
protocol {
  name: "NSWindowRestoration"
  base_protocol: "NSObject"
  method {
    function {
      name: "restoreWindowWithIdentifier:state:completionHandler:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "state"
        type: "LNSCoder;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSWindow *, NSError *))"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowRestoration.h"
}
protocol {
  name: "NSMenuItem"
}
category {
  name: "NSObject+NSCoderMethods"
  method {
    function {
      name: "version"
      return_type: "I"
    }
    class_method: true
  }
  method {
    function {
      name: "setVersion:"
      return_type: "V"
      parameter {
        name: "aVersion"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "classForCoder"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "replacementObjectForCoder:"
      return_type: "OI"
      parameter {
        name: "aCoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "awakeAfterUsingCoder:"
      return_type: "OI"
      parameter {
        name: "aDecoder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "classForCoder"
    type: "OC"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObject.h"
}
category {
  name: "NSObject+NSDeprecatedMethods"
  method {
    function {
      name: "poseAsClass:"
      return_type: "V"
      parameter {
        name: "aClass"
        type: "OC"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObject.h"
}
category {
  name: "NSObject+NSDiscardableContentProxy"
  method {
    function {
      name: "autoContentAccessingProxy"
      return_type: "OI"
    }
    class_method: false
  }
  property {
    name: "autoContentAccessingProxy"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObject.h"
}
category {
  name: "NSEnumerator+NSExtendedEnumerator"
  method {
    function {
      name: "allObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "allObjects"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSEnumerator.h"
}
category {
  name: "NSValue+NSValueCreation"
  method {
    function {
      name: "valueWithBytes:objCType:"
      return_type: "LNSValue;"
      parameter {
        name: "value"
        type: "*cV;"
      }
      parameter {
        name: "type"
        type: "*cC;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "value:withObjCType:"
      return_type: "LNSValue;"
      parameter {
        name: "value"
        type: "*cV;"
      }
      parameter {
        name: "type"
        type: "*cC;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSValue.h"
}
category {
  name: "NSValue+NSValueExtensionMethods"
  method {
    function {
      name: "valueWithNonretainedObject:"
      return_type: "LNSValue;"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "nonretainedObjectValue"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "valueWithPointer:"
      return_type: "LNSValue;"
      parameter {
        name: "pointer"
        type: "*cV;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pointerValue"
      return_type: "*V;"
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToValue:"
      return_type: "Z"
      parameter {
        name: "value"
        type: "LNSValue;"
      }
    }
    class_method: false
  }
  property {
    name: "nonretainedObjectValue"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSValue.h"
}
category {
  name: "NSNumber+NSNumberCreation"
  method {
    function {
      name: "numberWithChar:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "C"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithUnsignedChar:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UB"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithShort:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "S"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithUnsignedShort:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "US"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithInt:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithUnsignedInt:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithLong:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithUnsignedLong:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithLongLong:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "J"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithUnsignedLongLong:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UJ"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithFloat:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "F"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithDouble:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithBool:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithInteger:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "numberWithUnsignedInteger:"
      return_type: "LNSNumber;"
      parameter {
        name: "value"
        type: "UI"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSValue.h"
}
category {
  name: "NSValue+NSValueRangeExtensions"
  method {
    function {
      name: "valueWithRange:"
      return_type: "LNSValue;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "rangeValue"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  property {
    name: "rangeValue"
    type: "R_NSRange;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRange.h"
}
category {
  name: "NSArray+NSExtendedArray"
  method {
    function {
      name: "arrayByAddingObject:"
      return_type: "LNSArray;"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrayByAddingObjectsFromArray:"
      return_type: "LNSArray;"
      parameter {
        name: "otherArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "componentsJoinedByString:"
      return_type: "LNSString;"
      parameter {
        name: "separator"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsObject:"
      return_type: "Z"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:indent:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
      parameter {
        name: "level"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstObjectCommonWithArray:"
      return_type: "OI"
      parameter {
        name: "otherArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjects:range:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.id [])"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObject:"
      return_type: "UI"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObject:inRange:"
      return_type: "UI"
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObjectIdenticalTo:"
      return_type: "UI"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObjectIdenticalTo:inRange:"
      return_type: "UI"
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToArray:"
      return_type: "Z"
      parameter {
        name: "otherArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "lastObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "objectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "reverseObjectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "sortedArrayHint"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "sortedArrayUsingFunction:context:"
      return_type: "LNSArray;"
      parameter {
        name: "comparator"
        type: "*(X(Unexposed.id)X(Unexposed.id)*V;)I;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortedArrayUsingFunction:context:hint:"
      return_type: "LNSArray;"
      parameter {
        name: "comparator"
        type: "*(X(Unexposed.id)X(Unexposed.id)*V;)I;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
      parameter {
        name: "hint"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortedArrayUsingSelector:"
      return_type: "LNSArray;"
      parameter {
        name: "comparator"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subarrayWithRange:"
      return_type: "LNSArray;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:atomically:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "useAuxiliaryFile"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:atomically:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "atomically"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeObjectsPerformSelector:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeObjectsPerformSelector:withObject:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "argument"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectsAtIndexes:"
      return_type: "LNSArray;"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectAtIndexedSubscript:"
      return_type: "OI"
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateObjectsUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateObjectsWithOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateObjectsAtIndexes:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "s"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObjectPassingTest:"
      return_type: "UI"
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObjectWithOptions:passingTest:"
      return_type: "UI"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObjectAtIndexes:options:passingTest:"
      return_type: "UI"
      parameter {
        name: "s"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesOfObjectsPassingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesOfObjectsWithOptions:passingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesOfObjectsAtIndexes:options:passingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "s"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortedArrayUsingComparator:"
      return_type: "LNSArray;"
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortedArrayWithOptions:usingComparator:"
      return_type: "LNSArray;"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSSortOptions)"
      }
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObject:inSortedRange:options:usingComparator:"
      return_type: "UI"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "r"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSBinarySearchingOptions)"
      }
      parameter {
        name: "cmp"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  property {
    name: "firstObject"
    type: "OI"
  }
  property {
    name: "lastObject"
    type: "OI"
  }
  property {
    name: "sortedArrayHint"
    type: "LNSData;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArray.h"
}
category {
  name: "NSArray+NSArrayCreation"
  method {
    function {
      name: "array"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "arrayWithObject:"
      return_type: "OI"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "arrayWithObjects:count:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "arrayWithObjects:"
      return_type: "OI"
      parameter {
        name: "firstObj"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "arrayWithArray:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithObjects:"
      return_type: "OI"
      parameter {
        name: "firstObj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithArray:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithArray:copyItems:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrayWithContentsOfFile:"
      return_type: "LNSArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "arrayWithContentsOfURL:"
      return_type: "LNSArray;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfFile:"
      return_type: "LNSArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "LNSArray;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArray.h"
}
category {
  name: "NSArray+NSDeprecated"
  method {
    function {
      name: "getObjects:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.id [])"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArray.h"
}
category {
  name: "NSMutableArray+NSExtendedMutableArray"
  method {
    function {
      name: "addObjectsFromArray:"
      return_type: "V"
      parameter {
        name: "otherArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "exchangeObjectAtIndex:withObjectAtIndex:"
      return_type: "V"
      parameter {
        name: "idx1"
        type: "UI"
      }
      parameter {
        name: "idx2"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "removeObject:inRange:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObject:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectIdenticalTo:inRange:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectIdenticalTo:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsFromIndices:numIndices:"
      return_type: "V"
      parameter {
        name: "indices"
        type: "*UI;"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsInArray:"
      return_type: "V"
      parameter {
        name: "otherArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObjectsInRange:withObjectsFromArray:range:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "otherArray"
        type: "LNSArray;"
      }
      parameter {
        name: "otherRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObjectsInRange:withObjectsFromArray:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "otherArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setArray:"
      return_type: "V"
      parameter {
        name: "otherArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortUsingFunction:context:"
      return_type: "V"
      parameter {
        name: "compare"
        type: "*(X(Unexposed.id)X(Unexposed.id)*V;)I;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortUsingSelector:"
      return_type: "V"
      parameter {
        name: "comparator"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertObjects:atIndexes:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsAtIndexes:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObjectsAtIndexes:withObjects:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:atIndexedSubscript:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortUsingComparator:"
      return_type: "V"
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortWithOptions:usingComparator:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSSortOptions)"
      }
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArray.h"
}
category {
  name: "NSMutableArray+NSMutableArrayCreation"
  method {
    function {
      name: "arrayWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "arrayWithContentsOfFile:"
      return_type: "LNSMutableArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "arrayWithContentsOfURL:"
      return_type: "LNSMutableArray;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfFile:"
      return_type: "LNSMutableArray;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "LNSMutableArray;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArray.h"
}
category {
  name: "NSDate+NSExtendedDate"
  method {
    function {
      name: "timeIntervalSinceDate:"
      return_type: "D"
      parameter {
        name: "anotherDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeIntervalSinceNow"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "timeIntervalSince1970"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "addTimeInterval:"
      return_type: "OI"
      parameter {
        name: "seconds"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dateByAddingTimeInterval:"
      return_type: "OI"
      parameter {
        name: "ti"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "earlierDate:"
      return_type: "LNSDate;"
      parameter {
        name: "anotherDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "laterDate:"
      return_type: "LNSDate;"
      parameter {
        name: "anotherDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "other"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToDate:"
      return_type: "Z"
      parameter {
        name: "otherDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeIntervalSinceReferenceDate"
      return_type: "D"
    }
    class_method: true
  }
  property {
    name: "timeIntervalSinceNow"
    type: "D"
  }
  property {
    name: "timeIntervalSince1970"
    type: "D"
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDate.h"
}
category {
  name: "NSDate+NSDateCreation"
  method {
    function {
      name: "date"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithTimeIntervalSinceNow:"
      return_type: "OI"
      parameter {
        name: "secs"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithTimeIntervalSinceReferenceDate:"
      return_type: "OI"
      parameter {
        name: "ti"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithTimeIntervalSince1970:"
      return_type: "OI"
      parameter {
        name: "secs"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithTimeInterval:sinceDate:"
      return_type: "OI"
      parameter {
        name: "secsToBeAdded"
        type: "D"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "distantFuture"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "distantPast"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "initWithTimeIntervalSinceNow:"
      return_type: "OI"
      parameter {
        name: "secs"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithTimeIntervalSince1970:"
      return_type: "OI"
      parameter {
        name: "secs"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithTimeInterval:sinceDate:"
      return_type: "OI"
      parameter {
        name: "secsToBeAdded"
        type: "D"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDate.h"
}
category {
  name: "NSString+NSStringExtensionMethods"
  method {
    function {
      name: "getCharacters:range:"
      return_type: "V"
      parameter {
        name: "buffer"
        type: "*US;"
      }
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substringFromIndex:"
      return_type: "LNSString;"
      parameter {
        name: "from"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substringToIndex:"
      return_type: "LNSString;"
      parameter {
        name: "to"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substringWithRange:"
      return_type: "LNSString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compare:options:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compare:options:range:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
      parameter {
        name: "compareRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compare:options:range:locale:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
      parameter {
        name: "compareRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "caseInsensitiveCompare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedCompare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedCaseInsensitiveCompare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedStandardCompare:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToString:"
      return_type: "Z"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasPrefix:"
      return_type: "Z"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasSuffix:"
      return_type: "Z"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsString:"
      return_type: "Z"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedCaseInsensitiveContainsString:"
      return_type: "Z"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfString:"
      return_type: "R_NSRange;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfString:options:"
      return_type: "R_NSRange;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfString:options:range:"
      return_type: "R_NSRange;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
      parameter {
        name: "searchRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfString:options:range:locale:"
      return_type: "R_NSRange;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
      parameter {
        name: "searchRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfCharacterFromSet:"
      return_type: "R_NSRange;"
      parameter {
        name: "aSet"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfCharacterFromSet:options:"
      return_type: "R_NSRange;"
      parameter {
        name: "aSet"
        type: "LNSCharacterSet;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfCharacterFromSet:options:range:"
      return_type: "R_NSRange;"
      parameter {
        name: "aSet"
        type: "LNSCharacterSet;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
      parameter {
        name: "searchRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfComposedCharacterSequenceAtIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "index"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfComposedCharacterSequencesForRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByAppendingString:"
      return_type: "LNSString;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByAppendingFormat:"
      return_type: "LNSString;"
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleValue"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "floatValue"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "intValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "integerValue"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "longLongValue"
      return_type: "J"
    }
    class_method: false
  }
  method {
    function {
      name: "boolValue"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "componentsSeparatedByString:"
      return_type: "LNSArray;"
      parameter {
        name: "separator"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "componentsSeparatedByCharactersInSet:"
      return_type: "LNSArray;"
      parameter {
        name: "separator"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "commonPrefixWithString:options:"
      return_type: "LNSString;"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "uppercaseString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "lowercaseString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "capitalizedString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "uppercaseStringWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lowercaseStringWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "capitalizedStringWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByTrimmingCharactersInSet:"
      return_type: "LNSString;"
      parameter {
        name: "set"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByPaddingToLength:withString:startingAtIndex:"
      return_type: "LNSString;"
      parameter {
        name: "newLength"
        type: "UI"
      }
      parameter {
        name: "padString"
        type: "LNSString;"
      }
      parameter {
        name: "padIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getLineStart:end:contentsEnd:forRange:"
      return_type: "V"
      parameter {
        name: "startPtr"
        type: "*UI;"
      }
      parameter {
        name: "lineEndPtr"
        type: "*UI;"
      }
      parameter {
        name: "contentsEndPtr"
        type: "*UI;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineRangeForRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getParagraphStart:end:contentsEnd:forRange:"
      return_type: "V"
      parameter {
        name: "startPtr"
        type: "*UI;"
      }
      parameter {
        name: "parEndPtr"
        type: "*UI;"
      }
      parameter {
        name: "contentsEndPtr"
        type: "*UI;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphRangeForRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateSubstringsInRange:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSStringEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSString *, NSRange, NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateLinesUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSString *, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "hash"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "fastestEncoding"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "smallestEncoding"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "dataUsingEncoding:allowLossyConversion:"
      return_type: "LNSData;"
      parameter {
        name: "encoding"
        type: "UI"
      }
      parameter {
        name: "lossy"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataUsingEncoding:"
      return_type: "LNSData;"
      parameter {
        name: "encoding"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canBeConvertedToEncoding:"
      return_type: "Z"
      parameter {
        name: "encoding"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cStringUsingEncoding:"
      return_type: "*cC;"
      parameter {
        name: "encoding"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getCString:maxLength:encoding:"
      return_type: "Z"
      parameter {
        name: "buffer"
        type: "*C;"
      }
      parameter {
        name: "maxBufferCount"
        type: "UI"
      }
      parameter {
        name: "encoding"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:"
      return_type: "Z"
      parameter {
        name: "buffer"
        type: "*V;"
      }
      parameter {
        name: "maxBufferCount"
        type: "UI"
      }
      parameter {
        name: "usedBufferCount"
        type: "*UI;"
      }
      parameter {
        name: "encoding"
        type: "UI"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSStringEncodingConversionOptions)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "leftover"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "maximumLengthOfBytesUsingEncoding:"
      return_type: "UI"
      parameter {
        name: "enc"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lengthOfBytesUsingEncoding:"
      return_type: "UI"
      parameter {
        name: "enc"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decomposedStringWithCanonicalMapping"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "precomposedStringWithCanonicalMapping"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "decomposedStringWithCompatibilityMapping"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "precomposedStringWithCompatibilityMapping"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByFoldingWithOptions:locale:"
      return_type: "LNSString;"
      parameter {
        name: "options"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByReplacingOccurrencesOfString:withString:options:range:"
      return_type: "LNSString;"
      parameter {
        name: "target"
        type: "LNSString;"
      }
      parameter {
        name: "replacement"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
      parameter {
        name: "searchRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByReplacingOccurrencesOfString:withString:"
      return_type: "LNSString;"
      parameter {
        name: "target"
        type: "LNSString;"
      }
      parameter {
        name: "replacement"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByReplacingCharactersInRange:withString:"
      return_type: "LNSString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacement"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "UTF8String"
      return_type: "*cC;"
    }
    class_method: false
  }
  method {
    function {
      name: "defaultCStringEncoding"
      return_type: "UI"
    }
    class_method: true
  }
  method {
    function {
      name: "availableStringEncodings"
      return_type: "*cUI;"
    }
    class_method: true
  }
  method {
    function {
      name: "localizedNameOfStringEncoding:"
      return_type: "LNSString;"
      parameter {
        name: "encoding"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCharactersNoCopy:length:freeWhenDone:"
      return_type: "OI"
      parameter {
        name: "characters"
        type: "*US;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
      parameter {
        name: "freeBuffer"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCharacters:length:"
      return_type: "OI"
      parameter {
        name: "characters"
        type: "*cUS;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithUTF8String:"
      return_type: "OI"
      parameter {
        name: "nullTerminatedCString"
        type: "*cC;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFormat:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFormat:arguments:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "argList"
        type: "X(ConstantArray.__va_list_tag [1])"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFormat:locale:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithFormat:locale:arguments:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
      parameter {
        name: "argList"
        type: "X(ConstantArray.__va_list_tag [1])"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:encoding:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "encoding"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBytes:length:encoding:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*cV;"
      }
      parameter {
        name: "len"
        type: "UI"
      }
      parameter {
        name: "encoding"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBytesNoCopy:length:encoding:freeWhenDone:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*V;"
      }
      parameter {
        name: "len"
        type: "UI"
      }
      parameter {
        name: "encoding"
        type: "UI"
      }
      parameter {
        name: "freeBuffer"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "string"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "stringWithString:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stringWithCharacters:length:"
      return_type: "OI"
      parameter {
        name: "characters"
        type: "*cUS;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stringWithUTF8String:"
      return_type: "OI"
      parameter {
        name: "nullTerminatedCString"
        type: "*cC;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stringWithFormat:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "localizedStringWithFormat:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCString:encoding:"
      return_type: "OI"
      parameter {
        name: "nullTerminatedCString"
        type: "*cC;"
      }
      parameter {
        name: "encoding"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringWithCString:encoding:"
      return_type: "OI"
      parameter {
        name: "cString"
        type: "*cC;"
      }
      parameter {
        name: "enc"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfURL:encoding:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "enc"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfFile:encoding:error:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "enc"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringWithContentsOfURL:encoding:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "enc"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stringWithContentsOfFile:encoding:error:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "enc"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfURL:usedEncoding:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "enc"
        type: "*UI;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfFile:usedEncoding:error:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "enc"
        type: "*UI;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringWithContentsOfURL:usedEncoding:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "enc"
        type: "*UI;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stringWithContentsOfFile:usedEncoding:error:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "enc"
        type: "*UI;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "writeToURL:atomically:encoding:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "useAuxiliaryFile"
        type: "Z"
      }
      parameter {
        name: "enc"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:atomically:encoding:error:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "useAuxiliaryFile"
        type: "Z"
      }
      parameter {
        name: "enc"
        type: "UI"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  property {
    name: "doubleValue"
    type: "D"
  }
  property {
    name: "floatValue"
    type: "F"
  }
  property {
    name: "intValue"
    type: "I"
  }
  property {
    name: "integerValue"
    type: "I"
  }
  property {
    name: "longLongValue"
    type: "J"
  }
  property {
    name: "boolValue"
    type: "Z"
  }
  property {
    name: "uppercaseString"
    type: "LNSString;"
  }
  property {
    name: "lowercaseString"
    type: "LNSString;"
  }
  property {
    name: "capitalizedString"
    type: "LNSString;"
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  property {
    name: "hash"
    type: "UI"
  }
  property {
    name: "fastestEncoding"
    type: "UI"
  }
  property {
    name: "smallestEncoding"
    type: "UI"
  }
  property {
    name: "decomposedStringWithCanonicalMapping"
    type: "LNSString;"
  }
  property {
    name: "precomposedStringWithCanonicalMapping"
    type: "LNSString;"
  }
  property {
    name: "decomposedStringWithCompatibilityMapping"
    type: "LNSString;"
  }
  property {
    name: "precomposedStringWithCompatibilityMapping"
    type: "LNSString;"
  }
  property {
    name: "UTF8String"
    type: "*cC;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
category {
  name: "NSMutableString+NSMutableStringExtensionMethods"
  method {
    function {
      name: "insertString:atIndex:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "loc"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteCharactersInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendString:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendFormat:"
      return_type: "V"
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setString:"
      return_type: "V"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCapacity:"
      return_type: "LNSMutableString;"
      parameter {
        name: "capacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringWithCapacity:"
      return_type: "LNSMutableString;"
      parameter {
        name: "capacity"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "replaceOccurrencesOfString:withString:options:range:"
      return_type: "UI"
      parameter {
        name: "target"
        type: "LNSString;"
      }
      parameter {
        name: "replacement"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSStringCompareOptions)"
      }
      parameter {
        name: "searchRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
category {
  name: "NSString+NSStringEncodingDetection"
  method {
    function {
      name: "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:"
      return_type: "UI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "opts"
        type: "LNSDictionary;"
      }
      parameter {
        name: "string"
        type: "*LNSString;;"
      }
      parameter {
        name: "usedLossyConversion"
        type: "*Z;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
category {
  name: "NSString+NSExtendedStringPropertyListParsing"
  method {
    function {
      name: "propertyList"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "propertyListFromStringsFileFormat"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
category {
  name: "NSString+NSStringDeprecated"
  method {
    function {
      name: "cString"
      return_type: "*cC;"
    }
    class_method: false
  }
  method {
    function {
      name: "lossyCString"
      return_type: "*cC;"
    }
    class_method: false
  }
  method {
    function {
      name: "cStringLength"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "getCString:"
      return_type: "V"
      parameter {
        name: "bytes"
        type: "*C;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getCString:maxLength:"
      return_type: "V"
      parameter {
        name: "bytes"
        type: "*C;"
      }
      parameter {
        name: "maxLength"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getCString:maxLength:range:remainingRange:"
      return_type: "V"
      parameter {
        name: "bytes"
        type: "*C;"
      }
      parameter {
        name: "maxLength"
        type: "UI"
      }
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "leftoverRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:atomically:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "useAuxiliaryFile"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:atomically:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "atomically"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfFile:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringWithContentsOfFile:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stringWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCStringNoCopy:length:freeWhenDone:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*C;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
      parameter {
        name: "freeBuffer"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCString:length:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*cC;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithCString:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*cC;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringWithCString:length:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*cC;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "stringWithCString:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*cC;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "getCharacters:"
      return_type: "V"
      parameter {
        name: "buffer"
        type: "*US;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSString.h"
}
category {
  name: "NSCoder+NSExtendedCoder"
  method {
    function {
      name: "encodeObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeRootObject:"
      return_type: "V"
      parameter {
        name: "rootObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeBycopyObject:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeByrefObject:"
      return_type: "V"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeConditionalObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeValuesOfObjCTypes:"
      return_type: "V"
      parameter {
        name: "types"
        type: "*cC;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeArrayOfObjCType:count:at:"
      return_type: "V"
      parameter {
        name: "type"
        type: "*cC;"
      }
      parameter {
        name: "count"
        type: "UI"
      }
      parameter {
        name: "array"
        type: "*cV;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeBytes:length:"
      return_type: "V"
      parameter {
        name: "byteaddr"
        type: "*cV;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "decodeValuesOfObjCTypes:"
      return_type: "V"
      parameter {
        name: "types"
        type: "*cC;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeArrayOfObjCType:count:at:"
      return_type: "V"
      parameter {
        name: "itemType"
        type: "*cC;"
      }
      parameter {
        name: "count"
        type: "UI"
      }
      parameter {
        name: "array"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeBytesWithReturnedLength:"
      return_type: "*V;"
      parameter {
        name: "lengthp"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodePropertyList:"
      return_type: "V"
      parameter {
        name: "aPropertyList"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodePropertyList"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setObjectZone:"
      return_type: "V"
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectZone"
      return_type: "*R_NSZone;;"
    }
    class_method: false
  }
  method {
    function {
      name: "systemVersion"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsKeyedCoding"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "encodeObject:forKey:"
      return_type: "V"
      parameter {
        name: "objv"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeConditionalObject:forKey:"
      return_type: "V"
      parameter {
        name: "objv"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeBool:forKey:"
      return_type: "V"
      parameter {
        name: "boolv"
        type: "Z"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeInt:forKey:"
      return_type: "V"
      parameter {
        name: "intv"
        type: "I"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeInt32:forKey:"
      return_type: "V"
      parameter {
        name: "intv"
        type: "I"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeInt64:forKey:"
      return_type: "V"
      parameter {
        name: "intv"
        type: "J"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeFloat:forKey:"
      return_type: "V"
      parameter {
        name: "realv"
        type: "F"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeDouble:forKey:"
      return_type: "V"
      parameter {
        name: "realv"
        type: "D"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeBytes:length:forKey:"
      return_type: "V"
      parameter {
        name: "bytesp"
        type: "*cUB;"
      }
      parameter {
        name: "lenv"
        type: "UI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsValueForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeObjectForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeBoolForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeIntForKey:"
      return_type: "I"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeInt32ForKey:"
      return_type: "I"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeInt64ForKey:"
      return_type: "J"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeFloatForKey:"
      return_type: "F"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeDoubleForKey:"
      return_type: "D"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeBytesForKey:returnedLength:"
      return_type: "*cUB;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "lengthp"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeInteger:forKey:"
      return_type: "V"
      parameter {
        name: "intv"
        type: "I"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeIntegerForKey:"
      return_type: "I"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "requiresSecureCoding"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "decodeObjectOfClass:forKey:"
      return_type: "OI"
      parameter {
        name: "aClass"
        type: "OC"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeObjectOfClasses:forKey:"
      return_type: "OI"
      parameter {
        name: "classes"
        type: "LNSSet;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodePropertyListForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedClasses"
      return_type: "LNSSet;"
    }
    class_method: false
  }
  property {
    name: "systemVersion"
    type: "UI"
  }
  property {
    name: "allowsKeyedCoding"
    type: "Z"
  }
  property {
    name: "requiresSecureCoding"
    type: "Z"
  }
  property {
    name: "allowedClasses"
    type: "LNSSet;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCoder.h"
}
category {
  name: "NSCoder+NSTypedstreamCompatibility"
  method {
    function {
      name: "encodeNXObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeNXObject"
      return_type: "OI"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCoder.h"
}
category {
  name: "NSData+NSExtendedData"
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "getBytes:length:"
      return_type: "V"
      parameter {
        name: "buffer"
        type: "*V;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getBytes:range:"
      return_type: "V"
      parameter {
        name: "buffer"
        type: "*V;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToData:"
      return_type: "Z"
      parameter {
        name: "other"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subdataWithRange:"
      return_type: "LNSData;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:atomically:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "useAuxiliaryFile"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:atomically:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "atomically"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:options:error:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "writeOptionsMask"
        type: "X(Enum.enum NSDataWritingOptions)"
      }
      parameter {
        name: "errorPtr"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:options:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "writeOptionsMask"
        type: "X(Enum.enum NSDataWritingOptions)"
      }
      parameter {
        name: "errorPtr"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfData:options:range:"
      return_type: "R_NSRange;"
      parameter {
        name: "dataToFind"
        type: "LNSData;"
      }
      parameter {
        name: "mask"
        type: "X(Enum.enum NSDataSearchOptions)"
      }
      parameter {
        name: "searchRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateByteRangesUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(const void *, NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
category {
  name: "NSData+NSDataCreation"
  method {
    function {
      name: "data"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithBytes:length:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*cV;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithBytesNoCopy:length:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*V;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithBytesNoCopy:length:freeWhenDone:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*V;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
      parameter {
        name: "b"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithContentsOfFile:options:error:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "readOptionsMask"
        type: "X(Enum.enum NSDataReadingOptions)"
      }
      parameter {
        name: "errorPtr"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithContentsOfURL:options:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "readOptionsMask"
        type: "X(Enum.enum NSDataReadingOptions)"
      }
      parameter {
        name: "errorPtr"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithContentsOfFile:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithBytes:length:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*cV;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBytesNoCopy:length:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*V;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBytesNoCopy:length:freeWhenDone:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*V;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
      parameter {
        name: "b"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBytesNoCopy:length:deallocator:"
      return_type: "OI"
      parameter {
        name: "bytes"
        type: "*V;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
      parameter {
        name: "deallocator"
        type: "X(BlockPointer.void (^)(void *, NSUInteger))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfFile:options:error:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "readOptionsMask"
        type: "X(Enum.enum NSDataReadingOptions)"
      }
      parameter {
        name: "errorPtr"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:options:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "readOptionsMask"
        type: "X(Enum.enum NSDataReadingOptions)"
      }
      parameter {
        name: "errorPtr"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfFile:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
category {
  name: "NSData+NSDataBase64Encoding"
  method {
    function {
      name: "initWithBase64EncodedString:options:"
      return_type: "OI"
      parameter {
        name: "base64String"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSDataBase64DecodingOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "base64EncodedStringWithOptions:"
      return_type: "LNSString;"
      parameter {
        name: "options"
        type: "X(Enum.enum NSDataBase64EncodingOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBase64EncodedData:options:"
      return_type: "OI"
      parameter {
        name: "base64Data"
        type: "LNSData;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSDataBase64DecodingOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "base64EncodedDataWithOptions:"
      return_type: "LNSData;"
      parameter {
        name: "options"
        type: "X(Enum.enum NSDataBase64EncodingOptions)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
category {
  name: "NSData+NSDeprecated"
  method {
    function {
      name: "getBytes:"
      return_type: "V"
      parameter {
        name: "buffer"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataWithContentsOfMappedFile:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfMappedFile:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithBase64Encoding:"
      return_type: "OI"
      parameter {
        name: "base64String"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "base64Encoding"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
category {
  name: "NSMutableData+NSExtendedMutableData"
  method {
    function {
      name: "appendBytes:length:"
      return_type: "V"
      parameter {
        name: "bytes"
        type: "*cV;"
      }
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendData:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "increaseLengthBy:"
      return_type: "V"
      parameter {
        name: "extraLength"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceBytesInRange:withBytes:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "bytes"
        type: "*cV;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resetBytesInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setData:"
      return_type: "V"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceBytesInRange:withBytes:length:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementBytes"
        type: "*cV;"
      }
      parameter {
        name: "replacementLength"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
category {
  name: "NSMutableData+NSMutableDataCreation"
  method {
    function {
      name: "dataWithCapacity:"
      return_type: "OI"
      parameter {
        name: "aNumItems"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dataWithLength:"
      return_type: "OI"
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithCapacity:"
      return_type: "OI"
      parameter {
        name: "capacity"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithLength:"
      return_type: "OI"
      parameter {
        name: "length"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSData.h"
}
category {
  name: "NSDateFormatter+NSDateFormatterCompatibility"
  method {
    function {
      name: "initWithDateFormat:allowNaturalLanguage:"
      return_type: "OI"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsNaturalLanguage"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDateFormatter.h"
}
category {
  name: "NSScanner+NSExtendedScanner"
  method {
    function {
      name: "scanInt:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanInteger:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanLongLong:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*J;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanUnsignedLongLong:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*UJ;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanFloat:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*F;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanDouble:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanHexInt:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanHexLongLong:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*UJ;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanHexFloat:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*F;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanHexDouble:"
      return_type: "Z"
      parameter {
        name: "result"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanString:intoString:"
      return_type: "Z"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "result"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanCharactersFromSet:intoString:"
      return_type: "Z"
      parameter {
        name: "set"
        type: "LNSCharacterSet;"
      }
      parameter {
        name: "result"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanUpToString:intoString:"
      return_type: "Z"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "result"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scanUpToCharactersFromSet:intoString:"
      return_type: "Z"
      parameter {
        name: "set"
        type: "LNSCharacterSet;"
      }
      parameter {
        name: "result"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAtEnd"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "scannerWithString:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "localizedScannerWithString:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  property {
    name: "atEnd"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScanner.h"
}
category {
  name: "NSDictionary+NSExtendedDictionary"
  method {
    function {
      name: "allKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "allKeysForObject:"
      return_type: "LNSArray;"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allValues"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionInStringsFileFormat"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:indent:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
      parameter {
        name: "level"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToDictionary:"
      return_type: "Z"
      parameter {
        name: "otherDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "objectsForKeys:notFoundMarker:"
      return_type: "LNSArray;"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
      parameter {
        name: "marker"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:atomically:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "useAuxiliaryFile"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:atomically:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "atomically"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keysSortedByValueUsingSelector:"
      return_type: "LNSArray;"
      parameter {
        name: "comparator"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getObjects:andKeys:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.id [])"
      }
      parameter {
        name: "keys"
        type: "X(IncompleteArray.id [])"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectForKeyedSubscript:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateKeysAndObjectsUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, id, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateKeysAndObjectsWithOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, id, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keysSortedByValueUsingComparator:"
      return_type: "LNSArray;"
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keysSortedByValueWithOptions:usingComparator:"
      return_type: "LNSArray;"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSSortOptions)"
      }
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keysOfEntriesPassingTest:"
      return_type: "LNSSet;"
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, id, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keysOfEntriesWithOptions:passingTest:"
      return_type: "LNSSet;"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, id, BOOL *))"
      }
    }
    class_method: false
  }
  property {
    name: "allKeys"
    type: "LNSArray;"
  }
  property {
    name: "allValues"
    type: "LNSArray;"
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  property {
    name: "descriptionInStringsFileFormat"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h"
}
category {
  name: "NSDictionary+NSDictionaryCreation"
  method {
    function {
      name: "dictionary"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "dictionaryWithObject:forKey:"
      return_type: "OI"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "X(Unexposed.id<NSCopying>)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dictionaryWithObjects:forKeys:count:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "keys"
        type: "X(IncompleteArray.const id<NSCopying> [])"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dictionaryWithObjectsAndKeys:"
      return_type: "OI"
      parameter {
        name: "firstObject"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dictionaryWithDictionary:"
      return_type: "OI"
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dictionaryWithObjects:forKeys:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithObjectsAndKeys:"
      return_type: "OI"
      parameter {
        name: "firstObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDictionary:"
      return_type: "OI"
      parameter {
        name: "otherDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDictionary:copyItems:"
      return_type: "OI"
      parameter {
        name: "otherDictionary"
        type: "LNSDictionary;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithObjects:forKeys:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dictionaryWithContentsOfFile:"
      return_type: "LNSDictionary;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dictionaryWithContentsOfURL:"
      return_type: "LNSDictionary;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfFile:"
      return_type: "LNSDictionary;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "LNSDictionary;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h"
}
category {
  name: "NSMutableDictionary+NSExtendedMutableDictionary"
  method {
    function {
      name: "addEntriesFromDictionary:"
      return_type: "V"
      parameter {
        name: "otherDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsForKeys:"
      return_type: "V"
      parameter {
        name: "keyArray"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDictionary:"
      return_type: "V"
      parameter {
        name: "otherDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:forKeyedSubscript:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "X(Unexposed.id<NSCopying>)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h"
}
category {
  name: "NSMutableDictionary+NSMutableDictionaryCreation"
  method {
    function {
      name: "dictionaryWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dictionaryWithContentsOfFile:"
      return_type: "LNSMutableDictionary;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dictionaryWithContentsOfURL:"
      return_type: "LNSMutableDictionary;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithContentsOfFile:"
      return_type: "LNSMutableDictionary;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "LNSMutableDictionary;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h"
}
category {
  name: "NSDictionary+NSSharedKeySetDictionary"
  method {
    function {
      name: "sharedKeySetForKeys:"
      return_type: "OI"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h"
}
category {
  name: "NSMutableDictionary+NSSharedKeySetDictionary"
  method {
    function {
      name: "dictionaryWithSharedKeySet:"
      return_type: "LNSMutableDictionary;"
      parameter {
        name: "keyset"
        type: "OI"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDictionary.h"
}
category {
  name: "NSNumber+NSDecimalNumberExtensions"
  method {
    function {
      name: "decimalValue"
      return_type: "RNSDecimal;"
    }
    class_method: false
  }
  property {
    name: "decimalValue"
    type: "RNSDecimal;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDecimalNumber.h"
}
category {
  name: "NSScanner+NSDecimalNumberScanning"
  method {
    function {
      name: "scanDecimal:"
      return_type: "Z"
      parameter {
        name: "dcm"
        type: "*RNSDecimal;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSDecimalNumber.h"
}
category {
  name: "NSObject+NSErrorRecoveryAttempting"
  method {
    function {
      name: "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "recoveryOptionIndex"
        type: "UI"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didRecoverSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attemptRecoveryFromError:optionIndex:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "recoveryOptionIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSError.h"
}
category {
  name: "NSException+NSExceptionRaisingConveniences"
  method {
    function {
      name: "raise:format:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "raise:format:arguments:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "argList"
        type: "X(ConstantArray.__va_list_tag [1])"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSException.h"
}
category {
  name: "NSFileHandle+NSFileHandleCreation"
  method {
    function {
      name: "fileHandleWithStandardInput"
      return_type: "LNSFileHandle;"
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleWithStandardOutput"
      return_type: "LNSFileHandle;"
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleWithStandardError"
      return_type: "LNSFileHandle;"
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleWithNullDevice"
      return_type: "LNSFileHandle;"
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleForReadingAtPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleForWritingAtPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleForUpdatingAtPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleForReadingFromURL:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleForWritingToURL:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "fileHandleForUpdatingURL:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileHandle.h"
}
category {
  name: "NSFileHandle+NSFileHandleAsynchronousAccess"
  method {
    function {
      name: "readInBackgroundAndNotifyForModes:"
      return_type: "V"
      parameter {
        name: "modes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readInBackgroundAndNotify"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "readToEndOfFileInBackgroundAndNotifyForModes:"
      return_type: "V"
      parameter {
        name: "modes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readToEndOfFileInBackgroundAndNotify"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "acceptConnectionInBackgroundAndNotifyForModes:"
      return_type: "V"
      parameter {
        name: "modes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptConnectionInBackgroundAndNotify"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "waitForDataInBackgroundAndNotifyForModes:"
      return_type: "V"
      parameter {
        name: "modes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "waitForDataInBackgroundAndNotify"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "readabilityHandler"
      return_type: "X(BlockPointer.void (^)(NSFileHandle *))"
    }
    class_method: false
  }
  method {
    function {
      name: "setReadabilityHandler:"
      return_type: "V"
      parameter {
        name: "readabilityHandler"
        type: "X(BlockPointer.void (^)(NSFileHandle *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeabilityHandler"
      return_type: "X(BlockPointer.void (^)(NSFileHandle *))"
    }
    class_method: false
  }
  method {
    function {
      name: "setWriteabilityHandler:"
      return_type: "V"
      parameter {
        name: "writeabilityHandler"
        type: "X(BlockPointer.void (^)(NSFileHandle *))"
      }
    }
    class_method: false
  }
  property {
    name: "readabilityHandler"
    type: "X(BlockPointer.void (^)(NSFileHandle *))"
  }
  property {
    name: "writeabilityHandler"
    type: "X(BlockPointer.void (^)(NSFileHandle *))"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileHandle.h"
}
category {
  name: "NSFileHandle+NSFileHandlePlatformSpecific"
  method {
    function {
      name: "initWithFileDescriptor:"
      return_type: "OI"
      parameter {
        name: "fd"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileDescriptor"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "fileDescriptor"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileHandle.h"
}
category {
  name: "NSString+NSStringPathExtensions"
  method {
    function {
      name: "pathWithComponents:"
      return_type: "LNSString;"
      parameter {
        name: "components"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pathComponents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "isAbsolutePath"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "lastPathComponent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByDeletingLastPathComponent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByAppendingPathComponent:"
      return_type: "LNSString;"
      parameter {
        name: "str"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathExtension"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByDeletingPathExtension"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByAppendingPathExtension:"
      return_type: "LNSString;"
      parameter {
        name: "str"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByAbbreviatingWithTildeInPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByExpandingTildeInPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByStandardizingPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByResolvingSymlinksInPath"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringsByAppendingPaths:"
      return_type: "LNSArray;"
      parameter {
        name: "paths"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:"
      return_type: "UI"
      parameter {
        name: "outputName"
        type: "*LNSString;;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "outputArray"
        type: "*LNSArray;;"
      }
      parameter {
        name: "filterTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileSystemRepresentation"
      return_type: "*cC;"
    }
    class_method: false
  }
  method {
    function {
      name: "getFileSystemRepresentation:maxLength:"
      return_type: "Z"
      parameter {
        name: "cname"
        type: "*C;"
      }
      parameter {
        name: "max"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "pathComponents"
    type: "LNSArray;"
  }
  property {
    name: "absolutePath"
    type: "Z"
  }
  property {
    name: "lastPathComponent"
    type: "LNSString;"
  }
  property {
    name: "stringByDeletingLastPathComponent"
    type: "LNSString;"
  }
  property {
    name: "pathExtension"
    type: "LNSString;"
  }
  property {
    name: "stringByDeletingPathExtension"
    type: "LNSString;"
  }
  property {
    name: "stringByAbbreviatingWithTildeInPath"
    type: "LNSString;"
  }
  property {
    name: "stringByExpandingTildeInPath"
    type: "LNSString;"
  }
  property {
    name: "stringByStandardizingPath"
    type: "LNSString;"
  }
  property {
    name: "stringByResolvingSymlinksInPath"
    type: "LNSString;"
  }
  property {
    name: "fileSystemRepresentation"
    type: "*cC;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPathUtilities.h"
}
category {
  name: "NSArray+NSArrayPathExtensions"
  method {
    function {
      name: "pathsMatchingExtensions:"
      return_type: "LNSArray;"
      parameter {
        name: "filterTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPathUtilities.h"
}
category {
  name: "NSObject+NSCopyLinkMoveHandler"
  method {
    function {
      name: "fileManager:shouldProceedAfterError:"
      return_type: "Z"
      parameter {
        name: "fm"
        type: "LNSFileManager;"
      }
      parameter {
        name: "errorInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileManager:willProcessPath:"
      return_type: "V"
      parameter {
        name: "fm"
        type: "LNSFileManager;"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileManager.h"
}
category {
  name: "NSDictionary+NSFileAttributes"
  method {
    function {
      name: "fileSize"
      return_type: "UJ"
    }
    class_method: false
  }
  method {
    function {
      name: "fileModificationDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "fileType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "filePosixPermissions"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "fileOwnerAccountName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "fileGroupOwnerAccountName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "fileSystemNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "fileSystemFileNumber"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "fileExtensionHidden"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "fileHFSCreatorCode"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "fileHFSTypeCode"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "fileIsImmutable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "fileIsAppendOnly"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "fileCreationDate"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "fileOwnerAccountID"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  method {
    function {
      name: "fileGroupOwnerAccountID"
      return_type: "LNSNumber;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileManager.h"
}
category {
  name: "NSHTTPCookieStorage+NSURLSessionTaskAdditions"
  method {
    function {
      name: "storeCookies:forTask:"
      return_type: "V"
      parameter {
        name: "cookies"
        type: "LNSArray;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getCookiesForTask:completionHandler:"
      return_type: "V"
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSArray *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSHTTPCookieStorage.h"
}
category {
  name: "NSOrderedSet+NSExtendedOrderedSet"
  method {
    function {
      name: "getObjects:range:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.id [])"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectsAtIndexes:"
      return_type: "LNSArray;"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "lastObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToOrderedSet:"
      return_type: "Z"
      parameter {
        name: "other"
        type: "LNSOrderedSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsObject:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectsOrderedSet:"
      return_type: "Z"
      parameter {
        name: "other"
        type: "LNSOrderedSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectsSet:"
      return_type: "Z"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSubsetOfOrderedSet:"
      return_type: "Z"
      parameter {
        name: "other"
        type: "LNSOrderedSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSubsetOfSet:"
      return_type: "Z"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectAtIndexedSubscript:"
      return_type: "OI"
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "reverseObjectEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "reversedOrderedSet"
      return_type: "LNSOrderedSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "array"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "set"
      return_type: "LNSSet;"
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateObjectsUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateObjectsWithOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateObjectsAtIndexes:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "s"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObjectPassingTest:"
      return_type: "UI"
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObjectWithOptions:passingTest:"
      return_type: "UI"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObjectAtIndexes:options:passingTest:"
      return_type: "UI"
      parameter {
        name: "s"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesOfObjectsPassingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesOfObjectsWithOptions:passingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexesOfObjectsAtIndexes:options:passingTest:"
      return_type: "LNSIndexSet;"
      parameter {
        name: "s"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, NSUInteger, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfObject:inSortedRange:options:usingComparator:"
      return_type: "UI"
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSBinarySearchingOptions)"
      }
      parameter {
        name: "cmp"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortedArrayUsingComparator:"
      return_type: "LNSArray;"
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortedArrayWithOptions:usingComparator:"
      return_type: "LNSArray;"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSSortOptions)"
      }
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:indent:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
      parameter {
        name: "level"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "firstObject"
    type: "OI"
  }
  property {
    name: "lastObject"
    type: "OI"
  }
  property {
    name: "reversedOrderedSet"
    type: "LNSOrderedSet;"
  }
  property {
    name: "array"
    type: "LNSArray;"
  }
  property {
    name: "set"
    type: "LNSSet;"
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrderedSet.h"
}
category {
  name: "NSOrderedSet+NSOrderedSetCreation"
  method {
    function {
      name: "orderedSet"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithObject:"
      return_type: "OI"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithObjects:count:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithObjects:"
      return_type: "OI"
      parameter {
        name: "firstObj"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithOrderedSet:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSOrderedSet;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithOrderedSet:range:copyItems:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSOrderedSet;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithArray:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithArray:range:copyItems:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithSet:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "orderedSetWithSet:copyItems:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithObject:"
      return_type: "OI"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithObjects:"
      return_type: "OI"
      parameter {
        name: "firstObj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithOrderedSet:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSOrderedSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithOrderedSet:copyItems:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSOrderedSet;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithOrderedSet:range:copyItems:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSOrderedSet;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithArray:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithArray:copyItems:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSArray;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithArray:range:copyItems:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSArray;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSet:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSet:copyItems:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrderedSet.h"
}
category {
  name: "NSMutableOrderedSet+NSExtendedMutableOrderedSet"
  method {
    function {
      name: "addObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addObjects:count:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "count"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addObjectsFromArray:"
      return_type: "V"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "exchangeObjectAtIndex:withObjectAtIndex:"
      return_type: "V"
      parameter {
        name: "idx1"
        type: "UI"
      }
      parameter {
        name: "idx2"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveObjectsAtIndexes:toIndex:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertObjects:atIndexes:"
      return_type: "V"
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:atIndex:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setObject:atIndexedSubscript:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "OI"
      }
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObjectsInRange:withObjects:count:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "count"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceObjectsAtIndexes:withObjects:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "objects"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsAtIndexes:"
      return_type: "V"
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "removeObject:"
      return_type: "V"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObjectsInArray:"
      return_type: "V"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectOrderedSet:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSOrderedSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minusOrderedSet:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSOrderedSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unionOrderedSet:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSOrderedSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectSet:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minusSet:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unionSet:"
      return_type: "V"
      parameter {
        name: "other"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortUsingComparator:"
      return_type: "V"
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortWithOptions:usingComparator:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSSortOptions)"
      }
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sortRange:options:usingComparator:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSSortOptions)"
      }
      parameter {
        name: "cmptr"
        type: "X(BlockPointer.NSComparisonResult (^)(id, id))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrderedSet.h"
}
category {
  name: "NSMutableOrderedSet+NSMutableOrderedSetCreation"
  method {
    function {
      name: "orderedSetWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrderedSet.h"
}
category {
  name: "NSSet+NSExtendedSet"
  method {
    function {
      name: "allObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "anyObject"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "containsObject:"
      return_type: "Z"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithLocale:"
      return_type: "LNSString;"
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectsSet:"
      return_type: "Z"
      parameter {
        name: "otherSet"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToSet:"
      return_type: "Z"
      parameter {
        name: "otherSet"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSubsetOfSet:"
      return_type: "Z"
      parameter {
        name: "otherSet"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeObjectsPerformSelector:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeObjectsPerformSelector:withObject:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "argument"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setByAddingObject:"
      return_type: "LNSSet;"
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setByAddingObjectsFromSet:"
      return_type: "LNSSet;"
      parameter {
        name: "other"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setByAddingObjectsFromArray:"
      return_type: "LNSSet;"
      parameter {
        name: "other"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateObjectsUsingBlock:"
      return_type: "V"
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateObjectsWithOptions:usingBlock:"
      return_type: "V"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectsPassingTest:"
      return_type: "LNSSet;"
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectsWithOptions:passingTest:"
      return_type: "LNSSet;"
      parameter {
        name: "opts"
        type: "X(Enum.enum NSEnumerationOptions)"
      }
      parameter {
        name: "predicate"
        type: "X(BlockPointer.BOOL (^)(id, BOOL *))"
      }
    }
    class_method: false
  }
  property {
    name: "allObjects"
    type: "LNSArray;"
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSet.h"
}
category {
  name: "NSSet+NSSetCreation"
  method {
    function {
      name: "set"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "setWithObject:"
      return_type: "OI"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setWithObjects:count:"
      return_type: "OI"
      parameter {
        name: "objects"
        type: "X(IncompleteArray.const id [])"
      }
      parameter {
        name: "cnt"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setWithObjects:"
      return_type: "OI"
      parameter {
        name: "firstObj"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setWithSet:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "setWithArray:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithObjects:"
      return_type: "OI"
      parameter {
        name: "firstObj"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSet:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithSet:copyItems:"
      return_type: "OI"
      parameter {
        name: "set"
        type: "LNSSet;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithArray:"
      return_type: "OI"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSet.h"
}
category {
  name: "NSMutableSet+NSExtendedMutableSet"
  method {
    function {
      name: "addObjectsFromArray:"
      return_type: "V"
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intersectSet:"
      return_type: "V"
      parameter {
        name: "otherSet"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "minusSet:"
      return_type: "V"
      parameter {
        name: "otherSet"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAllObjects"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "unionSet:"
      return_type: "V"
      parameter {
        name: "otherSet"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSet:"
      return_type: "V"
      parameter {
        name: "otherSet"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSet.h"
}
category {
  name: "NSMutableSet+NSMutableSetCreation"
  method {
    function {
      name: "setWithCapacity:"
      return_type: "OI"
      parameter {
        name: "numItems"
        type: "UI"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSet.h"
}
category {
  name: "NSObject+NSKeyValueCoding"
  method {
    function {
      name: "accessInstanceVariablesDirectly"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "valueForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validateValue:forKey:error:"
      return_type: "Z"
      parameter {
        name: "ioValue"
        type: "*OI;"
      }
      parameter {
        name: "inKey"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mutableArrayValueForKey:"
      return_type: "LNSMutableArray;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mutableOrderedSetValueForKey:"
      return_type: "LNSMutableOrderedSet;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mutableSetValueForKey:"
      return_type: "LNSMutableSet;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueForKeyPath:"
      return_type: "OI"
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:forKeyPath:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "validateValue:forKeyPath:error:"
      return_type: "Z"
      parameter {
        name: "ioValue"
        type: "*OI;"
      }
      parameter {
        name: "inKeyPath"
        type: "LNSString;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mutableArrayValueForKeyPath:"
      return_type: "LNSMutableArray;"
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mutableOrderedSetValueForKeyPath:"
      return_type: "LNSMutableOrderedSet;"
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mutableSetValueForKeyPath:"
      return_type: "LNSMutableSet;"
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueForUndefinedKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:forUndefinedKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setNilValueForKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dictionaryWithValuesForKeys:"
      return_type: "LNSDictionary;"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValuesForKeysWithDictionary:"
      return_type: "V"
      parameter {
        name: "keyedValues"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueCoding.h"
}
category {
  name: "NSArray+NSKeyValueCoding"
  method {
    function {
      name: "valueForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueCoding.h"
}
category {
  name: "NSDictionary+NSKeyValueCoding"
  method {
    function {
      name: "valueForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueCoding.h"
}
category {
  name: "NSMutableDictionary+NSKeyValueCoding"
  method {
    function {
      name: "setValue:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueCoding.h"
}
category {
  name: "NSOrderedSet+NSKeyValueCoding"
  method {
    function {
      name: "valueForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueCoding.h"
}
category {
  name: "NSSet+NSKeyValueCoding"
  method {
    function {
      name: "valueForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueCoding.h"
}
category {
  name: "NSObject+NSDeprecatedKeyValueCoding"
  method {
    function {
      name: "useStoredAccessor"
      return_type: "Z"
    }
    class_method: true
  }
  method {
    function {
      name: "storedValueForKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeStoredValue:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeValue:forKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeValue:forKeyPath:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handleQueryWithUnboundKey:"
      return_type: "OI"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handleTakeValue:forUnboundKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unableToSetNilForKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valuesForKeys:"
      return_type: "LNSDictionary;"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "takeValuesFromDictionary:"
      return_type: "V"
      parameter {
        name: "properties"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueCoding.h"
}
category {
  name: "NSObject+NSKeyValueObserving"
  method {
    function {
      name: "observeValueForKeyPath:ofObject:change:context:"
      return_type: "V"
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "object"
        type: "OI"
      }
      parameter {
        name: "change"
        type: "LNSDictionary;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueObserving.h"
}
category {
  name: "NSObject+NSKeyValueObserverRegistration"
  method {
    function {
      name: "addObserver:forKeyPath:options:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSKeyValueObservingOptions)"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:forKeyPath:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:forKeyPath:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueObserving.h"
}
category {
  name: "NSArray+NSKeyValueObserverRegistration"
  method {
    function {
      name: "addObserver:toObjectsAtIndexes:forKeyPath:options:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSKeyValueObservingOptions)"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:fromObjectsAtIndexes:forKeyPath:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:fromObjectsAtIndexes:forKeyPath:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addObserver:forKeyPath:options:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSKeyValueObservingOptions)"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:forKeyPath:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:forKeyPath:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueObserving.h"
}
category {
  name: "NSOrderedSet+NSKeyValueObserverRegistration"
  method {
    function {
      name: "addObserver:forKeyPath:options:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSKeyValueObservingOptions)"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:forKeyPath:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:forKeyPath:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueObserving.h"
}
category {
  name: "NSSet+NSKeyValueObserverRegistration"
  method {
    function {
      name: "addObserver:forKeyPath:options:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSKeyValueObservingOptions)"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:forKeyPath:context:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "context"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeObserver:forKeyPath:"
      return_type: "V"
      parameter {
        name: "observer"
        type: "LNSObject;"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueObserving.h"
}
category {
  name: "NSObject+NSKeyValueObserverNotification"
  method {
    function {
      name: "willChangeValueForKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "didChangeValueForKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "willChange:valuesAtIndexes:forKey:"
      return_type: "V"
      parameter {
        name: "changeKind"
        type: "X(Enum.enum NSKeyValueChange)"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "didChange:valuesAtIndexes:forKey:"
      return_type: "V"
      parameter {
        name: "changeKind"
        type: "X(Enum.enum NSKeyValueChange)"
      }
      parameter {
        name: "indexes"
        type: "LNSIndexSet;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "willChangeValueForKey:withSetMutation:usingObjects:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "mutationKind"
        type: "X(Enum.enum NSKeyValueSetMutationKind)"
      }
      parameter {
        name: "objects"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "didChangeValueForKey:withSetMutation:usingObjects:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "mutationKind"
        type: "X(Enum.enum NSKeyValueSetMutationKind)"
      }
      parameter {
        name: "objects"
        type: "LNSSet;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueObserving.h"
}
category {
  name: "NSObject+NSKeyValueObservingCustomization"
  method {
    function {
      name: "keyPathsForValuesAffectingValueForKey:"
      return_type: "LNSSet;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "automaticallyNotifiesObserversForKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "observationInfo"
      return_type: "*V;"
    }
    class_method: false
  }
  method {
    function {
      name: "setObservationInfo:"
      return_type: "V"
      parameter {
        name: "observationInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  property {
    name: "observationInfo"
    type: "*V;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueObserving.h"
}
category {
  name: "NSObject+NSDeprecatedKeyValueObservingCustomization"
  method {
    function {
      name: "setKeys:triggerChangeNotificationsForDependentKey:"
      return_type: "V"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
      parameter {
        name: "dependentKey"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyValueObserving.h"
}
category {
  name: "NSValue+NSValueGeometryExtensions"
  method {
    function {
      name: "valueWithPoint:"
      return_type: "LNSValue;"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "valueWithSize:"
      return_type: "LNSValue;"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "valueWithRect:"
      return_type: "LNSValue;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "valueWithEdgeInsets:"
      return_type: "LNSValue;"
      parameter {
        name: "insets"
        type: "RNSEdgeInsets;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pointValue"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "sizeValue"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "rectValue"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "edgeInsetsValue"
      return_type: "RNSEdgeInsets;"
    }
    class_method: false
  }
  property {
    name: "pointValue"
    type: "RCGPoint;"
  }
  property {
    name: "sizeValue"
    type: "RCGSize;"
  }
  property {
    name: "rectValue"
    type: "RCGRect;"
  }
  property {
    name: "edgeInsetsValue"
    type: "RNSEdgeInsets;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h"
}
category {
  name: "NSCoder+NSGeometryCoding"
  method {
    function {
      name: "encodePoint:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodePoint"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "encodeSize:"
      return_type: "V"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "encodeRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeRect"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h"
}
category {
  name: "NSCoder+NSGeometryKeyedCoding"
  method {
    function {
      name: "encodePoint:forKey:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeSize:forKey:"
      return_type: "V"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeRect:forKey:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodePointForKey:"
      return_type: "RCGPoint;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeSizeForKey:"
      return_type: "RCGSize;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "decodeRectForKey:"
      return_type: "RCGRect;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSGeometry.h"
}
category {
  name: "NSObject+NSKeyedArchiverObjectSubstitution"
  method {
    function {
      name: "classForKeyedArchiver"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "replacementObjectForKeyedArchiver:"
      return_type: "OI"
      parameter {
        name: "archiver"
        type: "LNSKeyedArchiver;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "classFallbacksForKeyedArchiver"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  property {
    name: "classForKeyedArchiver"
    type: "OC"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyedArchiver.h"
}
category {
  name: "NSObject+NSKeyedUnarchiverObjectSubstitution"
  method {
    function {
      name: "classForKeyedUnarchiver"
      return_type: "OC"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSKeyedArchiver.h"
}
category {
  name: "NSLocale+NSExtendedLocale"
  method {
    function {
      name: "localeIdentifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "localeIdentifier"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLocale.h"
}
category {
  name: "NSLocale+NSLocaleCreation"
  method {
    function {
      name: "autoupdatingCurrentLocale"
      return_type: "LNSLocale;"
    }
    class_method: true
  }
  method {
    function {
      name: "currentLocale"
      return_type: "LNSLocale;"
    }
    class_method: true
  }
  method {
    function {
      name: "systemLocale"
      return_type: "LNSLocale;"
    }
    class_method: true
  }
  method {
    function {
      name: "localeWithLocaleIdentifier:"
      return_type: "OI"
      parameter {
        name: "ident"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLocale.h"
}
category {
  name: "NSLocale+NSLocaleGeneralInfo"
  method {
    function {
      name: "availableLocaleIdentifiers"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "ISOLanguageCodes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "ISOCountryCodes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "ISOCurrencyCodes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "commonISOCurrencyCodes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "preferredLanguages"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "componentsFromLocaleIdentifier:"
      return_type: "LNSDictionary;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "localeIdentifierFromComponents:"
      return_type: "LNSString;"
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "canonicalLocaleIdentifierFromString:"
      return_type: "LNSString;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "canonicalLanguageIdentifierFromString:"
      return_type: "LNSString;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "localeIdentifierFromWindowsLocaleCode:"
      return_type: "LNSString;"
      parameter {
        name: "lcid"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "windowsLocaleCodeFromLocaleIdentifier:"
      return_type: "UI"
      parameter {
        name: "localeIdentifier"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "characterDirectionForLanguage:"
      return_type: "X(Enum.enum NSLocaleLanguageDirection)"
      parameter {
        name: "isoLangCode"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "lineDirectionForLanguage:"
      return_type: "X(Enum.enum NSLocaleLanguageDirection)"
      parameter {
        name: "isoLangCode"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLocale.h"
}
category {
  name: "NSNotification+NSNotificationCreation"
  method {
    function {
      name: "notificationWithName:object:"
      return_type: "OI"
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "notificationWithName:object:userInfo:"
      return_type: "OI"
      parameter {
        name: "aName"
        type: "LNSString;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "aUserInfo"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "init"
      return_type: "OI"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNotification.h"
}
category {
  name: "NSNumberFormatter+NSNumberFormatterCompatibility"
  method {
    function {
      name: "hasThousandSeparators"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasThousandSeparators:"
      return_type: "V"
      parameter {
        name: "hasThousandSeparators"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "thousandSeparator"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setThousandSeparator:"
      return_type: "V"
      parameter {
        name: "thousandSeparator"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizesFormat"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setLocalizesFormat:"
      return_type: "V"
      parameter {
        name: "localizesFormat"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "format"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFormat:"
      return_type: "V"
      parameter {
        name: "format"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedStringForZero"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedStringForZero:"
      return_type: "V"
      parameter {
        name: "attributedStringForZero"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedStringForNil"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedStringForNil:"
      return_type: "V"
      parameter {
        name: "attributedStringForNil"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedStringForNotANumber"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedStringForNotANumber:"
      return_type: "V"
      parameter {
        name: "attributedStringForNotANumber"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "roundingBehavior"
      return_type: "LNSDecimalNumberHandler;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRoundingBehavior:"
      return_type: "V"
      parameter {
        name: "roundingBehavior"
        type: "LNSDecimalNumberHandler;"
      }
    }
    class_method: false
  }
  property {
    name: "hasThousandSeparators"
    type: "Z"
  }
  property {
    name: "thousandSeparator"
    type: "LNSString;"
  }
  property {
    name: "localizesFormat"
    type: "Z"
  }
  property {
    name: "format"
    type: "LNSString;"
  }
  property {
    name: "attributedStringForZero"
    type: "LNSAttributedString;"
  }
  property {
    name: "attributedStringForNil"
    type: "LNSAttributedString;"
  }
  property {
    name: "attributedStringForNotANumber"
    type: "LNSAttributedString;"
  }
  property {
    name: "roundingBehavior"
    type: "LNSDecimalNumberHandler;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNumberFormatter.h"
}
category {
  name: "NSOrthography+NSOrthographyExtended"
  method {
    function {
      name: "languagesForScript:"
      return_type: "LNSArray;"
      parameter {
        name: "script"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dominantLanguageForScript:"
      return_type: "LNSString;"
      parameter {
        name: "script"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dominantLanguage"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "allScripts"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "allLanguages"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "dominantLanguage"
    type: "LNSString;"
  }
  property {
    name: "allScripts"
    type: "LNSArray;"
  }
  property {
    name: "allLanguages"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrthography.h"
}
category {
  name: "NSOrthography+NSOrthographyCreation"
  method {
    function {
      name: "orthographyWithDominantScript:languageMap:"
      return_type: "OI"
      parameter {
        name: "script"
        type: "LNSString;"
      }
      parameter {
        name: "map"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSOrthography.h"
}
category {
  name: "NSPointerArray+NSPointerArrayConveniences"
  method {
    function {
      name: "pointerArrayWithStrongObjects"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "pointerArrayWithWeakObjects"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "strongObjectsPointerArray"
      return_type: "LNSPointerArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "weakObjectsPointerArray"
      return_type: "LNSPointerArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "allObjects"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "allObjects"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPointerArray.h"
}
category {
  name: "NSProcessInfo+"
  method {
    function {
      name: "beginActivityWithOptions:reason:"
      return_type: "X(Unexposed.id<NSObject>)"
      parameter {
        name: "options"
        type: "X(Enum.enum NSActivityOptions)"
      }
      parameter {
        name: "reason"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endActivity:"
      return_type: "V"
      parameter {
        name: "activity"
        type: "X(Unexposed.id<NSObject>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performActivityWithOptions:reason:usingBlock:"
      return_type: "V"
      parameter {
        name: "options"
        type: "X(Enum.enum NSActivityOptions)"
      }
      parameter {
        name: "reason"
        type: "LNSString;"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSProcessInfo.h"
}
category {
  name: "NSProcessInfo+"
  property {
    name: "thermalState"
    type: "X(Enum.enum NSProcessInfoThermalState)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSProcessInfo.h"
}
category {
  name: "NSTextCheckingResult+NSTextCheckingResultOptional"
  method {
    function {
      name: "orthography"
      return_type: "LNSOrthography;"
    }
    class_method: false
  }
  method {
    function {
      name: "grammarDetails"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "date"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "timeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: false
  }
  method {
    function {
      name: "duration"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "components"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "URL"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "replacementString"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "alternativeStrings"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "regularExpression"
      return_type: "LNSRegularExpression;"
    }
    class_method: false
  }
  method {
    function {
      name: "phoneNumber"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "addressComponents"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfRanges"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "rangeAtIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "idx"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "resultByAdjustingRangesWithOffset:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "offset"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "orthography"
    type: "LNSOrthography;"
  }
  property {
    name: "grammarDetails"
    type: "LNSArray;"
  }
  property {
    name: "date"
    type: "LNSDate;"
  }
  property {
    name: "timeZone"
    type: "LNSTimeZone;"
  }
  property {
    name: "duration"
    type: "D"
  }
  property {
    name: "components"
    type: "LNSDictionary;"
  }
  property {
    name: "URL"
    type: "LNSURL;"
  }
  property {
    name: "replacementString"
    type: "LNSString;"
  }
  property {
    name: "alternativeStrings"
    type: "LNSArray;"
  }
  property {
    name: "regularExpression"
    type: "LNSRegularExpression;"
  }
  property {
    name: "phoneNumber"
    type: "LNSString;"
  }
  property {
    name: "addressComponents"
    type: "LNSDictionary;"
  }
  property {
    name: "numberOfRanges"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTextCheckingResult.h"
}
category {
  name: "NSTextCheckingResult+NSTextCheckingResultCreation"
  method {
    function {
      name: "orthographyCheckingResultWithRange:orthography:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "orthography"
        type: "LNSOrthography;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "spellCheckingResultWithRange:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "grammarCheckingResultWithRange:details:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "details"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateCheckingResultWithRange:date:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateCheckingResultWithRange:date:timeZone:duration:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "date"
        type: "LNSDate;"
      }
      parameter {
        name: "timeZone"
        type: "LNSTimeZone;"
      }
      parameter {
        name: "duration"
        type: "D"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "addressCheckingResultWithRange:components:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "components"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "linkCheckingResultWithRange:URL:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "quoteCheckingResultWithRange:replacementString:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dashCheckingResultWithRange:replacementString:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "replacementCheckingResultWithRange:replacementString:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "correctionCheckingResultWithRange:replacementString:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "correctionCheckingResultWithRange:replacementString:alternativeStrings:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementString"
        type: "LNSString;"
      }
      parameter {
        name: "alternativeStrings"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "regularExpressionCheckingResultWithRanges:count:regularExpression:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "ranges"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "count"
        type: "UI"
      }
      parameter {
        name: "regularExpression"
        type: "LNSRegularExpression;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "phoneNumberCheckingResultWithRange:phoneNumber:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "phoneNumber"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "transitInformationCheckingResultWithRange:components:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "components"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTextCheckingResult.h"
}
category {
  name: "NSRegularExpression+NSMatching"
  method {
    function {
      name: "enumerateMatchesInString:options:range:usingBlock:"
      return_type: "V"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSMatchingOptions)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSTextCheckingResult *, NSMatchingFlags, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matchesInString:options:range:"
      return_type: "LNSArray;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSMatchingOptions)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "numberOfMatchesInString:options:range:"
      return_type: "UI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSMatchingOptions)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstMatchInString:options:range:"
      return_type: "LNSTextCheckingResult;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSMatchingOptions)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfFirstMatchInString:options:range:"
      return_type: "R_NSRange;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSMatchingOptions)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRegularExpression.h"
}
category {
  name: "NSRegularExpression+NSReplacement"
  method {
    function {
      name: "stringByReplacingMatchesInString:options:range:withTemplate:"
      return_type: "LNSString;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSMatchingOptions)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "templ"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceMatchesInString:options:range:withTemplate:"
      return_type: "UI"
      parameter {
        name: "string"
        type: "LNSMutableString;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSMatchingOptions)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "templ"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replacementStringForResult:inString:offset:template:"
      return_type: "LNSString;"
      parameter {
        name: "result"
        type: "LNSTextCheckingResult;"
      }
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "offset"
        type: "I"
      }
      parameter {
        name: "templ"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "escapedTemplateForString:"
      return_type: "LNSString;"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRegularExpression.h"
}
category {
  name: "NSRunLoop+NSRunLoopConveniences"
  method {
    function {
      name: "run"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "runUntilDate:"
      return_type: "V"
      parameter {
        name: "limitDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runMode:beforeDate:"
      return_type: "Z"
      parameter {
        name: "mode"
        type: "LNSString;"
      }
      parameter {
        name: "limitDate"
        type: "LNSDate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "configureAsServer"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRunLoop.h"
}
category {
  name: "NSObject+NSDelayedPerforming"
  method {
    function {
      name: "performSelector:withObject:afterDelay:inModes:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "anArgument"
        type: "OI"
      }
      parameter {
        name: "delay"
        type: "D"
      }
      parameter {
        name: "modes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSelector:withObject:afterDelay:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "anArgument"
        type: "OI"
      }
      parameter {
        name: "delay"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelPreviousPerformRequestsWithTarget:selector:object:"
      return_type: "V"
      parameter {
        name: "aTarget"
        type: "OI"
      }
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "anArgument"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "cancelPreviousPerformRequestsWithTarget:"
      return_type: "V"
      parameter {
        name: "aTarget"
        type: "OI"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRunLoop.h"
}
category {
  name: "NSRunLoop+NSOrderedPerform"
  method {
    function {
      name: "performSelector:target:argument:order:modes:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "arg"
        type: "OI"
      }
      parameter {
        name: "order"
        type: "UI"
      }
      parameter {
        name: "modes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelPerformSelector:target:argument:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "target"
        type: "OI"
      }
      parameter {
        name: "arg"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelPerformSelectorsWithTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSRunLoop.h"
}
category {
  name: "NSSet+NSSortDescriptorSorting"
  method {
    function {
      name: "sortedArrayUsingDescriptors:"
      return_type: "LNSArray;"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSortDescriptor.h"
}
category {
  name: "NSArray+NSSortDescriptorSorting"
  method {
    function {
      name: "sortedArrayUsingDescriptors:"
      return_type: "LNSArray;"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSortDescriptor.h"
}
category {
  name: "NSMutableArray+NSSortDescriptorSorting"
  method {
    function {
      name: "sortUsingDescriptors:"
      return_type: "V"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSortDescriptor.h"
}
category {
  name: "NSOrderedSet+NSKeyValueSorting"
  method {
    function {
      name: "sortedArrayUsingDescriptors:"
      return_type: "LNSArray;"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSortDescriptor.h"
}
category {
  name: "NSMutableOrderedSet+NSKeyValueSorting"
  method {
    function {
      name: "sortUsingDescriptors:"
      return_type: "V"
      parameter {
        name: "sortDescriptors"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSSortDescriptor.h"
}
category {
  name: "NSStream+NSSocketStreamCreationExtensions"
  method {
    function {
      name: "getStreamsToHostWithName:port:inputStream:outputStream:"
      return_type: "V"
      parameter {
        name: "hostname"
        type: "LNSString;"
      }
      parameter {
        name: "port"
        type: "I"
      }
      parameter {
        name: "inputStream"
        type: "*LNSInputStream;;"
      }
      parameter {
        name: "outputStream"
        type: "*LNSOutputStream;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "getStreamsToHost:port:inputStream:outputStream:"
      return_type: "V"
      parameter {
        name: "host"
        type: "LNSHost;"
      }
      parameter {
        name: "port"
        type: "I"
      }
      parameter {
        name: "inputStream"
        type: "*LNSInputStream;;"
      }
      parameter {
        name: "outputStream"
        type: "*LNSOutputStream;;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSStream.h"
}
category {
  name: "NSStream+NSStreamBoundPairCreationExtensions"
  method {
    function {
      name: "getBoundStreamsWithBufferSize:inputStream:outputStream:"
      return_type: "V"
      parameter {
        name: "bufferSize"
        type: "UI"
      }
      parameter {
        name: "inputStream"
        type: "*LNSInputStream;;"
      }
      parameter {
        name: "outputStream"
        type: "*LNSOutputStream;;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSStream.h"
}
category {
  name: "NSInputStream+NSInputStreamExtensions"
  method {
    function {
      name: "initWithFileAtPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "inputStreamWithData:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "inputStreamWithFileAtPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "inputStreamWithURL:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSStream.h"
}
category {
  name: "NSOutputStream+NSOutputStreamExtensions"
  method {
    function {
      name: "initToFileAtPath:append:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "shouldAppend"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "outputStreamToMemory"
      return_type: "OI"
    }
    class_method: true
  }
  method {
    function {
      name: "outputStreamToBuffer:capacity:"
      return_type: "OI"
      parameter {
        name: "buffer"
        type: "*UB;"
      }
      parameter {
        name: "capacity"
        type: "UI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "outputStreamToFileAtPath:append:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "shouldAppend"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "outputStreamWithURL:append:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "shouldAppend"
        type: "Z"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSStream.h"
}
category {
  name: "NSObject+NSThreadPerformAdditions"
  method {
    function {
      name: "performSelectorOnMainThread:withObject:waitUntilDone:modes:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "arg"
        type: "OI"
      }
      parameter {
        name: "wait"
        type: "Z"
      }
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSelectorOnMainThread:withObject:waitUntilDone:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "arg"
        type: "OI"
      }
      parameter {
        name: "wait"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSelector:onThread:withObject:waitUntilDone:modes:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "thr"
        type: "LNSThread;"
      }
      parameter {
        name: "arg"
        type: "OI"
      }
      parameter {
        name: "wait"
        type: "Z"
      }
      parameter {
        name: "array"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSelector:onThread:withObject:waitUntilDone:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "thr"
        type: "LNSThread;"
      }
      parameter {
        name: "arg"
        type: "OI"
      }
      parameter {
        name: "wait"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performSelectorInBackground:withObject:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
      parameter {
        name: "arg"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSThread.h"
}
category {
  name: "NSTimeZone+NSExtendedTimeZone"
  method {
    function {
      name: "systemTimeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: true
  }
  method {
    function {
      name: "resetSystemTimeZone"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "defaultTimeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: true
  }
  method {
    function {
      name: "setDefaultTimeZone:"
      return_type: "V"
      parameter {
        name: "aTimeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "localTimeZone"
      return_type: "LNSTimeZone;"
    }
    class_method: true
  }
  method {
    function {
      name: "knownTimeZoneNames"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "abbreviationDictionary"
      return_type: "LNSDictionary;"
    }
    class_method: true
  }
  method {
    function {
      name: "setAbbreviationDictionary:"
      return_type: "V"
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "timeZoneDataVersion"
      return_type: "LNSString;"
    }
    class_method: true
  }
  method {
    function {
      name: "secondsFromGMT"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "abbreviation"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "isDaylightSavingTime"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "daylightSavingTimeOffset"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "nextDaylightSavingTimeTransition"
      return_type: "LNSDate;"
    }
    class_method: false
  }
  method {
    function {
      name: "description"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToTimeZone:"
      return_type: "Z"
      parameter {
        name: "aTimeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedName:locale:"
      return_type: "LNSString;"
      parameter {
        name: "style"
        type: "X(Enum.enum NSTimeZoneNameStyle)"
      }
      parameter {
        name: "locale"
        type: "LNSLocale;"
      }
    }
    class_method: false
  }
  property {
    name: "secondsFromGMT"
    type: "I"
  }
  property {
    name: "abbreviation"
    type: "LNSString;"
  }
  property {
    name: "daylightSavingTime"
    type: "Z"
  }
  property {
    name: "daylightSavingTimeOffset"
    type: "D"
  }
  property {
    name: "nextDaylightSavingTimeTransition"
    type: "LNSDate;"
  }
  property {
    name: "description"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTimeZone.h"
}
category {
  name: "NSTimeZone+NSTimeZoneCreation"
  method {
    function {
      name: "timeZoneWithName:"
      return_type: "OI"
      parameter {
        name: "tzName"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "timeZoneWithName:data:"
      return_type: "OI"
      parameter {
        name: "tzName"
        type: "LNSString;"
      }
      parameter {
        name: "aData"
        type: "LNSData;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithName:"
      return_type: "OI"
      parameter {
        name: "tzName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithName:data:"
      return_type: "OI"
      parameter {
        name: "tzName"
        type: "LNSString;"
      }
      parameter {
        name: "aData"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "timeZoneForSecondsFromGMT:"
      return_type: "OI"
      parameter {
        name: "seconds"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "timeZoneWithAbbreviation:"
      return_type: "OI"
      parameter {
        name: "abbreviation"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTimeZone.h"
}
category {
  name: "NSURL+NSPromisedItems"
  method {
    function {
      name: "getPromisedItemResourceValue:forKey:error:"
      return_type: "Z"
      parameter {
        name: "value"
        type: "*OI;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "promisedItemResourceValuesForKeys:error:"
      return_type: "LNSDictionary;"
      parameter {
        name: "keys"
        type: "LNSArray;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkPromisedItemIsReachableAndReturnError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
category {
  name: "NSCharacterSet+NSURLUtilities"
  method {
    function {
      name: "URLUserAllowedCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "URLPasswordAllowedCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "URLHostAllowedCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "URLPathAllowedCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "URLQueryAllowedCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  method {
    function {
      name: "URLFragmentAllowedCharacterSet"
      return_type: "LNSCharacterSet;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
category {
  name: "NSString+NSURLUtilities"
  method {
    function {
      name: "stringByAddingPercentEncodingWithAllowedCharacters:"
      return_type: "LNSString;"
      parameter {
        name: "allowedCharacters"
        type: "LNSCharacterSet;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByRemovingPercentEncoding"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "stringByAddingPercentEscapesUsingEncoding:"
      return_type: "LNSString;"
      parameter {
        name: "enc"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringByReplacingPercentEscapesUsingEncoding:"
      return_type: "LNSString;"
      parameter {
        name: "enc"
        type: "UI"
      }
    }
    class_method: false
  }
  property {
    name: "stringByRemovingPercentEncoding"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
category {
  name: "NSURL+NSURLPathUtilities"
  method {
    function {
      name: "fileURLWithPathComponents:"
      return_type: "LNSURL;"
      parameter {
        name: "components"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pathComponents"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "lastPathComponent"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "pathExtension"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "URLByAppendingPathComponent:"
      return_type: "LNSURL;"
      parameter {
        name: "pathComponent"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLByAppendingPathComponent:isDirectory:"
      return_type: "LNSURL;"
      parameter {
        name: "pathComponent"
        type: "LNSString;"
      }
      parameter {
        name: "isDirectory"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLByDeletingLastPathComponent"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "URLByAppendingPathExtension:"
      return_type: "LNSURL;"
      parameter {
        name: "pathExtension"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLByDeletingPathExtension"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "URLByStandardizingPath"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  method {
    function {
      name: "URLByResolvingSymlinksInPath"
      return_type: "LNSURL;"
    }
    class_method: false
  }
  property {
    name: "pathComponents"
    type: "LNSArray;"
  }
  property {
    name: "lastPathComponent"
    type: "LNSString;"
  }
  property {
    name: "pathExtension"
    type: "LNSString;"
  }
  property {
    name: "URLByDeletingLastPathComponent"
    type: "LNSURL;"
  }
  property {
    name: "URLByDeletingPathExtension"
    type: "LNSURL;"
  }
  property {
    name: "URLByStandardizingPath"
    type: "LNSURL;"
  }
  property {
    name: "URLByResolvingSymlinksInPath"
    type: "LNSURL;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
category {
  name: "NSObject+NSURLClient"
  method {
    function {
      name: "URL:resourceDataDidBecomeAvailable:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURL;"
      }
      parameter {
        name: "newBytes"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLResourceDidFinishLoading:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLResourceDidCancelLoading:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URL:resourceDidFailLoadingWithReason:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSURL;"
      }
      parameter {
        name: "reason"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
category {
  name: "NSURL+NSURLLoading"
  method {
    function {
      name: "resourceDataUsingCache:"
      return_type: "LNSData;"
      parameter {
        name: "shouldUseCache"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadResourceDataNotifyingClient:usingCache:"
      return_type: "V"
      parameter {
        name: "client"
        type: "OI"
      }
      parameter {
        name: "shouldUseCache"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "propertyForKey:"
      return_type: "OI"
      parameter {
        name: "propertyKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setResourceData:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setProperty:forKey:"
      return_type: "Z"
      parameter {
        name: "property"
        type: "OI"
      }
      parameter {
        name: "propertyKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLHandleUsingCache:"
      return_type: "LNSURLHandle;"
      parameter {
        name: "shouldUseCache"
        type: "Z"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURL.h"
}
category {
  name: "NSURLCache+NSURLSessionTaskAdditions"
  method {
    function {
      name: "storeCachedResponse:forDataTask:"
      return_type: "V"
      parameter {
        name: "cachedResponse"
        type: "LNSCachedURLResponse;"
      }
      parameter {
        name: "dataTask"
        type: "LNSURLSessionDataTask;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getCachedResponseForDataTask:completionHandler:"
      return_type: "V"
      parameter {
        name: "dataTask"
        type: "LNSURLSessionDataTask;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSCachedURLResponse *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCachedResponseForDataTask:"
      return_type: "V"
      parameter {
        name: "dataTask"
        type: "LNSURLSessionDataTask;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCache.h"
}
category {
  name: "NSURLConnection+NSURLConnectionSynchronousLoading"
  method {
    function {
      name: "sendSynchronousRequest:returningResponse:error:"
      return_type: "LNSData;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "response"
        type: "*LNSURLResponse;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLConnection.h"
}
category {
  name: "NSURLConnection+NSURLConnectionQueuedLoading"
  method {
    function {
      name: "sendAsynchronousRequest:queue:completionHandler:"
      return_type: "V"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "queue"
        type: "LNSOperationQueue;"
      }
      parameter {
        name: "handler"
        type: "X(BlockPointer.void (^)(NSURLResponse *, NSData *, NSError *))"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLConnection.h"
}
category {
  name: "NSURLCredential+NSInternetPassword"
  method {
    function {
      name: "initWithUser:password:persistence:"
      return_type: "OI"
      parameter {
        name: "user"
        type: "LNSString;"
      }
      parameter {
        name: "password"
        type: "LNSString;"
      }
      parameter {
        name: "persistence"
        type: "X(Enum.enum NSURLCredentialPersistence)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "credentialWithUser:password:persistence:"
      return_type: "LNSURLCredential;"
      parameter {
        name: "user"
        type: "LNSString;"
      }
      parameter {
        name: "password"
        type: "LNSString;"
      }
      parameter {
        name: "persistence"
        type: "X(Enum.enum NSURLCredentialPersistence)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "user"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "password"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "hasPassword"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "user"
    type: "LNSString;"
  }
  property {
    name: "password"
    type: "LNSString;"
  }
  property {
    name: "hasPassword"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCredential.h"
}
category {
  name: "NSURLCredential+NSClientCertificate"
  method {
    function {
      name: "initWithIdentity:certificates:persistence:"
      return_type: "OI"
      parameter {
        name: "identity"
        type: "*ROpaqueSecIdentityRef;;"
      }
      parameter {
        name: "certArray"
        type: "LNSArray;"
      }
      parameter {
        name: "persistence"
        type: "X(Enum.enum NSURLCredentialPersistence)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "credentialWithIdentity:certificates:persistence:"
      return_type: "LNSURLCredential;"
      parameter {
        name: "identity"
        type: "*ROpaqueSecIdentityRef;;"
      }
      parameter {
        name: "certArray"
        type: "LNSArray;"
      }
      parameter {
        name: "persistence"
        type: "X(Enum.enum NSURLCredentialPersistence)"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "identity"
      return_type: "*ROpaqueSecIdentityRef;;"
    }
    class_method: false
  }
  method {
    function {
      name: "certificates"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "identity"
    type: "*ROpaqueSecIdentityRef;;"
  }
  property {
    name: "certificates"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCredential.h"
}
category {
  name: "NSURLCredential+NSServerTrust"
  method {
    function {
      name: "initWithTrust:"
      return_type: "OI"
      parameter {
        name: "trust"
        type: "*R__SecTrust;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "credentialForTrust:"
      return_type: "LNSURLCredential;"
      parameter {
        name: "trust"
        type: "*R__SecTrust;;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCredential.h"
}
category {
  name: "NSURLCredentialStorage+NSURLSessionTaskAdditions"
  method {
    function {
      name: "getCredentialsForProtectionSpace:task:completionHandler:"
      return_type: "V"
      parameter {
        name: "protectionSpace"
        type: "LNSURLProtectionSpace;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSDictionary *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCredential:forProtectionSpace:task:"
      return_type: "V"
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "protectionSpace"
        type: "LNSURLProtectionSpace;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeCredential:forProtectionSpace:options:task:"
      return_type: "V"
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "protectionSpace"
        type: "LNSURLProtectionSpace;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getDefaultCredentialForProtectionSpace:task:completionHandler:"
      return_type: "V"
      parameter {
        name: "space"
        type: "LNSURLProtectionSpace;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSURLCredential *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultCredential:forProtectionSpace:task:"
      return_type: "V"
      parameter {
        name: "credential"
        type: "LNSURLCredential;"
      }
      parameter {
        name: "protectionSpace"
        type: "LNSURLProtectionSpace;"
      }
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLCredentialStorage.h"
}
category {
  name: "NSURLProtectionSpace+NSClientCertificateSpace"
  method {
    function {
      name: "distinguishedNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "distinguishedNames"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLProtectionSpace.h"
}
category {
  name: "NSURLProtectionSpace+NSServerTrustValidationSpace"
  method {
    function {
      name: "serverTrust"
      return_type: "*R__SecTrust;;"
    }
    class_method: false
  }
  property {
    name: "serverTrust"
    type: "*R__SecTrust;;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLProtectionSpace.h"
}
category {
  name: "NSURLProtocol+NSURLSessionTaskAdditions"
  method {
    function {
      name: "canInitWithTask:"
      return_type: "Z"
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithTask:cachedResponse:client:"
      return_type: "OI"
      parameter {
        name: "task"
        type: "LNSURLSessionTask;"
      }
      parameter {
        name: "cachedResponse"
        type: "LNSCachedURLResponse;"
      }
      parameter {
        name: "client"
        type: "X(Unexposed.id<NSURLProtocolClient>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "task"
      return_type: "LNSURLSessionTask;"
    }
    class_method: false
  }
  property {
    name: "task"
    type: "LNSURLSessionTask;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLProtocol.h"
}
category {
  name: "NSURLRequest+NSHTTPURLRequest"
  method {
    function {
      name: "HTTPMethod"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "allHTTPHeaderFields"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "valueForHTTPHeaderField:"
      return_type: "LNSString;"
      parameter {
        name: "field"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPBody"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPBodyStream"
      return_type: "LNSInputStream;"
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPShouldHandleCookies"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPShouldUsePipelining"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "HTTPMethod"
    type: "LNSString;"
  }
  property {
    name: "allHTTPHeaderFields"
    type: "LNSDictionary;"
  }
  property {
    name: "HTTPBody"
    type: "LNSData;"
  }
  property {
    name: "HTTPBodyStream"
    type: "LNSInputStream;"
  }
  property {
    name: "HTTPShouldHandleCookies"
    type: "Z"
  }
  property {
    name: "HTTPShouldUsePipelining"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLRequest.h"
}
category {
  name: "NSMutableURLRequest+NSMutableHTTPURLRequest"
  method {
    function {
      name: "HTTPMethod"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPMethod:"
      return_type: "V"
      parameter {
        name: "HTTPMethod"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allHTTPHeaderFields"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllHTTPHeaderFields:"
      return_type: "V"
      parameter {
        name: "allHTTPHeaderFields"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:forHTTPHeaderField:"
      return_type: "V"
      parameter {
        name: "value"
        type: "LNSString;"
      }
      parameter {
        name: "field"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addValue:forHTTPHeaderField:"
      return_type: "V"
      parameter {
        name: "value"
        type: "LNSString;"
      }
      parameter {
        name: "field"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPBody"
      return_type: "LNSData;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPBody:"
      return_type: "V"
      parameter {
        name: "HTTPBody"
        type: "LNSData;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPBodyStream"
      return_type: "LNSInputStream;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPBodyStream:"
      return_type: "V"
      parameter {
        name: "HTTPBodyStream"
        type: "LNSInputStream;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPShouldHandleCookies"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPShouldHandleCookies:"
      return_type: "V"
      parameter {
        name: "HTTPShouldHandleCookies"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "HTTPShouldUsePipelining"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHTTPShouldUsePipelining:"
      return_type: "V"
      parameter {
        name: "HTTPShouldUsePipelining"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "HTTPMethod"
    type: "LNSString;"
  }
  property {
    name: "allHTTPHeaderFields"
    type: "LNSDictionary;"
  }
  property {
    name: "HTTPBody"
    type: "LNSData;"
  }
  property {
    name: "HTTPBodyStream"
    type: "LNSInputStream;"
  }
  property {
    name: "HTTPShouldHandleCookies"
    type: "Z"
  }
  property {
    name: "HTTPShouldUsePipelining"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLRequest.h"
}
category {
  name: "NSXMLParser+NSXMLParserLocatorAdditions"
  method {
    function {
      name: "publicID"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "systemID"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "lineNumber"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "columnNumber"
      return_type: "I"
    }
    class_method: false
  }
  property {
    name: "publicID"
    type: "LNSString;"
  }
  property {
    name: "systemID"
    type: "LNSString;"
  }
  property {
    name: "lineNumber"
    type: "I"
  }
  property {
    name: "columnNumber"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLParser.h"
}
category {
  name: "NSAttributedString+NSExtendedAttributedString"
  method {
    function {
      name: "length"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "attribute:atIndex:effectiveRange:"
      return_type: "OI"
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedSubstringFromRange:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributesAtIndex:longestEffectiveRange:inRange:"
      return_type: "LNSDictionary;"
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "rangeLimit"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attribute:atIndex:longestEffectiveRange:inRange:"
      return_type: "OI"
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
      parameter {
        name: "rangeLimit"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEqualToAttributedString:"
      return_type: "Z"
      parameter {
        name: "other"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "str"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:attributes:"
      return_type: "OI"
      parameter {
        name: "str"
        type: "LNSString;"
      }
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithAttributedString:"
      return_type: "OI"
      parameter {
        name: "attrStr"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateAttributesInRange:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "enumerationRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSAttributedStringEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSDictionary *, NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateAttribute:inRange:options:usingBlock:"
      return_type: "V"
      parameter {
        name: "attrName"
        type: "LNSString;"
      }
      parameter {
        name: "enumerationRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSAttributedStringEnumerationOptions)"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(id, NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  property {
    name: "length"
    type: "UI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAttributedString.h"
}
category {
  name: "NSMutableAttributedString+NSExtendedMutableAttributedString"
  method {
    function {
      name: "mutableString"
      return_type: "LNSMutableString;"
    }
    class_method: false
  }
  method {
    function {
      name: "addAttribute:value:range:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addAttributes:range:"
      return_type: "V"
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeAttribute:range:"
      return_type: "V"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceCharactersInRange:withAttributedString:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "attrString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertAttributedString:atIndex:"
      return_type: "V"
      parameter {
        name: "attrString"
        type: "LNSAttributedString;"
      }
      parameter {
        name: "loc"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "appendAttributedString:"
      return_type: "V"
      parameter {
        name: "attrString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteCharactersInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedString:"
      return_type: "V"
      parameter {
        name: "attrString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginEditing"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "endEditing"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "mutableString"
    type: "LNSMutableString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSAttributedString.h"
}
category {
  name: "NSArray+NSPredicateSupport"
  method {
    function {
      name: "filteredArrayUsingPredicate:"
      return_type: "LNSArray;"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPredicate.h"
}
category {
  name: "NSMutableArray+NSPredicateSupport"
  method {
    function {
      name: "filterUsingPredicate:"
      return_type: "V"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPredicate.h"
}
category {
  name: "NSSet+NSPredicateSupport"
  method {
    function {
      name: "filteredSetUsingPredicate:"
      return_type: "LNSSet;"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPredicate.h"
}
category {
  name: "NSMutableSet+NSPredicateSupport"
  method {
    function {
      name: "filterUsingPredicate:"
      return_type: "V"
      parameter {
        name: "predicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPredicate.h"
}
category {
  name: "NSOrderedSet+NSPredicateSupport"
  method {
    function {
      name: "filteredOrderedSetUsingPredicate:"
      return_type: "LNSOrderedSet;"
      parameter {
        name: "p"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPredicate.h"
}
category {
  name: "NSMutableOrderedSet+NSPredicateSupport"
  method {
    function {
      name: "filterUsingPredicate:"
      return_type: "V"
      parameter {
        name: "p"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPredicate.h"
}
category {
  name: "NSItemProvider+NSPreviewSupport"
  method {
    function {
      name: "previewImageHandler"
      return_type: "X(BlockPointer.void (^)(NSItemProviderCompletionHandler, Class, NSDictionary *))"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreviewImageHandler:"
      return_type: "V"
      parameter {
        name: "previewImageHandler"
        type: "X(BlockPointer.void (^)(NSItemProviderCompletionHandler, Class, NSDictionary *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadPreviewImageWithOptions:completionHandler:"
      return_type: "V"
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(id<NSSecureCoding>, NSError *))"
      }
    }
    class_method: false
  }
  property {
    name: "previewImageHandler"
    type: "X(BlockPointer.void (^)(NSItemProviderCompletionHandler, Class, NSDictionary *))"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSItemProvider.h"
}
category {
  name: "NSFileWrapper+NSDeprecated"
  method {
    function {
      name: "initWithPath:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initSymbolicLinkWithDestination:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "needsToBeUpdatedFromPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateFromPath:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:atomically:updateFilenames:"
      return_type: "Z"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "atomicFlag"
        type: "Z"
      }
      parameter {
        name: "updateFilenamesFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addFileWithPath:"
      return_type: "LNSString;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addSymbolicLinkWithDestination:preferredFilename:"
      return_type: "LNSString;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "symbolicLinkDestination"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSFileWrapper.h"
}
category {
  name: "NSString+NSLinguisticAnalysis"
  method {
    function {
      name: "linguisticTagsInRange:scheme:options:orthography:tokenRanges:"
      return_type: "LNSArray;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "tagScheme"
        type: "LNSString;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSLinguisticTaggerOptions)"
      }
      parameter {
        name: "orthography"
        type: "LNSOrthography;"
      }
      parameter {
        name: "tokenRanges"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "tagScheme"
        type: "LNSString;"
      }
      parameter {
        name: "opts"
        type: "X(Enum.enum NSLinguisticTaggerOptions)"
      }
      parameter {
        name: "orthography"
        type: "LNSOrthography;"
      }
      parameter {
        name: "block"
        type: "X(BlockPointer.void (^)(NSString *, NSRange, NSRange, BOOL *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSLinguisticTagger.h"
}
category {
  name: "NSNetService+NSDeprecated"
  method {
    function {
      name: "protocolSpecificInformation"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setProtocolSpecificInformation:"
      return_type: "V"
      parameter {
        name: "specificInformation"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNetServices.h"
}
category {
  name: "NSNetServiceBrowser+NSDeprecated"
  method {
    function {
      name: "searchForAllDomains"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSNetServices.h"
}
category {
  name: "NSURLSession+NSURLSessionAsynchronousConvenience"
  method {
    function {
      name: "dataTaskWithRequest:completionHandler:"
      return_type: "LNSURLSessionDataTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSData *, NSURLResponse *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataTaskWithURL:completionHandler:"
      return_type: "LNSURLSessionDataTask;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSData *, NSURLResponse *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "uploadTaskWithRequest:fromFile:completionHandler:"
      return_type: "LNSURLSessionUploadTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "fileURL"
        type: "LNSURL;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSData *, NSURLResponse *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "uploadTaskWithRequest:fromData:completionHandler:"
      return_type: "LNSURLSessionUploadTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "bodyData"
        type: "LNSData;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSData *, NSURLResponse *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "downloadTaskWithRequest:completionHandler:"
      return_type: "LNSURLSessionDownloadTask;"
      parameter {
        name: "request"
        type: "LNSURLRequest;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSURL *, NSURLResponse *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "downloadTaskWithURL:completionHandler:"
      return_type: "LNSURLSessionDownloadTask;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSURL *, NSURLResponse *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "downloadTaskWithResumeData:completionHandler:"
      return_type: "LNSURLSessionDownloadTask;"
      parameter {
        name: "resumeData"
        type: "LNSData;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSURL *, NSURLResponse *, NSError *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
category {
  name: "NSURLSession+NSURLSessionDeprecated"
  method {
    function {
      name: "dataTaskWithHTTPGetRequest:"
      return_type: "LNSURLSessionDataTask;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataTaskWithHTTPGetRequest:completionHandler:"
      return_type: "LNSURLSessionDataTask;"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSData *, NSURLResponse *, NSError *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
category {
  name: "NSURLSessionConfiguration+NSURLSessionDeprecated"
  method {
    function {
      name: "backgroundSessionConfiguration:"
      return_type: "LNSURLSessionConfiguration;"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSURLSession.h"
}
category {
  name: "NSObject+NSArchiverCallback"
  method {
    function {
      name: "classForArchiver"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "replacementObjectForArchiver:"
      return_type: "OI"
      parameter {
        name: "archiver"
        type: "LNSArchiver;"
      }
    }
    class_method: false
  }
  property {
    name: "classForArchiver"
    type: "OC"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSArchiver.h"
}
category {
  name: "NSDate+NSCalendarDateExtras"
  method {
    function {
      name: "dateWithNaturalLanguageString:locale:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithNaturalLanguageString:"
      return_type: "OI"
      parameter {
        name: "string"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithString:"
      return_type: "OI"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "dateWithCalendarFormat:timeZone:"
      return_type: "LNSCalendarDate;"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "aTimeZone"
        type: "LNSTimeZone;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "descriptionWithCalendarFormat:timeZone:locale:"
      return_type: "LNSString;"
      parameter {
        name: "format"
        type: "LNSString;"
      }
      parameter {
        name: "aTimeZone"
        type: "LNSTimeZone;"
      }
      parameter {
        name: "locale"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithString:"
      return_type: "OI"
      parameter {
        name: "description"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSCalendarDate.h"
}
category {
  name: "NSObject+NSDistributedObjects"
  method {
    function {
      name: "classForPortCoder"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "replacementObjectForPortCoder:"
      return_type: "OI"
      parameter {
        name: "coder"
        type: "LNSPortCoder;"
      }
    }
    class_method: false
  }
  property {
    name: "classForPortCoder"
    type: "OC"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSPortCoder.h"
}
category {
  name: "NSProtocolChecker+NSProtocolCheckerCreation"
  method {
    function {
      name: "protocolCheckerWithTarget:protocol:"
      return_type: "OI"
      parameter {
        name: "anObject"
        type: "LNSObject;"
      }
      parameter {
        name: "aProtocol"
        type: "LProtocol;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "initWithTarget:protocol:"
      return_type: "OI"
      parameter {
        name: "anObject"
        type: "LNSObject;"
      }
      parameter {
        name: "aProtocol"
        type: "LProtocol;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSProtocolChecker.h"
}
category {
  name: "NSTask+NSTaskConveniences"
  method {
    function {
      name: "launchedTaskWithLaunchPath:arguments:"
      return_type: "LNSTask;"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "arguments"
        type: "LNSArray;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "waitUntilExit"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSTask.h"
}
category {
  name: "NSXMLElement+NSDeprecated"
  method {
    function {
      name: "setAttributesAsDictionary:"
      return_type: "V"
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSXMLElement.h"
}
category {
  name: "NSObject+NSClassDescriptionPrimitives"
  method {
    function {
      name: "classDescription"
      return_type: "LNSClassDescription;"
    }
    class_method: false
  }
  method {
    function {
      name: "attributeKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "toOneRelationshipKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "toManyRelationshipKeys"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "inverseForRelationshipKey:"
      return_type: "LNSString;"
      parameter {
        name: "relationshipKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "classDescription"
    type: "LNSClassDescription;"
  }
  property {
    name: "attributeKeys"
    type: "LNSArray;"
  }
  property {
    name: "toOneRelationshipKeys"
    type: "LNSArray;"
  }
  property {
    name: "toManyRelationshipKeys"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSClassDescription.h"
}
category {
  name: "NSObject+NSScripting"
  method {
    function {
      name: "scriptingValueForSpecifier:"
      return_type: "OI"
      parameter {
        name: "objectSpecifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptingProperties"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setScriptingProperties:"
      return_type: "V"
      parameter {
        name: "scriptingProperties"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "copyScriptingValue:forKey:withProperties:"
      return_type: "OI"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "properties"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:"
      return_type: "OI"
      parameter {
        name: "objectClass"
        type: "OC"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "contentsValue"
        type: "OI"
      }
      parameter {
        name: "properties"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  property {
    name: "scriptingProperties"
    type: "LNSDictionary;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSObjectScripting.h"
}
category {
  name: "NSScriptClassDescription+NSDeprecated"
  method {
    function {
      name: "isReadOnlyKey:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptClassDescription.h"
}
category {
  name: "NSObject+NSScriptClassDescription"
  method {
    function {
      name: "classCode"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "className"
      return_type: "LNSString;"
    }
    class_method: false
  }
  property {
    name: "classCode"
    type: "UI"
  }
  property {
    name: "className"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptClassDescription.h"
}
category {
  name: "NSObject+NSScriptKeyValueCoding"
  method {
    function {
      name: "valueAtIndex:inPropertyWithKey:"
      return_type: "OI"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueWithName:inPropertyWithKey:"
      return_type: "OI"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueWithUniqueID:inPropertyWithKey:"
      return_type: "OI"
      parameter {
        name: "uniqueID"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertValue:atIndex:inPropertyWithKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeValueAtIndex:fromPropertyWithKey:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "replaceValueAtIndex:inPropertyWithKey:withValue:"
      return_type: "V"
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "value"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertValue:inPropertyWithKey:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "coerceValue:forKey:"
      return_type: "OI"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptKeyValueCoding.h"
}
category {
  name: "NSObject+NSScriptObjectSpecifiers"
  method {
    function {
      name: "objectSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  method {
    function {
      name: "indicesOfObjectsByEvaluatingObjectSpecifier:"
      return_type: "LNSArray;"
      parameter {
        name: "specifier"
        type: "LNSScriptObjectSpecifier;"
      }
    }
    class_method: false
  }
  property {
    name: "objectSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptObjectSpecifiers.h"
}
category {
  name: "NSObject+NSComparisonMethods"
  method {
    function {
      name: "isEqualTo:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLessThanOrEqualTo:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLessThan:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isGreaterThanOrEqualTo:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isGreaterThan:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isNotEqualTo:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doesContain:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isLike:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isCaseInsensitiveLike:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptWhoseTests.h"
}
category {
  name: "NSObject+NSScriptingComparisonMethods"
  method {
    function {
      name: "scriptingIsEqualTo:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptingIsLessThanOrEqualTo:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptingIsLessThan:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptingIsGreaterThanOrEqualTo:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptingIsGreaterThan:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptingBeginsWith:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptingEndsWith:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scriptingContains:"
      return_type: "Z"
      parameter {
        name: "object"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/Foundation.framework/Headers/NSScriptWhoseTests.h"
}
category {
  name: "NSGraphicsContext+NSGraphicsContext_RenderingOptions"
  method {
    function {
      name: "shouldAntialias"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldAntialias:"
      return_type: "V"
      parameter {
        name: "shouldAntialias"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageInterpolation"
      return_type: "X(Enum.enum NSImageInterpolation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageInterpolation:"
      return_type: "V"
      parameter {
        name: "imageInterpolation"
        type: "X(Enum.enum NSImageInterpolation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "patternPhase"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPatternPhase:"
      return_type: "V"
      parameter {
        name: "patternPhase"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compositingOperation"
      return_type: "X(Enum.enum NSCompositingOperation)"
    }
    class_method: false
  }
  method {
    function {
      name: "setCompositingOperation:"
      return_type: "V"
      parameter {
        name: "compositingOperation"
        type: "X(Enum.enum NSCompositingOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "colorRenderingIntent"
      return_type: "X(Enum.enum NSColorRenderingIntent)"
    }
    class_method: false
  }
  method {
    function {
      name: "setColorRenderingIntent:"
      return_type: "V"
      parameter {
        name: "colorRenderingIntent"
        type: "X(Enum.enum NSColorRenderingIntent)"
      }
    }
    class_method: false
  }
  property {
    name: "shouldAntialias"
    type: "Z"
  }
  property {
    name: "imageInterpolation"
    type: "X(Enum.enum NSImageInterpolation)"
  }
  property {
    name: "patternPhase"
    type: "RCGPoint;"
  }
  property {
    name: "compositingOperation"
    type: "X(Enum.enum NSCompositingOperation)"
  }
  property {
    name: "colorRenderingIntent"
    type: "X(Enum.enum NSColorRenderingIntent)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGraphicsContext.h"
}
category {
  name: "NSGraphicsContext+NSQuartzCoreAdditions"
  method {
    function {
      name: "CIContext"
      return_type: "LCIContext;"
    }
    class_method: false
  }
  property {
    name: "CIContext"
    type: "LCIContext;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGraphicsContext.h"
}
category {
  name: "NSGraphicsContext+NSGraphicsContextDeprecated"
  method {
    function {
      name: "setGraphicsState:"
      return_type: "V"
      parameter {
        name: "gState"
        type: "I"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "focusStack"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setFocusStack:"
      return_type: "V"
      parameter {
        name: "stack"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "graphicsContextWithGraphicsPort:flipped:"
      return_type: "LNSGraphicsContext;"
      parameter {
        name: "graphicsPort"
        type: "*V;"
      }
      parameter {
        name: "initialFlippedState"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "graphicsPort"
      return_type: "*V;"
    }
    class_method: false
  }
  property {
    name: "graphicsPort"
    type: "*V;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGraphicsContext.h"
}
category {
  name: "NSWorkspace+NSDesktopImages"
  method {
    function {
      name: "setDesktopImageURL:forScreen:options:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "desktopImageURLForScreen:"
      return_type: "LNSURL;"
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "desktopImageOptionsForScreen:"
      return_type: "LNSDictionary;"
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWorkspace.h"
}
category {
  name: "NSWorkspace+NSDeprecated"
  method {
    function {
      name: "openTempFile:"
      return_type: "Z"
      parameter {
        name: "fullPath"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "findApplications"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "noteUserDefaultsChanged"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "slideImage:from:to:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "fromPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "toPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkForRemovableMedia"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "noteFileSystemChanged"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "fileSystemChanged"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "userDefaultsChanged"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "mountNewRemovableMedia"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "activeApplication"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "mountedLocalVolumePaths"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "mountedRemovableMedia"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "launchedApplications"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWorkspace.h"
}
category {
  name: "NSObject+NSAccessibility"
  method {
    function {
      name: "accessibilityAttributeNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityAttributeValue:"
      return_type: "OI"
      parameter {
        name: "attribute"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityIsAttributeSettable:"
      return_type: "Z"
      parameter {
        name: "attribute"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilitySetValue:forAttribute:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "attribute"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityParameterizedAttributeNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityAttributeValue:forParameter:"
      return_type: "OI"
      parameter {
        name: "attribute"
        type: "LNSString;"
      }
      parameter {
        name: "parameter"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityActionNames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityActionDescription:"
      return_type: "LNSString;"
      parameter {
        name: "action"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityPerformAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityIsIgnored"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityHitTest:"
      return_type: "OI"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityFocusedUIElement"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityIndexOfChild:"
      return_type: "UI"
      parameter {
        name: "child"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityArrayAttributeCount:"
      return_type: "UI"
      parameter {
        name: "attribute"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityArrayAttributeValues:index:maxCount:"
      return_type: "LNSArray;"
      parameter {
        name: "attribute"
        type: "LNSString;"
      }
      parameter {
        name: "index"
        type: "UI"
      }
      parameter {
        name: "maxCount"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityNotifiesWhenDestroyed"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "accessibilityFocusedUIElement"
    type: "OI"
  }
  property {
    name: "accessibilityNotifiesWhenDestroyed"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibility.h"
}
category {
  name: "NSWorkspace+NSWorkspaceAccessibilityDisplay"
  method {
    function {
      name: "accessibilityDisplayShouldIncreaseContrast"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDisplayShouldDifferentiateWithoutColor"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "accessibilityDisplayShouldReduceTransparency"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "accessibilityDisplayShouldIncreaseContrast"
    type: "Z"
  }
  property {
    name: "accessibilityDisplayShouldDifferentiateWithoutColor"
    type: "Z"
  }
  property {
    name: "accessibilityDisplayShouldReduceTransparency"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibility.h"
}
category {
  name: "NSObject+NSAccessibilityAdditions"
  method {
    function {
      name: "accessibilitySetOverrideValue:forAttribute:"
      return_type: "Z"
      parameter {
        name: "value"
        type: "OI"
      }
      parameter {
        name: "attribute"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAccessibility.h"
}
category {
  name: "NSResponder+NSStandardKeyBindingMethods"
  method {
    function {
      name: "insertText:"
      return_type: "V"
      parameter {
        name: "insertString"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doCommandBySelector:"
      return_type: "V"
      parameter {
        name: "aSelector"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveForward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveRight:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveBackward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveLeft:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveUp:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveDown:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveWordForward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveWordBackward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToBeginningOfLine:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToEndOfLine:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToBeginningOfParagraph:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToEndOfParagraph:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToEndOfDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToBeginningOfDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageDown:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageUp:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "centerSelectionInVisibleArea:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveBackwardAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveForwardAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveWordForwardAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveWordBackwardAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveUpAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveDownAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToBeginningOfLineAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToEndOfLineAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToBeginningOfParagraphAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToEndOfParagraphAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToEndOfDocumentAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToBeginningOfDocumentAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageDownAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageUpAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveParagraphForwardAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveParagraphBackwardAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveWordRight:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveWordLeft:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveRightAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveLeftAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveWordRightAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveWordLeftAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToLeftEndOfLine:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToRightEndOfLine:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToLeftEndOfLineAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "moveToRightEndOfLineAndModifySelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollPageUp:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollPageDown:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollLineUp:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollLineDown:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollToBeginningOfDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollToEndOfDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "transpose:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "transposeWords:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectAll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectParagraph:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectLine:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectWord:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indent:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertTab:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertBacktab:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertNewline:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertParagraphSeparator:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertNewlineIgnoringFieldEditor:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertTabIgnoringFieldEditor:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertLineBreak:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertContainerBreak:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertSingleQuoteIgnoringSubstitution:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertDoubleQuoteIgnoringSubstitution:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeCaseOfLetter:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "uppercaseWord:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lowercaseWord:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "capitalizeWord:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteForward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteBackward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteBackwardByDecomposingPreviousCharacter:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteWordForward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteWordBackward:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteToBeginningOfLine:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteToEndOfLine:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteToBeginningOfParagraph:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteToEndOfParagraph:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "yank:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "complete:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMark:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteToMark:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectToMark:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "swapWithMark:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cancelOperation:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeBaseWritingDirectionNatural:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeBaseWritingDirectionLeftToRight:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeBaseWritingDirectionRightToLeft:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeTextWritingDirectionNatural:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeTextWritingDirectionLeftToRight:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeTextWritingDirectionRightToLeft:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "quickLookPreviewItems:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSResponder.h"
}
category {
  name: "NSResponder+NSUndoSupport"
  method {
    function {
      name: "undoManager"
      return_type: "LNSUndoManager;"
    }
    class_method: false
  }
  property {
    name: "undoManager"
    type: "LNSUndoManager;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSResponder.h"
}
category {
  name: "NSResponder+NSControlEditingSupport"
  method {
    function {
      name: "validateProposedFirstResponder:forEvent:"
      return_type: "Z"
      parameter {
        name: "responder"
        type: "LNSResponder;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSResponder.h"
}
category {
  name: "NSResponder+NSErrorPresentation"
  method {
    function {
      name: "presentError:modalForWindow:delegate:didPresentSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "error"
        type: "LNSError;"
      }
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didPresentSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "willPresentError:"
      return_type: "LNSError;"
      parameter {
        name: "error"
        type: "LNSError;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSResponder.h"
}
category {
  name: "NSResponder+NSTextFinderSupport"
  method {
    function {
      name: "performTextFinderAction:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSResponder.h"
}
category {
  name: "NSResponder+NSDeprecated"
  method {
    function {
      name: "performMnemonic:"
      return_type: "Z"
      parameter {
        name: "theString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSResponder.h"
}
category {
  name: "NSWorkspace+NSWorkspaceRunningApplications"
  method {
    function {
      name: "runningApplications"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "runningApplications"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSRunningApplication.h"
}
category {
  name: "NSApplication+NSWindowsMenu"
  method {
    function {
      name: "windowsMenu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setWindowsMenu:"
      return_type: "V"
      parameter {
        name: "windowsMenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "arrangeInFront:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeWindowsItem:"
      return_type: "V"
      parameter {
        name: "win"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addWindowsItem:title:filename:"
      return_type: "V"
      parameter {
        name: "win"
        type: "LNSWindow;"
      }
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "isFilename"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "changeWindowsItem:title:filename:"
      return_type: "V"
      parameter {
        name: "win"
        type: "LNSWindow;"
      }
      parameter {
        name: "aString"
        type: "LNSString;"
      }
      parameter {
        name: "isFilename"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateWindowsItem:"
      return_type: "V"
      parameter {
        name: "win"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "miniaturizeAll:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "windowsMenu"
    type: "LNSMenu;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSApplication+NSFullKeyboardAccess"
  method {
    function {
      name: "isFullKeyboardAccessEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "fullKeyboardAccessEnabled"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSApplication+NSServicesMenu"
  method {
    function {
      name: "servicesMenu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "setServicesMenu:"
      return_type: "V"
      parameter {
        name: "servicesMenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerServicesMenuSendTypes:returnTypes:"
      return_type: "V"
      parameter {
        name: "sendTypes"
        type: "LNSArray;"
      }
      parameter {
        name: "returnTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "servicesMenu"
    type: "LNSMenu;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSApplication+NSServicesHandling"
  method {
    function {
      name: "servicesProvider"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setServicesProvider:"
      return_type: "V"
      parameter {
        name: "servicesProvider"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "servicesProvider"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSApplication+NSStandardAboutPanel"
  method {
    function {
      name: "orderFrontStandardAboutPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontStandardAboutPanelWithOptions:"
      return_type: "V"
      parameter {
        name: "optionsDictionary"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSApplication+NSApplicationLayoutDirection"
  method {
    function {
      name: "userInterfaceLayoutDirection"
      return_type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
    }
    class_method: false
  }
  property {
    name: "userInterfaceLayoutDirection"
    type: "X(Enum.enum NSUserInterfaceLayoutDirection)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSApplication+NSRestorableUserInterface"
  method {
    function {
      name: "disableRelaunchOnLogin"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enableRelaunchOnLogin"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSApplication+NSRemoteNotifications"
  method {
    function {
      name: "registerForRemoteNotificationTypes:"
      return_type: "V"
      parameter {
        name: "types"
        type: "X(Enum.enum NSRemoteNotificationType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unregisterForRemoteNotifications"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enabledRemoteNotificationTypes"
      return_type: "X(Enum.enum NSRemoteNotificationType)"
    }
    class_method: false
  }
  property {
    name: "enabledRemoteNotificationTypes"
    type: "X(Enum.enum NSRemoteNotificationType)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSApplication+NSDeprecated"
  method {
    function {
      name: "runModalForWindow:relativeToWindow:"
      return_type: "I"
      parameter {
        name: "theWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginModalSessionForWindow:relativeToWindow:"
      return_type: "*R_NSModalSession;;"
      parameter {
        name: "theWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "application:printFiles:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
      parameter {
        name: "filenames"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "sheet"
        type: "LNSWindow;"
      }
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "modalDelegate"
        type: "OI"
      }
      parameter {
        name: "didEndSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endSheet:"
      return_type: "V"
      parameter {
        name: "sheet"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endSheet:returnCode:"
      return_type: "V"
      parameter {
        name: "sheet"
        type: "LNSWindow;"
      }
      parameter {
        name: "returnCode"
        type: "I"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplication.h"
}
category {
  name: "NSObject+NSDraggingSourceDeprecated"
  method {
    function {
      name: "namesOfPromisedFilesDroppedAtDestination:"
      return_type: "LNSArray;"
      parameter {
        name: "dropDestination"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggingSourceOperationMaskForLocal:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggedImage:beganAt:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggedImage:endedAt:operation:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "operation"
        type: "X(Enum.enum NSDragOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "draggedImage:movedTo:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "ignoreModifierKeysWhileDragging"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "draggedImage:endedAt:deposited:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
      parameter {
        name: "screenPoint"
        type: "RCGPoint;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDragging.h"
}
category {
  name: "NSObject+NSLayerDelegateContentsScaleUpdating"
  method {
    function {
      name: "layer:shouldInheritContentsScale:fromWindow:"
      return_type: "Z"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
      parameter {
        name: "newScale"
        type: "D"
      }
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSObject+NSToolTipOwner"
  method {
    function {
      name: "view:stringForToolTip:point:userData:"
      return_type: "LNSString;"
      parameter {
        name: "view"
        type: "LNSView;"
      }
      parameter {
        name: "tag"
        type: "I"
      }
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "data"
        type: "*V;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSView+NSKeyboardUI"
  method {
    function {
      name: "nextKeyView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setNextKeyView:"
      return_type: "V"
      parameter {
        name: "nextKeyView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "previousKeyView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "nextValidKeyView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "previousValidKeyView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "canBecomeKeyView"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyboardFocusRingNeedsDisplayInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "focusRingType"
      return_type: "X(Enum.enum NSFocusRingType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFocusRingType:"
      return_type: "V"
      parameter {
        name: "focusRingType"
        type: "X(Enum.enum NSFocusRingType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultFocusRingType"
      return_type: "X(Enum.enum NSFocusRingType)"
    }
    class_method: true
  }
  method {
    function {
      name: "drawFocusRingMask"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "focusRingMaskBounds"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "noteFocusRingMaskChanged"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "nextKeyView"
    type: "LNSView;"
  }
  property {
    name: "previousKeyView"
    type: "LNSView;"
  }
  property {
    name: "nextValidKeyView"
    type: "LNSView;"
  }
  property {
    name: "previousValidKeyView"
    type: "LNSView;"
  }
  property {
    name: "canBecomeKeyView"
    type: "Z"
  }
  property {
    name: "focusRingType"
    type: "X(Enum.enum NSFocusRingType)"
  }
  property {
    name: "focusRingMaskBounds"
    type: "RCGRect;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSView+NSPrinting"
  method {
    function {
      name: "writeEPSInsideRect:toPasteboard:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataWithEPSInsideRect:"
      return_type: "LNSData;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writePDFInsideRect:toPasteboard:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "pasteboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataWithPDFInsideRect:"
      return_type: "LNSData;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "print:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "knowsPageRange:"
      return_type: "Z"
      parameter {
        name: "range"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "heightAdjustLimit"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "widthAdjustLimit"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "adjustPageWidthNew:left:right:limit:"
      return_type: "V"
      parameter {
        name: "newRight"
        type: "*D;"
      }
      parameter {
        name: "oldLeft"
        type: "D"
      }
      parameter {
        name: "oldRight"
        type: "D"
      }
      parameter {
        name: "rightLimit"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "adjustPageHeightNew:top:bottom:limit:"
      return_type: "V"
      parameter {
        name: "newBottom"
        type: "*D;"
      }
      parameter {
        name: "oldTop"
        type: "D"
      }
      parameter {
        name: "oldBottom"
        type: "D"
      }
      parameter {
        name: "bottomLimit"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectForPage:"
      return_type: "RCGRect;"
      parameter {
        name: "page"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "locationOfPrintRect:"
      return_type: "RCGPoint;"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawPageBorderWithSize:"
      return_type: "V"
      parameter {
        name: "borderSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pageHeader"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "pageFooter"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "drawSheetBorderWithSize:"
      return_type: "V"
      parameter {
        name: "borderSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printJobTitle"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "beginDocument"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "endDocument"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "beginPageInRect:atPlacement:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endPage"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "heightAdjustLimit"
    type: "D"
  }
  property {
    name: "widthAdjustLimit"
    type: "D"
  }
  property {
    name: "pageHeader"
    type: "LNSAttributedString;"
  }
  property {
    name: "pageFooter"
    type: "LNSAttributedString;"
  }
  property {
    name: "printJobTitle"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSView+NSDrag"
  method {
    function {
      name: "beginDraggingSessionWithItems:event:source:"
      return_type: "LNSDraggingSession;"
      parameter {
        name: "items"
        type: "LNSArray;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "source"
        type: "X(Unexposed.id<NSDraggingSource>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dragImage:at:offset:event:pasteboard:source:slideBack:"
      return_type: "V"
      parameter {
        name: "anImage"
        type: "LNSImage;"
      }
      parameter {
        name: "viewLocation"
        type: "RCGPoint;"
      }
      parameter {
        name: "initialOffset"
        type: "RCGSize;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "sourceObj"
        type: "OI"
      }
      parameter {
        name: "slideFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registeredDraggedTypes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "registerForDraggedTypes:"
      return_type: "V"
      parameter {
        name: "newTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unregisterDraggedTypes"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "dragFile:fromRect:slideBack:event:"
      return_type: "Z"
      parameter {
        name: "filename"
        type: "LNSString;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "aFlag"
        type: "Z"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dragPromisedFilesOfTypes:fromRect:source:slideBack:event:"
      return_type: "Z"
      parameter {
        name: "typeArray"
        type: "LNSArray;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "sourceObject"
        type: "OI"
      }
      parameter {
        name: "aFlag"
        type: "Z"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  property {
    name: "registeredDraggedTypes"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSView+NSFullScreenMode"
  method {
    function {
      name: "enterFullScreenMode:withOptions:"
      return_type: "Z"
      parameter {
        name: "screen"
        type: "LNSScreen;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "exitFullScreenModeWithOptions:"
      return_type: "V"
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isInFullScreenMode"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "inFullScreenMode"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSView+NSDefinition"
  method {
    function {
      name: "showDefinitionForAttributedString:atPoint:"
      return_type: "V"
      parameter {
        name: "attrString"
        type: "LNSAttributedString;"
      }
      parameter {
        name: "textBaselineOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showDefinitionForAttributedString:range:options:baselineOriginProvider:"
      return_type: "V"
      parameter {
        name: "attrString"
        type: "LNSAttributedString;"
      }
      parameter {
        name: "targetRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "originProvider"
        type: "X(BlockPointer.NSPoint (^)(NSRange))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSView+NSFindIndicator"
  method {
    function {
      name: "isDrawingFindIndicator"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "drawingFindIndicator"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSView+NSGestureRecognizer"
  method {
    function {
      name: "gestureRecognizers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setGestureRecognizers:"
      return_type: "V"
      parameter {
        name: "gestureRecognizers"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addGestureRecognizer:"
      return_type: "V"
      parameter {
        name: "gestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeGestureRecognizer:"
      return_type: "V"
      parameter {
        name: "gestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  property {
    name: "gestureRecognizers"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSView+NSDeprecated"
  method {
    function {
      name: "performMnemonic:"
      return_type: "Z"
      parameter {
        name: "theString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldDrawColor"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "gState"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "allocateGState"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "releaseGState"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setUpGState"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "renewGState"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSView.h"
}
category {
  name: "NSCell+NSKeyboardUI"
  method {
    function {
      name: "refusesFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRefusesFirstResponder:"
      return_type: "V"
      parameter {
        name: "refusesFirstResponder"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "showsFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsFirstResponder:"
      return_type: "V"
      parameter {
        name: "showsFirstResponder"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performClick:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "focusRingType"
      return_type: "X(Enum.enum NSFocusRingType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFocusRingType:"
      return_type: "V"
      parameter {
        name: "focusRingType"
        type: "X(Enum.enum NSFocusRingType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultFocusRingType"
      return_type: "X(Enum.enum NSFocusRingType)"
    }
    class_method: true
  }
  method {
    function {
      name: "drawFocusRingMaskWithFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "focusRingMaskBoundsForFrame:inView:"
      return_type: "RCGRect;"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "wantsNotificationForMarkedText"
      return_type: "Z"
    }
    class_method: false
  }
  property {
    name: "refusesFirstResponder"
    type: "Z"
  }
  property {
    name: "acceptsFirstResponder"
    type: "Z"
  }
  property {
    name: "showsFirstResponder"
    type: "Z"
  }
  property {
    name: "focusRingType"
    type: "X(Enum.enum NSFocusRingType)"
  }
  property {
    name: "wantsNotificationForMarkedText"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCell.h"
}
category {
  name: "NSCell+NSCellAttributedStringMethods"
  method {
    function {
      name: "attributedStringValue"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedStringValue:"
      return_type: "V"
      parameter {
        name: "attributedStringValue"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsEditingTextAttributes"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsEditingTextAttributes:"
      return_type: "V"
      parameter {
        name: "allowsEditingTextAttributes"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "importsGraphics"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setImportsGraphics:"
      return_type: "V"
      parameter {
        name: "importsGraphics"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "attributedStringValue"
    type: "LNSAttributedString;"
  }
  property {
    name: "allowsEditingTextAttributes"
    type: "Z"
  }
  property {
    name: "importsGraphics"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCell.h"
}
category {
  name: "NSCell+NSCellMixedState"
  method {
    function {
      name: "allowsMixedState"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsMixedState:"
      return_type: "V"
      parameter {
        name: "allowsMixedState"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextState"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNextState"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "allowsMixedState"
    type: "Z"
  }
  property {
    name: "nextState"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCell.h"
}
category {
  name: "NSCell+NSCellHitTest"
  method {
    function {
      name: "hitTestForEvent:inRect:ofView:"
      return_type: "X(Enum.enum NSCellHitResult)"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "controlView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCell.h"
}
category {
  name: "NSCell+NSCellExpansion"
  method {
    function {
      name: "expansionFrameWithFrame:inView:"
      return_type: "RCGRect;"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawWithExpansionFrame:inView:"
      return_type: "V"
      parameter {
        name: "cellFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCell.h"
}
category {
  name: "NSCell+NSCellBackgroundStyle"
  method {
    function {
      name: "backgroundStyle"
      return_type: "X(Enum.enum NSBackgroundStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundStyle:"
      return_type: "V"
      parameter {
        name: "backgroundStyle"
        type: "X(Enum.enum NSBackgroundStyle)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "interiorBackgroundStyle"
      return_type: "X(Enum.enum NSBackgroundStyle)"
    }
    class_method: false
  }
  property {
    name: "backgroundStyle"
    type: "X(Enum.enum NSBackgroundStyle)"
  }
  property {
    name: "interiorBackgroundStyle"
    type: "X(Enum.enum NSBackgroundStyle)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCell.h"
}
category {
  name: "NSCell+NSDeprecated"
  method {
    function {
      name: "entryType"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setEntryType:"
      return_type: "V"
      parameter {
        name: "aType"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEntryAcceptable:"
      return_type: "Z"
      parameter {
        name: "aString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFloatingPointFormat:left:right:"
      return_type: "V"
      parameter {
        name: "autoRange"
        type: "Z"
      }
      parameter {
        name: "leftDigits"
        type: "UI"
      }
      parameter {
        name: "rightDigits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setMnemonicLocation:"
      return_type: "V"
      parameter {
        name: "location"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mnemonicLocation"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "mnemonic"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitleWithMnemonic:"
      return_type: "V"
      parameter {
        name: "stringWithAmpersand"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCell.h"
}
category {
  name: "NSAppleScript+NSExtensions"
  method {
    function {
      name: "richTextSource"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  property {
    name: "richTextSource"
    type: "LNSAttributedString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAppleScriptExtensions.h"
}
category {
  name: "NSBox+NSDeprecated"
  method {
    function {
      name: "setTitleWithMnemonic:"
      return_type: "V"
      parameter {
        name: "stringWithAmpersand"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBox.h"
}
category {
  name: "NSControl+NSKeyboardUI"
  method {
    function {
      name: "performClick:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setRefusesFirstResponder:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "refusesFirstResponder"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSControl.h"
}
category {
  name: "NSControl+NSControlTextMethods"
  method {
    function {
      name: "alignment"
      return_type: "X(Enum.enum NSTextAlignment)"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlignment:"
      return_type: "V"
      parameter {
        name: "alignment"
        type: "X(Enum.enum NSTextAlignment)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "font"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFont:"
      return_type: "V"
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineBreakMode"
      return_type: "X(Enum.enum NSLineBreakMode)"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineBreakMode:"
      return_type: "V"
      parameter {
        name: "lineBreakMode"
        type: "X(Enum.enum NSLineBreakMode)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesSingleLineMode"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesSingleLineMode:"
      return_type: "V"
      parameter {
        name: "usesSingleLineMode"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "baseWritingDirection"
      return_type: "X(Enum.enum NSWritingDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBaseWritingDirection:"
      return_type: "V"
      parameter {
        name: "baseWritingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsExpansionToolTips"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsExpansionToolTips:"
      return_type: "V"
      parameter {
        name: "allowsExpansionToolTips"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "expansionFrameWithFrame:"
      return_type: "RCGRect;"
      parameter {
        name: "contentFrame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawWithExpansionFrame:inView:"
      return_type: "V"
      parameter {
        name: "contentFrame"
        type: "RCGRect;"
      }
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  property {
    name: "alignment"
    type: "X(Enum.enum NSTextAlignment)"
  }
  property {
    name: "font"
    type: "LNSFont;"
  }
  property {
    name: "lineBreakMode"
    type: "X(Enum.enum NSLineBreakMode)"
  }
  property {
    name: "usesSingleLineMode"
    type: "Z"
  }
  property {
    name: "baseWritingDirection"
    type: "X(Enum.enum NSWritingDirection)"
  }
  property {
    name: "allowsExpansionToolTips"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSControl.h"
}
category {
  name: "NSControl+NSControlEditableTextMethods"
  method {
    function {
      name: "currentEditor"
      return_type: "LNSText;"
    }
    class_method: false
  }
  method {
    function {
      name: "abortEditing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "validateEditing"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "editWithFrame:editor:delegate:event:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "textObj"
        type: "LNSText;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "theEvent"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectWithFrame:editor:delegate:start:length:"
      return_type: "V"
      parameter {
        name: "aRect"
        type: "RCGRect;"
      }
      parameter {
        name: "textObj"
        type: "LNSText;"
      }
      parameter {
        name: "anObject"
        type: "OI"
      }
      parameter {
        name: "selStart"
        type: "I"
      }
      parameter {
        name: "selLength"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "endEditing:"
      return_type: "V"
      parameter {
        name: "textObj"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSControl.h"
}
category {
  name: "NSObject+NSControlSubclassNotifications"
  method {
    function {
      name: "controlTextDidBeginEditing:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlTextDidEndEditing:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "controlTextDidChange:"
      return_type: "V"
      parameter {
        name: "obj"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSControl.h"
}
category {
  name: "NSControl+NSDeprecated"
  method {
    function {
      name: "setFloatingPointFormat:left:right:"
      return_type: "V"
      parameter {
        name: "autoRange"
        type: "Z"
      }
      parameter {
        name: "leftDigits"
        type: "UI"
      }
      parameter {
        name: "rightDigits"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setCellClass:"
      return_type: "V"
      parameter {
        name: "factoryId"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "cellClass"
      return_type: "OC"
    }
    class_method: true
  }
  method {
    function {
      name: "cell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setCell:"
      return_type: "V"
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedTag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsDisplay"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "calcSize"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "updateCell:"
      return_type: "V"
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateCellInside:"
      return_type: "V"
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawCellInside:"
      return_type: "V"
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawCell:"
      return_type: "V"
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectCell:"
      return_type: "V"
      parameter {
        name: "aCell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSControl.h"
}
category {
  name: "NSButtonCell+NSButtonCellExtensions"
  method {
    function {
      name: "gradientType"
      return_type: "X(Enum.enum NSGradientType)"
    }
    class_method: false
  }
  method {
    function {
      name: "setGradientType:"
      return_type: "V"
      parameter {
        name: "gradientType"
        type: "X(Enum.enum NSGradientType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageDimsWhenDisabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setImageDimsWhenDisabled:"
      return_type: "V"
      parameter {
        name: "imageDimsWhenDisabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsBorderOnlyWhileMouseInside"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsBorderOnlyWhileMouseInside:"
      return_type: "V"
      parameter {
        name: "showsBorderOnlyWhileMouseInside"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseEntered:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseExited:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  property {
    name: "gradientType"
    type: "X(Enum.enum NSGradientType)"
  }
  property {
    name: "imageDimsWhenDisabled"
    type: "Z"
  }
  property {
    name: "showsBorderOnlyWhileMouseInside"
    type: "Z"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButtonCell.h"
}
category {
  name: "NSButtonCell+NSButtonCellAttributedStringMethods"
  method {
    function {
      name: "attributedTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedTitle:"
      return_type: "V"
      parameter {
        name: "attributedTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedAlternateTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedAlternateTitle:"
      return_type: "V"
      parameter {
        name: "attributedAlternateTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  property {
    name: "attributedTitle"
    type: "LNSAttributedString;"
  }
  property {
    name: "attributedAlternateTitle"
    type: "LNSAttributedString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButtonCell.h"
}
category {
  name: "NSButtonCell+NSButtonCellBezelStyles"
  method {
    function {
      name: "bezelStyle"
      return_type: "X(Enum.enum NSBezelStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBezelStyle:"
      return_type: "V"
      parameter {
        name: "bezelStyle"
        type: "X(Enum.enum NSBezelStyle)"
      }
    }
    class_method: false
  }
  property {
    name: "bezelStyle"
    type: "X(Enum.enum NSBezelStyle)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButtonCell.h"
}
category {
  name: "NSButtonCell+NSButtonCellSoundExtensions"
  method {
    function {
      name: "sound"
      return_type: "LNSSound;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSound:"
      return_type: "V"
      parameter {
        name: "sound"
        type: "LNSSound;"
      }
    }
    class_method: false
  }
  property {
    name: "sound"
    type: "LNSSound;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButtonCell.h"
}
category {
  name: "NSButtonCell+NSKeyboardUI"
  method {
    function {
      name: "setTitleWithMnemonic:"
      return_type: "V"
      parameter {
        name: "stringWithAmpersand"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternateTitleWithMnemonic:"
      return_type: "V"
      parameter {
        name: "stringWithAmpersand"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternateMnemonicLocation:"
      return_type: "V"
      parameter {
        name: "location"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alternateMnemonicLocation"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "alternateMnemonic"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButtonCell.h"
}
category {
  name: "NSButton+NSButtonAttributedStringMethods"
  method {
    function {
      name: "attributedTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedTitle:"
      return_type: "V"
      parameter {
        name: "attributedTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedAlternateTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedAlternateTitle:"
      return_type: "V"
      parameter {
        name: "attributedAlternateTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  property {
    name: "attributedTitle"
    type: "LNSAttributedString;"
  }
  property {
    name: "attributedAlternateTitle"
    type: "LNSAttributedString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButton.h"
}
category {
  name: "NSButton+NSButtonBezelStyles"
  method {
    function {
      name: "bezelStyle"
      return_type: "X(Enum.enum NSBezelStyle)"
    }
    class_method: false
  }
  method {
    function {
      name: "setBezelStyle:"
      return_type: "V"
      parameter {
        name: "bezelStyle"
        type: "X(Enum.enum NSBezelStyle)"
      }
    }
    class_method: false
  }
  property {
    name: "bezelStyle"
    type: "X(Enum.enum NSBezelStyle)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButton.h"
}
category {
  name: "NSButton+NSButtonMixedState"
  method {
    function {
      name: "allowsMixedState"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsMixedState:"
      return_type: "V"
      parameter {
        name: "allowsMixedState"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setNextState"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "allowsMixedState"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButton.h"
}
category {
  name: "NSButton+NSButtonBorder"
  method {
    function {
      name: "showsBorderOnlyWhileMouseInside"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsBorderOnlyWhileMouseInside:"
      return_type: "V"
      parameter {
        name: "showsBorderOnlyWhileMouseInside"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "showsBorderOnlyWhileMouseInside"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButton.h"
}
category {
  name: "NSButton+NSButtonSoundExtensions"
  method {
    function {
      name: "sound"
      return_type: "LNSSound;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSound:"
      return_type: "V"
      parameter {
        name: "sound"
        type: "LNSSound;"
      }
    }
    class_method: false
  }
  property {
    name: "sound"
    type: "LNSSound;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButton.h"
}
category {
  name: "NSButton+NSKeyboardUI"
  method {
    function {
      name: "setTitleWithMnemonic:"
      return_type: "V"
      parameter {
        name: "stringWithAmpersand"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSButton.h"
}
category {
  name: "NSClipView+NSDeprecated"
  method {
    function {
      name: "constrainScrollPoint:"
      return_type: "RCGPoint;"
      parameter {
        name: "newOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSClipView.h"
}
category {
  name: "NSView+NSClipViewSuperview"
  method {
    function {
      name: "reflectScrolledClipView:"
      return_type: "V"
      parameter {
        name: "aClipView"
        type: "LNSClipView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scrollClipView:toPoint:"
      return_type: "V"
      parameter {
        name: "aClipView"
        type: "LNSClipView;"
      }
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSClipView.h"
}
category {
  name: "NSFontManager+NSFontManagerMenuActionMethods"
  method {
    function {
      name: "fontNamed:hasTraits:"
      return_type: "Z"
      parameter {
        name: "fName"
        type: "LNSString;"
      }
      parameter {
        name: "someTraits"
        type: "X(Enum.enum NSFontTraitMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "availableFontNamesWithTraits:"
      return_type: "LNSArray;"
      parameter {
        name: "someTraits"
        type: "X(Enum.enum NSFontTraitMask)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addFontTrait:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFontTrait:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "modifyFontViaPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "modifyFont:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontFontPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontStylesPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontManager.h"
}
category {
  name: "NSObject+NSFontManagerDelegate"
  method {
    function {
      name: "fontManager:willIncludeFont:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "fontName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontManager.h"
}
category {
  name: "NSObject+NSFontManagerResponderMethod"
  method {
    function {
      name: "changeFont:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontManager.h"
}
category {
  name: "NSWindow+NSKeyboardUI"
  method {
    function {
      name: "initialFirstResponder"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInitialFirstResponder:"
      return_type: "V"
      parameter {
        name: "initialFirstResponder"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectNextKeyView:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectPreviousKeyView:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectKeyViewFollowingView:"
      return_type: "V"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectKeyViewPrecedingView:"
      return_type: "V"
      parameter {
        name: "aView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyViewSelectionDirection"
      return_type: "X(Enum.enum NSSelectionDirection)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultButtonCell:"
      return_type: "V"
      parameter {
        name: "defButt"
        type: "LNSButtonCell;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultButtonCell"
      return_type: "LNSButtonCell;"
    }
    class_method: false
  }
  method {
    function {
      name: "disableKeyEquivalentForDefaultButtonCell"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enableKeyEquivalentForDefaultButtonCell"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "autorecalculatesKeyViewLoop"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutorecalculatesKeyViewLoop:"
      return_type: "V"
      parameter {
        name: "autorecalculatesKeyViewLoop"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "recalculateKeyViewLoop"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "initialFirstResponder"
    type: "LNSView;"
  }
  property {
    name: "keyViewSelectionDirection"
    type: "X(Enum.enum NSSelectionDirection)"
  }
  property {
    name: "autorecalculatesKeyViewLoop"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindow.h"
}
category {
  name: "NSWindow+NSToolbarSupport"
  method {
    function {
      name: "toolbar"
      return_type: "LNSToolbar;"
    }
    class_method: false
  }
  method {
    function {
      name: "setToolbar:"
      return_type: "V"
      parameter {
        name: "toolbar"
        type: "LNSToolbar;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleToolbarShown:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runToolbarCustomizationPalette:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showsToolbarButton"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowsToolbarButton:"
      return_type: "V"
      parameter {
        name: "showsToolbarButton"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "toolbar"
    type: "LNSToolbar;"
  }
  property {
    name: "showsToolbarButton"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindow.h"
}
category {
  name: "NSWindow+NSDrag"
  method {
    function {
      name: "dragImage:at:offset:event:pasteboard:source:slideBack:"
      return_type: "V"
      parameter {
        name: "anImage"
        type: "LNSImage;"
      }
      parameter {
        name: "baseLocation"
        type: "RCGPoint;"
      }
      parameter {
        name: "initialOffset"
        type: "RCGSize;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "sourceObj"
        type: "OI"
      }
      parameter {
        name: "slideFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerForDraggedTypes:"
      return_type: "V"
      parameter {
        name: "newTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unregisterDraggedTypes"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindow.h"
}
category {
  name: "NSWindow+NSCarbonExtensions"
  method {
    function {
      name: "initWithWindowRef:"
      return_type: "LNSWindow;"
      parameter {
        name: "windowRef"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "windowRef"
      return_type: "*V;"
    }
    class_method: false
  }
  property {
    name: "windowRef"
    type: "*V;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindow.h"
}
category {
  name: "NSWindow+NSDeprecated"
  method {
    function {
      name: "gState"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "convertBaseToScreen:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "convertScreenToBase:"
      return_type: "RCGPoint;"
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canBeVisibleOnAllSpaces"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCanBeVisibleOnAllSpaces:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "userSpaceScaleFactor"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "useOptimizedDrawing:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canStoreColor"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindow.h"
}
category {
  name: "NSObject+NSFontPanelValidationAdditions"
  method {
    function {
      name: "validModesForFontPanel:"
      return_type: "UI"
      parameter {
        name: "fontPanel"
        type: "LNSFontPanel;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFontPanel.h"
}
category {
  name: "NSMatrix+NSKeyboardUI"
  method {
    function {
      name: "tabKeyTraversesCells"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTabKeyTraversesCells:"
      return_type: "V"
      parameter {
        name: "tabKeyTraversesCells"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setKeyCell:"
      return_type: "V"
      parameter {
        name: "keyCell"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "tabKeyTraversesCells"
    type: "Z"
  }
  property {
    name: "keyCell"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMatrix.h"
}
category {
  name: "NSFormCell+NSKeyboardUI"
  method {
    function {
      name: "setTitleWithMnemonic:"
      return_type: "V"
      parameter {
        name: "stringWithAmpersand"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFormCell.h"
}
category {
  name: "NSFormCell+NSFormCellAttributedStringMethods"
  method {
    function {
      name: "attributedTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedTitle:"
      return_type: "V"
      parameter {
        name: "attributedTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  property {
    name: "attributedTitle"
    type: "LNSAttributedString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFormCell.h"
}
category {
  name: "NSView+NSViewEnclosingMenuItem"
  method {
    function {
      name: "enclosingMenuItem"
      return_type: "LNSMenuItem;"
    }
    class_method: false
  }
  property {
    name: "enclosingMenuItem"
    type: "LNSMenuItem;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenuItem.h"
}
category {
  name: "NSMenuItem+NSDeprecated"
  method {
    function {
      name: "setMnemonicLocation:"
      return_type: "V"
      parameter {
        name: "location"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mnemonicLocation"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "mnemonic"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenuItem.h"
}
category {
  name: "NSMenu+NSSubmenuAction"
  method {
    function {
      name: "submenuAction:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenu.h"
}
category {
  name: "NSObject+NSMenuValidation"
  method {
    function {
      name: "validateMenuItem:"
      return_type: "Z"
      parameter {
        name: "menuItem"
        type: "LNSMenuItem;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenu.h"
}
category {
  name: "NSMenu+NSMenuPropertiesToUpdate"
  method {
    function {
      name: "propertiesToUpdate"
      return_type: "X(Enum.enum NSMenuProperties)"
    }
    class_method: false
  }
  property {
    name: "propertiesToUpdate"
    type: "X(Enum.enum NSMenuProperties)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenu.h"
}
category {
  name: "NSMenu+NSDeprecated"
  method {
    function {
      name: "setMenuRepresentation:"
      return_type: "V"
      parameter {
        name: "menuRep"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "menuRepresentation"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setContextMenuRepresentation:"
      return_type: "V"
      parameter {
        name: "menuRep"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contextMenuRepresentation"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTearOffMenuRepresentation:"
      return_type: "V"
      parameter {
        name: "menuRep"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tearOffMenuRepresentation"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setMenuZone:"
      return_type: "V"
      parameter {
        name: "aZone"
        type: "*R_NSZone;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "attachedMenu"
      return_type: "LNSMenu;"
    }
    class_method: false
  }
  method {
    function {
      name: "isAttached"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "sizeToFit"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "locationForSubmenu:"
      return_type: "RCGPoint;"
      parameter {
        name: "aSubmenu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSMenu.h"
}
category {
  name: "NSPasteboard+FilterServices"
  method {
    function {
      name: "typesFilterableTo:"
      return_type: "LNSArray;"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pasteboardByFilteringFile:"
      return_type: "LNSPasteboard;"
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pasteboardByFilteringData:ofType:"
      return_type: "LNSPasteboard;"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "pasteboardByFilteringTypesInPasteboard:"
      return_type: "LNSPasteboard;"
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h"
}
category {
  name: "NSObject+NSPasteboardOwner"
  method {
    function {
      name: "pasteboard:provideDataForType:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pasteboardChangedOwner:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h"
}
category {
  name: "NSURL+NSPasteboardSupport"
  base_protocol: "NSPasteboardWriting"
  base_protocol: "NSPasteboardReading"
  method {
    function {
      name: "URLFromPasteboard:"
      return_type: "LNSURL;"
      parameter {
        name: "pasteBoard"
        type: "LNSPasteboard;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "writeToPasteboard:"
      return_type: "V"
      parameter {
        name: "pasteBoard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h"
}
category {
  name: "NSString+NSPasteboardSupport"
  base_protocol: "NSPasteboardWriting"
  base_protocol: "NSPasteboardReading"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h"
}
category {
  name: "NSPasteboard+NSFileContents"
  method {
    function {
      name: "writeFileContents:"
      return_type: "Z"
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFileContentsType:toFile:"
      return_type: "LNSString;"
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeFileWrapper:"
      return_type: "Z"
      parameter {
        name: "wrapper"
        type: "LNSFileWrapper;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFileWrapper"
      return_type: "LNSFileWrapper;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPasteboard.h"
}
category {
  name: "NSColor+NSQuartzCoreAdditions"
  method {
    function {
      name: "colorWithCIColor:"
      return_type: "LNSColor;"
      parameter {
        name: "color"
        type: "LCIColor;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColor.h"
}
category {
  name: "CIColor+NSAppKitAdditions"
  method {
    function {
      name: "initWithColor:"
      return_type: "OI"
      parameter {
        name: "color"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColor.h"
}
category {
  name: "NSCoder+NSAppKitColorExtensions"
  method {
    function {
      name: "decodeNXColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColor.h"
}
category {
  name: "NSBitmapImageRep+NSBitmapImageFileTypeExtensions"
  method {
    function {
      name: "representationOfImageRepsInArray:usingType:properties:"
      return_type: "LNSData;"
      parameter {
        name: "imageReps"
        type: "LNSArray;"
      }
      parameter {
        name: "storageType"
        type: "X(Enum.enum NSBitmapImageFileType)"
      }
      parameter {
        name: "properties"
        type: "LNSDictionary;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "representationUsingType:properties:"
      return_type: "LNSData;"
      parameter {
        name: "storageType"
        type: "X(Enum.enum NSBitmapImageFileType)"
      }
      parameter {
        name: "properties"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setProperty:withValue:"
      return_type: "V"
      parameter {
        name: "property"
        type: "LNSString;"
      }
      parameter {
        name: "value"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "valueForProperty:"
      return_type: "OI"
      parameter {
        name: "property"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBitmapImageRep.h"
}
category {
  name: "NSViewController+NSViewControllerPresentation"
  method {
    function {
      name: "presentViewController:animator:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
      parameter {
        name: "animator"
        type: "X(Unexposed.id<NSViewControllerPresentationAnimator>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dismissViewController:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dismissController:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentedViewControllers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "presentingViewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  property {
    name: "presentedViewControllers"
    type: "LNSArray;"
  }
  property {
    name: "presentingViewController"
    type: "LNSViewController;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSViewController.h"
}
category {
  name: "NSViewController+NSViewControllerPresentationAndTransitionStyles"
  method {
    function {
      name: "presentViewControllerAsSheet:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentViewControllerAsModalWindow:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "presentViewController:asPopoverRelativeToRect:ofView:preferredEdge:behavior:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
      parameter {
        name: "positioningRect"
        type: "RCGRect;"
      }
      parameter {
        name: "positioningView"
        type: "LNSView;"
      }
      parameter {
        name: "preferredEdge"
        type: "UI"
      }
      parameter {
        name: "behavior"
        type: "X(Enum.enum NSPopoverBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "transitionFromViewController:toViewController:options:completionHandler:"
      return_type: "V"
      parameter {
        name: "fromViewController"
        type: "LNSViewController;"
      }
      parameter {
        name: "toViewController"
        type: "LNSViewController;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSViewControllerTransitionOptions)"
      }
      parameter {
        name: "completion"
        type: "X(BlockPointer.void (^)(void))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSViewController.h"
}
category {
  name: "NSViewController+NSViewControllerContainer"
  method {
    function {
      name: "parentViewController"
      return_type: "LNSViewController;"
    }
    class_method: false
  }
  method {
    function {
      name: "childViewControllers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setChildViewControllers:"
      return_type: "V"
      parameter {
        name: "childViewControllers"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addChildViewController:"
      return_type: "V"
      parameter {
        name: "childViewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeFromParentViewController"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "insertChildViewController:atIndex:"
      return_type: "V"
      parameter {
        name: "childViewController"
        type: "LNSViewController;"
      }
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeChildViewControllerAtIndex:"
      return_type: "V"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredContentSizeDidChangeForViewController:"
      return_type: "V"
      parameter {
        name: "viewController"
        type: "LNSViewController;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "viewWillTransitionToSize:"
      return_type: "V"
      parameter {
        name: "newSize"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  property {
    name: "parentViewController"
    type: "LNSViewController;"
  }
  property {
    name: "childViewControllers"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSViewController.h"
}
category {
  name: "NSViewController+NSViewControllerStoryboardingMethods"
  method {
    function {
      name: "storyboard"
      return_type: "LNSStoryboard;"
    }
    class_method: false
  }
  property {
    name: "storyboard"
    type: "LNSStoryboard;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSViewController.h"
}
category {
  name: "NSViewController+NSExtensionAdditions"
  base_protocol: "NSExtensionRequestHandling"
  method {
    function {
      name: "extensionContext"
      return_type: "LNSExtensionContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "sourceItemView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSourceItemView:"
      return_type: "V"
      parameter {
        name: "sourceItemView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredScreenOrigin"
      return_type: "RCGPoint;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPreferredScreenOrigin:"
      return_type: "V"
      parameter {
        name: "preferredScreenOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preferredMinimumSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "preferredMaximumSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  property {
    name: "extensionContext"
    type: "LNSExtensionContext;"
  }
  property {
    name: "sourceItemView"
    type: "LNSView;"
  }
  property {
    name: "preferredScreenOrigin"
    type: "RCGPoint;"
  }
  property {
    name: "preferredMinimumSize"
    type: "RCGSize;"
  }
  property {
    name: "preferredMaximumSize"
    type: "RCGSize;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSViewController.h"
}
category {
  name: "NSBrowser+NSDeprecated"
  method {
    function {
      name: "setAcceptsArrowKeys:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsArrowKeys"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "displayColumn:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displayAllColumns"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "scrollViaScroller:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "LNSScroller;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateScroller"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "setMatrixClass:"
      return_type: "V"
      parameter {
        name: "factoryId"
        type: "OC"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matrixClass"
      return_type: "OC"
    }
    class_method: false
  }
  method {
    function {
      name: "columnOfMatrix:"
      return_type: "I"
      parameter {
        name: "matrix"
        type: "LNSMatrix;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "matrixInColumn:"
      return_type: "LNSMatrix;"
      parameter {
        name: "column"
        type: "I"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBrowser.h"
}
category {
  name: "CIImage+AutoAdjustment"
  method {
    function {
      name: "autoAdjustmentFilters"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "autoAdjustmentFiltersWithOptions:"
      return_type: "LNSArray;"
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/../Frameworks/CoreImage.framework/Headers/CIImage.h"
}
category {
  name: "CIImage+NSAppKitAdditions"
  method {
    function {
      name: "initWithBitmapImageRep:"
      return_type: "OI"
      parameter {
        name: "bitmapImageRep"
        type: "LNSBitmapImageRep;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:fromRect:operation:fraction:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "fromRect"
        type: "RCGRect;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
      parameter {
        name: "delta"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawAtPoint:fromRect:operation:fraction:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "fromRect"
        type: "RCGRect;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
      parameter {
        name: "delta"
        type: "D"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSCIImageRep.h"
}
category {
  name: "NSApplication+NSColorPanel"
  method {
    function {
      name: "orderFrontColorPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorPanel.h"
}
category {
  name: "NSObject+NSColorPanelResponderMethod"
  method {
    function {
      name: "changeColor:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSColorPanel.h"
}
category {
  name: "NSDocument+NSDeprecated"
  method {
    function {
      name: "saveToURL:ofType:forSaveOperation:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataRepresentationOfType:"
      return_type: "LNSData;"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileAttributesToWriteToFile:ofType:saveOperation:"
      return_type: "LNSDictionary;"
      parameter {
        name: "fullDocumentPath"
        type: "LNSString;"
      }
      parameter {
        name: "documentTypeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperationType"
        type: "X(Enum.enum NSSaveOperationType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "fileWrapperRepresentationOfType:"
      return_type: "LNSFileWrapper;"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfFile:ofType:"
      return_type: "OI"
      parameter {
        name: "absolutePath"
        type: "LNSString;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithContentsOfURL:ofType:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadDataRepresentation:ofType:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "loadFileWrapperRepresentation:ofType:"
      return_type: "Z"
      parameter {
        name: "wrapper"
        type: "LNSFileWrapper;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "printShowingPrintPanel:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromFile:ofType:"
      return_type: "Z"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromURL:ofType:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "revertToSavedFromFile:ofType:"
      return_type: "Z"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "revertToSavedFromURL:ofType:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalPageLayoutWithPrintInfo:"
      return_type: "I"
      parameter {
        name: "printInfo"
        type: "LNSPrintInfo;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperation"
        type: "X(Enum.enum NSSaveOperationType)"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didSaveSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setFileName:"
      return_type: "V"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:ofType:"
      return_type: "Z"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToFile:ofType:originalFile:saveOperation:"
      return_type: "Z"
      parameter {
        name: "fullDocumentPath"
        type: "LNSString;"
      }
      parameter {
        name: "documentTypeName"
        type: "LNSString;"
      }
      parameter {
        name: "fullOriginalDocumentPath"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperationType"
        type: "X(Enum.enum NSSaveOperationType)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeToURL:ofType:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeWithBackupToFile:ofType:saveOperation:"
      return_type: "Z"
      parameter {
        name: "fullDocumentPath"
        type: "LNSString;"
      }
      parameter {
        name: "documentTypeName"
        type: "LNSString;"
      }
      parameter {
        name: "saveOperationType"
        type: "X(Enum.enum NSSaveOperationType)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDocument.h"
}
category {
  name: "NSDocumentController+NSDeprecated"
  method {
    function {
      name: "openDocumentWithContentsOfURL:display:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "displayDocument"
        type: "Z"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reopenDocumentForURL:withContentsOfURL:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "contentsURL"
        type: "LNSURL;"
      }
      parameter {
        name: "outError"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileExtensionsFromType:"
      return_type: "LNSArray;"
      parameter {
        name: "typeName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "typeFromFileExtension:"
      return_type: "LNSString;"
      parameter {
        name: "fileNameExtensionOrHFSFileType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "documentForFileName:"
      return_type: "OI"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileNamesFromRunningOpenPanel"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "makeDocumentWithContentsOfFile:ofType:"
      return_type: "OI"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeDocumentWithContentsOfURL:ofType:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "makeUntitledDocumentOfType:"
      return_type: "OI"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openDocumentWithContentsOfFile:display:"
      return_type: "OI"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "display"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openDocumentWithContentsOfURL:display:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "display"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "openUntitledDocumentOfType:display:"
      return_type: "OI"
      parameter {
        name: "type"
        type: "LNSString;"
      }
      parameter {
        name: "display"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setShouldCreateUI:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldCreateUI"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDocumentController.h"
}
category {
  name: "NSFileWrapper+NSExtensions"
  method {
    function {
      name: "icon"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIcon:"
      return_type: "V"
      parameter {
        name: "icon"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  property {
    name: "icon"
    type: "LNSImage;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSFileWrapperExtensions.h"
}
category {
  name: "NSBundle+NSBundleHelpExtension"
  method {
    function {
      name: "contextHelpForKey:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSHelpManager.h"
}
category {
  name: "NSApplication+NSApplicationHelpExtension"
  method {
    function {
      name: "activateContextHelpMode:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showHelp:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSHelpManager.h"
}
category {
  name: "NSGestureRecognizer+NSSubclassUse"
  method {
    function {
      name: "state"
      return_type: "X(Enum.enum NSGestureRecognizerState)"
    }
    class_method: false
  }
  method {
    function {
      name: "setState:"
      return_type: "V"
      parameter {
        name: "state"
        type: "X(Enum.enum NSGestureRecognizerState)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "reset"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "canPreventGestureRecognizer:"
      return_type: "Z"
      parameter {
        name: "preventedGestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "canBePreventedByGestureRecognizer:"
      return_type: "Z"
      parameter {
        name: "preventingGestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldRequireFailureOfGestureRecognizer:"
      return_type: "Z"
      parameter {
        name: "otherGestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldBeRequiredToFailByGestureRecognizer:"
      return_type: "Z"
      parameter {
        name: "otherGestureRecognizer"
        type: "LNSGestureRecognizer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDown:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rightMouseDown:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "otherMouseDown:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseUp:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rightMouseUp:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "otherMouseUp:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "mouseDragged:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rightMouseDragged:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "otherMouseDragged:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyDown:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "keyUp:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "flagsChanged:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tabletPoint:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "magnifyWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rotateWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pressureChangeWithEvent:"
      return_type: "V"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  property {
    name: "state"
    type: "X(Enum.enum NSGestureRecognizerState)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSGestureRecognizer.h"
}
category {
  name: "NSLayoutConstraint+NSIdentifier"
  method {
    function {
      name: "identifier"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setIdentifier:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "identifier"
    type: "LNSString;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSView+NSConstraintBasedLayoutInstallingConstraints"
  method {
    function {
      name: "constraints"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "addConstraint:"
      return_type: "V"
      parameter {
        name: "constraint"
        type: "LNSLayoutConstraint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "addConstraints:"
      return_type: "V"
      parameter {
        name: "constraints"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeConstraint:"
      return_type: "V"
      parameter {
        name: "constraint"
        type: "LNSLayoutConstraint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "removeConstraints:"
      return_type: "V"
      parameter {
        name: "constraints"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "constraints"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSWindow+NSConstraintBasedLayoutCoreMethods"
  method {
    function {
      name: "updateConstraintsIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "layoutIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSView+NSConstraintBasedLayoutCoreMethods"
  method {
    function {
      name: "updateConstraintsForSubtreeIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "updateConstraints"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "needsUpdateConstraints"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsUpdateConstraints:"
      return_type: "V"
      parameter {
        name: "needsUpdateConstraints"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutSubtreeIfNeeded"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "layout"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "needsLayout"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setNeedsLayout:"
      return_type: "V"
      parameter {
        name: "needsLayout"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "needsUpdateConstraints"
    type: "Z"
  }
  property {
    name: "needsLayout"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSView+NSConstraintBasedCompatibility"
  method {
    function {
      name: "translatesAutoresizingMaskIntoConstraints"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setTranslatesAutoresizingMaskIntoConstraints:"
      return_type: "V"
      parameter {
        name: "translatesAutoresizingMaskIntoConstraints"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "requiresConstraintBasedLayout"
      return_type: "Z"
    }
    class_method: true
  }
  property {
    name: "translatesAutoresizingMaskIntoConstraints"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSView+NSConstraintBasedLayoutLayering"
  method {
    function {
      name: "alignmentRectForFrame:"
      return_type: "RCGRect;"
      parameter {
        name: "frame"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "frameForAlignmentRect:"
      return_type: "RCGRect;"
      parameter {
        name: "alignmentRect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alignmentRectInsets"
      return_type: "RNSEdgeInsets;"
    }
    class_method: false
  }
  method {
    function {
      name: "baselineOffsetFromBottom"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "intrinsicContentSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateIntrinsicContentSize"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "contentHuggingPriorityForOrientation:"
      return_type: "F"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setContentHuggingPriority:forOrientation:"
      return_type: "V"
      parameter {
        name: "priority"
        type: "F"
      }
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "contentCompressionResistancePriorityForOrientation:"
      return_type: "F"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setContentCompressionResistancePriority:forOrientation:"
      return_type: "V"
      parameter {
        name: "priority"
        type: "F"
      }
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  property {
    name: "alignmentRectInsets"
    type: "RNSEdgeInsets;"
  }
  property {
    name: "baselineOffsetFromBottom"
    type: "D"
  }
  property {
    name: "intrinsicContentSize"
    type: "RCGSize;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSControl+NSConstraintBasedLayoutLayering"
  method {
    function {
      name: "invalidateIntrinsicContentSizeForCell:"
      return_type: "V"
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSWindow+NSConstraintBasedLayoutAnchoring"
  method {
    function {
      name: "anchorAttributeForOrientation:"
      return_type: "X(Enum.enum NSLayoutAttribute)"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAnchorAttribute:forOrientation:"
      return_type: "V"
      parameter {
        name: "attr"
        type: "X(Enum.enum NSLayoutAttribute)"
      }
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSView+NSConstraintBasedLayoutFittingSize"
  method {
    function {
      name: "fittingSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  property {
    name: "fittingSize"
    type: "RCGSize;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSView+NSConstraintBasedLayoutDebugging"
  method {
    function {
      name: "constraintsAffectingLayoutForOrientation:"
      return_type: "LNSArray;"
      parameter {
        name: "orientation"
        type: "X(Enum.enum NSLayoutConstraintOrientation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasAmbiguousLayout"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "exerciseAmbiguityInLayout"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "hasAmbiguousLayout"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSWindow+NSConstraintBasedLayoutDebugging"
  method {
    function {
      name: "visualizeConstraints:"
      return_type: "V"
      parameter {
        name: "constraints"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutConstraint.h"
}
category {
  name: "NSBundle+NSBundleImageExtension"
  method {
    function {
      name: "imageForResource:"
      return_type: "LNSImage;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pathForImageResource:"
      return_type: "LNSString;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLForImageResource:"
      return_type: "LNSURL;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSImage.h"
}
category {
  name: "NSImage+NSDeprecated"
  method {
    function {
      name: "setFlipped:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFlipped"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "dissolveToPoint:fraction:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "aFloat"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dissolveToPoint:fromRect:fraction:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "aFloat"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compositeToPoint:operation:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compositeToPoint:fromRect:operation:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compositeToPoint:operation:fraction:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
      parameter {
        name: "delta"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "compositeToPoint:fromRect:operation:fraction:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "op"
        type: "X(Enum.enum NSCompositingOperation)"
      }
      parameter {
        name: "delta"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lockFocusOnRepresentation:"
      return_type: "V"
      parameter {
        name: "imageRepresentation"
        type: "LNSImageRep;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setScalesWhenResized:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "scalesWhenResized"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDataRetained:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isDataRetained"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCachedSeparately:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isCachedSeparately"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCacheDepthMatchesImageDepth:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cacheDepthMatchesImageDepth"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSImage.h"
}
category {
  name: "NSNib+NSDeprecated"
  method {
    function {
      name: "initWithContentsOfURL:"
      return_type: "OI"
      parameter {
        name: "nibFileURL"
        type: "LNSURL;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "instantiateNibWithExternalNameTable:"
      return_type: "Z"
      parameter {
        name: "externalNameTable"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "instantiateNibWithOwner:topLevelObjects:"
      return_type: "Z"
      parameter {
        name: "owner"
        type: "OI"
      }
      parameter {
        name: "topLevelObjects"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSNib.h"
}
category {
  name: "NSBundle+NSNibLoading"
  method {
    function {
      name: "loadNibNamed:owner:topLevelObjects:"
      return_type: "Z"
      parameter {
        name: "nibName"
        type: "LNSString;"
      }
      parameter {
        name: "owner"
        type: "OI"
      }
      parameter {
        name: "topLevelObjects"
        type: "*LNSArray;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSNibLoading.h"
}
category {
  name: "NSObject+NSNibAwaking"
  method {
    function {
      name: "awakeFromNib"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "prepareForInterfaceBuilder"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSNibLoading.h"
}
category {
  name: "NSBundle+NSNibLoadingDeprecated"
  method {
    function {
      name: "loadNibFile:externalNameTable:withZone:"
      return_type: "Z"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "context"
        type: "LNSDictionary;"
      }
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "loadNibNamed:owner:"
      return_type: "Z"
      parameter {
        name: "nibName"
        type: "LNSString;"
      }
      parameter {
        name: "owner"
        type: "OI"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "loadNibFile:externalNameTable:withZone:"
      return_type: "Z"
      parameter {
        name: "fileName"
        type: "LNSString;"
      }
      parameter {
        name: "context"
        type: "LNSDictionary;"
      }
      parameter {
        name: "zone"
        type: "*R_NSZone;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSNibLoading.h"
}
category {
  name: "NSPrinter+NSDeprecated"
  method {
    function {
      name: "statusForTable:"
      return_type: "X(Enum.enum NSPrinterTableStatus)"
      parameter {
        name: "tableName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isKey:inTable:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "table"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "booleanForKey:inTable:"
      return_type: "Z"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "table"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "floatForKey:inTable:"
      return_type: "F"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "table"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "intForKey:inTable:"
      return_type: "I"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "table"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectForKey:inTable:"
      return_type: "RCGRect;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "table"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sizeForKey:inTable:"
      return_type: "RCGSize;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "table"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringForKey:inTable:"
      return_type: "LNSString;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "table"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "stringListForKey:inTable:"
      return_type: "LNSArray;"
      parameter {
        name: "key"
        type: "LNSString;"
      }
      parameter {
        name: "table"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "imageRectForPaper:"
      return_type: "RCGRect;"
      parameter {
        name: "paperName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsBinary"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isColor"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isFontAvailable:"
      return_type: "Z"
      parameter {
        name: "faceName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isOutputStackInReverseOrder"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "printerWithName:domain:includeUnavailable:"
      return_type: "LNSPrinter;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "domain"
        type: "LNSString;"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "domain"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "host"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "note"
      return_type: "LNSString;"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrinter.h"
}
category {
  name: "NSSpellChecker+NSDeprecated"
  method {
    function {
      name: "guessesForWord:"
      return_type: "LNSArray;"
      parameter {
        name: "word"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "forgetWord:"
      return_type: "V"
      parameter {
        name: "word"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSpellChecker.h"
}
category {
  name: "NSSplitView+NSDeprecated"
  method {
    function {
      name: "setIsPaneSplitter:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isPaneSplitter"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSplitView.h"
}
category {
  name: "NSObject+NSSavePanelDelegateDeprecated"
  method {
    function {
      name: "panel:isValidFilename:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panel:directoryDidChange:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panel:compareFilename:with:caseSensitive:"
      return_type: "X(Enum.enum NSComparisonResult)"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "name1"
        type: "LNSString;"
      }
      parameter {
        name: "name2"
        type: "LNSString;"
      }
      parameter {
        name: "caseSensitive"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "panel:shouldShowFilename:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "OI"
      }
      parameter {
        name: "filename"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSavePanel.h"
}
category {
  name: "NSSavePanel+NSDeprecated"
  method {
    function {
      name: "filename"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "directory"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDirectory:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "requiredFileType"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setRequiredFileType:"
      return_type: "V"
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didEndSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalForDirectory:file:"
      return_type: "I"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectText:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSavePanel.h"
}
category {
  name: "NSOpenPanel+NSDeprecated"
  method {
    function {
      name: "filenames"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "fileTypes"
        type: "LNSArray;"
      }
      parameter {
        name: "docWindow"
        type: "LNSWindow;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didEndSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "fileTypes"
        type: "LNSArray;"
      }
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didEndSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalForDirectory:file:types:"
      return_type: "I"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "name"
        type: "LNSString;"
      }
      parameter {
        name: "fileTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "runModalForTypes:"
      return_type: "I"
      parameter {
        name: "fileTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenPanel.h"
}
category {
  name: "NSPageLayout+NSDeprecated"
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "accessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "readPrintInfo"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "writePrintInfo"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPageLayout.h"
}
category {
  name: "NSApplication+NSPageLayoutPanel"
  method {
    function {
      name: "runPageLayout:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPageLayout.h"
}
category {
  name: "NSPrintInfo+NSDeprecated"
  method {
    function {
      name: "setDefaultPrinter:"
      return_type: "V"
      parameter {
        name: "printer"
        type: "LNSPrinter;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "sizeForPaperName:"
      return_type: "RCGSize;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrintInfo.h"
}
category {
  name: "NSPrintOperation+NSDeprecated"
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setJobStyleHint:"
      return_type: "V"
      parameter {
        name: "hint"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "jobStyleHint"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setShowPanels:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showPanels"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrintOperation.h"
}
category {
  name: "NSPrintPanel+NSDeprecated"
  method {
    function {
      name: "setAccessoryView:"
      return_type: "V"
      parameter {
        name: "accessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "accessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "updateFromPrintInfo"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "finalWritePrintInfo"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPrintPanel.h"
}
category {
  name: "NSScreen+NSDeprecated"
  method {
    function {
      name: "userSpaceScaleFactor"
      return_type: "D"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSScreen.h"
}
category {
  name: "NSScroller+NSDeprecated"
  method {
    function {
      name: "setFloatValue:knobProportion:"
      return_type: "V"
      parameter {
        name: "aFloat"
        type: "F"
      }
      parameter {
        name: "proportion"
        type: "D"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSScroller.h"
}
category {
  name: "NSScrollView+NSRulerSupport"
  method {
    function {
      name: "setRulerViewClass:"
      return_type: "V"
      parameter {
        name: "rulerViewClass"
        type: "OC"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "rulerViewClass"
      return_type: "OC"
    }
    class_method: true
  }
  method {
    function {
      name: "rulersVisible"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRulersVisible:"
      return_type: "V"
      parameter {
        name: "rulersVisible"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasHorizontalRuler"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasHorizontalRuler:"
      return_type: "V"
      parameter {
        name: "hasHorizontalRuler"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hasVerticalRuler"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHasVerticalRuler:"
      return_type: "V"
      parameter {
        name: "hasVerticalRuler"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "horizontalRulerView"
      return_type: "LNSRulerView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHorizontalRulerView:"
      return_type: "V"
      parameter {
        name: "horizontalRulerView"
        type: "LNSRulerView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "verticalRulerView"
      return_type: "LNSRulerView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setVerticalRulerView:"
      return_type: "V"
      parameter {
        name: "verticalRulerView"
        type: "LNSRulerView;"
      }
    }
    class_method: false
  }
  property {
    name: "rulersVisible"
    type: "Z"
  }
  property {
    name: "hasHorizontalRuler"
    type: "Z"
  }
  property {
    name: "hasVerticalRuler"
    type: "Z"
  }
  property {
    name: "horizontalRulerView"
    type: "LNSRulerView;"
  }
  property {
    name: "verticalRulerView"
    type: "LNSRulerView;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSScrollView.h"
}
category {
  name: "NSScrollView+NSFindBarSupport"
  method {
    function {
      name: "findBarPosition"
      return_type: "X(Enum.enum NSScrollViewFindBarPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setFindBarPosition:"
      return_type: "V"
      parameter {
        name: "findBarPosition"
        type: "X(Enum.enum NSScrollViewFindBarPosition)"
      }
    }
    class_method: false
  }
  property {
    name: "findBarPosition"
    type: "X(Enum.enum NSScrollViewFindBarPosition)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSScrollView.h"
}
category {
  name: "NSSegmentedCell+NSSegmentBackgroundStyle"
  method {
    function {
      name: "interiorBackgroundStyleForSegment:"
      return_type: "X(Enum.enum NSBackgroundStyle)"
      parameter {
        name: "segment"
        type: "I"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSegmentedCell.h"
}
category {
  name: "NSSliderCell+NSTickMarkSupport"
  method {
    function {
      name: "numberOfTickMarks"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfTickMarks:"
      return_type: "V"
      parameter {
        name: "numberOfTickMarks"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tickMarkPosition"
      return_type: "X(Enum.enum NSTickMarkPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTickMarkPosition:"
      return_type: "V"
      parameter {
        name: "tickMarkPosition"
        type: "X(Enum.enum NSTickMarkPosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsTickMarkValuesOnly"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsTickMarkValuesOnly:"
      return_type: "V"
      parameter {
        name: "allowsTickMarkValuesOnly"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tickMarkValueAtIndex:"
      return_type: "D"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectOfTickMarkAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfTickMarkAtPoint:"
      return_type: "I"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "closestTickMarkValueToValue:"
      return_type: "D"
      parameter {
        name: "value"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawTickMarks"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "numberOfTickMarks"
    type: "I"
  }
  property {
    name: "tickMarkPosition"
    type: "X(Enum.enum NSTickMarkPosition)"
  }
  property {
    name: "allowsTickMarkValuesOnly"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSliderCell.h"
}
category {
  name: "NSSlider+NSTickMarkSupport"
  method {
    function {
      name: "numberOfTickMarks"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setNumberOfTickMarks:"
      return_type: "V"
      parameter {
        name: "numberOfTickMarks"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tickMarkPosition"
      return_type: "X(Enum.enum NSTickMarkPosition)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTickMarkPosition:"
      return_type: "V"
      parameter {
        name: "tickMarkPosition"
        type: "X(Enum.enum NSTickMarkPosition)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsTickMarkValuesOnly"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsTickMarkValuesOnly:"
      return_type: "V"
      parameter {
        name: "allowsTickMarkValuesOnly"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "tickMarkValueAtIndex:"
      return_type: "D"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rectOfTickMarkAtIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "index"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "indexOfTickMarkAtPoint:"
      return_type: "I"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "closestTickMarkValueToValue:"
      return_type: "D"
      parameter {
        name: "value"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "numberOfTickMarks"
    type: "I"
  }
  property {
    name: "tickMarkPosition"
    type: "X(Enum.enum NSTickMarkPosition)"
  }
  property {
    name: "allowsTickMarkValuesOnly"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSlider.h"
}
category {
  name: "NSTextField+NSTextFieldAttributedStringMethods"
  method {
    function {
      name: "allowsEditingTextAttributes"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsEditingTextAttributes:"
      return_type: "V"
      parameter {
        name: "allowsEditingTextAttributes"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "importsGraphics"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setImportsGraphics:"
      return_type: "V"
      parameter {
        name: "importsGraphics"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "allowsEditingTextAttributes"
    type: "Z"
  }
  property {
    name: "importsGraphics"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextField.h"
}
category {
  name: "NSTextField+NSDeprecated"
  method {
    function {
      name: "setTitleWithMnemonic:"
      return_type: "V"
      parameter {
        name: "stringWithAmpersand"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextField.h"
}
category {
  name: "NSAttributedString+NSAttributedStringKitAdditions"
  method {
    function {
      name: "fontAttributesInRange:"
      return_type: "LNSDictionary;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerAttributesInRange:"
      return_type: "LNSDictionary;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "containsAttachments"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "lineBreakBeforeIndex:withinRange:"
      return_type: "UI"
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineBreakByHyphenatingBeforeIndex:withinRange:"
      return_type: "UI"
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "aRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleClickAtIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "location"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "nextWordFromIndex:forward:"
      return_type: "UI"
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "isForward"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "URLAtIndex:effectiveRange:"
      return_type: "LNSURL;"
      parameter {
        name: "location"
        type: "UI"
      }
      parameter {
        name: "effectiveRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfTextBlock:atIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "block"
        type: "LNSTextBlock;"
      }
      parameter {
        name: "location"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfTextTable:atIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "table"
        type: "LNSTextTable;"
      }
      parameter {
        name: "location"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeOfTextList:atIndex:"
      return_type: "R_NSRange;"
      parameter {
        name: "list"
        type: "LNSTextList;"
      }
      parameter {
        name: "location"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "itemNumberInTextList:atIndex:"
      return_type: "I"
      parameter {
        name: "list"
        type: "LNSTextList;"
      }
      parameter {
        name: "location"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithURL:options:documentAttributes:error:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithData:options:documentAttributes:error:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithPath:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "path"
        type: "LNSString;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithURL:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithRTF:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithRTFD:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithHTML:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithHTML:baseURL:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "base"
        type: "LNSURL;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithDocFormat:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithHTML:options:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "initWithRTFDFileWrapper:documentAttributes:"
      return_type: "OI"
      parameter {
        name: "wrapper"
        type: "LNSFileWrapper;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataFromRange:documentAttributes:error:"
      return_type: "LNSData;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fileWrapperFromRange:documentAttributes:error:"
      return_type: "LNSFileWrapper;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "RTFFromRange:documentAttributes:"
      return_type: "LNSData;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "RTFDFromRange:documentAttributes:"
      return_type: "LNSData;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "RTFDFileWrapperFromRange:documentAttributes:"
      return_type: "LNSFileWrapper;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "docFormatFromRange:documentAttributes:"
      return_type: "LNSData;"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "dict"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  property {
    name: "containsAttachments"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAttributedString.h"
}
category {
  name: "NSAttributedString+NSAttributedStringPasteboardAdditions"
  base_protocol: "NSPasteboardReading"
  base_protocol: "NSPasteboardWriting"
  method {
    function {
      name: "textTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "textUnfilteredTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAttributedString.h"
}
category {
  name: "NSAttributedString+NSDeprecatedKitAdditions"
  method {
    function {
      name: "textFileTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "textPasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "textUnfilteredFileTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "textUnfilteredPasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAttributedString.h"
}
category {
  name: "NSMutableAttributedString+NSMutableAttributedStringKitAdditions"
  method {
    function {
      name: "readFromURL:options:documentAttributes:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "opts"
        type: "LNSDictionary;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromData:options:documentAttributes:error:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "opts"
        type: "LNSDictionary;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromURL:options:documentAttributes:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readFromData:options:documentAttributes:"
      return_type: "Z"
      parameter {
        name: "data"
        type: "LNSData;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "dict"
        type: "*LNSDictionary;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "superscriptRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "subscriptRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unscriptRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "applyFontTraits:range:"
      return_type: "V"
      parameter {
        name: "traitMask"
        type: "X(Enum.enum NSFontTraitMask)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAlignment:range:"
      return_type: "V"
      parameter {
        name: "alignment"
        type: "X(Enum.enum NSTextAlignment)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBaseWritingDirection:range:"
      return_type: "V"
      parameter {
        name: "writingDirection"
        type: "X(Enum.enum NSWritingDirection)"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fixAttributesInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fixFontAttributeInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fixParagraphStyleAttributeInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fixAttachmentAttributeInRange:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAttributedString.h"
}
category {
  name: "NSLayoutManager+NSTextViewSupport"
  method {
    function {
      name: "rulerMarkersForTextView:paragraphStyle:ruler:"
      return_type: "LNSArray;"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "style"
        type: "LNSParagraphStyle;"
      }
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:"
      return_type: "LNSView;"
      parameter {
        name: "view"
        type: "LNSTextView;"
      }
      parameter {
        name: "style"
        type: "LNSParagraphStyle;"
      }
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "isEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManagerOwnsFirstResponderInWindow:"
      return_type: "Z"
      parameter {
        name: "window"
        type: "LNSWindow;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "firstTextView"
      return_type: "LNSTextView;"
    }
    class_method: false
  }
  method {
    function {
      name: "textViewForBeginningOfSelection"
      return_type: "LNSTextView;"
    }
    class_method: false
  }
  method {
    function {
      name: "drawBackgroundForGlyphRange:atPoint:"
      return_type: "V"
      parameter {
        name: "glyphsToShow"
        type: "R_NSRange;"
      }
      parameter {
        name: "origin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawGlyphsForGlyphRange:atPoint:"
      return_type: "V"
      parameter {
        name: "glyphsToShow"
        type: "R_NSRange;"
      }
      parameter {
        name: "origin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showCGGlyphs:positions:count:font:matrix:attributes:inContext:"
      return_type: "V"
      parameter {
        name: "glyphs"
        type: "*cUS;"
      }
      parameter {
        name: "positions"
        type: "*cRCGPoint;;"
      }
      parameter {
        name: "glyphCount"
        type: "UI"
      }
      parameter {
        name: "font"
        type: "LNSFont;"
      }
      parameter {
        name: "textMatrix"
        type: "LNSAffineTransform;"
      }
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
      parameter {
        name: "graphicsContext"
        type: "LNSGraphicsContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:"
      return_type: "V"
      parameter {
        name: "glyphs"
        type: "*C;"
      }
      parameter {
        name: "glyphLen"
        type: "UI"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "font"
        type: "LNSFont;"
      }
      parameter {
        name: "color"
        type: "LNSColor;"
      }
      parameter {
        name: "printingAdjustment"
        type: "RCGSize;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showAttachmentCell:inRect:characterIndex:"
      return_type: "V"
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "attachmentIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fillBackgroundRectArray:count:forCharacterRange:color:"
      return_type: "V"
      parameter {
        name: "rectArray"
        type: "*RCGRect;;"
      }
      parameter {
        name: "rectCount"
        type: "UI"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "color"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "underlineVal"
        type: "I"
      }
      parameter {
        name: "baselineOffset"
        type: "D"
      }
      parameter {
        name: "lineRect"
        type: "RCGRect;"
      }
      parameter {
        name: "lineGlyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "containerOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "underlineVal"
        type: "I"
      }
      parameter {
        name: "lineRect"
        type: "RCGRect;"
      }
      parameter {
        name: "lineGlyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "containerOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "strikethroughVal"
        type: "I"
      }
      parameter {
        name: "baselineOffset"
        type: "D"
      }
      parameter {
        name: "lineRect"
        type: "RCGRect;"
      }
      parameter {
        name: "lineGlyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "containerOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "strikethroughVal"
        type: "I"
      }
      parameter {
        name: "lineRect"
        type: "RCGRect;"
      }
      parameter {
        name: "lineGlyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "containerOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  property {
    name: "firstTextView"
    type: "LNSTextView;"
  }
  property {
    name: "textViewForBeginningOfSelection"
    type: "LNSTextView;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSLayoutManager.h"
}
category {
  name: "NSResponder+NSUserActivity"
  method {
    function {
      name: "userActivity"
      return_type: "LNSUserActivity;"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserActivity:"
      return_type: "V"
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateUserActivityState:"
      return_type: "V"
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "restoreUserActivityState:"
      return_type: "V"
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  property {
    name: "userActivity"
    type: "LNSUserActivity;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSUserActivity.h"
}
category {
  name: "NSDocument+NSUserActivity"
  method {
    function {
      name: "userActivity"
      return_type: "LNSUserActivity;"
    }
    class_method: false
  }
  method {
    function {
      name: "setUserActivity:"
      return_type: "V"
      parameter {
        name: "userActivity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateUserActivityState:"
      return_type: "V"
      parameter {
        name: "activity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "restoreUserActivityState:"
      return_type: "V"
      parameter {
        name: "activity"
        type: "LNSUserActivity;"
      }
    }
    class_method: false
  }
  property {
    name: "userActivity"
    type: "LNSUserActivity;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSUserActivity.h"
}
category {
  name: "NSWindowController+NSWindowControllerStoryboardingMethods"
  method {
    function {
      name: "storyboard"
      return_type: "LNSStoryboard;"
    }
    class_method: false
  }
  property {
    name: "storyboard"
    type: "LNSStoryboard;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowController.h"
}
category {
  name: "NSWindowController+NSWindowControllerDismissing"
  method {
    function {
      name: "dismissController:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowController.h"
}
category {
  name: "NSAttributedString+NSAttributedStringAttachmentConveniences"
  method {
    function {
      name: "attributedStringWithAttachment:"
      return_type: "LNSAttributedString;"
      parameter {
        name: "attachment"
        type: "LNSTextAttachment;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextAttachment.h"
}
category {
  name: "NSMutableAttributedString+NSMutableAttributedStringAttachmentConveniences"
  method {
    function {
      name: "updateAttachmentsFromPath:"
      return_type: "V"
      parameter {
        name: "path"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextAttachment.h"
}
category {
  name: "NSTextView+NSCompletion"
  method {
    function {
      name: "complete:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangeForUserCompletion"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "completionsForPartialWordRange:indexOfSelectedItem:"
      return_type: "LNSArray;"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "index"
        type: "*I;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertCompletion:forPartialWordRange:movement:isFinal:"
      return_type: "V"
      parameter {
        name: "word"
        type: "LNSString;"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "movement"
        type: "I"
      }
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "rangeForUserCompletion"
    type: "R_NSRange;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
category {
  name: "NSTextView+NSPasteboard"
  method {
    function {
      name: "writablePasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "writeSelectionToPasteboard:type:"
      return_type: "Z"
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "writeSelectionToPasteboard:types:"
      return_type: "Z"
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "types"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readablePasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "preferredPasteboardTypeFromArray:restrictedToTypesFromArray:"
      return_type: "LNSString;"
      parameter {
        name: "availableTypes"
        type: "LNSArray;"
      }
      parameter {
        name: "allowedTypes"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readSelectionFromPasteboard:type:"
      return_type: "Z"
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "readSelectionFromPasteboard:"
      return_type: "Z"
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "registerForServices"
      return_type: "V"
    }
    class_method: true
  }
  method {
    function {
      name: "validRequestorForSendType:returnType:"
      return_type: "OI"
      parameter {
        name: "sendType"
        type: "LNSString;"
      }
      parameter {
        name: "returnType"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pasteAsPlainText:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pasteAsRichText:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  property {
    name: "writablePasteboardTypes"
    type: "LNSArray;"
  }
  property {
    name: "readablePasteboardTypes"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
category {
  name: "NSTextView+NSDragging"
  method {
    function {
      name: "dragSelectionWithEvent:offset:slideBack:"
      return_type: "Z"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "mouseOffset"
        type: "RCGSize;"
      }
      parameter {
        name: "slideBack"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dragImageForSelectionWithEvent:origin:"
      return_type: "LNSImage;"
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
      parameter {
        name: "origin"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptableDragTypes"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "dragOperationForDraggingInfo:type:"
      return_type: "X(Enum.enum NSDragOperation)"
      parameter {
        name: "dragInfo"
        type: "X(Unexposed.id<NSDraggingInfo>)"
      }
      parameter {
        name: "type"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "cleanUpAfterDragOperation"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "acceptableDragTypes"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
category {
  name: "NSTextView+NSSharing"
  method {
    function {
      name: "selectedRanges"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedRanges:"
      return_type: "V"
      parameter {
        name: "selectedRanges"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedRanges:affinity:stillSelecting:"
      return_type: "V"
      parameter {
        name: "ranges"
        type: "LNSArray;"
      }
      parameter {
        name: "affinity"
        type: "X(Enum.enum NSSelectionAffinity)"
      }
      parameter {
        name: "stillSelectingFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedRange:affinity:stillSelecting:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "affinity"
        type: "X(Enum.enum NSSelectionAffinity)"
      }
      parameter {
        name: "stillSelectingFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectionAffinity"
      return_type: "X(Enum.enum NSSelectionAffinity)"
    }
    class_method: false
  }
  method {
    function {
      name: "selectionGranularity"
      return_type: "X(Enum.enum NSSelectionGranularity)"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectionGranularity:"
      return_type: "V"
      parameter {
        name: "selectionGranularity"
        type: "X(Enum.enum NSSelectionGranularity)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedTextAttributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedTextAttributes:"
      return_type: "V"
      parameter {
        name: "selectedTextAttributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertionPointColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setInsertionPointColor:"
      return_type: "V"
      parameter {
        name: "insertionPointColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateInsertionPointStateAndRestartTimer:"
      return_type: "V"
      parameter {
        name: "restartFlag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "markedTextAttributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setMarkedTextAttributes:"
      return_type: "V"
      parameter {
        name: "markedTextAttributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "linkTextAttributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLinkTextAttributes:"
      return_type: "V"
      parameter {
        name: "linkTextAttributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "displaysLinkToolTips"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDisplaysLinkToolTips:"
      return_type: "V"
      parameter {
        name: "displaysLinkToolTips"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "acceptsGlyphInfo"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAcceptsGlyphInfo:"
      return_type: "V"
      parameter {
        name: "acceptsGlyphInfo"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesRuler"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesRuler:"
      return_type: "V"
      parameter {
        name: "usesRuler"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesInspectorBar"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesInspectorBar:"
      return_type: "V"
      parameter {
        name: "usesInspectorBar"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isContinuousSpellCheckingEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setContinuousSpellCheckingEnabled:"
      return_type: "V"
      parameter {
        name: "continuousSpellCheckingEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleContinuousSpellChecking:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "spellCheckerDocumentTag"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "isGrammarCheckingEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setGrammarCheckingEnabled:"
      return_type: "V"
      parameter {
        name: "grammarCheckingEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleGrammarChecking:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSpellingState:range:"
      return_type: "V"
      parameter {
        name: "value"
        type: "I"
      }
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "typingAttributes"
      return_type: "LNSDictionary;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTypingAttributes:"
      return_type: "V"
      parameter {
        name: "typingAttributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldChangeTextInRanges:replacementStrings:"
      return_type: "Z"
      parameter {
        name: "affectedRanges"
        type: "LNSArray;"
      }
      parameter {
        name: "replacementStrings"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rangesForUserTextChange"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "rangesForUserCharacterAttributeChange"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "rangesForUserParagraphAttributeChange"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "shouldChangeTextInRange:replacementString:"
      return_type: "Z"
      parameter {
        name: "affectedCharRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "replacementString"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "didChangeText"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "rangeForUserTextChange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "rangeForUserCharacterAttributeChange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "rangeForUserParagraphAttributeChange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsDocumentBackgroundColorChange"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsDocumentBackgroundColorChange:"
      return_type: "V"
      parameter {
        name: "allowsDocumentBackgroundColorChange"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultParagraphStyle"
      return_type: "LNSParagraphStyle;"
    }
    class_method: false
  }
  method {
    function {
      name: "setDefaultParagraphStyle:"
      return_type: "V"
      parameter {
        name: "defaultParagraphStyle"
        type: "LNSParagraphStyle;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowsUndo"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsUndo:"
      return_type: "V"
      parameter {
        name: "allowsUndo"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "breakUndoCoalescing"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "isCoalescingUndo"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "allowsImageEditing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowsImageEditing:"
      return_type: "V"
      parameter {
        name: "allowsImageEditing"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "showFindIndicatorForRange:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesRolloverButtonForSelection"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesRolloverButtonForSelection:"
      return_type: "V"
      parameter {
        name: "usesRolloverButtonForSelection"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "delegate"
      return_type: "X(Unexposed.id<NSTextViewDelegate>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setDelegate:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "X(Unexposed.id<NSTextViewDelegate>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEditable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEditable:"
      return_type: "V"
      parameter {
        name: "editable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isSelectable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectable:"
      return_type: "V"
      parameter {
        name: "selectable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isRichText"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRichText:"
      return_type: "V"
      parameter {
        name: "richText"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "importsGraphics"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setImportsGraphics:"
      return_type: "V"
      parameter {
        name: "importsGraphics"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsBackground"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsBackground:"
      return_type: "V"
      parameter {
        name: "drawsBackground"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "backgroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setBackgroundColor:"
      return_type: "V"
      parameter {
        name: "backgroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isFieldEditor"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setFieldEditor:"
      return_type: "V"
      parameter {
        name: "fieldEditor"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesFontPanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesFontPanel:"
      return_type: "V"
      parameter {
        name: "usesFontPanel"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isRulerVisible"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRulerVisible:"
      return_type: "V"
      parameter {
        name: "rulerVisible"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setSelectedRange:"
      return_type: "V"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "allowedInputSourceLocales"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAllowedInputSourceLocales:"
      return_type: "V"
      parameter {
        name: "allowedInputSourceLocales"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  property {
    name: "selectedRanges"
    type: "LNSArray;"
  }
  property {
    name: "selectionAffinity"
    type: "X(Enum.enum NSSelectionAffinity)"
  }
  property {
    name: "selectionGranularity"
    type: "X(Enum.enum NSSelectionGranularity)"
  }
  property {
    name: "selectedTextAttributes"
    type: "LNSDictionary;"
  }
  property {
    name: "insertionPointColor"
    type: "LNSColor;"
  }
  property {
    name: "markedTextAttributes"
    type: "LNSDictionary;"
  }
  property {
    name: "linkTextAttributes"
    type: "LNSDictionary;"
  }
  property {
    name: "displaysLinkToolTips"
    type: "Z"
  }
  property {
    name: "acceptsGlyphInfo"
    type: "Z"
  }
  property {
    name: "usesRuler"
    type: "Z"
  }
  property {
    name: "usesInspectorBar"
    type: "Z"
  }
  property {
    name: "continuousSpellCheckingEnabled"
    type: "Z"
  }
  property {
    name: "spellCheckerDocumentTag"
    type: "I"
  }
  property {
    name: "grammarCheckingEnabled"
    type: "Z"
  }
  property {
    name: "typingAttributes"
    type: "LNSDictionary;"
  }
  property {
    name: "rangesForUserTextChange"
    type: "LNSArray;"
  }
  property {
    name: "rangesForUserCharacterAttributeChange"
    type: "LNSArray;"
  }
  property {
    name: "rangesForUserParagraphAttributeChange"
    type: "LNSArray;"
  }
  property {
    name: "rangeForUserTextChange"
    type: "R_NSRange;"
  }
  property {
    name: "rangeForUserCharacterAttributeChange"
    type: "R_NSRange;"
  }
  property {
    name: "rangeForUserParagraphAttributeChange"
    type: "R_NSRange;"
  }
  property {
    name: "allowsDocumentBackgroundColorChange"
    type: "Z"
  }
  property {
    name: "defaultParagraphStyle"
    type: "LNSParagraphStyle;"
  }
  property {
    name: "allowsUndo"
    type: "Z"
  }
  property {
    name: "coalescingUndo"
    type: "Z"
  }
  property {
    name: "allowsImageEditing"
    type: "Z"
  }
  property {
    name: "usesRolloverButtonForSelection"
    type: "Z"
  }
  property {
    name: "delegate"
    type: "X(Unexposed.id<NSTextViewDelegate>)"
  }
  property {
    name: "editable"
    type: "Z"
  }
  property {
    name: "selectable"
    type: "Z"
  }
  property {
    name: "richText"
    type: "Z"
  }
  property {
    name: "importsGraphics"
    type: "Z"
  }
  property {
    name: "drawsBackground"
    type: "Z"
  }
  property {
    name: "backgroundColor"
    type: "LNSColor;"
  }
  property {
    name: "fieldEditor"
    type: "Z"
  }
  property {
    name: "usesFontPanel"
    type: "Z"
  }
  property {
    name: "rulerVisible"
    type: "Z"
  }
  property {
    name: "allowedInputSourceLocales"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
category {
  name: "NSTextView+NSTextChecking"
  method {
    function {
      name: "smartInsertDeleteEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setSmartInsertDeleteEnabled:"
      return_type: "V"
      parameter {
        name: "smartInsertDeleteEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "smartDeleteRangeForProposedRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "proposedCharRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleSmartInsertDelete:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "smartInsertForString:replacingRange:beforeString:afterString:"
      return_type: "V"
      parameter {
        name: "pasteString"
        type: "LNSString;"
      }
      parameter {
        name: "charRangeToReplace"
        type: "R_NSRange;"
      }
      parameter {
        name: "beforeString"
        type: "*LNSString;;"
      }
      parameter {
        name: "afterString"
        type: "*LNSString;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "smartInsertBeforeStringForString:replacingRange:"
      return_type: "LNSString;"
      parameter {
        name: "pasteString"
        type: "LNSString;"
      }
      parameter {
        name: "charRangeToReplace"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "smartInsertAfterStringForString:replacingRange:"
      return_type: "LNSString;"
      parameter {
        name: "pasteString"
        type: "LNSString;"
      }
      parameter {
        name: "charRangeToReplace"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAutomaticQuoteSubstitutionEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticQuoteSubstitutionEnabled:"
      return_type: "V"
      parameter {
        name: "automaticQuoteSubstitutionEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleAutomaticQuoteSubstitution:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAutomaticLinkDetectionEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticLinkDetectionEnabled:"
      return_type: "V"
      parameter {
        name: "automaticLinkDetectionEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleAutomaticLinkDetection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAutomaticDataDetectionEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticDataDetectionEnabled:"
      return_type: "V"
      parameter {
        name: "automaticDataDetectionEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleAutomaticDataDetection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAutomaticDashSubstitutionEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticDashSubstitutionEnabled:"
      return_type: "V"
      parameter {
        name: "automaticDashSubstitutionEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleAutomaticDashSubstitution:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAutomaticTextReplacementEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticTextReplacementEnabled:"
      return_type: "V"
      parameter {
        name: "automaticTextReplacementEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleAutomaticTextReplacement:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isAutomaticSpellingCorrectionEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setAutomaticSpellingCorrectionEnabled:"
      return_type: "V"
      parameter {
        name: "automaticSpellingCorrectionEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toggleAutomaticSpellingCorrection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "enabledTextCheckingTypes"
      return_type: "UJ"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabledTextCheckingTypes:"
      return_type: "V"
      parameter {
        name: "enabledTextCheckingTypes"
        type: "UJ"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkTextInRange:types:options:"
      return_type: "V"
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "checkingTypes"
        type: "UJ"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handleTextCheckingResults:forRange:types:options:orthography:wordCount:"
      return_type: "V"
      parameter {
        name: "results"
        type: "LNSArray;"
      }
      parameter {
        name: "range"
        type: "R_NSRange;"
      }
      parameter {
        name: "checkingTypes"
        type: "UJ"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
      parameter {
        name: "orthography"
        type: "LNSOrthography;"
      }
      parameter {
        name: "wordCount"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "orderFrontSubstitutionsPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkTextInSelection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "checkTextInDocument:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesFindPanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesFindPanel:"
      return_type: "V"
      parameter {
        name: "usesFindPanel"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesFindBar"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesFindBar:"
      return_type: "V"
      parameter {
        name: "usesFindBar"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isIncrementalSearchingEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setIncrementalSearchingEnabled:"
      return_type: "V"
      parameter {
        name: "incrementalSearchingEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "smartInsertDeleteEnabled"
    type: "Z"
  }
  property {
    name: "automaticQuoteSubstitutionEnabled"
    type: "Z"
  }
  property {
    name: "automaticLinkDetectionEnabled"
    type: "Z"
  }
  property {
    name: "automaticDataDetectionEnabled"
    type: "Z"
  }
  property {
    name: "automaticDashSubstitutionEnabled"
    type: "Z"
  }
  property {
    name: "automaticTextReplacementEnabled"
    type: "Z"
  }
  property {
    name: "automaticSpellingCorrectionEnabled"
    type: "Z"
  }
  property {
    name: "enabledTextCheckingTypes"
    type: "UJ"
  }
  property {
    name: "usesFindPanel"
    type: "Z"
  }
  property {
    name: "usesFindBar"
    type: "Z"
  }
  property {
    name: "incrementalSearchingEnabled"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
category {
  name: "NSTextView+NSQuickLookPreview"
  method {
    function {
      name: "toggleQuickLookPreviewPanel:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "quickLookPreviewableItemsInRanges:"
      return_type: "LNSArray;"
      parameter {
        name: "ranges"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "updateQuickLookPreviewPanel"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
category {
  name: "NSTextView+NSTextView_SharingService"
  method {
    function {
      name: "orderFrontSharingServicePicker:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
category {
  name: "NSTextView+NSDeprecated"
  method {
    function {
      name: "toggleBaseWritingDirection:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextView.h"
}
category {
  name: "NSObject+NSTableViewDataSourceDeprecated"
  method {
    function {
      name: "tableView:writeRows:toPasteboard:"
      return_type: "Z"
      parameter {
        name: "tableView"
        type: "LNSTableView;"
      }
      parameter {
        name: "rows"
        type: "LNSArray;"
      }
      parameter {
        name: "pboard"
        type: "LNSPasteboard;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableView.h"
}
category {
  name: "NSTableView+NSDeprecated"
  method {
    function {
      name: "setDrawsGrid:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawsGrid"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "selectColumn:byExtendingSelection:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "extend"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectRow:byExtendingSelection:"
      return_type: "V"
      parameter {
        name: "row"
        type: "I"
      }
      parameter {
        name: "extend"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "selectedColumnEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "selectedRowEnumerator"
      return_type: "LNSEnumerator;"
    }
    class_method: false
  }
  method {
    function {
      name: "dragImageForRows:event:dragImageOffset:"
      return_type: "LNSImage;"
      parameter {
        name: "dragRows"
        type: "LNSArray;"
      }
      parameter {
        name: "dragEvent"
        type: "LNSEvent;"
      }
      parameter {
        name: "dragImageOffset"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAutoresizesAllColumnsToFit:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "autoresizesAllColumnsToFit"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "columnsInRect:"
      return_type: "R_NSRange;"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "preparedCellAtColumn:row:"
      return_type: "LNSCell;"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textShouldBeginEditing:"
      return_type: "Z"
      parameter {
        name: "textObject"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textShouldEndEditing:"
      return_type: "Z"
      parameter {
        name: "textObject"
        type: "LNSText;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidBeginEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidEndEditing:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textDidChange:"
      return_type: "V"
      parameter {
        name: "notification"
        type: "LNSNotification;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldFocusCell:atColumn:row:"
      return_type: "Z"
      parameter {
        name: "cell"
        type: "LNSCell;"
      }
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "focusedColumn"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setFocusedColumn:"
      return_type: "V"
      parameter {
        name: "focusedColumn"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "performClickOnCellAtColumn:row:"
      return_type: "V"
      parameter {
        name: "column"
        type: "I"
      }
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableView.h"
}
category {
  name: "NSTableColumn+NSDeprecated"
  method {
    function {
      name: "setResizable:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isResizable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "dataCell"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setDataCell:"
      return_type: "V"
      parameter {
        name: "dataCell"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "dataCellForRow:"
      return_type: "OI"
      parameter {
        name: "row"
        type: "I"
      }
    }
    class_method: false
  }
  property {
    name: "dataCell"
    type: "OI"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTableColumn.h"
}
category {
  name: "NSString+NSStringDrawing"
  method {
    function {
      name: "sizeWithAttributes:"
      return_type: "RCGSize;"
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawAtPoint:withAttributes:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:withAttributes:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "attrs"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStringDrawing.h"
}
category {
  name: "NSAttributedString+NSStringDrawing"
  method {
    function {
      name: "size"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  method {
    function {
      name: "drawAtPoint:"
      return_type: "V"
      parameter {
        name: "point"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawInRect:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  property {
    name: "size"
    type: "RCGSize;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStringDrawing.h"
}
category {
  name: "NSString+NSExtendedStringDrawing"
  method {
    function {
      name: "drawWithRect:options:attributes:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSStringDrawingOptions)"
      }
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundingRectWithSize:options:attributes:"
      return_type: "RCGRect;"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSStringDrawingOptions)"
      }
      parameter {
        name: "attributes"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStringDrawing.h"
}
category {
  name: "NSAttributedString+NSExtendedStringDrawing"
  method {
    function {
      name: "drawWithRect:options:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSStringDrawingOptions)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundingRectWithSize:options:"
      return_type: "RCGRect;"
      parameter {
        name: "size"
        type: "RCGSize;"
      }
      parameter {
        name: "options"
        type: "X(Enum.enum NSStringDrawingOptions)"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStringDrawing.h"
}
category {
  name: "NSView+NSRulerMarkerClientViewDelegation"
  method {
    function {
      name: "rulerView:shouldMoveMarker:"
      return_type: "Z"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:willMoveMarker:toLocation:"
      return_type: "D"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
      parameter {
        name: "location"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:didMoveMarker:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:shouldRemoveMarker:"
      return_type: "Z"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:didRemoveMarker:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:shouldAddMarker:"
      return_type: "Z"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:willAddMarker:atLocation:"
      return_type: "D"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
      parameter {
        name: "location"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:didAddMarker:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "marker"
        type: "LNSRulerMarker;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:handleMouseDown:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "event"
        type: "LNSEvent;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:willSetClientView:"
      return_type: "V"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "newClient"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:locationForPoint:"
      return_type: "D"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "aPoint"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "rulerView:pointForLocation:"
      return_type: "RCGPoint;"
      parameter {
        name: "ruler"
        type: "LNSRulerView;"
      }
      parameter {
        name: "aPoint"
        type: "D"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSRulerView.h"
}
category {
  name: "NSResponder+NSInterfaceStyle"
  method {
    function {
      name: "interfaceStyle"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "setInterfaceStyle:"
      return_type: "V"
      parameter {
        name: "interfaceStyle"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSInterfaceStyle.h"
}
category {
  name: "NSProgressIndicator+NSProgressIndicatorDeprecated"
  method {
    function {
      name: "animationDelay"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setAnimationDelay:"
      return_type: "V"
      parameter {
        name: "delay"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "animate:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSProgressIndicator.h"
}
category {
  name: "NSToolbar+NSDeprecated"
  method {
    function {
      name: "fullScreenAccessoryView"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFullScreenAccessoryView:"
      return_type: "V"
      parameter {
        name: "fullScreenAccessoryView"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fullScreenAccessoryViewMinHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setFullScreenAccessoryViewMinHeight:"
      return_type: "V"
      parameter {
        name: "fullScreenAccessoryViewMinHeight"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fullScreenAccessoryViewMaxHeight"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setFullScreenAccessoryViewMaxHeight:"
      return_type: "V"
      parameter {
        name: "fullScreenAccessoryViewMaxHeight"
        type: "D"
      }
    }
    class_method: false
  }
  property {
    name: "fullScreenAccessoryView"
    type: "LNSView;"
  }
  property {
    name: "fullScreenAccessoryViewMinHeight"
    type: "D"
  }
  property {
    name: "fullScreenAccessoryViewMaxHeight"
    type: "D"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSToolbar.h"
}
category {
  name: "NSAffineTransform+NSAppKitAdditons"
  method {
    function {
      name: "transformBezierPath:"
      return_type: "LNSBezierPath;"
      parameter {
        name: "aPath"
        type: "LNSBezierPath;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "set"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "concat"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSAffineTransform.h"
}
category {
  name: "NSBezierPath+NSBezierPathDeprecated"
  method {
    function {
      name: "cachesBezierPath"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setCachesBezierPath:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSBezierPath.h"
}
category {
  name: "NSStatusItem+NSStatusItemDeprecated"
  method {
    function {
      name: "action"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setAction:"
      return_type: "V"
      parameter {
        name: "action"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "doubleAction"
      return_type: "OS"
    }
    class_method: false
  }
  method {
    function {
      name: "setDoubleAction:"
      return_type: "V"
      parameter {
        name: "doubleAction"
        type: "OS"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "target"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "setTarget:"
      return_type: "V"
      parameter {
        name: "target"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "title"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setTitle:"
      return_type: "V"
      parameter {
        name: "title"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedTitle"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedTitle:"
      return_type: "V"
      parameter {
        name: "attributedTitle"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "image"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setImage:"
      return_type: "V"
      parameter {
        name: "image"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "alternateImage"
      return_type: "LNSImage;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAlternateImage:"
      return_type: "V"
      parameter {
        name: "alternateImage"
        type: "LNSImage;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "isEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setEnabled:"
      return_type: "V"
      parameter {
        name: "enabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "highlightMode"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setHighlightMode:"
      return_type: "V"
      parameter {
        name: "highlightMode"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "toolTip"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setToolTip:"
      return_type: "V"
      parameter {
        name: "toolTip"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "sendActionOn:"
      return_type: "I"
      parameter {
        name: "mask"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "view"
      return_type: "LNSView;"
    }
    class_method: false
  }
  method {
    function {
      name: "setView:"
      return_type: "V"
      parameter {
        name: "view"
        type: "LNSView;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawStatusBarBackgroundInRect:withHighlight:"
      return_type: "V"
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
      parameter {
        name: "highlight"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "popUpStatusItemMenu:"
      return_type: "V"
      parameter {
        name: "menu"
        type: "LNSMenu;"
      }
    }
    class_method: false
  }
  property {
    name: "action"
    type: "OS"
  }
  property {
    name: "doubleAction"
    type: "OS"
  }
  property {
    name: "target"
    type: "OI"
  }
  property {
    name: "title"
    type: "LNSString;"
  }
  property {
    name: "attributedTitle"
    type: "LNSAttributedString;"
  }
  property {
    name: "image"
    type: "LNSImage;"
  }
  property {
    name: "alternateImage"
    type: "LNSImage;"
  }
  property {
    name: "enabled"
    type: "Z"
  }
  property {
    name: "highlightMode"
    type: "Z"
  }
  property {
    name: "toolTip"
    type: "LNSString;"
  }
  property {
    name: "view"
    type: "LNSView;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSStatusItem.h"
}
category {
  name: "NSSound+NSDeprecated"
  method {
    function {
      name: "soundUnfilteredFileTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  method {
    function {
      name: "soundUnfilteredPasteboardTypes"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSound.h"
}
category {
  name: "NSBundle+NSBundleSoundExtensions"
  method {
    function {
      name: "pathForSoundResource:"
      return_type: "LNSString;"
      parameter {
        name: "name"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSSound.h"
}
category {
  name: "NSWindow+Drawers"
  method {
    function {
      name: "drawers"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "drawers"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDrawer.h"
}
category {
  name: "NSOpenGLContext+NSOpenGLPixelBufer"
  method {
    function {
      name: "setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:"
      return_type: "V"
      parameter {
        name: "pixelBuffer"
        type: "LNSOpenGLPixelBuffer;"
      }
      parameter {
        name: "face"
        type: "UI"
      }
      parameter {
        name: "level"
        type: "I"
      }
      parameter {
        name: "screen"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "pixelBuffer"
      return_type: "LNSOpenGLPixelBuffer;"
    }
    class_method: false
  }
  method {
    function {
      name: "pixelBufferCubeMapFace"
      return_type: "UI"
    }
    class_method: false
  }
  method {
    function {
      name: "pixelBufferMipMapLevel"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setTextureImageToPixelBuffer:colorBuffer:"
      return_type: "V"
      parameter {
        name: "pixelBuffer"
        type: "LNSOpenGLPixelBuffer;"
      }
      parameter {
        name: "source"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenGL.h"
}
category {
  name: "NSValue+CATransform3DAdditions"
  method {
    function {
      name: "valueWithCATransform3D:"
      return_type: "LNSValue;"
      parameter {
        name: "t"
        type: "RCATransform3D;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "CATransform3DValue"
      return_type: "RCATransform3D;"
    }
    class_method: false
  }
  property {
    name: "CATransform3DValue"
    type: "RCATransform3D;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/CATransform3D.h"
}
category {
  name: "NSObject+CALayoutManager"
  method {
    function {
      name: "preferredSizeOfLayer:"
      return_type: "RCGSize;"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateLayoutOfLayer:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutSublayersOfLayer:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/CALayer.h"
}
category {
  name: "NSObject+CALayerDelegate"
  method {
    function {
      name: "displayLayer:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "drawLayer:inContext:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
      parameter {
        name: "ctx"
        type: "*RCGContext;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutSublayersOfLayer:"
      return_type: "V"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "actionForLayer:forKey:"
      return_type: "X(Unexposed.id<CAAction>)"
      parameter {
        name: "layer"
        type: "LCALayer;"
      }
      parameter {
        name: "event"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/QuartzCore.framework/Headers/CALayer.h"
}
category {
  name: "NSView+NSOpenGLSurfaceResolution"
  method {
    function {
      name: "wantsBestResolutionOpenGLSurface"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setWantsBestResolutionOpenGLSurface:"
      return_type: "V"
      parameter {
        name: "wantsBestResolutionOpenGLSurface"
        type: "Z"
      }
    }
    class_method: false
  }
  property {
    name: "wantsBestResolutionOpenGLSurface"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSOpenGLView.h"
}
category {
  name: "NSApplication+NSScripting"
  method {
    function {
      name: "orderedDocuments"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "orderedWindows"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  property {
    name: "orderedDocuments"
    type: "LNSArray;"
  }
  property {
    name: "orderedWindows"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplicationScripting.h"
}
category {
  name: "NSObject+NSApplicationScriptingDelegation"
  method {
    function {
      name: "application:delegateHandlesKey:"
      return_type: "Z"
      parameter {
        name: "sender"
        type: "LNSApplication;"
      }
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSApplicationScripting.h"
}
category {
  name: "NSDocument+NSScripting"
  method {
    function {
      name: "lastComponentOfFileName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setLastComponentOfFileName:"
      return_type: "V"
      parameter {
        name: "lastComponentOfFileName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handleSaveScriptCommand:"
      return_type: "OI"
      parameter {
        name: "command"
        type: "LNSScriptCommand;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handleCloseScriptCommand:"
      return_type: "OI"
      parameter {
        name: "command"
        type: "LNSCloseCommand;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handlePrintScriptCommand:"
      return_type: "OI"
      parameter {
        name: "command"
        type: "LNSScriptCommand;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectSpecifier"
      return_type: "LNSScriptObjectSpecifier;"
    }
    class_method: false
  }
  property {
    name: "lastComponentOfFileName"
    type: "LNSString;"
  }
  property {
    name: "objectSpecifier"
    type: "LNSScriptObjectSpecifier;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDocumentScripting.h"
}
category {
  name: "NSTextStorage+Scripting"
  method {
    function {
      name: "attributeRuns"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributeRuns:"
      return_type: "V"
      parameter {
        name: "attributeRuns"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphs"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setParagraphs:"
      return_type: "V"
      parameter {
        name: "paragraphs"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "words"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setWords:"
      return_type: "V"
      parameter {
        name: "words"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "characters"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setCharacters:"
      return_type: "V"
      parameter {
        name: "characters"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "font"
      return_type: "LNSFont;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFont:"
      return_type: "V"
      parameter {
        name: "font"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "foregroundColor"
      return_type: "LNSColor;"
    }
    class_method: false
  }
  method {
    function {
      name: "setForegroundColor:"
      return_type: "V"
      parameter {
        name: "foregroundColor"
        type: "LNSColor;"
      }
    }
    class_method: false
  }
  property {
    name: "attributeRuns"
    type: "LNSArray;"
  }
  property {
    name: "paragraphs"
    type: "LNSArray;"
  }
  property {
    name: "words"
    type: "LNSArray;"
  }
  property {
    name: "characters"
    type: "LNSArray;"
  }
  property {
    name: "font"
    type: "LNSFont;"
  }
  property {
    name: "foregroundColor"
    type: "LNSColor;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTextStorageScripting.h"
}
category {
  name: "NSObject+NSToolbarItemValidation"
  method {
    function {
      name: "validateToolbarItem:"
      return_type: "Z"
      parameter {
        name: "theItem"
        type: "LNSToolbarItem;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSToolbarItem.h"
}
category {
  name: "NSWindow+NSScripting"
  method {
    function {
      name: "hasCloseBox"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "hasTitleBar"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isFloatingPanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isMiniaturizable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isModalPanel"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isResizable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "isZoomable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "orderedIndex"
      return_type: "I"
    }
    class_method: false
  }
  method {
    function {
      name: "setOrderedIndex:"
      return_type: "V"
      parameter {
        name: "orderedIndex"
        type: "I"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setIsMiniaturized:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setIsVisible:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setIsZoomed:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handleCloseScriptCommand:"
      return_type: "OI"
      parameter {
        name: "command"
        type: "LNSCloseCommand;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handlePrintScriptCommand:"
      return_type: "OI"
      parameter {
        name: "command"
        type: "LNSScriptCommand;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "handleSaveScriptCommand:"
      return_type: "OI"
      parameter {
        name: "command"
        type: "LNSScriptCommand;"
      }
    }
    class_method: false
  }
  property {
    name: "hasCloseBox"
    type: "Z"
  }
  property {
    name: "hasTitleBar"
    type: "Z"
  }
  property {
    name: "floatingPanel"
    type: "Z"
  }
  property {
    name: "miniaturizable"
    type: "Z"
  }
  property {
    name: "modalPanel"
    type: "Z"
  }
  property {
    name: "resizable"
    type: "Z"
  }
  property {
    name: "zoomable"
    type: "Z"
  }
  property {
    name: "orderedIndex"
    type: "I"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowScripting.h"
}
category {
  name: "NSTypesetter+NSLayoutPhaseInterface"
  method {
    function {
      name: "willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:"
      return_type: "V"
      parameter {
        name: "lineRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "usedRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "baselineOffset"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldBreakLineByWordBeforeCharacterAtIndex:"
      return_type: "Z"
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldBreakLineByHyphenatingBeforeCharacterAtIndex:"
      return_type: "Z"
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenationFactorForGlyphAtIndex:"
      return_type: "F"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenCharacterForGlyphAtIndex:"
      return_type: "UI"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "proposedRect"
        type: "RCGRect;"
      }
      parameter {
        name: "glyphPosition"
        type: "RCGPoint;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTypesetter.h"
}
category {
  name: "NSTypesetter+NSGlyphStorageInterface"
  method {
    function {
      name: "characterRangeForGlyphRange:actualGlyphRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualGlyphRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphRangeForCharacterRange:actualCharacterRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualCharRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:"
      return_type: "UI"
      parameter {
        name: "glyphsRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "glyphBuffer"
        type: "*UI;"
      }
      parameter {
        name: "charIndexBuffer"
        type: "*UI;"
      }
      parameter {
        name: "inscribeBuffer"
        type: "*X(Enum.enum NSGlyphInscription);"
      }
      parameter {
        name: "elasticBuffer"
        type: "*Z;"
      }
      parameter {
        name: "bidiLevelBuffer"
        type: "*UB;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:"
      return_type: "V"
      parameter {
        name: "lineFragmentRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "lineFragmentUsedRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "remainingRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "startingGlyphIndex"
        type: "UI"
      }
      parameter {
        name: "proposedRect"
        type: "RCGRect;"
      }
      parameter {
        name: "lineSpacing"
        type: "D"
      }
      parameter {
        name: "paragraphSpacingBefore"
        type: "D"
      }
      parameter {
        name: "paragraphSpacingAfter"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:"
      return_type: "V"
      parameter {
        name: "fragmentRect"
        type: "RCGRect;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "usedRect"
        type: "RCGRect;"
      }
      parameter {
        name: "baselineOffset"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substituteGlyphsInRange:withGlyphs:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "glyphs"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertGlyph:atGlyphIndex:characterIndex:"
      return_type: "V"
      parameter {
        name: "glyph"
        type: "UI"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "characterIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteGlyphsInRange:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setNotShownAttribute:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsOutsideLineFragment:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLocation:withAdvancements:forStartOfGlyphRange:"
      return_type: "V"
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "advancements"
        type: "*cD;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAttachmentSize:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "attachmentSize"
        type: "RCGSize;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBidiLevels:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "levels"
        type: "*cUB;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSTypesetter.h"
}
category {
  name: "NSATSTypesetter+NSPantherCompatibility"
  method {
    function {
      name: "lineFragmentRectForProposedRect:remainingRect:"
      return_type: "RCGRect;"
      parameter {
        name: "proposedRect"
        type: "RCGRect;"
      }
      parameter {
        name: "remainingRect"
        type: "*RCGRect;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSATSTypesetter.h"
}
category {
  name: "NSATSTypesetter+NSPrimitiveInterface"
  method {
    function {
      name: "usesFontLeading"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesFontLeading:"
      return_type: "V"
      parameter {
        name: "usesFontLeading"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "typesetterBehavior"
      return_type: "X(Enum.enum NSTypesetterBehavior)"
    }
    class_method: false
  }
  method {
    function {
      name: "setTypesetterBehavior:"
      return_type: "V"
      parameter {
        name: "typesetterBehavior"
        type: "X(Enum.enum NSTypesetterBehavior)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenationFactor"
      return_type: "F"
    }
    class_method: false
  }
  method {
    function {
      name: "setHyphenationFactor:"
      return_type: "V"
      parameter {
        name: "hyphenationFactor"
        type: "F"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineFragmentPadding"
      return_type: "D"
    }
    class_method: false
  }
  method {
    function {
      name: "setLineFragmentPadding:"
      return_type: "V"
      parameter {
        name: "lineFragmentPadding"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substituteFontForFont:"
      return_type: "LNSFont;"
      parameter {
        name: "originalFont"
        type: "LNSFont;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "textTabForGlyphLocation:writingDirection:maxLocation:"
      return_type: "LNSTextTab;"
      parameter {
        name: "glyphLocation"
        type: "D"
      }
      parameter {
        name: "direction"
        type: "X(Enum.enum NSWritingDirection)"
      }
      parameter {
        name: "maxLocation"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bidiProcessingEnabled"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setBidiProcessingEnabled:"
      return_type: "V"
      parameter {
        name: "bidiProcessingEnabled"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "attributedString"
      return_type: "LNSAttributedString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setAttributedString:"
      return_type: "V"
      parameter {
        name: "attributedString"
        type: "LNSAttributedString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setParagraphGlyphRange:separatorGlyphRange:"
      return_type: "V"
      parameter {
        name: "paragraphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "paragraphSeparatorRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphGlyphRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSeparatorGlyphRange"
      return_type: "R_NSRange;"
    }
    class_method: false
  }
  method {
    function {
      name: "layoutParagraphAtPoint:"
      return_type: "UI"
      parameter {
        name: "lineFragmentOrigin"
        type: "*RCGPoint;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:"
      return_type: "D"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:"
      return_type: "D"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:"
      return_type: "D"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "rect"
        type: "RCGRect;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "layoutManager"
      return_type: "LNSLayoutManager;"
    }
    class_method: false
  }
  method {
    function {
      name: "currentTextContainer"
      return_type: "LNSTextContainer;"
    }
    class_method: false
  }
  method {
    function {
      name: "setHardInvalidation:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:"
      return_type: "V"
      parameter {
        name: "lineFragmentRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "lineFragmentUsedRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "paragraphSeparatorGlyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "lineOrigin"
        type: "RCGPoint;"
      }
    }
    class_method: false
  }
  property {
    name: "usesFontLeading"
    type: "Z"
  }
  property {
    name: "typesetterBehavior"
    type: "X(Enum.enum NSTypesetterBehavior)"
  }
  property {
    name: "hyphenationFactor"
    type: "F"
  }
  property {
    name: "lineFragmentPadding"
    type: "D"
  }
  property {
    name: "bidiProcessingEnabled"
    type: "Z"
  }
  property {
    name: "attributedString"
    type: "LNSAttributedString;"
  }
  property {
    name: "paragraphGlyphRange"
    type: "R_NSRange;"
  }
  property {
    name: "paragraphSeparatorGlyphRange"
    type: "R_NSRange;"
  }
  property {
    name: "layoutManager"
    type: "LNSLayoutManager;"
  }
  property {
    name: "currentTextContainer"
    type: "LNSTextContainer;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSATSTypesetter.h"
}
category {
  name: "NSATSTypesetter+NSLayoutPhaseInterface"
  method {
    function {
      name: "willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:"
      return_type: "V"
      parameter {
        name: "lineRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "usedRect"
        type: "*RCGRect;;"
      }
      parameter {
        name: "baselineOffset"
        type: "*D;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldBreakLineByWordBeforeCharacterAtIndex:"
      return_type: "Z"
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "shouldBreakLineByHyphenatingBeforeCharacterAtIndex:"
      return_type: "Z"
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenationFactorForGlyphAtIndex:"
      return_type: "F"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "hyphenCharacterForGlyphAtIndex:"
      return_type: "UI"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:"
      return_type: "RCGRect;"
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "textContainer"
        type: "LNSTextContainer;"
      }
      parameter {
        name: "proposedRect"
        type: "RCGRect;"
      }
      parameter {
        name: "glyphPosition"
        type: "RCGPoint;"
      }
      parameter {
        name: "charIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSATSTypesetter.h"
}
category {
  name: "NSATSTypesetter+NSGlyphStorageInterface"
  method {
    function {
      name: "characterRangeForGlyphRange:actualGlyphRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualGlyphRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "glyphRangeForCharacterRange:actualCharacterRange:"
      return_type: "R_NSRange;"
      parameter {
        name: "charRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "actualCharRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:"
      return_type: "UI"
      parameter {
        name: "glyphsRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "glyphBuffer"
        type: "*UI;"
      }
      parameter {
        name: "charIndexBuffer"
        type: "*UI;"
      }
      parameter {
        name: "inscribeBuffer"
        type: "*X(Enum.enum NSGlyphInscription);"
      }
      parameter {
        name: "elasticBuffer"
        type: "*Z;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:"
      return_type: "V"
      parameter {
        name: "fragmentRect"
        type: "RCGRect;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "usedRect"
        type: "RCGRect;"
      }
      parameter {
        name: "baselineOffset"
        type: "D"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "substituteGlyphsInRange:withGlyphs:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "glyphs"
        type: "*UI;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "insertGlyph:atGlyphIndex:characterIndex:"
      return_type: "V"
      parameter {
        name: "glyph"
        type: "UI"
      }
      parameter {
        name: "glyphIndex"
        type: "UI"
      }
      parameter {
        name: "characterIndex"
        type: "UI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "deleteGlyphsInRange:"
      return_type: "V"
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setNotShownAttribute:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setDrawsOutsideLineFragment:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "flag"
        type: "Z"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setLocation:withAdvancements:forStartOfGlyphRange:"
      return_type: "V"
      parameter {
        name: "location"
        type: "RCGPoint;"
      }
      parameter {
        name: "advancements"
        type: "*cD;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setAttachmentSize:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "attachmentSize"
        type: "RCGSize;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "setBidiLevels:forGlyphRange:"
      return_type: "V"
      parameter {
        name: "levels"
        type: "*cUB;"
      }
      parameter {
        name: "glyphRange"
        type: "R_NSRange;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSATSTypesetter.h"
}
category {
  name: "NSObject+NSKeyValueBindingCreation"
  method {
    function {
      name: "exposeBinding:"
      return_type: "V"
      parameter {
        name: "binding"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "exposedBindings"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "valueClassForBinding:"
      return_type: "OC"
      parameter {
        name: "binding"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "bind:toObject:withKeyPath:options:"
      return_type: "V"
      parameter {
        name: "binding"
        type: "LNSString;"
      }
      parameter {
        name: "observable"
        type: "OI"
      }
      parameter {
        name: "keyPath"
        type: "LNSString;"
      }
      parameter {
        name: "options"
        type: "LNSDictionary;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unbind:"
      return_type: "V"
      parameter {
        name: "binding"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "infoForBinding:"
      return_type: "LNSDictionary;"
      parameter {
        name: "binding"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "optionDescriptionsForBinding:"
      return_type: "LNSArray;"
      parameter {
        name: "aBinding"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  property {
    name: "exposedBindings"
    type: "LNSArray;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSKeyValueBinding.h"
}
category {
  name: "NSObject+NSPlaceholders"
  method {
    function {
      name: "setDefaultPlaceholder:forMarker:withBinding:"
      return_type: "V"
      parameter {
        name: "placeholder"
        type: "OI"
      }
      parameter {
        name: "marker"
        type: "OI"
      }
      parameter {
        name: "binding"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  method {
    function {
      name: "defaultPlaceholderForMarker:withBinding:"
      return_type: "OI"
      parameter {
        name: "marker"
        type: "OI"
      }
      parameter {
        name: "binding"
        type: "LNSString;"
      }
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSKeyValueBinding.h"
}
category {
  name: "NSObject+NSEditorRegistration"
  method {
    function {
      name: "objectDidBeginEditing:"
      return_type: "V"
      parameter {
        name: "editor"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "objectDidEndEditing:"
      return_type: "V"
      parameter {
        name: "editor"
        type: "OI"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSKeyValueBinding.h"
}
category {
  name: "NSObject+NSEditor"
  method {
    function {
      name: "discardEditing"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "commitEditing"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "commitEditingWithDelegate:didCommitSelector:contextInfo:"
      return_type: "V"
      parameter {
        name: "delegate"
        type: "OI"
      }
      parameter {
        name: "didCommitSelector"
        type: "OS"
      }
      parameter {
        name: "contextInfo"
        type: "*V;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "commitEditingAndReturnError:"
      return_type: "Z"
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSKeyValueBinding.h"
}
category {
  name: "NSObjectController+NSManagedController"
  method {
    function {
      name: "managedObjectContext"
      return_type: "LNSManagedObjectContext;"
    }
    class_method: false
  }
  method {
    function {
      name: "setManagedObjectContext:"
      return_type: "V"
      parameter {
        name: "managedObjectContext"
        type: "LNSManagedObjectContext;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "entityName"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setEntityName:"
      return_type: "V"
      parameter {
        name: "entityName"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fetchPredicate"
      return_type: "LNSPredicate;"
    }
    class_method: false
  }
  method {
    function {
      name: "setFetchPredicate:"
      return_type: "V"
      parameter {
        name: "fetchPredicate"
        type: "LNSPredicate;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fetchWithRequest:merge:error:"
      return_type: "Z"
      parameter {
        name: "fetchRequest"
        type: "LNSFetchRequest;"
      }
      parameter {
        name: "merge"
        type: "Z"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "fetch:"
      return_type: "V"
      parameter {
        name: "sender"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "usesLazyFetching"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setUsesLazyFetching:"
      return_type: "V"
      parameter {
        name: "usesLazyFetching"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "defaultFetchRequest"
      return_type: "LNSFetchRequest;"
    }
    class_method: false
  }
  property {
    name: "managedObjectContext"
    type: "LNSManagedObjectContext;"
  }
  property {
    name: "entityName"
    type: "LNSString;"
  }
  property {
    name: "fetchPredicate"
    type: "LNSPredicate;"
  }
  property {
    name: "usesLazyFetching"
    type: "Z"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSObjectController.h"
}
category {
  name: "NSObject+NSDictionaryControllerKeyValuePair"
  method {
    function {
      name: "setLocalizedKey:"
      return_type: "V"
      parameter {
        name: "localizedKey"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "localizedKey"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setKey:"
      return_type: "V"
      parameter {
        name: "key"
        type: "LNSString;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "key"
      return_type: "LNSString;"
    }
    class_method: false
  }
  method {
    function {
      name: "setValue:"
      return_type: "V"
      parameter {
        name: "value"
        type: "OI"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "value"
      return_type: "OI"
    }
    class_method: false
  }
  method {
    function {
      name: "isExplicitlyIncluded"
      return_type: "Z"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSDictionaryController.h"
}
category {
  name: "NSPersistentDocument+NSDeprecated"
  method {
    function {
      name: "configurePersistentStoreCoordinatorForURL:ofType:error:"
      return_type: "Z"
      parameter {
        name: "url"
        type: "LNSURL;"
      }
      parameter {
        name: "fileType"
        type: "LNSString;"
      }
      parameter {
        name: "error"
        type: "*LNSError;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPersistentDocument.h"
}
category {
  name: "NSPathControl+NSDeprecated"
  method {
    function {
      name: "clickedPathComponentCell"
      return_type: "LNSPathComponentCell;"
    }
    class_method: false
  }
  method {
    function {
      name: "pathComponentCells"
      return_type: "LNSArray;"
    }
    class_method: false
  }
  method {
    function {
      name: "setPathComponentCells:"
      return_type: "V"
      parameter {
        name: "cells"
        type: "LNSArray;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSPathControl.h"
}
category {
  name: "NSApplication+NSUserInterfaceItemSearching"
  method {
    function {
      name: "registerUserInterfaceItemSearchHandler:"
      return_type: "V"
      parameter {
        name: "handler"
        type: "X(Unexposed.id<NSUserInterfaceItemSearching>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "unregisterUserInterfaceItemSearchHandler:"
      return_type: "V"
      parameter {
        name: "handler"
        type: "X(Unexposed.id<NSUserInterfaceItemSearching>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "searchString:inUserInterfaceItemString:searchRange:foundRange:"
      return_type: "Z"
      parameter {
        name: "searchString"
        type: "LNSString;"
      }
      parameter {
        name: "stringToSearch"
        type: "LNSString;"
      }
      parameter {
        name: "searchRange"
        type: "R_NSRange;"
      }
      parameter {
        name: "foundRange"
        type: "*R_NSRange;;"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSUserInterfaceItemSearching.h"
}
category {
  name: "NSDocumentController+NSWindowRestoration"
  base_protocol: "NSWindowRestoration"
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowRestoration.h"
}
category {
  name: "NSApplication+NSWindowRestoration"
  method {
    function {
      name: "restoreWindowWithIdentifier:state:completionHandler:"
      return_type: "Z"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "state"
        type: "LNSCoder;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSWindow *, NSError *))"
      }
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowRestoration.h"
}
category {
  name: "NSWindow+NSUserInterfaceRestoration"
  method {
    function {
      name: "isRestorable"
      return_type: "Z"
    }
    class_method: false
  }
  method {
    function {
      name: "setRestorable:"
      return_type: "V"
      parameter {
        name: "restorable"
        type: "Z"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "restorationClass"
      return_type: "X(Unexposed.Class<NSWindowRestoration>)"
    }
    class_method: false
  }
  method {
    function {
      name: "setRestorationClass:"
      return_type: "V"
      parameter {
        name: "restorationClass"
        type: "X(Unexposed.Class<NSWindowRestoration>)"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "disableSnapshotRestoration"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "enableSnapshotRestoration"
      return_type: "V"
    }
    class_method: false
  }
  property {
    name: "restorable"
    type: "Z"
  }
  property {
    name: "restorationClass"
    type: "X(Unexposed.Class<NSWindowRestoration>)"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowRestoration.h"
}
category {
  name: "NSResponder+NSRestorableState"
  method {
    function {
      name: "encodeRestorableStateWithCoder:"
      return_type: "V"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "restoreStateWithCoder:"
      return_type: "V"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateRestorableState"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "restorableStateKeyPaths"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowRestoration.h"
}
category {
  name: "NSApplication+NSRestorableStateExtension"
  method {
    function {
      name: "extendStateRestoration"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "completeStateRestoration"
      return_type: "V"
    }
    class_method: false
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowRestoration.h"
}
category {
  name: "NSDocument+NSRestorableState"
  method {
    function {
      name: "restoreDocumentWindowWithIdentifier:state:completionHandler:"
      return_type: "V"
      parameter {
        name: "identifier"
        type: "LNSString;"
      }
      parameter {
        name: "state"
        type: "LNSCoder;"
      }
      parameter {
        name: "completionHandler"
        type: "X(BlockPointer.void (^)(NSWindow *, NSError *))"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "encodeRestorableStateWithCoder:"
      return_type: "V"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "restoreStateWithCoder:"
      return_type: "V"
      parameter {
        name: "coder"
        type: "LNSCoder;"
      }
    }
    class_method: false
  }
  method {
    function {
      name: "invalidateRestorableState"
      return_type: "V"
    }
    class_method: false
  }
  method {
    function {
      name: "restorableStateKeyPaths"
      return_type: "LNSArray;"
    }
    class_method: true
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSWindowRestoration.h"
}
category {
  name: "NSItemProvider+NSItemSourceInfo"
  method {
    function {
      name: "sourceFrame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "containerFrame"
      return_type: "RCGRect;"
    }
    class_method: false
  }
  method {
    function {
      name: "preferredPresentationSize"
      return_type: "RCGSize;"
    }
    class_method: false
  }
  property {
    name: "sourceFrame"
    type: "RCGRect;"
  }
  property {
    name: "containerFrame"
    type: "RCGRect;"
  }
  property {
    name: "preferredPresentationSize"
    type: "RCGSize;"
  }
  container: ""
  location_file: "/System/Library/Frameworks/AppKit.framework/Headers/NSItemProvider.h"
}
